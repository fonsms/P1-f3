
SECO-P1-F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007744  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  080078e8  080078e8  000178e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ba0  08007ba0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08007ba0  08007ba0  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ba0  08007ba0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ba0  08007ba0  00017ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ba4  08007ba4  00017ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08007ba8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f2f0  200001f8  08007d9c  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000f4e8  08007d9c  0002f4e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d600  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e97  00000000  00000000  0002d824  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca8  00000000  00000000  0002f6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba0  00000000  00000000  00030368  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dd76  00000000  00000000  00030f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b217  00000000  00000000  0004ec7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b0938  00000000  00000000  00059e95  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010a7cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e7c  00000000  00000000  0010a848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080078cc 	.word	0x080078cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	080078cc 	.word	0x080078cc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_GPIO_Init+0x7c>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <MX_GPIO_Init+0x7c>)
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	6153      	str	r3, [r2, #20]
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_GPIO_Init+0x7c>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_GPIO_Init+0x7c>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <MX_GPIO_Init+0x7c>)
 8000c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c30:	6153      	str	r3, [r2, #20]
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <MX_GPIO_Init+0x7c>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c48:	f001 fcde 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	4619      	mov	r1, r3
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c68:	f001 fb44 	bl	80022f4 <HAL_GPIO_Init>

}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40021000 	.word	0x40021000

08000c78 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c7c:	f001 f9a0 	bl	8001fc0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c80:	f000 f836 	bl	8000cf0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c84:	f7ff ffb8 	bl	8000bf8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000c88:	f001 f8fe 	bl	8001e88 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000c8c:	f000 ff40 	bl	8001b10 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000c90:	f000 ff92 	bl	8001bb8 <MX_TIM3_Init>
	MX_TIM6_Init();
 8000c94:	f000 fff6 	bl	8001c84 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <main+0x70>)
 8000c9c:	f003 f8e2 	bl	8003e64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	4811      	ldr	r0, [pc, #68]	; (8000ce8 <main+0x70>)
 8000ca4:	f003 f8de 	bl	8003e64 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000ca8:	213c      	movs	r1, #60	; 0x3c
 8000caa:	4810      	ldr	r0, [pc, #64]	; (8000cec <main+0x74>)
 8000cac:	f003 f9cc 	bl	8004048 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000cb0:	480e      	ldr	r0, [pc, #56]	; (8000cec <main+0x74>)
 8000cb2:	f003 f857 	bl	8003d64 <HAL_TIM_Base_Start_IT>
	HAL_Delay(1000);
	//funtion_trasfer(12);
	 */

	//Uncommenting these lines to use the controller and rotate the motor to the desired position.
	selec_voltage(0);
 8000cb6:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8000cd8 <main+0x60>
 8000cba:	f000 faed 	bl	8001298 <selec_voltage>
	HAL_Delay(1000);
 8000cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc2:	f001 f9e3 	bl	800208c <HAL_Delay>
	setref(0.3*M_PI,3); // set a first  ref to linear controler
 8000cc6:	2003      	movs	r0, #3
 8000cc8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8000ce0 <main+0x68>
 8000ccc:	f000 fbf0 	bl	80014b0 <setref>

	while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <main+0x58>
 8000cd2:	bf00      	nop
 8000cd4:	f3af 8000 	nop.w
	...
 8000ce0:	31eb6950 	.word	0x31eb6950
 8000ce4:	3fee28c7 	.word	0x3fee28c7
 8000ce8:	2000f3a0 	.word	0x2000f3a0
 8000cec:	2000f420 	.word	0x2000f420

08000cf0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b0a6      	sub	sp, #152	; 0x98
 8000cf4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cfa:	2228      	movs	r2, #40	; 0x28
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f004 fd54 	bl	80057ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2258      	movs	r2, #88	; 0x58
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f004 fd46 	bl	80057ac <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d20:	2302      	movs	r3, #2
 8000d22:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d24:	2301      	movs	r3, #1
 8000d26:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000d3c:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8000d40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000d44:	2301      	movs	r3, #1
 8000d46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 fc72 	bl	8002638 <HAL_RCC_OscConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8000d5a:	f000 fe1f 	bl	800199c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5e:	230f      	movs	r3, #15
 8000d60:	65fb      	str	r3, [r7, #92]	; 0x5c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d62:	2302      	movs	r3, #2
 8000d64:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6e:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d78:	2102      	movs	r1, #2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 fb72 	bl	8003464 <HAL_RCC_ClockConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000d86:	f000 fe09 	bl	800199c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <SystemClock_Config+0xc4>)
 8000d8c:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_TIM34;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
	PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	643b      	str	r3, [r7, #64]	; 0x40
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 fd97 	bl	80038d0 <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0xbc>
	{
		Error_Handler();
 8000da8:	f000 fdf8 	bl	800199c <Error_Handler>
	}
}
 8000dac:	bf00      	nop
 8000dae:	3798      	adds	r7, #152	; 0x98
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	00300002 	.word	0x00300002

08000db8 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief  Period elapsed callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000db8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]

	if (htim->Instance==TIM6) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a58      	ldr	r2, [pc, #352]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	f040 8194 	bne.w	80010f6 <HAL_TIM_PeriodElapsedCallback+0x33e>
		//Timer for controller
		if (FLAG_CONTROLLER_SENT_CONTROLER == true||FLAG_DERIVATIVE_CONTROLER == true ||FLAG_INTEGRATOR_CONTROLER == true ||FLAG_PID_CONTROLER == true) {
 8000dce:	4b57      	ldr	r3, [pc, #348]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10c      	bne.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0x38>
 8000dd6:	4b56      	ldr	r3, [pc, #344]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d108      	bne.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0x38>
 8000dde:	4b55      	ldr	r3, [pc, #340]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d104      	bne.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0x38>
 8000de6:	4b54      	ldr	r3, [pc, #336]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 8123 	beq.w	8001036 <HAL_TIM_PeriodElapsedCallback+0x27e>
			i += 1;
 8000df0:	4b52      	ldr	r3, [pc, #328]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3301      	adds	r3, #1
 8000df6:	4a51      	ldr	r2, [pc, #324]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000df8:	6013      	str	r3, [r2, #0]
			//save the current encoder counter value
			current_value =__HAL_TIM_GET_COUNTER(&htim2);
 8000dfa:	4b51      	ldr	r3, [pc, #324]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fb87 	bl	8000514 <__aeabi_ui2d>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	494e      	ldr	r1, [pc, #312]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e0c:	e9c1 2300 	strd	r2, r3, [r1]
			//If it is counting down we have to subtract the maximum value of the counter to obtain the negative turn
			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8000e10:	4b4b      	ldr	r3, [pc, #300]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0310 	and.w	r3, r3, #16
 8000e1a:	2b10      	cmp	r3, #16
 8000e1c:	d151      	bne.n	8000ec2 <HAL_TIM_PeriodElapsedCallback+0x10a>

				if(FLAG_COUNT_OVERFLOW == true && current_value > last_value ){
 8000e1e:	4b4a      	ldr	r3, [pc, #296]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d023      	beq.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0xb6>
 8000e26:	4b47      	ldr	r3, [pc, #284]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e2c:	4b47      	ldr	r3, [pc, #284]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e32:	f7ff fe79 	bl	8000b28 <__aeabi_dcmpgt>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d018      	beq.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0xb6>
					diff = -((max_enconder_count-current_value) + last_value);
 8000e3c:	4b41      	ldr	r3, [pc, #260]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e42:	a137      	add	r1, pc, #220	; (adr r1, 8000f20 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000e44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e48:	f7ff fa26 	bl	8000298 <__aeabi_dsub>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	4610      	mov	r0, r2
 8000e52:	4619      	mov	r1, r3
 8000e54:	4b3d      	ldr	r3, [pc, #244]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5a:	f7ff fa1f 	bl	800029c <__adddf3>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4690      	mov	r8, r2
 8000e64:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8000e68:	4b39      	ldr	r3, [pc, #228]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000e6a:	e9c3 8900 	strd	r8, r9, [r3]
				}
				if(current_value <= last_value || current_value <= last_value){
 8000e6e:	4b35      	ldr	r3, [pc, #212]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e74:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7a:	f7ff fe41 	bl	8000b00 <__aeabi_dcmple>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10a      	bne.n	8000e9a <HAL_TIM_PeriodElapsedCallback+0xe2>
 8000e84:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e8a:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e90:	f7ff fe36 	bl	8000b00 <__aeabi_dcmple>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d06e      	beq.n	8000f78 <HAL_TIM_PeriodElapsedCallback+0x1c0>
					diff = -(last_value - current_value);
 8000e9a:	4b2c      	ldr	r3, [pc, #176]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000e9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ea0:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea6:	f7ff f9f7 	bl	8000298 <__aeabi_dsub>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4614      	mov	r4, r2
 8000eb0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000eb4:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000eb6:	e9c3 4500 	strd	r4, r5, [r3]
					FLAG_COUNT_OVERFLOW = false;
 8000eba:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
 8000ec0:	e05a      	b.n	8000f78 <HAL_TIM_PeriodElapsedCallback+0x1c0>
				}
			}
			else {
				if (FLAG_COUNT_OVERFLOW == true && current_value < last_value) {
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d044      	beq.n	8000f54 <HAL_TIM_PeriodElapsedCallback+0x19c>
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ecc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000ed2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4623      	mov	r3, r4
 8000eda:	f7ff fe07 	bl	8000aec <__aeabi_dcmplt>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d037      	beq.n	8000f54 <HAL_TIM_PeriodElapsedCallback+0x19c>
					diff = (max_enconder_count - last_value) + current_value;
 8000ee4:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000ee6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000eea:	461a      	mov	r2, r3
 8000eec:	4623      	mov	r3, r4
 8000eee:	a10c      	add	r1, pc, #48	; (adr r1, 8000f20 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ef4:	f7ff f9d0 	bl	8000298 <__aeabi_dsub>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	460c      	mov	r4, r1
 8000efc:	4618      	mov	r0, r3
 8000efe:	4621      	mov	r1, r4
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f06:	461a      	mov	r2, r3
 8000f08:	4623      	mov	r3, r4
 8000f0a:	f7ff f9c7 	bl	800029c <__adddf3>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	460c      	mov	r4, r1
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f14:	e9c2 3400 	strd	r3, r4, [r2]
 8000f18:	e02e      	b.n	8000f78 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8000f1a:	bf00      	nop
 8000f1c:	f3af 8000 	nop.w
 8000f20:	00000000 	.word	0x00000000
 8000f24:	40efffe0 	.word	0x40efffe0
 8000f28:	40001000 	.word	0x40001000
 8000f2c:	20000272 	.word	0x20000272
 8000f30:	20000273 	.word	0x20000273
 8000f34:	20000274 	.word	0x20000274
 8000f38:	20000275 	.word	0x20000275
 8000f3c:	20000228 	.word	0x20000228
 8000f40:	2000f420 	.word	0x2000f420
 8000f44:	20000238 	.word	0x20000238
 8000f48:	20000276 	.word	0x20000276
 8000f4c:	20000248 	.word	0x20000248
 8000f50:	20000240 	.word	0x20000240
				} else {
					diff = current_value - last_value;
 8000f54:	4b70      	ldr	r3, [pc, #448]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000f56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f5a:	4b70      	ldr	r3, [pc, #448]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000f5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4623      	mov	r3, r4
 8000f64:	f7ff f998 	bl	8000298 <__aeabi_dsub>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	460c      	mov	r4, r1
 8000f6c:	4a6c      	ldr	r2, [pc, #432]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000f6e:	e9c2 3400 	strd	r3, r4, [r2]
					FLAG_COUNT_OVERFLOW = false;
 8000f72:	4b6c      	ldr	r3, [pc, #432]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
				}
			}

			last_value = current_value;
 8000f78:	4b67      	ldr	r3, [pc, #412]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000f7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f7e:	4a67      	ldr	r2, [pc, #412]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000f80:	e9c2 3400 	strd	r3, r4, [r2]
			//the current position of the motor is the previous position plus what has been increased
			pos_i = pos_i + diff;
 8000f84:	4b68      	ldr	r3, [pc, #416]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000f86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f8a:	4b65      	ldr	r3, [pc, #404]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000f8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4623      	mov	r3, r4
 8000f94:	f7ff f982 	bl	800029c <__adddf3>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	460c      	mov	r4, r1
 8000f9c:	4a62      	ldr	r2, [pc, #392]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000f9e:	e9c2 3400 	strd	r3, r4, [r2]
			//save the pos_i in a buffer to send later
			if(i<num_muestras_controlador){
 8000fa2:	4b62      	ldr	r3, [pc, #392]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000faa:	d209      	bcs.n	8000fc0 <HAL_TIM_PeriodElapsedCallback+0x208>
				pos_buffer[i]= pos_i;
 8000fac:	4b5f      	ldr	r3, [pc, #380]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b5d      	ldr	r3, [pc, #372]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000fb2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000fb6:	495e      	ldr	r1, [pc, #376]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8000fb8:	00d2      	lsls	r2, r2, #3
 8000fba:	440a      	add	r2, r1
 8000fbc:	e9c2 3400 	strd	r3, r4, [r2]
			}

			if(i == num_muestras_controlador){
 8000fc0:	4b5a      	ldr	r3, [pc, #360]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000fc8:	d101      	bne.n	8000fce <HAL_TIM_PeriodElapsedCallback+0x216>
				enviarcuenta();
 8000fca:	f000 f9b3 	bl	8001334 <enviarcuenta>
			}

			if (FLAG_CONTROLLER_SENT_CONTROLER == true) {
 8000fce:	4b59      	ldr	r3, [pc, #356]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d008      	beq.n	8000fe8 <HAL_TIM_PeriodElapsedCallback+0x230>
				controlador_proporcional(pos_i);
 8000fd6:	4b54      	ldr	r3, [pc, #336]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000fd8:	ed93 7b00 	vldr	d7, [r3]
 8000fdc:	eeb0 0a47 	vmov.f32	s0, s14
 8000fe0:	eef0 0a67 	vmov.f32	s1, s15
 8000fe4:	f000 fab0 	bl	8001548 <controlador_proporcional>
			}
			if (FLAG_DERIVATIVE_CONTROLER == true) {
 8000fe8:	4b53      	ldr	r3, [pc, #332]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d008      	beq.n	8001002 <HAL_TIM_PeriodElapsedCallback+0x24a>
				controlador_derivativo(pos_i);
 8000ff0:	4b4d      	ldr	r3, [pc, #308]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000ff2:	ed93 7b00 	vldr	d7, [r3]
 8000ff6:	eeb0 0a47 	vmov.f32	s0, s14
 8000ffa:	eef0 0a67 	vmov.f32	s1, s15
 8000ffe:	f000 faf7 	bl	80015f0 <controlador_derivativo>

			}
			if (FLAG_INTEGRATOR_CONTROLER == true) {
 8001002:	4b4e      	ldr	r3, [pc, #312]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d008      	beq.n	800101c <HAL_TIM_PeriodElapsedCallback+0x264>
				controlador_integrador(pos_i);
 800100a:	4b47      	ldr	r3, [pc, #284]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800100c:	ed93 7b00 	vldr	d7, [r3]
 8001010:	eeb0 0a47 	vmov.f32	s0, s14
 8001014:	eef0 0a67 	vmov.f32	s1, s15
 8001018:	f000 fb76 	bl	8001708 <controlador_integrador>
			}
			if (FLAG_PID_CONTROLER == true) {
 800101c:	4b48      	ldr	r3, [pc, #288]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d008      	beq.n	8001036 <HAL_TIM_PeriodElapsedCallback+0x27e>
				controlador_pid(pos_i);
 8001024:	4b40      	ldr	r3, [pc, #256]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001026:	ed93 7b00 	vldr	d7, [r3]
 800102a:	eeb0 0a47 	vmov.f32	s0, s14
 800102e:	eef0 0a67 	vmov.f32	s1, s15
 8001032:	f000 fbf5 	bl	8001820 <controlador_pid>
			}


		}
		//timer for reducer
		if (FLAG_REDUCER == true) {
 8001036:	4b43      	ldr	r3, [pc, #268]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d027      	beq.n	800108e <HAL_TIM_PeriodElapsedCallback+0x2d6>
			i += 1;
 800103e:	4b3b      	ldr	r3, [pc, #236]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a39      	ldr	r2, [pc, #228]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8001046:	6013      	str	r3, [r2, #0]
		//wait 4 seconds to turn the engine over and send the account value
			if(i == 4000){
 8001048:	4b38      	ldr	r3, [pc, #224]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001050:	d11d      	bne.n	800108e <HAL_TIM_PeriodElapsedCallback+0x2d6>
				cuenta = __HAL_TIM_GET_COUNTER(&htim2);
 8001052:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fa5b 	bl	8000514 <__aeabi_ui2d>
 800105e:	4603      	mov	r3, r0
 8001060:	460c      	mov	r4, r1
 8001062:	4a3a      	ldr	r2, [pc, #232]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001064:	e9c2 3400 	strd	r3, r4, [r2]
				cuenta2 = TIM2->CNT;
 8001068:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fa50 	bl	8000514 <__aeabi_ui2d>
 8001074:	4603      	mov	r3, r0
 8001076:	460c      	mov	r4, r1
 8001078:	4a35      	ldr	r2, [pc, #212]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800107a:	e9c2 3400 	strd	r3, r4, [r2]
				HAL_TIM_Base_Stop_IT(&htim6);
 800107e:	4835      	ldr	r0, [pc, #212]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001080:	f002 fe9a 	bl	8003db8 <HAL_TIM_Base_Stop_IT>
				enviarcuenta();
 8001084:	f000 f956 	bl	8001334 <enviarcuenta>
				FLAG_REDUCER = false;
 8001088:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
			}
		}
		//timer for function transfer
		if (FLAG_TRANSFER == true) {
 800108e:	4b32      	ldr	r3, [pc, #200]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d037      	beq.n	8001106 <HAL_TIM_PeriodElapsedCallback+0x34e>
			medidas[i] = __HAL_TIM_GET_COUNTER(&htim2);
 8001096:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800109e:	681d      	ldr	r5, [r3, #0]
 80010a0:	4610      	mov	r0, r2
 80010a2:	f7ff fa37 	bl	8000514 <__aeabi_ui2d>
 80010a6:	4603      	mov	r3, r0
 80010a8:	460c      	mov	r4, r1
 80010aa:	492c      	ldr	r1, [pc, #176]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80010ac:	00ea      	lsls	r2, r5, #3
 80010ae:	440a      	add	r2, r1
 80010b0:	e9c2 3400 	strd	r3, r4, [r2]
			i += 1;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x374>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3301      	adds	r3, #1
 80010ba:	4a1c      	ldr	r2, [pc, #112]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x374>)
 80010bc:	6013      	str	r3, [r2, #0]
			if(i == 600){
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x374>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80010c6:	d104      	bne.n	80010d2 <HAL_TIM_PeriodElapsedCallback+0x31a>
				selec_voltage(0);
 80010c8:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001110 <HAL_TIM_PeriodElapsedCallback+0x358>
 80010cc:	f000 f8e4 	bl	8001298 <selec_voltage>


	}
	else {
	}
}
 80010d0:	e019      	b.n	8001106 <HAL_TIM_PeriodElapsedCallback+0x34e>
			else if(i == 1200){
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x374>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80010da:	d114      	bne.n	8001106 <HAL_TIM_PeriodElapsedCallback+0x34e>
				selec_voltage(0);
 80010dc:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8001110 <HAL_TIM_PeriodElapsedCallback+0x358>
 80010e0:	f000 f8da 	bl	8001298 <selec_voltage>
				HAL_TIM_Base_Stop_IT(&htim6);
 80010e4:	481b      	ldr	r0, [pc, #108]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80010e6:	f002 fe67 	bl	8003db8 <HAL_TIM_Base_Stop_IT>
				enviarcuenta();
 80010ea:	f000 f923 	bl	8001334 <enviarcuenta>
				FLAG_TRANSFER = false;
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
}
 80010f4:	e007      	b.n	8001106 <HAL_TIM_PeriodElapsedCallback+0x34e>
	else if(htim->Instance==TIM2){
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010fe:	d102      	bne.n	8001106 <HAL_TIM_PeriodElapsedCallback+0x34e>
		FLAG_COUNT_OVERFLOW = true;
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...
 8001118:	20000238 	.word	0x20000238
 800111c:	20000248 	.word	0x20000248
 8001120:	20000240 	.word	0x20000240
 8001124:	20000276 	.word	0x20000276
 8001128:	20000250 	.word	0x20000250
 800112c:	20000228 	.word	0x20000228
 8001130:	20007698 	.word	0x20007698
 8001134:	20000272 	.word	0x20000272
 8001138:	20000273 	.word	0x20000273
 800113c:	20000274 	.word	0x20000274
 8001140:	20000275 	.word	0x20000275
 8001144:	20000270 	.word	0x20000270
 8001148:	2000f420 	.word	0x2000f420
 800114c:	20000220 	.word	0x20000220
 8001150:	20000218 	.word	0x20000218
 8001154:	2000f3e0 	.word	0x2000f3e0
 8001158:	20000271 	.word	0x20000271
 800115c:	200002f0 	.word	0x200002f0

08001160 <move>:
 * @brief  Start PWM pins with specific duties cycles
 * @param  v1: Duty cycle of first PWM .
 * @param  v2:  Duty cycle of second PWM.
 * @retval None
 */
void move(double_t v1,double_t v2){
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	ed87 0b02 	vstr	d0, [r7, #8]
 800116a:	ed87 1b00 	vstr	d1, [r7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001178:	f001 fa46 	bl	8002608 <HAL_GPIO_WritePin>
	v1 = round(v1);
 800117c:	ed97 0b02 	vldr	d0, [r7, #8]
 8001180:	f006 fb5a 	bl	8007838 <round>
 8001184:	ed87 0b02 	vstr	d0, [r7, #8]
	v2 = round(v2);
 8001188:	ed97 0b00 	vldr	d0, [r7]
 800118c:	f006 fb54 	bl	8007838 <round>
 8001190:	ed87 0b00 	vstr	d0, [r7]
//Protection of H bridge
	if(v1>999){
 8001194:	a33d      	add	r3, pc, #244	; (adr r3, 800128c <move+0x12c>)
 8001196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800119e:	f7ff fcc3 	bl	8000b28 <__aeabi_dcmpgt>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <move+0x54>
		v1 = 999;
 80011a8:	a438      	add	r4, pc, #224	; (adr r4, 800128c <move+0x12c>)
 80011aa:	e9d4 3400 	ldrd	r3, r4, [r4]
 80011ae:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80011b2:	e010      	b.n	80011d6 <move+0x76>
	}
	else if(v1<0){
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011c0:	f7ff fc94 	bl	8000aec <__aeabi_dcmplt>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d005      	beq.n	80011d6 <move+0x76>
		v1 = 0;
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	f04f 0400 	mov.w	r4, #0
 80011d2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	}

	if(v2<0){
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011e2:	f7ff fc83 	bl	8000aec <__aeabi_dcmplt>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d006      	beq.n	80011fa <move+0x9a>
		v2 = 0;
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	f04f 0400 	mov.w	r4, #0
 80011f4:	e9c7 3400 	strd	r3, r4, [r7]
 80011f8:	e00e      	b.n	8001218 <move+0xb8>
	}
	else if(v2>999){
 80011fa:	a324      	add	r3, pc, #144	; (adr r3, 800128c <move+0x12c>)
 80011fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001200:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001204:	f7ff fc90 	bl	8000b28 <__aeabi_dcmpgt>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <move+0xb8>
		v2 = 999;
 800120e:	a41f      	add	r4, pc, #124	; (adr r4, 800128c <move+0x12c>)
 8001210:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001214:	e9c7 3400 	strd	r3, r4, [r7]
	}

	if(v1 != 0 && v2 !=0){
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001224:	f7ff fc58 	bl	8000ad8 <__aeabi_dcmpeq>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d116      	bne.n	800125c <move+0xfc>
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	e9d7 0100 	ldrd	r0, r1, [r7]
 800123a:	f7ff fc4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d10b      	bne.n	800125c <move+0xfc>
		v1 = 0;
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	f04f 0400 	mov.w	r4, #0
 800124c:	e9c7 3402 	strd	r3, r4, [r7, #8]
		v2 = 0;
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	f04f 0400 	mov.w	r4, #0
 8001258:	e9c7 3400 	strd	r3, r4, [r7]
	}
	//Set PWM pin value
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,v1);
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <move+0x128>)
 800125e:	681c      	ldr	r4, [r3, #0]
 8001260:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001264:	f7ff fca8 	bl	8000bb8 <__aeabi_d2uiz>
 8001268:	4603      	mov	r3, r0
 800126a:	6363      	str	r3, [r4, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,v2);
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <move+0x128>)
 800126e:	681c      	ldr	r4, [r3, #0]
 8001270:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001274:	f7ff fca0 	bl	8000bb8 <__aeabi_d2uiz>
 8001278:	4603      	mov	r3, r0
 800127a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	bd90      	pop	{r4, r7, pc}
 8001284:	f3af 8000 	nop.w
 8001288:	2000f3a0 	.word	0x2000f3a0
 800128c:	00000000 	.word	0x00000000
 8001290:	408f3800 	.word	0x408f3800
 8001294:	00000000 	.word	0x00000000

08001298 <selec_voltage>:
/**
 * @brief  Estimate the duty cycle of the PWM, according to the mean voltage selected and call move function with this values.
 * @param  V: the average voltage of the PWM.
 * @retval None
 */
void selec_voltage (double_t V){
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	ed87 0b00 	vstr	d0, [r7]
	double tension_pwm;
	tension_pwm = (V/12)*999;
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	4b22      	ldr	r3, [pc, #136]	; (8001330 <selec_voltage+0x98>)
 80012a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012ac:	f7ff fad6 	bl	800085c <__aeabi_ddiv>
 80012b0:	4603      	mov	r3, r0
 80012b2:	460c      	mov	r4, r1
 80012b4:	4618      	mov	r0, r3
 80012b6:	4621      	mov	r1, r4
 80012b8:	a319      	add	r3, pc, #100	; (adr r3, 8001320 <selec_voltage+0x88>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f7ff f9a3 	bl	8000608 <__aeabi_dmul>
 80012c2:	4603      	mov	r3, r0
 80012c4:	460c      	mov	r4, r1
 80012c6:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if (V>0) {
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012d6:	f7ff fc27 	bl	8000b28 <__aeabi_dcmpgt>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <selec_voltage+0x56>
		move(tension_pwm,0);
 80012e0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8001328 <selec_voltage+0x90>
 80012e4:	ed97 0b02 	vldr	d0, [r7, #8]
 80012e8:	f7ff ff3a 	bl	8001160 <move>
	}else {
		tension_pwm = abs(tension_pwm);
		move(0,tension_pwm);
	}

}
 80012ec:	e014      	b.n	8001318 <selec_voltage+0x80>
		tension_pwm = abs(tension_pwm);
 80012ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012f2:	f7ff fc39 	bl	8000b68 <__aeabi_d2iz>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bfb8      	it	lt
 80012fc:	425b      	neglt	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f918 	bl	8000534 <__aeabi_i2d>
 8001304:	4603      	mov	r3, r0
 8001306:	460c      	mov	r4, r1
 8001308:	e9c7 3402 	strd	r3, r4, [r7, #8]
		move(0,tension_pwm);
 800130c:	ed97 1b02 	vldr	d1, [r7, #8]
 8001310:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8001328 <selec_voltage+0x90>
 8001314:	f7ff ff24 	bl	8001160 <move>
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}
 8001320:	00000000 	.word	0x00000000
 8001324:	408f3800 	.word	0x408f3800
	...
 8001330:	40280000 	.word	0x40280000

08001334 <enviarcuenta>:
/**
 * @brief  Send measures via ST link USB for UART
 * @retval None
 */
void enviarcuenta(){
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b087      	sub	sp, #28
 8001338:	af02      	add	r7, sp, #8
	if (FLAG_TRANSFER == true) {
 800133a:	4b50      	ldr	r3, [pc, #320]	; (800147c <enviarcuenta+0x148>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d027      	beq.n	8001392 <enviarcuenta+0x5e>
		for(int i = 0; i<num_muestras; i++){
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	e010      	b.n	800136a <enviarcuenta+0x36>
			sprintf(str_name, "%s%d\t%f\n",str_name , i,medidas[i]);
 8001348:	4a4d      	ldr	r2, [pc, #308]	; (8001480 <enviarcuenta+0x14c>)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4413      	add	r3, r2
 8001350:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001354:	e9cd 3400 	strd	r3, r4, [sp]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4a4a      	ldr	r2, [pc, #296]	; (8001484 <enviarcuenta+0x150>)
 800135c:	494a      	ldr	r1, [pc, #296]	; (8001488 <enviarcuenta+0x154>)
 800135e:	4849      	ldr	r0, [pc, #292]	; (8001484 <enviarcuenta+0x150>)
 8001360:	f004 fe88 	bl	8006074 <siprintf>
		for(int i = 0; i<num_muestras; i++){
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3301      	adds	r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001370:	dbea      	blt.n	8001348 <enviarcuenta+0x14>
		}
		sprintf(str_name, "%s#",str_name);
 8001372:	4a44      	ldr	r2, [pc, #272]	; (8001484 <enviarcuenta+0x150>)
 8001374:	4945      	ldr	r1, [pc, #276]	; (800148c <enviarcuenta+0x158>)
 8001376:	4843      	ldr	r0, [pc, #268]	; (8001484 <enviarcuenta+0x150>)
 8001378:	f004 fe7c 	bl	8006074 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) str_name, strlen(str_name), HAL_MAX_DELAY);
 800137c:	4841      	ldr	r0, [pc, #260]	; (8001484 <enviarcuenta+0x150>)
 800137e:	f7fe ff2f 	bl	80001e0 <strlen>
 8001382:	4603      	mov	r3, r0
 8001384:	b29a      	uxth	r2, r3
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	493e      	ldr	r1, [pc, #248]	; (8001484 <enviarcuenta+0x150>)
 800138c:	4840      	ldr	r0, [pc, #256]	; (8001490 <enviarcuenta+0x15c>)
 800138e:	f003 fdd3 	bl	8004f38 <HAL_UART_Transmit>
	}
	if (FLAG_REDUCER == true) {
 8001392:	4b40      	ldr	r3, [pc, #256]	; (8001494 <enviarcuenta+0x160>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d018      	beq.n	80013cc <enviarcuenta+0x98>
		sprintf(str_name_reducer, "Cuenta = %f\t %f", cuenta,cuenta2);
 800139a:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <enviarcuenta+0x164>)
 800139c:	e9d3 1200 	ldrd	r1, r2, [r3]
 80013a0:	4b3e      	ldr	r3, [pc, #248]	; (800149c <enviarcuenta+0x168>)
 80013a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013a6:	e9cd 3400 	strd	r3, r4, [sp]
 80013aa:	4613      	mov	r3, r2
 80013ac:	460a      	mov	r2, r1
 80013ae:	493c      	ldr	r1, [pc, #240]	; (80014a0 <enviarcuenta+0x16c>)
 80013b0:	483c      	ldr	r0, [pc, #240]	; (80014a4 <enviarcuenta+0x170>)
 80013b2:	f004 fe5f 	bl	8006074 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) str_name_reducer, strlen(str_name_reducer), HAL_MAX_DELAY);
 80013b6:	483b      	ldr	r0, [pc, #236]	; (80014a4 <enviarcuenta+0x170>)
 80013b8:	f7fe ff12 	bl	80001e0 <strlen>
 80013bc:	4603      	mov	r3, r0
 80013be:	b29a      	uxth	r2, r3
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	4937      	ldr	r1, [pc, #220]	; (80014a4 <enviarcuenta+0x170>)
 80013c6:	4832      	ldr	r0, [pc, #200]	; (8001490 <enviarcuenta+0x15c>)
 80013c8:	f003 fdb6 	bl	8004f38 <HAL_UART_Transmit>
	}
	if (FLAG_CONTROLLER_SENT == true) {
 80013cc:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <enviarcuenta+0x174>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d04e      	beq.n	8001472 <enviarcuenta+0x13e>
		for(int i = 0; i<(int)(num_muestras_controlador/2); i++){
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	e010      	b.n	80013fc <enviarcuenta+0xc8>
			sprintf(str_name, "%s%d\t%f\n",str_name , i,pos_buffer[i]);
 80013da:	4a34      	ldr	r2, [pc, #208]	; (80014ac <enviarcuenta+0x178>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4413      	add	r3, r2
 80013e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013e6:	e9cd 3400 	strd	r3, r4, [sp]
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	4a25      	ldr	r2, [pc, #148]	; (8001484 <enviarcuenta+0x150>)
 80013ee:	4926      	ldr	r1, [pc, #152]	; (8001488 <enviarcuenta+0x154>)
 80013f0:	4824      	ldr	r0, [pc, #144]	; (8001484 <enviarcuenta+0x150>)
 80013f2:	f004 fe3f 	bl	8006074 <siprintf>
		for(int i = 0; i<(int)(num_muestras_controlador/2); i++){
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	3301      	adds	r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001402:	dbea      	blt.n	80013da <enviarcuenta+0xa6>
		}
		HAL_UART_Transmit(&huart2,(uint8_t*) str_name, strlen(str_name), HAL_MAX_DELAY);
 8001404:	481f      	ldr	r0, [pc, #124]	; (8001484 <enviarcuenta+0x150>)
 8001406:	f7fe feeb 	bl	80001e0 <strlen>
 800140a:	4603      	mov	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	491c      	ldr	r1, [pc, #112]	; (8001484 <enviarcuenta+0x150>)
 8001414:	481e      	ldr	r0, [pc, #120]	; (8001490 <enviarcuenta+0x15c>)
 8001416:	f003 fd8f 	bl	8004f38 <HAL_UART_Transmit>
		strcpy(str_name,"");
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <enviarcuenta+0x150>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
		for(int i = (num_muestras_controlador/2); i<(int)(num_muestras_controlador); i++){
 8001420:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	e010      	b.n	800144a <enviarcuenta+0x116>
			sprintf(str_name, "%s%d\t%f\n",str_name , i,pos_buffer[i]);
 8001428:	4a20      	ldr	r2, [pc, #128]	; (80014ac <enviarcuenta+0x178>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4413      	add	r3, r2
 8001430:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001434:	e9cd 3400 	strd	r3, r4, [sp]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <enviarcuenta+0x150>)
 800143c:	4912      	ldr	r1, [pc, #72]	; (8001488 <enviarcuenta+0x154>)
 800143e:	4811      	ldr	r0, [pc, #68]	; (8001484 <enviarcuenta+0x150>)
 8001440:	f004 fe18 	bl	8006074 <siprintf>
		for(int i = (num_muestras_controlador/2); i<(int)(num_muestras_controlador); i++){
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3301      	adds	r3, #1
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001450:	dbea      	blt.n	8001428 <enviarcuenta+0xf4>
		}
		sprintf(str_name, "%s#",str_name);
 8001452:	4a0c      	ldr	r2, [pc, #48]	; (8001484 <enviarcuenta+0x150>)
 8001454:	490d      	ldr	r1, [pc, #52]	; (800148c <enviarcuenta+0x158>)
 8001456:	480b      	ldr	r0, [pc, #44]	; (8001484 <enviarcuenta+0x150>)
 8001458:	f004 fe0c 	bl	8006074 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) str_name, strlen(str_name), HAL_MAX_DELAY);
 800145c:	4809      	ldr	r0, [pc, #36]	; (8001484 <enviarcuenta+0x150>)
 800145e:	f7fe febf 	bl	80001e0 <strlen>
 8001462:	4603      	mov	r3, r0
 8001464:	b29a      	uxth	r2, r3
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
 800146a:	4906      	ldr	r1, [pc, #24]	; (8001484 <enviarcuenta+0x150>)
 800146c:	4808      	ldr	r0, [pc, #32]	; (8001490 <enviarcuenta+0x15c>)
 800146e:	f003 fd63 	bl	8004f38 <HAL_UART_Transmit>
	}

}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	bd90      	pop	{r4, r7, pc}
 800147a:	bf00      	nop
 800147c:	20000271 	.word	0x20000271
 8001480:	200002f0 	.word	0x200002f0
 8001484:	20002870 	.word	0x20002870
 8001488:	080078e8 	.word	0x080078e8
 800148c:	080078f4 	.word	0x080078f4
 8001490:	2000f460 	.word	0x2000f460
 8001494:	20000270 	.word	0x20000270
 8001498:	20000220 	.word	0x20000220
 800149c:	20000218 	.word	0x20000218
 80014a0:	080078f8 	.word	0x080078f8
 80014a4:	20000288 	.word	0x20000288
 80014a8:	20000277 	.word	0x20000277
 80014ac:	20007698 	.word	0x20007698

080014b0 <setref>:
/**
 * @brief Set reference for controller
 * @param ref: reference
 * @retval None
 */
void setref(double ref, enum Controlador controlador){
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	ed87 0b02 	vstr	d0, [r7, #8]
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
	referencia = ref;
 80014be:	4a1a      	ldr	r2, [pc, #104]	; (8001528 <setref+0x78>)
 80014c0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80014c4:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <setref+0x7c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
	if (controlador == Proportional) {
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d105      	bne.n	80014e2 <setref+0x32>
		FLAG_CONTROLLER_SENT_CONTROLER = true;
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <setref+0x80>)
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
		FLAG_CONTROLLER_SENT = true;
 80014dc:	4b15      	ldr	r3, [pc, #84]	; (8001534 <setref+0x84>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
	}
	if (controlador == Derivativo) {
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d105      	bne.n	80014f4 <setref+0x44>
		FLAG_DERIVATIVE_CONTROLER = true;
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <setref+0x88>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
		FLAG_CONTROLLER_SENT = true;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <setref+0x84>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
	}
	if (controlador == Integrador) {
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d105      	bne.n	8001506 <setref+0x56>
		FLAG_INTEGRATOR_CONTROLER = true;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <setref+0x8c>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]
		FLAG_CONTROLLER_SENT = true;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <setref+0x84>)
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
	}
	if (controlador == PID) {
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	2b03      	cmp	r3, #3
 800150a:	d105      	bne.n	8001518 <setref+0x68>
		FLAG_PID_CONTROLER = true;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <setref+0x90>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
		FLAG_CONTROLLER_SENT = true;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <setref+0x84>)
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
	}

	HAL_TIM_Base_Start_IT(&htim6);
 8001518:	480a      	ldr	r0, [pc, #40]	; (8001544 <setref+0x94>)
 800151a:	f002 fc23 	bl	8003d64 <HAL_TIM_Base_Start_IT>
}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	bd90      	pop	{r4, r7, pc}
 8001526:	bf00      	nop
 8001528:	20000230 	.word	0x20000230
 800152c:	2000f420 	.word	0x2000f420
 8001530:	20000272 	.word	0x20000272
 8001534:	20000277 	.word	0x20000277
 8001538:	20000273 	.word	0x20000273
 800153c:	20000274 	.word	0x20000274
 8001540:	20000275 	.word	0x20000275
 8001544:	2000f3e0 	.word	0x2000f3e0

08001548 <controlador_proporcional>:

/**
 * @brief	Proportional Controller
 * @retval None
 */
void controlador_proporcional(double pos_i){
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	ed87 0b00 	vstr	d0, [r7]

	e = referencia - (pos_i * 2 * M_PI / pulse_per_revolution);
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <controlador_proporcional+0x98>)
 8001554:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001558:	e9d7 0100 	ldrd	r0, r1, [r7]
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	f7fe fe9c 	bl	800029c <__adddf3>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	a318      	add	r3, pc, #96	; (adr r3, 80015d0 <controlador_proporcional+0x88>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7ff f849 	bl	8000608 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	a316      	add	r3, pc, #88	; (adr r3, 80015d8 <controlador_proporcional+0x90>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f96a 	bl	800085c <__aeabi_ddiv>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4620      	mov	r0, r4
 800158e:	4629      	mov	r1, r5
 8001590:	f7fe fe82 	bl	8000298 <__aeabi_dsub>
 8001594:	4603      	mov	r3, r0
 8001596:	460c      	mov	r4, r1
 8001598:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <controlador_proporcional+0x9c>)
 800159a:	e9c2 3400 	strd	r3, r4, [r2]
	selec_voltage((double)kp * e);
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <controlador_proporcional+0xa0>)
 80015a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <controlador_proporcional+0x9c>)
 80015a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4623      	mov	r3, r4
 80015ae:	f7ff f82b 	bl	8000608 <__aeabi_dmul>
 80015b2:	4603      	mov	r3, r0
 80015b4:	460c      	mov	r4, r1
 80015b6:	ec44 3b17 	vmov	d7, r3, r4
 80015ba:	eeb0 0a47 	vmov.f32	s0, s14
 80015be:	eef0 0a67 	vmov.f32	s1, s15
 80015c2:	f7ff fe69 	bl	8001298 <selec_voltage>

}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bdb0      	pop	{r4, r5, r7, pc}
 80015ce:	bf00      	nop
 80015d0:	54442d18 	.word	0x54442d18
 80015d4:	400921fb 	.word	0x400921fb
 80015d8:	00000000 	.word	0x00000000
 80015dc:	40aba000 	.word	0x40aba000
 80015e0:	20000230 	.word	0x20000230
 80015e4:	20000258 	.word	0x20000258
 80015e8:	20000000 	.word	0x20000000
 80015ec:	00000000 	.word	0x00000000

080015f0 <controlador_derivativo>:
/**
 * @brief	Derivative Controller
 * @retval None
 */
void controlador_derivativo(double pos_i){
 80015f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	ed87 0b00 	vstr	d0, [r7]

	e_last = e;
 80015fa:	4b3d      	ldr	r3, [pc, #244]	; (80016f0 <controlador_derivativo+0x100>)
 80015fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001600:	4a3c      	ldr	r2, [pc, #240]	; (80016f4 <controlador_derivativo+0x104>)
 8001602:	e9c2 3400 	strd	r3, r4, [r2]
	e = referencia - (pos_i * 2 * M_PI / pulse_per_revolution);
 8001606:	4b3c      	ldr	r3, [pc, #240]	; (80016f8 <controlador_derivativo+0x108>)
 8001608:	e9d3 4500 	ldrd	r4, r5, [r3]
 800160c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	f7fe fe42 	bl	800029c <__adddf3>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	a32d      	add	r3, pc, #180	; (adr r3, 80016d8 <controlador_derivativo+0xe8>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7fe ffef 	bl	8000608 <__aeabi_dmul>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	a32b      	add	r3, pc, #172	; (adr r3, 80016e0 <controlador_derivativo+0xf0>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7ff f910 	bl	800085c <__aeabi_ddiv>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4620      	mov	r0, r4
 8001642:	4629      	mov	r1, r5
 8001644:	f7fe fe28 	bl	8000298 <__aeabi_dsub>
 8001648:	4603      	mov	r3, r0
 800164a:	460c      	mov	r4, r1
 800164c:	4a28      	ldr	r2, [pc, #160]	; (80016f0 <controlador_derivativo+0x100>)
 800164e:	e9c2 3400 	strd	r3, r4, [r2]
	selec_voltage((double)(kp * e +kd * (e-e_last)/k_tiempo));
 8001652:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <controlador_derivativo+0x10c>)
 8001654:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <controlador_derivativo+0x100>)
 800165a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800165e:	461a      	mov	r2, r3
 8001660:	4623      	mov	r3, r4
 8001662:	f7fe ffd1 	bl	8000608 <__aeabi_dmul>
 8001666:	4603      	mov	r3, r0
 8001668:	460c      	mov	r4, r1
 800166a:	461d      	mov	r5, r3
 800166c:	4626      	mov	r6, r4
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <controlador_derivativo+0x100>)
 8001670:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <controlador_derivativo+0x104>)
 8001676:	e9d3 3400 	ldrd	r3, r4, [r3]
 800167a:	461a      	mov	r2, r3
 800167c:	4623      	mov	r3, r4
 800167e:	f7fe fe0b 	bl	8000298 <__aeabi_dsub>
 8001682:	4603      	mov	r3, r0
 8001684:	460c      	mov	r4, r1
 8001686:	4618      	mov	r0, r3
 8001688:	4621      	mov	r1, r4
 800168a:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <controlador_derivativo+0x110>)
 800168c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001690:	461a      	mov	r2, r3
 8001692:	4623      	mov	r3, r4
 8001694:	f7fe ffb8 	bl	8000608 <__aeabi_dmul>
 8001698:	4603      	mov	r3, r0
 800169a:	460c      	mov	r4, r1
 800169c:	4618      	mov	r0, r3
 800169e:	4621      	mov	r1, r4
 80016a0:	a311      	add	r3, pc, #68	; (adr r3, 80016e8 <controlador_derivativo+0xf8>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	f7ff f8d9 	bl	800085c <__aeabi_ddiv>
 80016aa:	4603      	mov	r3, r0
 80016ac:	460c      	mov	r4, r1
 80016ae:	461a      	mov	r2, r3
 80016b0:	4623      	mov	r3, r4
 80016b2:	4628      	mov	r0, r5
 80016b4:	4631      	mov	r1, r6
 80016b6:	f7fe fdf1 	bl	800029c <__adddf3>
 80016ba:	4603      	mov	r3, r0
 80016bc:	460c      	mov	r4, r1
 80016be:	ec44 3b17 	vmov	d7, r3, r4
 80016c2:	eeb0 0a47 	vmov.f32	s0, s14
 80016c6:	eef0 0a67 	vmov.f32	s1, s15
 80016ca:	f7ff fde5 	bl	8001298 <selec_voltage>
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d6:	bf00      	nop
 80016d8:	54442d18 	.word	0x54442d18
 80016dc:	400921fb 	.word	0x400921fb
 80016e0:	00000000 	.word	0x00000000
 80016e4:	40aba000 	.word	0x40aba000
 80016e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80016ec:	3f50624d 	.word	0x3f50624d
 80016f0:	20000258 	.word	0x20000258
 80016f4:	20000260 	.word	0x20000260
 80016f8:	20000230 	.word	0x20000230
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000008 	.word	0x20000008
 8001704:	00000000 	.word	0x00000000

08001708 <controlador_integrador>:
/**
 * @brief	Integrator Controller
 * @retval None
 */
void controlador_integrador(double pos_i){
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	ed87 0b00 	vstr	d0, [r7]
	e = referencia - (pos_i * 2 * M_PI / pulse_per_revolution);
 8001712:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <controlador_integrador+0x100>)
 8001714:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	f7fe fdbc 	bl	800029c <__adddf3>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	a330      	add	r3, pc, #192	; (adr r3, 80017f0 <controlador_integrador+0xe8>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	f7fe ff69 	bl	8000608 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	a32e      	add	r3, pc, #184	; (adr r3, 80017f8 <controlador_integrador+0xf0>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7ff f88a 	bl	800085c <__aeabi_ddiv>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4620      	mov	r0, r4
 800174e:	4629      	mov	r1, r5
 8001750:	f7fe fda2 	bl	8000298 <__aeabi_dsub>
 8001754:	4603      	mov	r3, r0
 8001756:	460c      	mov	r4, r1
 8001758:	4a2c      	ldr	r2, [pc, #176]	; (800180c <controlador_integrador+0x104>)
 800175a:	e9c2 3400 	strd	r3, r4, [r2]
	e_sum = e_sum + e;
 800175e:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <controlador_integrador+0x108>)
 8001760:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001764:	4b29      	ldr	r3, [pc, #164]	; (800180c <controlador_integrador+0x104>)
 8001766:	e9d3 3400 	ldrd	r3, r4, [r3]
 800176a:	461a      	mov	r2, r3
 800176c:	4623      	mov	r3, r4
 800176e:	f7fe fd95 	bl	800029c <__adddf3>
 8001772:	4603      	mov	r3, r0
 8001774:	460c      	mov	r4, r1
 8001776:	4a26      	ldr	r2, [pc, #152]	; (8001810 <controlador_integrador+0x108>)
 8001778:	e9c2 3400 	strd	r3, r4, [r2]
	selec_voltage((double)(kp * e +ki * e_sum * k_tiempo));
 800177c:	4b25      	ldr	r3, [pc, #148]	; (8001814 <controlador_integrador+0x10c>)
 800177e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001782:	4b22      	ldr	r3, [pc, #136]	; (800180c <controlador_integrador+0x104>)
 8001784:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001788:	461a      	mov	r2, r3
 800178a:	4623      	mov	r3, r4
 800178c:	f7fe ff3c 	bl	8000608 <__aeabi_dmul>
 8001790:	4603      	mov	r3, r0
 8001792:	460c      	mov	r4, r1
 8001794:	461d      	mov	r5, r3
 8001796:	4626      	mov	r6, r4
 8001798:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <controlador_integrador+0x110>)
 800179a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <controlador_integrador+0x108>)
 80017a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4623      	mov	r3, r4
 80017a8:	f7fe ff2e 	bl	8000608 <__aeabi_dmul>
 80017ac:	4603      	mov	r3, r0
 80017ae:	460c      	mov	r4, r1
 80017b0:	4618      	mov	r0, r3
 80017b2:	4621      	mov	r1, r4
 80017b4:	a312      	add	r3, pc, #72	; (adr r3, 8001800 <controlador_integrador+0xf8>)
 80017b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ba:	f7fe ff25 	bl	8000608 <__aeabi_dmul>
 80017be:	4603      	mov	r3, r0
 80017c0:	460c      	mov	r4, r1
 80017c2:	461a      	mov	r2, r3
 80017c4:	4623      	mov	r3, r4
 80017c6:	4628      	mov	r0, r5
 80017c8:	4631      	mov	r1, r6
 80017ca:	f7fe fd67 	bl	800029c <__adddf3>
 80017ce:	4603      	mov	r3, r0
 80017d0:	460c      	mov	r4, r1
 80017d2:	ec44 3b17 	vmov	d7, r3, r4
 80017d6:	eeb0 0a47 	vmov.f32	s0, s14
 80017da:	eef0 0a67 	vmov.f32	s1, s15
 80017de:	f7ff fd5b 	bl	8001298 <selec_voltage>

}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ea:	bf00      	nop
 80017ec:	f3af 8000 	nop.w
 80017f0:	54442d18 	.word	0x54442d18
 80017f4:	400921fb 	.word	0x400921fb
 80017f8:	00000000 	.word	0x00000000
 80017fc:	40aba000 	.word	0x40aba000
 8001800:	d2f1a9fc 	.word	0xd2f1a9fc
 8001804:	3f50624d 	.word	0x3f50624d
 8001808:	20000230 	.word	0x20000230
 800180c:	20000258 	.word	0x20000258
 8001810:	20000268 	.word	0x20000268
 8001814:	20000000 	.word	0x20000000
 8001818:	20000010 	.word	0x20000010
 800181c:	00000000 	.word	0x00000000

08001820 <controlador_pid>:
/**
 * @brief	PID Controller
 * @retval None
 */
void controlador_pid(double pos_i){
 8001820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	ed87 0b00 	vstr	d0, [r7]
	e_last = e;
 800182a:	4b55      	ldr	r3, [pc, #340]	; (8001980 <controlador_pid+0x160>)
 800182c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001830:	4a54      	ldr	r2, [pc, #336]	; (8001984 <controlador_pid+0x164>)
 8001832:	e9c2 3400 	strd	r3, r4, [r2]
	e = referencia - (pos_i * 2 * M_PI / pulse_per_revolution);
 8001836:	4b54      	ldr	r3, [pc, #336]	; (8001988 <controlador_pid+0x168>)
 8001838:	e9d3 4500 	ldrd	r4, r5, [r3]
 800183c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	f7fe fd2a 	bl	800029c <__adddf3>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	a345      	add	r3, pc, #276	; (adr r3, 8001968 <controlador_pid+0x148>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fed7 	bl	8000608 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	a343      	add	r3, pc, #268	; (adr r3, 8001970 <controlador_pid+0x150>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe fff8 	bl	800085c <__aeabi_ddiv>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4620      	mov	r0, r4
 8001872:	4629      	mov	r1, r5
 8001874:	f7fe fd10 	bl	8000298 <__aeabi_dsub>
 8001878:	4603      	mov	r3, r0
 800187a:	460c      	mov	r4, r1
 800187c:	4a40      	ldr	r2, [pc, #256]	; (8001980 <controlador_pid+0x160>)
 800187e:	e9c2 3400 	strd	r3, r4, [r2]
	e_sum = e_sum + e;
 8001882:	4b42      	ldr	r3, [pc, #264]	; (800198c <controlador_pid+0x16c>)
 8001884:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001888:	4b3d      	ldr	r3, [pc, #244]	; (8001980 <controlador_pid+0x160>)
 800188a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800188e:	461a      	mov	r2, r3
 8001890:	4623      	mov	r3, r4
 8001892:	f7fe fd03 	bl	800029c <__adddf3>
 8001896:	4603      	mov	r3, r0
 8001898:	460c      	mov	r4, r1
 800189a:	4a3c      	ldr	r2, [pc, #240]	; (800198c <controlador_pid+0x16c>)
 800189c:	e9c2 3400 	strd	r3, r4, [r2]
	selec_voltage((double)(kp * e +kd *(e-e_last)/k_tiempo +ki * e_sum * k_tiempo));
 80018a0:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <controlador_pid+0x170>)
 80018a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a6:	4b36      	ldr	r3, [pc, #216]	; (8001980 <controlador_pid+0x160>)
 80018a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4623      	mov	r3, r4
 80018b0:	f7fe feaa 	bl	8000608 <__aeabi_dmul>
 80018b4:	4603      	mov	r3, r0
 80018b6:	460c      	mov	r4, r1
 80018b8:	461d      	mov	r5, r3
 80018ba:	4626      	mov	r6, r4
 80018bc:	4b30      	ldr	r3, [pc, #192]	; (8001980 <controlador_pid+0x160>)
 80018be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c2:	4b30      	ldr	r3, [pc, #192]	; (8001984 <controlador_pid+0x164>)
 80018c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4623      	mov	r3, r4
 80018cc:	f7fe fce4 	bl	8000298 <__aeabi_dsub>
 80018d0:	4603      	mov	r3, r0
 80018d2:	460c      	mov	r4, r1
 80018d4:	4618      	mov	r0, r3
 80018d6:	4621      	mov	r1, r4
 80018d8:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <controlador_pid+0x174>)
 80018da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018de:	461a      	mov	r2, r3
 80018e0:	4623      	mov	r3, r4
 80018e2:	f7fe fe91 	bl	8000608 <__aeabi_dmul>
 80018e6:	4603      	mov	r3, r0
 80018e8:	460c      	mov	r4, r1
 80018ea:	4618      	mov	r0, r3
 80018ec:	4621      	mov	r1, r4
 80018ee:	a322      	add	r3, pc, #136	; (adr r3, 8001978 <controlador_pid+0x158>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f7fe ffb2 	bl	800085c <__aeabi_ddiv>
 80018f8:	4603      	mov	r3, r0
 80018fa:	460c      	mov	r4, r1
 80018fc:	461a      	mov	r2, r3
 80018fe:	4623      	mov	r3, r4
 8001900:	4628      	mov	r0, r5
 8001902:	4631      	mov	r1, r6
 8001904:	f7fe fcca 	bl	800029c <__adddf3>
 8001908:	4603      	mov	r3, r0
 800190a:	460c      	mov	r4, r1
 800190c:	461d      	mov	r5, r3
 800190e:	4626      	mov	r6, r4
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <controlador_pid+0x178>)
 8001912:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <controlador_pid+0x16c>)
 8001918:	e9d3 3400 	ldrd	r3, r4, [r3]
 800191c:	461a      	mov	r2, r3
 800191e:	4623      	mov	r3, r4
 8001920:	f7fe fe72 	bl	8000608 <__aeabi_dmul>
 8001924:	4603      	mov	r3, r0
 8001926:	460c      	mov	r4, r1
 8001928:	4618      	mov	r0, r3
 800192a:	4621      	mov	r1, r4
 800192c:	a312      	add	r3, pc, #72	; (adr r3, 8001978 <controlador_pid+0x158>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe fe69 	bl	8000608 <__aeabi_dmul>
 8001936:	4603      	mov	r3, r0
 8001938:	460c      	mov	r4, r1
 800193a:	461a      	mov	r2, r3
 800193c:	4623      	mov	r3, r4
 800193e:	4628      	mov	r0, r5
 8001940:	4631      	mov	r1, r6
 8001942:	f7fe fcab 	bl	800029c <__adddf3>
 8001946:	4603      	mov	r3, r0
 8001948:	460c      	mov	r4, r1
 800194a:	ec44 3b17 	vmov	d7, r3, r4
 800194e:	eeb0 0a47 	vmov.f32	s0, s14
 8001952:	eef0 0a67 	vmov.f32	s1, s15
 8001956:	f7ff fc9f 	bl	8001298 <selec_voltage>

}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001962:	bf00      	nop
 8001964:	f3af 8000 	nop.w
 8001968:	54442d18 	.word	0x54442d18
 800196c:	400921fb 	.word	0x400921fb
 8001970:	00000000 	.word	0x00000000
 8001974:	40aba000 	.word	0x40aba000
 8001978:	d2f1a9fc 	.word	0xd2f1a9fc
 800197c:	3f50624d 	.word	0x3f50624d
 8001980:	20000258 	.word	0x20000258
 8001984:	20000260 	.word	0x20000260
 8001988:	20000230 	.word	0x20000230
 800198c:	20000268 	.word	0x20000268
 8001990:	20000000 	.word	0x20000000
 8001994:	20000008 	.word	0x20000008
 8001998:	20000010 	.word	0x20000010

0800199c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <HAL_MspInit+0x44>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <HAL_MspInit+0x44>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6193      	str	r3, [r2, #24]
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <HAL_MspInit+0x44>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_MspInit+0x44>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_MspInit+0x44>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	61d3      	str	r3, [r2, #28]
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_MspInit+0x44>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000

080019f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <HardFault_Handler+0x4>

08001a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <MemManage_Handler+0x4>

08001a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <BusFault_Handler+0x4>

08001a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <UsageFault_Handler+0x4>

08001a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a48:	f000 fb00 	bl	800204c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <TIM2_IRQHandler+0x10>)
 8001a56:	f002 fb4e 	bl	80040f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000f420 	.word	0x2000f420

08001a64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <TIM3_IRQHandler+0x10>)
 8001a6a:	f002 fb44 	bl	80040f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000f3a0 	.word	0x2000f3a0

08001a78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <TIM6_DAC_IRQHandler+0x10>)
 8001a7e:	f002 fb3a 	bl	80040f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000f3e0 	.word	0x2000f3e0

08001a8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <_sbrk+0x50>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d102      	bne.n	8001aa2 <_sbrk+0x16>
		heap_end = &end;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <_sbrk+0x50>)
 8001a9e:	4a10      	ldr	r2, [pc, #64]	; (8001ae0 <_sbrk+0x54>)
 8001aa0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <_sbrk+0x50>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <_sbrk+0x50>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4413      	add	r3, r2
 8001ab0:	466a      	mov	r2, sp
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d907      	bls.n	8001ac6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ab6:	f003 fe4f 	bl	8005758 <__errno>
 8001aba:	4602      	mov	r2, r0
 8001abc:	230c      	movs	r3, #12
 8001abe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac4:	e006      	b.n	8001ad4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <_sbrk+0x50>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	4a03      	ldr	r2, [pc, #12]	; (8001adc <_sbrk+0x50>)
 8001ad0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000278 	.word	0x20000278
 8001ae0:	2000f4e8 	.word	0x2000f4e8

08001ae4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <SystemInit+0x28>)
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aee:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <SystemInit+0x28>)
 8001af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <SystemInit+0x28>)
 8001afa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001afe:	609a      	str	r2, [r3, #8]
#endif
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	; 0x30
 8001b14:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	2224      	movs	r2, #36	; 0x24
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 fe44 	bl	80057ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b24:	463b      	mov	r3, r7
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001b2e:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <MX_TIM2_Init+0xa4>)
 8001b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <MX_TIM2_Init+0xa4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <MX_TIM2_Init+0xa4>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <MX_TIM2_Init+0xa4>)
 8001b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <MX_TIM2_Init+0xa4>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <MX_TIM2_Init+0xa4>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b56:	2303      	movs	r3, #3
 8001b58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <MX_TIM2_Init+0xa4>)
 8001b82:	f002 f9cf 	bl	8003f24 <HAL_TIM_Encoder_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001b8c:	f7ff ff06 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_TIM2_Init+0xa4>)
 8001b9e:	f003 f8d3 	bl	8004d48 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001ba8:	f7ff fef8 	bl	800199c <Error_Handler>
  }

}
 8001bac:	bf00      	nop
 8001bae:	3730      	adds	r7, #48	; 0x30
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	2000f420 	.word	0x2000f420

08001bb8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bca:	463b      	mov	r3, r7
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
 8001bd8:	615a      	str	r2, [r3, #20]
 8001bda:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <MX_TIM3_Init+0xc4>)
 8001bde:	4a28      	ldr	r2, [pc, #160]	; (8001c80 <MX_TIM3_Init+0xc8>)
 8001be0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <MX_TIM3_Init+0xc4>)
 8001be4:	2202      	movs	r2, #2
 8001be6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <MX_TIM3_Init+0xc4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001bee:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <MX_TIM3_Init+0xc4>)
 8001bf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bf4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf6:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <MX_TIM3_Init+0xc4>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <MX_TIM3_Init+0xc4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c02:	481e      	ldr	r0, [pc, #120]	; (8001c7c <MX_TIM3_Init+0xc4>)
 8001c04:	f002 f903 	bl	8003e0e <HAL_TIM_PWM_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001c0e:	f7ff fec5 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4816      	ldr	r0, [pc, #88]	; (8001c7c <MX_TIM3_Init+0xc4>)
 8001c22:	f003 f891 	bl	8004d48 <HAL_TIMEx_MasterConfigSynchronization>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001c2c:	f7ff feb6 	bl	800199c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c30:	2360      	movs	r3, #96	; 0x60
 8001c32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c40:	463b      	mov	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	4619      	mov	r1, r3
 8001c46:	480d      	ldr	r0, [pc, #52]	; (8001c7c <MX_TIM3_Init+0xc4>)
 8001c48:	f002 fb74 	bl	8004334 <HAL_TIM_PWM_ConfigChannel>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001c52:	f7ff fea3 	bl	800199c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c56:	463b      	mov	r3, r7
 8001c58:	2204      	movs	r2, #4
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4807      	ldr	r0, [pc, #28]	; (8001c7c <MX_TIM3_Init+0xc4>)
 8001c5e:	f002 fb69 	bl	8004334 <HAL_TIM_PWM_ConfigChannel>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001c68:	f7ff fe98 	bl	800199c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001c6c:	4803      	ldr	r0, [pc, #12]	; (8001c7c <MX_TIM3_Init+0xc4>)
 8001c6e:	f000 f8d3 	bl	8001e18 <HAL_TIM_MspPostInit>

}
 8001c72:	bf00      	nop
 8001c74:	3728      	adds	r7, #40	; 0x28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000f3a0 	.word	0x2000f3a0
 8001c80:	40000400 	.word	0x40000400

08001c84 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001c96:	4a15      	ldr	r2, [pc, #84]	; (8001cec <MX_TIM6_Init+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 199;
 8001c9a:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001c9c:	22c7      	movs	r2, #199	; 0xc7
 8001c9e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 299;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001ca8:	f240 122b 	movw	r2, #299	; 0x12b
 8001cac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001cb6:	f002 f829 	bl	8003d0c <HAL_TIM_Base_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001cc0:	f7ff fe6c 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001cd2:	f003 f839 	bl	8004d48 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001cdc:	f7ff fe5e 	bl	800199c <Error_Handler>
  }

}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	2000f3e0 	.word	0x2000f3e0
 8001cec:	40001000 	.word	0x40001000

08001cf0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d10:	d130      	bne.n	8001d74 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	61d3      	str	r3, [r2, #28]
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	4a13      	ldr	r2, [pc, #76]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d34:	6153      	str	r3, [r2, #20]
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d42:	2303      	movs	r3, #3
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d52:	2301      	movs	r3, #1
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d60:	f000 fac8 	bl	80022f4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2100      	movs	r1, #0
 8001d68:	201c      	movs	r0, #28
 8001d6a:	f000 fa8c 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d6e:	201c      	movs	r0, #28
 8001d70:	f000 faa5 	bl	80022be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d74:	bf00      	nop
 8001d76:	3728      	adds	r7, #40	; 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000

08001d80 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <HAL_TIM_PWM_MspInit+0x44>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d113      	bne.n	8001dba <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_TIM_PWM_MspInit+0x48>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	4a0c      	ldr	r2, [pc, #48]	; (8001dc8 <HAL_TIM_PWM_MspInit+0x48>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	61d3      	str	r3, [r2, #28]
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_TIM_PWM_MspInit+0x48>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	201d      	movs	r0, #29
 8001db0:	f000 fa69 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001db4:	201d      	movs	r0, #29
 8001db6:	f000 fa82 	bl	80022be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40000400 	.word	0x40000400
 8001dc8:	40021000 	.word	0x40021000

08001dcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <HAL_TIM_Base_MspInit+0x44>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d113      	bne.n	8001e06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <HAL_TIM_Base_MspInit+0x48>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a0c      	ldr	r2, [pc, #48]	; (8001e14 <HAL_TIM_Base_MspInit+0x48>)
 8001de4:	f043 0310 	orr.w	r3, r3, #16
 8001de8:	61d3      	str	r3, [r2, #28]
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_TIM_Base_MspInit+0x48>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2036      	movs	r0, #54	; 0x36
 8001dfc:	f000 fa43 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e00:	2036      	movs	r0, #54	; 0x36
 8001e02:	f000 fa5c 	bl	80022be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40001000 	.word	0x40001000
 8001e14:	40021000 	.word	0x40021000

08001e18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a11      	ldr	r2, [pc, #68]	; (8001e7c <HAL_TIM_MspPostInit+0x64>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d11b      	bne.n	8001e72 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_TIM_MspPostInit+0x68>)
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	4a10      	ldr	r2, [pc, #64]	; (8001e80 <HAL_TIM_MspPostInit+0x68>)
 8001e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e44:	6153      	str	r3, [r2, #20]
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_TIM_MspPostInit+0x68>)
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e52:	2330      	movs	r3, #48	; 0x30
 8001e54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e62:	2302      	movs	r3, #2
 8001e64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e66:	f107 030c 	add.w	r3, r7, #12
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <HAL_TIM_MspPostInit+0x6c>)
 8001e6e:	f000 fa41 	bl	80022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e72:	bf00      	nop
 8001e74:	3720      	adds	r7, #32
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40021000 	.word	0x40021000
 8001e84:	48000400 	.word	0x48000400

08001e88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001e8e:	4a15      	ldr	r2, [pc, #84]	; (8001ee4 <MX_USART2_UART_Init+0x5c>)
 8001e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001e94:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001eae:	220c      	movs	r2, #12
 8001eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eca:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001ecc:	f002 ffe6 	bl	8004e9c <HAL_UART_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ed6:	f7ff fd61 	bl	800199c <Error_Handler>
  }

}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	2000f460 	.word	0x2000f460
 8001ee4:	40004400 	.word	0x40004400

08001ee8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <HAL_UART_MspInit+0x7c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d128      	bne.n	8001f5c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <HAL_UART_MspInit+0x80>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <HAL_UART_MspInit+0x80>)
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f14:	61d3      	str	r3, [r2, #28]
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HAL_UART_MspInit+0x80>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <HAL_UART_MspInit+0x80>)
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	4a10      	ldr	r2, [pc, #64]	; (8001f68 <HAL_UART_MspInit+0x80>)
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	6153      	str	r3, [r2, #20]
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <HAL_UART_MspInit+0x80>)
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f3a:	230c      	movs	r3, #12
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f4a:	2307      	movs	r3, #7
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f58:	f000 f9cc 	bl	80022f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	3728      	adds	r7, #40	; 0x28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40004400 	.word	0x40004400
 8001f68:	40021000 	.word	0x40021000

08001f6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f72:	e003      	b.n	8001f7c <LoopCopyDataInit>

08001f74 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f76:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f78:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f7a:	3104      	adds	r1, #4

08001f7c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f7c:	480b      	ldr	r0, [pc, #44]	; (8001fac <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f80:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f82:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f84:	d3f6      	bcc.n	8001f74 <CopyDataInit>
	ldr	r2, =_sbss
 8001f86:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f88:	e002      	b.n	8001f90 <LoopFillZerobss>

08001f8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f8a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f8c:	f842 3b04 	str.w	r3, [r2], #4

08001f90 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <LoopForever+0x16>)
	cmp	r2, r3
 8001f92:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f94:	d3f9      	bcc.n	8001f8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f96:	f7ff fda5 	bl	8001ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f9a:	f003 fbe3 	bl	8005764 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f9e:	f7fe fe6b 	bl	8000c78 <main>

08001fa2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fa2:	e7fe      	b.n	8001fa2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fa4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001fa8:	08007ba8 	.word	0x08007ba8
	ldr	r0, =_sdata
 8001fac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001fb0:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8001fb4:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8001fb8:	2000f4e8 	.word	0x2000f4e8

08001fbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fbc:	e7fe      	b.n	8001fbc <ADC1_2_IRQHandler>
	...

08001fc0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_Init+0x28>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <HAL_Init+0x28>)
 8001fca:	f043 0310 	orr.w	r3, r3, #16
 8001fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	f000 f94d 	bl	8002270 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f000 f808 	bl	8001fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fdc:	f7ff fce6 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40022000 	.word	0x40022000

08001fec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_InitTick+0x54>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_InitTick+0x58>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002002:	fbb3 f3f1 	udiv	r3, r3, r1
 8002006:	fbb2 f3f3 	udiv	r3, r2, r3
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f965 	bl	80022da <HAL_SYSTICK_Config>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e00e      	b.n	8002038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b0f      	cmp	r3, #15
 800201e:	d80a      	bhi.n	8002036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002020:	2200      	movs	r2, #0
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f000 f92d 	bl	8002286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <HAL_InitTick+0x5c>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e000      	b.n	8002038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000018 	.word	0x20000018
 8002044:	20000020 	.word	0x20000020
 8002048:	2000001c 	.word	0x2000001c

0800204c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_IncTick+0x20>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_IncTick+0x24>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4413      	add	r3, r2
 800205c:	4a04      	ldr	r2, [pc, #16]	; (8002070 <HAL_IncTick+0x24>)
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000020 	.word	0x20000020
 8002070:	2000f4e0 	.word	0x2000f4e0

08002074 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return uwTick;  
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <HAL_GetTick+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	2000f4e0 	.word	0x2000f4e0

0800208c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff ffee 	bl	8002074 <HAL_GetTick>
 8002098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a4:	d005      	beq.n	80020b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_Delay+0x40>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80020b2:	bf00      	nop
 80020b4:	f7ff ffde 	bl	8002074 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d8f7      	bhi.n	80020b4 <HAL_Delay+0x28>
  {
  }
}
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000020 	.word	0x20000020

080020d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ec:	4013      	ands	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002102:	4a04      	ldr	r2, [pc, #16]	; (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	60d3      	str	r3, [r2, #12]
}
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800211c:	4b04      	ldr	r3, [pc, #16]	; (8002130 <__NVIC_GetPriorityGrouping+0x18>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	f003 0307 	and.w	r3, r3, #7
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	2b00      	cmp	r3, #0
 8002144:	db0b      	blt.n	800215e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	f003 021f 	and.w	r2, r3, #31
 800214c:	4907      	ldr	r1, [pc, #28]	; (800216c <__NVIC_EnableIRQ+0x38>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	2001      	movs	r0, #1
 8002156:	fa00 f202 	lsl.w	r2, r0, r2
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000e100 	.word	0xe000e100

08002170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	db0a      	blt.n	800219a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	490c      	ldr	r1, [pc, #48]	; (80021bc <__NVIC_SetPriority+0x4c>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	440b      	add	r3, r1
 8002194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002198:	e00a      	b.n	80021b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4908      	ldr	r1, [pc, #32]	; (80021c0 <__NVIC_SetPriority+0x50>)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	3b04      	subs	r3, #4
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	440b      	add	r3, r1
 80021ae:	761a      	strb	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	bf28      	it	cs
 80021e2:	2304      	movcs	r3, #4
 80021e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d902      	bls.n	80021f4 <NVIC_EncodePriority+0x30>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3b03      	subs	r3, #3
 80021f2:	e000      	b.n	80021f6 <NVIC_EncodePriority+0x32>
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43d9      	mvns	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	4313      	orrs	r3, r2
         );
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	; 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800223c:	d301      	bcc.n	8002242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223e:	2301      	movs	r3, #1
 8002240:	e00f      	b.n	8002262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <SysTick_Config+0x40>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224a:	210f      	movs	r1, #15
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f7ff ff8e 	bl	8002170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <SysTick_Config+0x40>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <SysTick_Config+0x40>)
 800225c:	2207      	movs	r2, #7
 800225e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	e000e010 	.word	0xe000e010

08002270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff29 	bl	80020d0 <__NVIC_SetPriorityGrouping>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002298:	f7ff ff3e 	bl	8002118 <__NVIC_GetPriorityGrouping>
 800229c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	6978      	ldr	r0, [r7, #20]
 80022a4:	f7ff ff8e 	bl	80021c4 <NVIC_EncodePriority>
 80022a8:	4602      	mov	r2, r0
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff5d 	bl	8002170 <__NVIC_SetPriority>
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff31 	bl	8002134 <__NVIC_EnableIRQ>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ffa2 	bl	800222c <SysTick_Config>
 80022e8:	4603      	mov	r3, r0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002302:	e160      	b.n	80025c6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	2101      	movs	r1, #1
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	4013      	ands	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8152 	beq.w	80025c0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x38>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b12      	cmp	r3, #18
 800232a:	d123      	bne.n	8002374 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	08da      	lsrs	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3208      	adds	r2, #8
 8002334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	220f      	movs	r2, #15
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	08da      	lsrs	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3208      	adds	r2, #8
 800236e:	6939      	ldr	r1, [r7, #16]
 8002370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0203 	and.w	r2, r3, #3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d00b      	beq.n	80023c8 <HAL_GPIO_Init+0xd4>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d007      	beq.n	80023c8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023bc:	2b11      	cmp	r3, #17
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b12      	cmp	r3, #18
 80023c6:	d130      	bne.n	800242a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	2203      	movs	r2, #3
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023fe:	2201      	movs	r2, #1
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	091b      	lsrs	r3, r3, #4
 8002414:	f003 0201 	and.w	r2, r3, #1
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	2203      	movs	r2, #3
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80ac 	beq.w	80025c0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002468:	4b5e      	ldr	r3, [pc, #376]	; (80025e4 <HAL_GPIO_Init+0x2f0>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	4a5d      	ldr	r2, [pc, #372]	; (80025e4 <HAL_GPIO_Init+0x2f0>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6193      	str	r3, [r2, #24]
 8002474:	4b5b      	ldr	r3, [pc, #364]	; (80025e4 <HAL_GPIO_Init+0x2f0>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002480:	4a59      	ldr	r2, [pc, #356]	; (80025e8 <HAL_GPIO_Init+0x2f4>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	3302      	adds	r3, #2
 8002488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	220f      	movs	r2, #15
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024aa:	d025      	beq.n	80024f8 <HAL_GPIO_Init+0x204>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a4f      	ldr	r2, [pc, #316]	; (80025ec <HAL_GPIO_Init+0x2f8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d01f      	beq.n	80024f4 <HAL_GPIO_Init+0x200>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a4e      	ldr	r2, [pc, #312]	; (80025f0 <HAL_GPIO_Init+0x2fc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d019      	beq.n	80024f0 <HAL_GPIO_Init+0x1fc>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a4d      	ldr	r2, [pc, #308]	; (80025f4 <HAL_GPIO_Init+0x300>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d013      	beq.n	80024ec <HAL_GPIO_Init+0x1f8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a4c      	ldr	r2, [pc, #304]	; (80025f8 <HAL_GPIO_Init+0x304>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d00d      	beq.n	80024e8 <HAL_GPIO_Init+0x1f4>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a4b      	ldr	r2, [pc, #300]	; (80025fc <HAL_GPIO_Init+0x308>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d007      	beq.n	80024e4 <HAL_GPIO_Init+0x1f0>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a4a      	ldr	r2, [pc, #296]	; (8002600 <HAL_GPIO_Init+0x30c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d101      	bne.n	80024e0 <HAL_GPIO_Init+0x1ec>
 80024dc:	2306      	movs	r3, #6
 80024de:	e00c      	b.n	80024fa <HAL_GPIO_Init+0x206>
 80024e0:	2307      	movs	r3, #7
 80024e2:	e00a      	b.n	80024fa <HAL_GPIO_Init+0x206>
 80024e4:	2305      	movs	r3, #5
 80024e6:	e008      	b.n	80024fa <HAL_GPIO_Init+0x206>
 80024e8:	2304      	movs	r3, #4
 80024ea:	e006      	b.n	80024fa <HAL_GPIO_Init+0x206>
 80024ec:	2303      	movs	r3, #3
 80024ee:	e004      	b.n	80024fa <HAL_GPIO_Init+0x206>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e002      	b.n	80024fa <HAL_GPIO_Init+0x206>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_GPIO_Init+0x206>
 80024f8:	2300      	movs	r3, #0
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	f002 0203 	and.w	r2, r2, #3
 8002500:	0092      	lsls	r2, r2, #2
 8002502:	4093      	lsls	r3, r2
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800250a:	4937      	ldr	r1, [pc, #220]	; (80025e8 <HAL_GPIO_Init+0x2f4>)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	3302      	adds	r3, #2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002518:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <HAL_GPIO_Init+0x310>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	43db      	mvns	r3, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800253c:	4a31      	ldr	r2, [pc, #196]	; (8002604 <HAL_GPIO_Init+0x310>)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002542:	4b30      	ldr	r3, [pc, #192]	; (8002604 <HAL_GPIO_Init+0x310>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002566:	4a27      	ldr	r2, [pc, #156]	; (8002604 <HAL_GPIO_Init+0x310>)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800256c:	4b25      	ldr	r3, [pc, #148]	; (8002604 <HAL_GPIO_Init+0x310>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	43db      	mvns	r3, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002590:	4a1c      	ldr	r2, [pc, #112]	; (8002604 <HAL_GPIO_Init+0x310>)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002596:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_GPIO_Init+0x310>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	43db      	mvns	r3, r3
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025ba:	4a12      	ldr	r2, [pc, #72]	; (8002604 <HAL_GPIO_Init+0x310>)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	3301      	adds	r3, #1
 80025c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f47f ae97 	bne.w	8002304 <HAL_GPIO_Init+0x10>
  }
}
 80025d6:	bf00      	nop
 80025d8:	371c      	adds	r7, #28
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40010000 	.word	0x40010000
 80025ec:	48000400 	.word	0x48000400
 80025f0:	48000800 	.word	0x48000800
 80025f4:	48000c00 	.word	0x48000c00
 80025f8:	48001000 	.word	0x48001000
 80025fc:	48001400 	.word	0x48001400
 8002600:	48001800 	.word	0x48001800
 8002604:	40010400 	.word	0x40010400

08002608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
 8002614:	4613      	mov	r3, r2
 8002616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002624:	e002      	b.n	800262c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002626:	887a      	ldrh	r2, [r7, #2]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800263e:	af00      	add	r7, sp, #0
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d102      	bne.n	8002652 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	f000 bf01 	b.w	8003454 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8160 	beq.w	8002922 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002662:	4bae      	ldr	r3, [pc, #696]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b04      	cmp	r3, #4
 800266c:	d00c      	beq.n	8002688 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800266e:	4bab      	ldr	r3, [pc, #684]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b08      	cmp	r3, #8
 8002678:	d159      	bne.n	800272e <HAL_RCC_OscConfig+0xf6>
 800267a:	4ba8      	ldr	r3, [pc, #672]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002686:	d152      	bne.n	800272e <HAL_RCC_OscConfig+0xf6>
 8002688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800268c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800269c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d102      	bne.n	80026ba <HAL_RCC_OscConfig+0x82>
 80026b4:	4b99      	ldr	r3, [pc, #612]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	e015      	b.n	80026e6 <HAL_RCC_OscConfig+0xae>
 80026ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026be:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80026ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80026d6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80026e2:	4b8e      	ldr	r3, [pc, #568]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026ea:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80026ee:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80026f2:	fa92 f2a2 	rbit	r2, r2
 80026f6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80026fa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80026fe:	fab2 f282 	clz	r2, r2
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	f042 0220 	orr.w	r2, r2, #32
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	f002 021f 	and.w	r2, r2, #31
 800270e:	2101      	movs	r1, #1
 8002710:	fa01 f202 	lsl.w	r2, r1, r2
 8002714:	4013      	ands	r3, r2
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8102 	beq.w	8002920 <HAL_RCC_OscConfig+0x2e8>
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 80fc 	bne.w	8002920 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	f000 be93 	b.w	8003454 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002738:	d106      	bne.n	8002748 <HAL_RCC_OscConfig+0x110>
 800273a:	4b78      	ldr	r3, [pc, #480]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a77      	ldr	r2, [pc, #476]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 8002740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e030      	b.n	80027aa <HAL_RCC_OscConfig+0x172>
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10c      	bne.n	800276c <HAL_RCC_OscConfig+0x134>
 8002752:	4b72      	ldr	r3, [pc, #456]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a71      	ldr	r2, [pc, #452]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 8002758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b6f      	ldr	r3, [pc, #444]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a6e      	ldr	r2, [pc, #440]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 8002764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	e01e      	b.n	80027aa <HAL_RCC_OscConfig+0x172>
 800276c:	1d3b      	adds	r3, r7, #4
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002776:	d10c      	bne.n	8002792 <HAL_RCC_OscConfig+0x15a>
 8002778:	4b68      	ldr	r3, [pc, #416]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a67      	ldr	r2, [pc, #412]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 800277e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b65      	ldr	r3, [pc, #404]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a64      	ldr	r2, [pc, #400]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 800278a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	e00b      	b.n	80027aa <HAL_RCC_OscConfig+0x172>
 8002792:	4b62      	ldr	r3, [pc, #392]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a61      	ldr	r2, [pc, #388]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 8002798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b5f      	ldr	r3, [pc, #380]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a5e      	ldr	r2, [pc, #376]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 80027a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d059      	beq.n	8002868 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7ff fc5e 	bl	8002074 <HAL_GetTick>
 80027b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027be:	f7ff fc59 	bl	8002074 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	; 0x64
 80027cc:	d902      	bls.n	80027d4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	f000 be40 	b.w	8003454 <HAL_RCC_OscConfig+0xe1c>
 80027d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80027e8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d102      	bne.n	8002806 <HAL_RCC_OscConfig+0x1ce>
 8002800:	4b46      	ldr	r3, [pc, #280]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	e015      	b.n	8002832 <HAL_RCC_OscConfig+0x1fa>
 8002806:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800280a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800281a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800281e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002822:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800282e:	4b3b      	ldr	r3, [pc, #236]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002836:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800283a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800283e:	fa92 f2a2 	rbit	r2, r2
 8002842:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002846:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800284a:	fab2 f282 	clz	r2, r2
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	f042 0220 	orr.w	r2, r2, #32
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	f002 021f 	and.w	r2, r2, #31
 800285a:	2101      	movs	r1, #1
 800285c:	fa01 f202 	lsl.w	r2, r1, r2
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0ab      	beq.n	80027be <HAL_RCC_OscConfig+0x186>
 8002866:	e05c      	b.n	8002922 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7ff fc04 	bl	8002074 <HAL_GetTick>
 800286c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002870:	e00a      	b.n	8002888 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002872:	f7ff fbff 	bl	8002074 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d902      	bls.n	8002888 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	f000 bde6 	b.w	8003454 <HAL_RCC_OscConfig+0xe1c>
 8002888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800288c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800289c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a0:	fab3 f383 	clz	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d102      	bne.n	80028ba <HAL_RCC_OscConfig+0x282>
 80028b4:	4b19      	ldr	r3, [pc, #100]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	e015      	b.n	80028e6 <HAL_RCC_OscConfig+0x2ae>
 80028ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028be:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80028ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80028d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80028e2:	4b0e      	ldr	r3, [pc, #56]	; (800291c <HAL_RCC_OscConfig+0x2e4>)
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028ea:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80028ee:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80028f2:	fa92 f2a2 	rbit	r2, r2
 80028f6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80028fa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80028fe:	fab2 f282 	clz	r2, r2
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	f042 0220 	orr.w	r2, r2, #32
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	f002 021f 	and.w	r2, r2, #31
 800290e:	2101      	movs	r1, #1
 8002910:	fa01 f202 	lsl.w	r2, r1, r2
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1ab      	bne.n	8002872 <HAL_RCC_OscConfig+0x23a>
 800291a:	e002      	b.n	8002922 <HAL_RCC_OscConfig+0x2ea>
 800291c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8170 	beq.w	8002c12 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002932:	4bd0      	ldr	r3, [pc, #832]	; (8002c74 <HAL_RCC_OscConfig+0x63c>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00c      	beq.n	8002958 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800293e:	4bcd      	ldr	r3, [pc, #820]	; (8002c74 <HAL_RCC_OscConfig+0x63c>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b08      	cmp	r3, #8
 8002948:	d16d      	bne.n	8002a26 <HAL_RCC_OscConfig+0x3ee>
 800294a:	4bca      	ldr	r3, [pc, #808]	; (8002c74 <HAL_RCC_OscConfig+0x63c>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002956:	d166      	bne.n	8002a26 <HAL_RCC_OscConfig+0x3ee>
 8002958:	2302      	movs	r3, #2
 800295a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800296a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	095b      	lsrs	r3, r3, #5
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d102      	bne.n	8002988 <HAL_RCC_OscConfig+0x350>
 8002982:	4bbc      	ldr	r3, [pc, #752]	; (8002c74 <HAL_RCC_OscConfig+0x63c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	e013      	b.n	80029b0 <HAL_RCC_OscConfig+0x378>
 8002988:	2302      	movs	r3, #2
 800298a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800299a:	2302      	movs	r3, #2
 800299c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80029a0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80029a4:	fa93 f3a3 	rbit	r3, r3
 80029a8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80029ac:	4bb1      	ldr	r3, [pc, #708]	; (8002c74 <HAL_RCC_OscConfig+0x63c>)
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	2202      	movs	r2, #2
 80029b2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80029b6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80029ba:	fa92 f2a2 	rbit	r2, r2
 80029be:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80029c2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80029c6:	fab2 f282 	clz	r2, r2
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	f042 0220 	orr.w	r2, r2, #32
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	f002 021f 	and.w	r2, r2, #31
 80029d6:	2101      	movs	r1, #1
 80029d8:	fa01 f202 	lsl.w	r2, r1, r2
 80029dc:	4013      	ands	r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d007      	beq.n	80029f2 <HAL_RCC_OscConfig+0x3ba>
 80029e2:	1d3b      	adds	r3, r7, #4
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d002      	beq.n	80029f2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f000 bd31 	b.w	8003454 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f2:	4ba0      	ldr	r3, [pc, #640]	; (8002c74 <HAL_RCC_OscConfig+0x63c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029fa:	1d3b      	adds	r3, r7, #4
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	21f8      	movs	r1, #248	; 0xf8
 8002a02:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002a0a:	fa91 f1a1 	rbit	r1, r1
 8002a0e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002a12:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a16:	fab1 f181 	clz	r1, r1
 8002a1a:	b2c9      	uxtb	r1, r1
 8002a1c:	408b      	lsls	r3, r1
 8002a1e:	4995      	ldr	r1, [pc, #596]	; (8002c74 <HAL_RCC_OscConfig+0x63c>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a24:	e0f5      	b.n	8002c12 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a26:	1d3b      	adds	r3, r7, #4
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8085 	beq.w	8002b3c <HAL_RCC_OscConfig+0x504>
 8002a32:	2301      	movs	r3, #1
 8002a34:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002a44:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a48:	fab3 f383 	clz	r3, r3
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7ff fb09 	bl	8002074 <HAL_GetTick>
 8002a62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a68:	f7ff fb04 	bl	8002074 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d902      	bls.n	8002a7e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	f000 bceb 	b.w	8003454 <HAL_RCC_OscConfig+0xe1c>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002a90:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d102      	bne.n	8002aae <HAL_RCC_OscConfig+0x476>
 8002aa8:	4b72      	ldr	r3, [pc, #456]	; (8002c74 <HAL_RCC_OscConfig+0x63c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	e013      	b.n	8002ad6 <HAL_RCC_OscConfig+0x49e>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002ac6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ad2:	4b68      	ldr	r3, [pc, #416]	; (8002c74 <HAL_RCC_OscConfig+0x63c>)
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002adc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002ae0:	fa92 f2a2 	rbit	r2, r2
 8002ae4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002ae8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002aec:	fab2 f282 	clz	r2, r2
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	f042 0220 	orr.w	r2, r2, #32
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	f002 021f 	and.w	r2, r2, #31
 8002afc:	2101      	movs	r1, #1
 8002afe:	fa01 f202 	lsl.w	r2, r1, r2
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0af      	beq.n	8002a68 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b08:	4b5a      	ldr	r3, [pc, #360]	; (8002c74 <HAL_RCC_OscConfig+0x63c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	21f8      	movs	r1, #248	; 0xf8
 8002b18:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002b20:	fa91 f1a1 	rbit	r1, r1
 8002b24:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002b28:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b2c:	fab1 f181 	clz	r1, r1
 8002b30:	b2c9      	uxtb	r1, r1
 8002b32:	408b      	lsls	r3, r1
 8002b34:	494f      	ldr	r1, [pc, #316]	; (8002c74 <HAL_RCC_OscConfig+0x63c>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]
 8002b3a:	e06a      	b.n	8002c12 <HAL_RCC_OscConfig+0x5da>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002b4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	461a      	mov	r2, r3
 8002b64:	2300      	movs	r3, #0
 8002b66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7ff fa84 	bl	8002074 <HAL_GetTick>
 8002b6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b70:	e00a      	b.n	8002b88 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b72:	f7ff fa7f 	bl	8002074 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d902      	bls.n	8002b88 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	f000 bc66 	b.w	8003454 <HAL_RCC_OscConfig+0xe1c>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002b9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d102      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x580>
 8002bb2:	4b30      	ldr	r3, [pc, #192]	; (8002c74 <HAL_RCC_OscConfig+0x63c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	e013      	b.n	8002be0 <HAL_RCC_OscConfig+0x5a8>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002bca:	2302      	movs	r3, #2
 8002bcc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002bd0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002bdc:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <HAL_RCC_OscConfig+0x63c>)
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	2202      	movs	r2, #2
 8002be2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002be6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002bea:	fa92 f2a2 	rbit	r2, r2
 8002bee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002bf2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002bf6:	fab2 f282 	clz	r2, r2
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	f042 0220 	orr.w	r2, r2, #32
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	f002 021f 	and.w	r2, r2, #31
 8002c06:	2101      	movs	r1, #1
 8002c08:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1af      	bne.n	8002b72 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80da 	beq.w	8002dd6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c22:	1d3b      	adds	r3, r7, #4
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d069      	beq.n	8002d00 <HAL_RCC_OscConfig+0x6c8>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002c3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	fab3 f383 	clz	r3, r3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_RCC_OscConfig+0x640>)
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	461a      	mov	r2, r3
 8002c52:	2301      	movs	r3, #1
 8002c54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c56:	f7ff fa0d 	bl	8002074 <HAL_GetTick>
 8002c5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5e:	e00d      	b.n	8002c7c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c60:	f7ff fa08 	bl	8002074 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d905      	bls.n	8002c7c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e3ef      	b.n	8003454 <HAL_RCC_OscConfig+0xe1c>
 8002c74:	40021000 	.word	0x40021000
 8002c78:	10908120 	.word	0x10908120
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c86:	fa93 f2a3 	rbit	r2, r3
 8002c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002c94:	2202      	movs	r2, #2
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	fa93 f2a3 	rbit	r2, r3
 8002ca2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002cac:	2202      	movs	r2, #2
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	fa93 f2a3 	rbit	r2, r3
 8002cba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002cbe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc0:	4ba4      	ldr	r3, [pc, #656]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002cc8:	2102      	movs	r1, #2
 8002cca:	6019      	str	r1, [r3, #0]
 8002ccc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	fa93 f1a3 	rbit	r1, r3
 8002cd6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002cda:	6019      	str	r1, [r3, #0]
  return result;
 8002cdc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0b0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x628>
 8002cfe:	e06a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x79e>
 8002d00:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d04:	2201      	movs	r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	fa93 f2a3 	rbit	r2, r3
 8002d12:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d16:	601a      	str	r2, [r3, #0]
  return result;
 8002d18:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d1c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b8c      	ldr	r3, [pc, #560]	; (8002f58 <HAL_RCC_OscConfig+0x920>)
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2300      	movs	r3, #0
 8002d30:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d32:	f7ff f99f 	bl	8002074 <HAL_GetTick>
 8002d36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d3a:	e009      	b.n	8002d50 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d3c:	f7ff f99a 	bl	8002074 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e381      	b.n	8003454 <HAL_RCC_OscConfig+0xe1c>
 8002d50:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d54:	2202      	movs	r2, #2
 8002d56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	fa93 f2a3 	rbit	r2, r3
 8002d62:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	fa93 f2a3 	rbit	r2, r3
 8002d7a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d84:	2202      	movs	r2, #2
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	fa93 f2a3 	rbit	r2, r3
 8002d92:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d96:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d98:	4b6e      	ldr	r3, [pc, #440]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002da0:	2102      	movs	r1, #2
 8002da2:	6019      	str	r1, [r3, #0]
 8002da4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	fa93 f1a3 	rbit	r1, r3
 8002dae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002db2:	6019      	str	r1, [r3, #0]
  return result;
 8002db4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	2101      	movs	r1, #1
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1b2      	bne.n	8002d3c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8157 	beq.w	8003094 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dec:	4b59      	ldr	r3, [pc, #356]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d112      	bne.n	8002e1e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df8:	4b56      	ldr	r3, [pc, #344]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	4a55      	ldr	r2, [pc, #340]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e02:	61d3      	str	r3, [r2, #28]
 8002e04:	4b53      	ldr	r3, [pc, #332]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e0c:	f107 030c 	add.w	r3, r7, #12
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	f107 030c 	add.w	r3, r7, #12
 8002e16:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1e:	4b4f      	ldr	r3, [pc, #316]	; (8002f5c <HAL_RCC_OscConfig+0x924>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d11a      	bne.n	8002e60 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e2a:	4b4c      	ldr	r3, [pc, #304]	; (8002f5c <HAL_RCC_OscConfig+0x924>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a4b      	ldr	r2, [pc, #300]	; (8002f5c <HAL_RCC_OscConfig+0x924>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e36:	f7ff f91d 	bl	8002074 <HAL_GetTick>
 8002e3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3e:	e009      	b.n	8002e54 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e40:	f7ff f918 	bl	8002074 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b64      	cmp	r3, #100	; 0x64
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e2ff      	b.n	8003454 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e54:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <HAL_RCC_OscConfig+0x924>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0ef      	beq.n	8002e40 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e60:	1d3b      	adds	r3, r7, #4
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d106      	bne.n	8002e78 <HAL_RCC_OscConfig+0x840>
 8002e6a:	4b3a      	ldr	r3, [pc, #232]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	4a39      	ldr	r2, [pc, #228]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6213      	str	r3, [r2, #32]
 8002e76:	e02f      	b.n	8002ed8 <HAL_RCC_OscConfig+0x8a0>
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCC_OscConfig+0x864>
 8002e82:	4b34      	ldr	r3, [pc, #208]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4a33      	ldr	r2, [pc, #204]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002e88:	f023 0301 	bic.w	r3, r3, #1
 8002e8c:	6213      	str	r3, [r2, #32]
 8002e8e:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	4a30      	ldr	r2, [pc, #192]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002e94:	f023 0304 	bic.w	r3, r3, #4
 8002e98:	6213      	str	r3, [r2, #32]
 8002e9a:	e01d      	b.n	8002ed8 <HAL_RCC_OscConfig+0x8a0>
 8002e9c:	1d3b      	adds	r3, r7, #4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b05      	cmp	r3, #5
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x888>
 8002ea6:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4a2a      	ldr	r2, [pc, #168]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002eac:	f043 0304 	orr.w	r3, r3, #4
 8002eb0:	6213      	str	r3, [r2, #32]
 8002eb2:	4b28      	ldr	r3, [pc, #160]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a27      	ldr	r2, [pc, #156]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6213      	str	r3, [r2, #32]
 8002ebe:	e00b      	b.n	8002ed8 <HAL_RCC_OscConfig+0x8a0>
 8002ec0:	4b24      	ldr	r3, [pc, #144]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4a23      	ldr	r2, [pc, #140]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002ec6:	f023 0301 	bic.w	r3, r3, #1
 8002eca:	6213      	str	r3, [r2, #32]
 8002ecc:	4b21      	ldr	r3, [pc, #132]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	4a20      	ldr	r2, [pc, #128]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002ed2:	f023 0304 	bic.w	r3, r3, #4
 8002ed6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ed8:	1d3b      	adds	r3, r7, #4
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d06a      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7ff f8c7 	bl	8002074 <HAL_GetTick>
 8002ee6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eec:	f7ff f8c2 	bl	8002074 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e2a7      	b.n	8003454 <HAL_RCC_OscConfig+0xe1c>
 8002f04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f08:	2202      	movs	r2, #2
 8002f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	fa93 f2a3 	rbit	r2, r3
 8002f16:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f20:	2202      	movs	r2, #2
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	fa93 f2a3 	rbit	r2, r3
 8002f2e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f32:	601a      	str	r2, [r3, #0]
  return result;
 8002f34:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f38:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f043 0302 	orr.w	r3, r3, #2
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d108      	bne.n	8002f60 <HAL_RCC_OscConfig+0x928>
 8002f4e:	4b01      	ldr	r3, [pc, #4]	; (8002f54 <HAL_RCC_OscConfig+0x91c>)
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	e013      	b.n	8002f7c <HAL_RCC_OscConfig+0x944>
 8002f54:	40021000 	.word	0x40021000
 8002f58:	10908120 	.word	0x10908120
 8002f5c:	40007000 	.word	0x40007000
 8002f60:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f64:	2202      	movs	r2, #2
 8002f66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	fa93 f2a3 	rbit	r2, r3
 8002f72:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	4bc0      	ldr	r3, [pc, #768]	; (800327c <HAL_RCC_OscConfig+0xc44>)
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002f80:	2102      	movs	r1, #2
 8002f82:	6011      	str	r1, [r2, #0]
 8002f84:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	fa92 f1a2 	rbit	r1, r2
 8002f8e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f92:	6011      	str	r1, [r2, #0]
  return result;
 8002f94:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	fab2 f282 	clz	r2, r2
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	f002 021f 	and.w	r2, r2, #31
 8002faa:	2101      	movs	r1, #1
 8002fac:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d09a      	beq.n	8002eec <HAL_RCC_OscConfig+0x8b4>
 8002fb6:	e063      	b.n	8003080 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb8:	f7ff f85c 	bl	8002074 <HAL_GetTick>
 8002fbc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc0:	e00b      	b.n	8002fda <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc2:	f7ff f857 	bl	8002074 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e23c      	b.n	8003454 <HAL_RCC_OscConfig+0xe1c>
 8002fda:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fde:	2202      	movs	r2, #2
 8002fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	fa93 f2a3 	rbit	r2, r3
 8002fec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	fa93 f2a3 	rbit	r2, r3
 8003004:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003008:	601a      	str	r2, [r3, #0]
  return result;
 800300a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800300e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003010:	fab3 f383 	clz	r3, r3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	b2db      	uxtb	r3, r3
 800301a:	f043 0302 	orr.w	r3, r3, #2
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d102      	bne.n	800302a <HAL_RCC_OscConfig+0x9f2>
 8003024:	4b95      	ldr	r3, [pc, #596]	; (800327c <HAL_RCC_OscConfig+0xc44>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	e00d      	b.n	8003046 <HAL_RCC_OscConfig+0xa0e>
 800302a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800302e:	2202      	movs	r2, #2
 8003030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	fa93 f2a3 	rbit	r2, r3
 800303c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	4b8e      	ldr	r3, [pc, #568]	; (800327c <HAL_RCC_OscConfig+0xc44>)
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800304a:	2102      	movs	r1, #2
 800304c:	6011      	str	r1, [r2, #0]
 800304e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	fa92 f1a2 	rbit	r1, r2
 8003058:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800305c:	6011      	str	r1, [r2, #0]
  return result;
 800305e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	fab2 f282 	clz	r2, r2
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	f002 021f 	and.w	r2, r2, #31
 8003074:	2101      	movs	r1, #1
 8003076:	fa01 f202 	lsl.w	r2, r1, r2
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1a0      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003080:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003084:	2b01      	cmp	r3, #1
 8003086:	d105      	bne.n	8003094 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003088:	4b7c      	ldr	r3, [pc, #496]	; (800327c <HAL_RCC_OscConfig+0xc44>)
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	4a7b      	ldr	r2, [pc, #492]	; (800327c <HAL_RCC_OscConfig+0xc44>)
 800308e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003092:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003094:	1d3b      	adds	r3, r7, #4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 81d9 	beq.w	8003452 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030a0:	4b76      	ldr	r3, [pc, #472]	; (800327c <HAL_RCC_OscConfig+0xc44>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 030c 	and.w	r3, r3, #12
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	f000 81a6 	beq.w	80033fa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ae:	1d3b      	adds	r3, r7, #4
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	f040 811e 	bne.w	80032f6 <HAL_RCC_OscConfig+0xcbe>
 80030ba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80030be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	fa93 f2a3 	rbit	r2, r3
 80030ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030d2:	601a      	str	r2, [r3, #0]
  return result;
 80030d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030da:	fab3 f383 	clz	r3, r3
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	461a      	mov	r2, r3
 80030ec:	2300      	movs	r3, #0
 80030ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe ffc0 	bl	8002074 <HAL_GetTick>
 80030f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f8:	e009      	b.n	800310e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fa:	f7fe ffbb 	bl	8002074 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e1a2      	b.n	8003454 <HAL_RCC_OscConfig+0xe1c>
 800310e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003112:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003116:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003118:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	fa93 f2a3 	rbit	r2, r3
 8003122:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003126:	601a      	str	r2, [r3, #0]
  return result;
 8003128:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800312c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800312e:	fab3 f383 	clz	r3, r3
 8003132:	b2db      	uxtb	r3, r3
 8003134:	095b      	lsrs	r3, r3, #5
 8003136:	b2db      	uxtb	r3, r3
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	d102      	bne.n	8003148 <HAL_RCC_OscConfig+0xb10>
 8003142:	4b4e      	ldr	r3, [pc, #312]	; (800327c <HAL_RCC_OscConfig+0xc44>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	e01b      	b.n	8003180 <HAL_RCC_OscConfig+0xb48>
 8003148:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800314c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003152:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	fa93 f2a3 	rbit	r2, r3
 800315c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003166:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	fa93 f2a3 	rbit	r2, r3
 8003176:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	4b3f      	ldr	r3, [pc, #252]	; (800327c <HAL_RCC_OscConfig+0xc44>)
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003184:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003188:	6011      	str	r1, [r2, #0]
 800318a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	fa92 f1a2 	rbit	r1, r2
 8003194:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003198:	6011      	str	r1, [r2, #0]
  return result;
 800319a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	fab2 f282 	clz	r2, r2
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	f042 0220 	orr.w	r2, r2, #32
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	f002 021f 	and.w	r2, r2, #31
 80031b0:	2101      	movs	r1, #1
 80031b2:	fa01 f202 	lsl.w	r2, r1, r2
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d19e      	bne.n	80030fa <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031bc:	4b2f      	ldr	r3, [pc, #188]	; (800327c <HAL_RCC_OscConfig+0xc44>)
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	f023 020f 	bic.w	r2, r3, #15
 80031c4:	1d3b      	adds	r3, r7, #4
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	492c      	ldr	r1, [pc, #176]	; (800327c <HAL_RCC_OscConfig+0xc44>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 80031d0:	4b2a      	ldr	r3, [pc, #168]	; (800327c <HAL_RCC_OscConfig+0xc44>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80031d8:	1d3b      	adds	r3, r7, #4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6a19      	ldr	r1, [r3, #32]
 80031de:	1d3b      	adds	r3, r7, #4
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	430b      	orrs	r3, r1
 80031e6:	4925      	ldr	r1, [pc, #148]	; (800327c <HAL_RCC_OscConfig+0xc44>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]
 80031ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80031f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	fa93 f2a3 	rbit	r2, r3
 8003200:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003204:	601a      	str	r2, [r3, #0]
  return result;
 8003206:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800320a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800320c:	fab3 f383 	clz	r3, r3
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003216:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	461a      	mov	r2, r3
 800321e:	2301      	movs	r3, #1
 8003220:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003222:	f7fe ff27 	bl	8002074 <HAL_GetTick>
 8003226:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800322a:	e009      	b.n	8003240 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800322c:	f7fe ff22 	bl	8002074 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e109      	b.n	8003454 <HAL_RCC_OscConfig+0xe1c>
 8003240:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003244:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003248:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	fa93 f2a3 	rbit	r2, r3
 8003254:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003258:	601a      	str	r2, [r3, #0]
  return result;
 800325a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800325e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003260:	fab3 f383 	clz	r3, r3
 8003264:	b2db      	uxtb	r3, r3
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d105      	bne.n	8003280 <HAL_RCC_OscConfig+0xc48>
 8003274:	4b01      	ldr	r3, [pc, #4]	; (800327c <HAL_RCC_OscConfig+0xc44>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	e01e      	b.n	80032b8 <HAL_RCC_OscConfig+0xc80>
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000
 8003280:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003284:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	fa93 f2a3 	rbit	r2, r3
 8003294:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800329e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	fa93 f2a3 	rbit	r2, r3
 80032ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	4b6a      	ldr	r3, [pc, #424]	; (8003460 <HAL_RCC_OscConfig+0xe28>)
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80032bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032c0:	6011      	str	r1, [r2, #0]
 80032c2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	fa92 f1a2 	rbit	r1, r2
 80032cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032d0:	6011      	str	r1, [r2, #0]
  return result;
 80032d2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	fab2 f282 	clz	r2, r2
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	f042 0220 	orr.w	r2, r2, #32
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	f002 021f 	and.w	r2, r2, #31
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f202 	lsl.w	r2, r1, r2
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d09b      	beq.n	800322c <HAL_RCC_OscConfig+0xbf4>
 80032f4:	e0ad      	b.n	8003452 <HAL_RCC_OscConfig+0xe1a>
 80032f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003300:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	fa93 f2a3 	rbit	r2, r3
 800330a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800330e:	601a      	str	r2, [r3, #0]
  return result;
 8003310:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003314:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003320:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	461a      	mov	r2, r3
 8003328:	2300      	movs	r3, #0
 800332a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fe fea2 	bl	8002074 <HAL_GetTick>
 8003330:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003334:	e009      	b.n	800334a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003336:	f7fe fe9d 	bl	8002074 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e084      	b.n	8003454 <HAL_RCC_OscConfig+0xe1c>
 800334a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800334e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003352:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	fa93 f2a3 	rbit	r2, r3
 800335e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003362:	601a      	str	r2, [r3, #0]
  return result;
 8003364:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003368:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d102      	bne.n	8003384 <HAL_RCC_OscConfig+0xd4c>
 800337e:	4b38      	ldr	r3, [pc, #224]	; (8003460 <HAL_RCC_OscConfig+0xe28>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	e01b      	b.n	80033bc <HAL_RCC_OscConfig+0xd84>
 8003384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003388:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800338c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	fa93 f2a3 	rbit	r2, r3
 8003398:	f107 0320 	add.w	r3, r7, #32
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	f107 031c 	add.w	r3, r7, #28
 80033a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	f107 031c 	add.w	r3, r7, #28
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	fa93 f2a3 	rbit	r2, r3
 80033b2:	f107 0318 	add.w	r3, r7, #24
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	4b29      	ldr	r3, [pc, #164]	; (8003460 <HAL_RCC_OscConfig+0xe28>)
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	f107 0214 	add.w	r2, r7, #20
 80033c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033c4:	6011      	str	r1, [r2, #0]
 80033c6:	f107 0214 	add.w	r2, r7, #20
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	fa92 f1a2 	rbit	r1, r2
 80033d0:	f107 0210 	add.w	r2, r7, #16
 80033d4:	6011      	str	r1, [r2, #0]
  return result;
 80033d6:	f107 0210 	add.w	r2, r7, #16
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	fab2 f282 	clz	r2, r2
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	f042 0220 	orr.w	r2, r2, #32
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	f002 021f 	and.w	r2, r2, #31
 80033ec:	2101      	movs	r1, #1
 80033ee:	fa01 f202 	lsl.w	r2, r1, r2
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d19e      	bne.n	8003336 <HAL_RCC_OscConfig+0xcfe>
 80033f8:	e02b      	b.n	8003452 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033fa:	1d3b      	adds	r3, r7, #4
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e025      	b.n	8003454 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003408:	4b15      	ldr	r3, [pc, #84]	; (8003460 <HAL_RCC_OscConfig+0xe28>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003410:	4b13      	ldr	r3, [pc, #76]	; (8003460 <HAL_RCC_OscConfig+0xe28>)
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003418:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800341c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003420:	1d3b      	adds	r3, r7, #4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	429a      	cmp	r2, r3
 8003428:	d111      	bne.n	800344e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800342a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800342e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003438:	429a      	cmp	r2, r3
 800343a:	d108      	bne.n	800344e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800343c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003440:	f003 020f 	and.w	r2, r3, #15
 8003444:	1d3b      	adds	r3, r7, #4
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800344a:	429a      	cmp	r2, r3
 800344c:	d001      	beq.n	8003452 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000

08003464 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b09e      	sub	sp, #120	; 0x78
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e162      	b.n	8003742 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800347c:	4b90      	ldr	r3, [pc, #576]	; (80036c0 <HAL_RCC_ClockConfig+0x25c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d910      	bls.n	80034ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348a:	4b8d      	ldr	r3, [pc, #564]	; (80036c0 <HAL_RCC_ClockConfig+0x25c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 0207 	bic.w	r2, r3, #7
 8003492:	498b      	ldr	r1, [pc, #556]	; (80036c0 <HAL_RCC_ClockConfig+0x25c>)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	4313      	orrs	r3, r2
 8003498:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800349a:	4b89      	ldr	r3, [pc, #548]	; (80036c0 <HAL_RCC_ClockConfig+0x25c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d001      	beq.n	80034ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e14a      	b.n	8003742 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b8:	4b82      	ldr	r3, [pc, #520]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	497f      	ldr	r1, [pc, #508]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80dc 	beq.w	8003690 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d13c      	bne.n	800355a <HAL_RCC_ClockConfig+0xf6>
 80034e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034e8:	fa93 f3a3 	rbit	r3, r3
 80034ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f0:	fab3 f383 	clz	r3, r3
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d102      	bne.n	800350a <HAL_RCC_ClockConfig+0xa6>
 8003504:	4b6f      	ldr	r3, [pc, #444]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	e00f      	b.n	800352a <HAL_RCC_ClockConfig+0xc6>
 800350a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800350e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003512:	fa93 f3a3 	rbit	r3, r3
 8003516:	667b      	str	r3, [r7, #100]	; 0x64
 8003518:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800351c:	663b      	str	r3, [r7, #96]	; 0x60
 800351e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003520:	fa93 f3a3 	rbit	r3, r3
 8003524:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003526:	4b67      	ldr	r3, [pc, #412]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800352e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003530:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003532:	fa92 f2a2 	rbit	r2, r2
 8003536:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003538:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800353a:	fab2 f282 	clz	r2, r2
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	f042 0220 	orr.w	r2, r2, #32
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	f002 021f 	and.w	r2, r2, #31
 800354a:	2101      	movs	r1, #1
 800354c:	fa01 f202 	lsl.w	r2, r1, r2
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d17b      	bne.n	800364e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e0f3      	b.n	8003742 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d13c      	bne.n	80035dc <HAL_RCC_ClockConfig+0x178>
 8003562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003566:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b01      	cmp	r3, #1
 8003584:	d102      	bne.n	800358c <HAL_RCC_ClockConfig+0x128>
 8003586:	4b4f      	ldr	r3, [pc, #316]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	e00f      	b.n	80035ac <HAL_RCC_ClockConfig+0x148>
 800358c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003590:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003594:	fa93 f3a3 	rbit	r3, r3
 8003598:	647b      	str	r3, [r7, #68]	; 0x44
 800359a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800359e:	643b      	str	r3, [r7, #64]	; 0x40
 80035a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a8:	4b46      	ldr	r3, [pc, #280]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80035b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035b4:	fa92 f2a2 	rbit	r2, r2
 80035b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80035ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035bc:	fab2 f282 	clz	r2, r2
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	f042 0220 	orr.w	r2, r2, #32
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	f002 021f 	and.w	r2, r2, #31
 80035cc:	2101      	movs	r1, #1
 80035ce:	fa01 f202 	lsl.w	r2, r1, r2
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d13a      	bne.n	800364e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0b2      	b.n	8003742 <HAL_RCC_ClockConfig+0x2de>
 80035dc:	2302      	movs	r3, #2
 80035de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	fa93 f3a3 	rbit	r3, r3
 80035e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d102      	bne.n	8003604 <HAL_RCC_ClockConfig+0x1a0>
 80035fe:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	e00d      	b.n	8003620 <HAL_RCC_ClockConfig+0x1bc>
 8003604:	2302      	movs	r3, #2
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	fa93 f3a3 	rbit	r3, r3
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
 8003610:	2302      	movs	r3, #2
 8003612:	623b      	str	r3, [r7, #32]
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	4b29      	ldr	r3, [pc, #164]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	2202      	movs	r2, #2
 8003622:	61ba      	str	r2, [r7, #24]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	fa92 f2a2 	rbit	r2, r2
 800362a:	617a      	str	r2, [r7, #20]
  return result;
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	fab2 f282 	clz	r2, r2
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	f042 0220 	orr.w	r2, r2, #32
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	f002 021f 	and.w	r2, r2, #31
 800363e:	2101      	movs	r1, #1
 8003640:	fa01 f202 	lsl.w	r2, r1, r2
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e079      	b.n	8003742 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800364e:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f023 0203 	bic.w	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	491a      	ldr	r1, [pc, #104]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003660:	f7fe fd08 	bl	8002074 <HAL_GetTick>
 8003664:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	e00a      	b.n	800367e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003668:	f7fe fd04 	bl	8002074 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e061      	b.n	8003742 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 020c 	and.w	r2, r3, #12
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	429a      	cmp	r2, r3
 800368e:	d1eb      	bne.n	8003668 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_ClockConfig+0x25c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d214      	bcs.n	80036c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <HAL_RCC_ClockConfig+0x25c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 0207 	bic.w	r2, r3, #7
 80036a6:	4906      	ldr	r1, [pc, #24]	; (80036c0 <HAL_RCC_ClockConfig+0x25c>)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <HAL_RCC_ClockConfig+0x25c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e040      	b.n	8003742 <HAL_RCC_ClockConfig+0x2de>
 80036c0:	40022000 	.word	0x40022000
 80036c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <HAL_RCC_ClockConfig+0x2e8>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	491a      	ldr	r1, [pc, #104]	; (800374c <HAL_RCC_ClockConfig+0x2e8>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036f2:	4b16      	ldr	r3, [pc, #88]	; (800374c <HAL_RCC_ClockConfig+0x2e8>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4912      	ldr	r1, [pc, #72]	; (800374c <HAL_RCC_ClockConfig+0x2e8>)
 8003702:	4313      	orrs	r3, r2
 8003704:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003706:	f000 f829 	bl	800375c <HAL_RCC_GetSysClockFreq>
 800370a:	4601      	mov	r1, r0
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <HAL_RCC_ClockConfig+0x2e8>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003714:	22f0      	movs	r2, #240	; 0xf0
 8003716:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	fa92 f2a2 	rbit	r2, r2
 800371e:	60fa      	str	r2, [r7, #12]
  return result;
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	fab2 f282 	clz	r2, r2
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	40d3      	lsrs	r3, r2
 800372a:	4a09      	ldr	r2, [pc, #36]	; (8003750 <HAL_RCC_ClockConfig+0x2ec>)
 800372c:	5cd3      	ldrb	r3, [r2, r3]
 800372e:	fa21 f303 	lsr.w	r3, r1, r3
 8003732:	4a08      	ldr	r2, [pc, #32]	; (8003754 <HAL_RCC_ClockConfig+0x2f0>)
 8003734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003736:	4b08      	ldr	r3, [pc, #32]	; (8003758 <HAL_RCC_ClockConfig+0x2f4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe fc56 	bl	8001fec <HAL_InitTick>
  
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3778      	adds	r7, #120	; 0x78
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40021000 	.word	0x40021000
 8003750:	08007908 	.word	0x08007908
 8003754:	20000018 	.word	0x20000018
 8003758:	2000001c 	.word	0x2000001c

0800375c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800375c:	b480      	push	{r7}
 800375e:	b08b      	sub	sp, #44	; 0x2c
 8003760:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003776:	4b2a      	ldr	r3, [pc, #168]	; (8003820 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b04      	cmp	r3, #4
 8003784:	d002      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x30>
 8003786:	2b08      	cmp	r3, #8
 8003788:	d003      	beq.n	8003792 <HAL_RCC_GetSysClockFreq+0x36>
 800378a:	e03f      	b.n	800380c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800378c:	4b25      	ldr	r3, [pc, #148]	; (8003824 <HAL_RCC_GetSysClockFreq+0xc8>)
 800378e:	623b      	str	r3, [r7, #32]
      break;
 8003790:	e03f      	b.n	8003812 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003798:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800379c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	fa92 f2a2 	rbit	r2, r2
 80037a4:	607a      	str	r2, [r7, #4]
  return result;
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	fab2 f282 	clz	r2, r2
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	40d3      	lsrs	r3, r2
 80037b0:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037b2:	5cd3      	ldrb	r3, [r2, r3]
 80037b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80037b6:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	220f      	movs	r2, #15
 80037c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	fa92 f2a2 	rbit	r2, r2
 80037c8:	60fa      	str	r2, [r7, #12]
  return result;
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	fab2 f282 	clz	r2, r2
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	40d3      	lsrs	r3, r2
 80037d4:	4a15      	ldr	r2, [pc, #84]	; (800382c <HAL_RCC_GetSysClockFreq+0xd0>)
 80037d6:	5cd3      	ldrb	r3, [r2, r3]
 80037d8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037e4:	4a0f      	ldr	r2, [pc, #60]	; (8003824 <HAL_RCC_GetSysClockFreq+0xc8>)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fb02 f303 	mul.w	r3, r2, r3
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
 80037f4:	e007      	b.n	8003806 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037f6:	4a0b      	ldr	r2, [pc, #44]	; (8003824 <HAL_RCC_GetSysClockFreq+0xc8>)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	fb02 f303 	mul.w	r3, r2, r3
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	623b      	str	r3, [r7, #32]
      break;
 800380a:	e002      	b.n	8003812 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_RCC_GetSysClockFreq+0xc8>)
 800380e:	623b      	str	r3, [r7, #32]
      break;
 8003810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003812:	6a3b      	ldr	r3, [r7, #32]
}
 8003814:	4618      	mov	r0, r3
 8003816:	372c      	adds	r7, #44	; 0x2c
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	40021000 	.word	0x40021000
 8003824:	007a1200 	.word	0x007a1200
 8003828:	08007920 	.word	0x08007920
 800382c:	08007930 	.word	0x08007930

08003830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <HAL_RCC_GetHCLKFreq+0x14>)
 8003836:	681b      	ldr	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000018 	.word	0x20000018

08003848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800384e:	f7ff ffef 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8003852:	4601      	mov	r1, r0
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800385c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003860:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	fa92 f2a2 	rbit	r2, r2
 8003868:	603a      	str	r2, [r7, #0]
  return result;
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	fab2 f282 	clz	r2, r2
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	40d3      	lsrs	r3, r2
 8003874:	4a04      	ldr	r2, [pc, #16]	; (8003888 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003876:	5cd3      	ldrb	r3, [r2, r3]
 8003878:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40021000 	.word	0x40021000
 8003888:	08007918 	.word	0x08007918

0800388c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003892:	f7ff ffcd 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8003896:	4601      	mov	r1, r0
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80038a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80038a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	fa92 f2a2 	rbit	r2, r2
 80038ac:	603a      	str	r2, [r7, #0]
  return result;
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	fab2 f282 	clz	r2, r2
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	40d3      	lsrs	r3, r2
 80038b8:	4a04      	ldr	r2, [pc, #16]	; (80038cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80038ba:	5cd3      	ldrb	r3, [r2, r3]
 80038bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40021000 	.word	0x40021000
 80038cc:	08007918 	.word	0x08007918

080038d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b092      	sub	sp, #72	; 0x48
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80d7 	beq.w	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038f4:	4b4e      	ldr	r3, [pc, #312]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10e      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003900:	4b4b      	ldr	r3, [pc, #300]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	4a4a      	ldr	r2, [pc, #296]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390a:	61d3      	str	r3, [r2, #28]
 800390c:	4b48      	ldr	r3, [pc, #288]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003918:	2301      	movs	r3, #1
 800391a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391e:	4b45      	ldr	r3, [pc, #276]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d118      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800392a:	4b42      	ldr	r3, [pc, #264]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a41      	ldr	r2, [pc, #260]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003934:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003936:	f7fe fb9d 	bl	8002074 <HAL_GetTick>
 800393a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393c:	e008      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800393e:	f7fe fb99 	bl	8002074 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b64      	cmp	r3, #100	; 0x64
 800394a:	d901      	bls.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e1d6      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003950:	4b38      	ldr	r3, [pc, #224]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800395c:	4b34      	ldr	r3, [pc, #208]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003964:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8084 	beq.w	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003976:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003978:	429a      	cmp	r2, r3
 800397a:	d07c      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800397c:	4b2c      	ldr	r3, [pc, #176]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003984:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003986:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800398a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	4b26      	ldr	r3, [pc, #152]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	461a      	mov	r2, r3
 80039a6:	2301      	movs	r3, #1
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b2:	fa93 f3a3 	rbit	r3, r3
 80039b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80039b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	461a      	mov	r2, r3
 80039ca:	2300      	movs	r3, #0
 80039cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039ce:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d04b      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039de:	f7fe fb49 	bl	8002074 <HAL_GetTick>
 80039e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e4:	e00a      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e6:	f7fe fb45 	bl	8002074 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d901      	bls.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e180      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80039fc:	2302      	movs	r3, #2
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	fa93 f3a3 	rbit	r3, r3
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
 8003a08:	2302      	movs	r3, #2
 8003a0a:	623b      	str	r3, [r7, #32]
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	61fb      	str	r3, [r7, #28]
  return result;
 8003a14:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a16:	fab3 f383 	clz	r3, r3
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	f043 0302 	orr.w	r3, r3, #2
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d108      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003a2a:	4b01      	ldr	r3, [pc, #4]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	e00d      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40007000 	.word	0x40007000
 8003a38:	10908100 	.word	0x10908100
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	fa93 f3a3 	rbit	r3, r3
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	4ba0      	ldr	r3, [pc, #640]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	613a      	str	r2, [r7, #16]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	fa92 f2a2 	rbit	r2, r2
 8003a56:	60fa      	str	r2, [r7, #12]
  return result;
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	fab2 f282 	clz	r2, r2
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	f002 021f 	and.w	r2, r2, #31
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0b7      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a76:	4b95      	ldr	r3, [pc, #596]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	4992      	ldr	r1, [pc, #584]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d105      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a90:	4b8e      	ldr	r3, [pc, #568]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	4a8d      	ldr	r2, [pc, #564]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aa8:	4b88      	ldr	r3, [pc, #544]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	f023 0203 	bic.w	r2, r3, #3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4985      	ldr	r1, [pc, #532]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ac6:	4b81      	ldr	r3, [pc, #516]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	497e      	ldr	r1, [pc, #504]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ae4:	4b79      	ldr	r3, [pc, #484]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	4976      	ldr	r1, [pc, #472]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b02:	4b72      	ldr	r3, [pc, #456]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	f023 0210 	bic.w	r2, r3, #16
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	496f      	ldr	r1, [pc, #444]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003b20:	4b6a      	ldr	r3, [pc, #424]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2c:	4967      	ldr	r1, [pc, #412]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d008      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b3e:	4b63      	ldr	r3, [pc, #396]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f023 0220 	bic.w	r2, r3, #32
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	4960      	ldr	r1, [pc, #384]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b5c:	4b5b      	ldr	r3, [pc, #364]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	4958      	ldr	r1, [pc, #352]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d008      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b7a:	4b54      	ldr	r3, [pc, #336]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	4951      	ldr	r1, [pc, #324]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b98:	4b4c      	ldr	r3, [pc, #304]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	4949      	ldr	r1, [pc, #292]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bb6:	4b45      	ldr	r3, [pc, #276]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	4942      	ldr	r1, [pc, #264]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bd4:	4b3d      	ldr	r3, [pc, #244]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	493a      	ldr	r1, [pc, #232]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d008      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003bf2:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	4933      	ldr	r1, [pc, #204]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c10:	4b2e      	ldr	r3, [pc, #184]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1c:	492b      	ldr	r1, [pc, #172]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003c2e:	4b27      	ldr	r3, [pc, #156]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	4924      	ldr	r1, [pc, #144]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003c4c:	4b1f      	ldr	r3, [pc, #124]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	491c      	ldr	r1, [pc, #112]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003c6a:	4b18      	ldr	r3, [pc, #96]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	4915      	ldr	r1, [pc, #84]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003c88:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c94:	490d      	ldr	r1, [pc, #52]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003ca6:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb2:	4906      	ldr	r1, [pc, #24]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00c      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003cc4:	4b01      	ldr	r3, [pc, #4]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	e002      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd8:	490b      	ldr	r1, [pc, #44]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d008      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003cea:	4b07      	ldr	r3, [pc, #28]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf6:	4904      	ldr	r1, [pc, #16]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3748      	adds	r7, #72	; 0x48
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40021000 	.word	0x40021000

08003d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e01d      	b.n	8003d5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fe f84a 	bl	8001dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	f000 fc32 	bl	80045b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <HAL_TIM_Base_Start_IT+0x50>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b06      	cmp	r3, #6
 8003d8c:	d00b      	beq.n	8003da6 <HAL_TIM_Base_Start_IT+0x42>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d94:	d007      	beq.n	8003da6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	00010007 	.word	0x00010007

08003db8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0201 	bic.w	r2, r2, #1
 8003dce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6a1a      	ldr	r2, [r3, #32]
 8003dd6:	f241 1311 	movw	r3, #4369	; 0x1111
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10f      	bne.n	8003e00 <HAL_TIM_Base_Stop_IT+0x48>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6a1a      	ldr	r2, [r3, #32]
 8003de6:	f240 4344 	movw	r3, #1092	; 0x444
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d107      	bne.n	8003e00 <HAL_TIM_Base_Stop_IT+0x48>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0201 	bic.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e01d      	b.n	8003e5c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d106      	bne.n	8003e3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7fd ffa3 	bl	8001d80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f000 fbb1 	bl	80045b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2201      	movs	r2, #1
 8003e74:	6839      	ldr	r1, [r7, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 ff40 	bl	8004cfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a21      	ldr	r2, [pc, #132]	; (8003f08 <HAL_TIM_PWM_Start+0xa4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d018      	beq.n	8003eb8 <HAL_TIM_PWM_Start+0x54>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a20      	ldr	r2, [pc, #128]	; (8003f0c <HAL_TIM_PWM_Start+0xa8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d013      	beq.n	8003eb8 <HAL_TIM_PWM_Start+0x54>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1e      	ldr	r2, [pc, #120]	; (8003f10 <HAL_TIM_PWM_Start+0xac>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00e      	beq.n	8003eb8 <HAL_TIM_PWM_Start+0x54>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1d      	ldr	r2, [pc, #116]	; (8003f14 <HAL_TIM_PWM_Start+0xb0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d009      	beq.n	8003eb8 <HAL_TIM_PWM_Start+0x54>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1b      	ldr	r2, [pc, #108]	; (8003f18 <HAL_TIM_PWM_Start+0xb4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d004      	beq.n	8003eb8 <HAL_TIM_PWM_Start+0x54>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1a      	ldr	r2, [pc, #104]	; (8003f1c <HAL_TIM_PWM_Start+0xb8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d101      	bne.n	8003ebc <HAL_TIM_PWM_Start+0x58>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <HAL_TIM_PWM_Start+0x5a>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <HAL_TIM_PWM_Start+0xbc>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b06      	cmp	r3, #6
 8003ee2:	d00b      	beq.n	8003efc <HAL_TIM_PWM_Start+0x98>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eea:	d007      	beq.n	8003efc <HAL_TIM_PWM_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40012c00 	.word	0x40012c00
 8003f0c:	40013400 	.word	0x40013400
 8003f10:	40014000 	.word	0x40014000
 8003f14:	40014400 	.word	0x40014400
 8003f18:	40014800 	.word	0x40014800
 8003f1c:	40015000 	.word	0x40015000
 8003f20:	00010007 	.word	0x00010007

08003f24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e083      	b.n	8004040 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d106      	bne.n	8003f52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7fd fecf 	bl	8001cf0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2202      	movs	r2, #2
 8003f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003f68:	f023 0307 	bic.w	r3, r3, #7
 8003f6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3304      	adds	r3, #4
 8003f76:	4619      	mov	r1, r3
 8003f78:	4610      	mov	r0, r2
 8003f7a:	f000 fb1b 	bl	80045b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa6:	f023 0303 	bic.w	r3, r3, #3
 8003faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003fc4:	f023 030c 	bic.w	r3, r3, #12
 8003fc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	011a      	lsls	r2, r3, #4
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	031b      	lsls	r3, r3, #12
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004002:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800400a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	4313      	orrs	r3, r2
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <HAL_TIM_Encoder_Start_IT+0x16>
 8004058:	2b04      	cmp	r3, #4
 800405a:	d010      	beq.n	800407e <HAL_TIM_Encoder_Start_IT+0x36>
 800405c:	e01f      	b.n	800409e <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2201      	movs	r2, #1
 8004064:	2100      	movs	r1, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fe48 	bl	8004cfc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0202 	orr.w	r2, r2, #2
 800407a:	60da      	str	r2, [r3, #12]
      break;
 800407c:	e02e      	b.n	80040dc <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2201      	movs	r2, #1
 8004084:	2104      	movs	r1, #4
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fe38 	bl	8004cfc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0204 	orr.w	r2, r2, #4
 800409a:	60da      	str	r2, [r3, #12]
      break;
 800409c:	e01e      	b.n	80040dc <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2201      	movs	r2, #1
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fe28 	bl	8004cfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2201      	movs	r2, #1
 80040b2:	2104      	movs	r1, #4
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fe21 	bl	8004cfc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0202 	orr.w	r2, r2, #2
 80040c8:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0204 	orr.w	r2, r2, #4
 80040d8:	60da      	str	r2, [r3, #12]
      break;
 80040da:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b02      	cmp	r3, #2
 800410a:	d122      	bne.n	8004152 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b02      	cmp	r3, #2
 8004118:	d11b      	bne.n	8004152 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f06f 0202 	mvn.w	r2, #2
 8004122:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fa1d 	bl	8004578 <HAL_TIM_IC_CaptureCallback>
 800413e:	e005      	b.n	800414c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fa0f 	bl	8004564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fa20 	bl	800458c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b04      	cmp	r3, #4
 800415e:	d122      	bne.n	80041a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b04      	cmp	r3, #4
 800416c:	d11b      	bne.n	80041a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f06f 0204 	mvn.w	r2, #4
 8004176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f9f3 	bl	8004578 <HAL_TIM_IC_CaptureCallback>
 8004192:	e005      	b.n	80041a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f9e5 	bl	8004564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f9f6 	bl	800458c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d122      	bne.n	80041fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d11b      	bne.n	80041fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f06f 0208 	mvn.w	r2, #8
 80041ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2204      	movs	r2, #4
 80041d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f9c9 	bl	8004578 <HAL_TIM_IC_CaptureCallback>
 80041e6:	e005      	b.n	80041f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f9bb 	bl	8004564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f9cc 	bl	800458c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b10      	cmp	r3, #16
 8004206:	d122      	bne.n	800424e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b10      	cmp	r3, #16
 8004214:	d11b      	bne.n	800424e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f06f 0210 	mvn.w	r2, #16
 800421e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2208      	movs	r2, #8
 8004224:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f99f 	bl	8004578 <HAL_TIM_IC_CaptureCallback>
 800423a:	e005      	b.n	8004248 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f991 	bl	8004564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f9a2 	bl	800458c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b01      	cmp	r3, #1
 800425a:	d10e      	bne.n	800427a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b01      	cmp	r3, #1
 8004268:	d107      	bne.n	800427a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f06f 0201 	mvn.w	r2, #1
 8004272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7fc fd9f 	bl	8000db8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004284:	2b80      	cmp	r3, #128	; 0x80
 8004286:	d10e      	bne.n	80042a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004292:	2b80      	cmp	r3, #128	; 0x80
 8004294:	d107      	bne.n	80042a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800429e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fde7 	bl	8004e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b4:	d10e      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c0:	2b80      	cmp	r3, #128	; 0x80
 80042c2:	d107      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fdda 	bl	8004e88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042de:	2b40      	cmp	r3, #64	; 0x40
 80042e0:	d10e      	bne.n	8004300 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	d107      	bne.n	8004300 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f950 	bl	80045a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b20      	cmp	r3, #32
 800430c:	d10e      	bne.n	800432c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b20      	cmp	r3, #32
 800431a:	d107      	bne.n	800432c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0220 	mvn.w	r2, #32
 8004324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fd9a 	bl	8004e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004346:	2b01      	cmp	r3, #1
 8004348:	d101      	bne.n	800434e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800434a:	2302      	movs	r3, #2
 800434c:	e105      	b.n	800455a <HAL_TIM_PWM_ConfigChannel+0x226>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2202      	movs	r2, #2
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b14      	cmp	r3, #20
 8004362:	f200 80f0 	bhi.w	8004546 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004366:	a201      	add	r2, pc, #4	; (adr r2, 800436c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436c:	080043c1 	.word	0x080043c1
 8004370:	08004547 	.word	0x08004547
 8004374:	08004547 	.word	0x08004547
 8004378:	08004547 	.word	0x08004547
 800437c:	08004401 	.word	0x08004401
 8004380:	08004547 	.word	0x08004547
 8004384:	08004547 	.word	0x08004547
 8004388:	08004547 	.word	0x08004547
 800438c:	08004443 	.word	0x08004443
 8004390:	08004547 	.word	0x08004547
 8004394:	08004547 	.word	0x08004547
 8004398:	08004547 	.word	0x08004547
 800439c:	08004483 	.word	0x08004483
 80043a0:	08004547 	.word	0x08004547
 80043a4:	08004547 	.word	0x08004547
 80043a8:	08004547 	.word	0x08004547
 80043ac:	080044c5 	.word	0x080044c5
 80043b0:	08004547 	.word	0x08004547
 80043b4:	08004547 	.word	0x08004547
 80043b8:	08004547 	.word	0x08004547
 80043bc:	08004505 	.word	0x08004505
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f992 	bl	80046f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0208 	orr.w	r2, r2, #8
 80043da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0204 	bic.w	r2, r2, #4
 80043ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6999      	ldr	r1, [r3, #24]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	619a      	str	r2, [r3, #24]
      break;
 80043fe:	e0a3      	b.n	8004548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fa0c 	bl	8004824 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800441a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6999      	ldr	r1, [r3, #24]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	021a      	lsls	r2, r3, #8
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	619a      	str	r2, [r3, #24]
      break;
 8004440:	e082      	b.n	8004548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68b9      	ldr	r1, [r7, #8]
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fa7f 	bl	800494c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69da      	ldr	r2, [r3, #28]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0208 	orr.w	r2, r2, #8
 800445c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0204 	bic.w	r2, r2, #4
 800446c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69d9      	ldr	r1, [r3, #28]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	61da      	str	r2, [r3, #28]
      break;
 8004480:	e062      	b.n	8004548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	4618      	mov	r0, r3
 800448a:	f000 faf1 	bl	8004a70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800449c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69d9      	ldr	r1, [r3, #28]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	021a      	lsls	r2, r3, #8
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	61da      	str	r2, [r3, #28]
      break;
 80044c2:	e041      	b.n	8004548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fb40 	bl	8004b50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0208 	orr.w	r2, r2, #8
 80044de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0204 	bic.w	r2, r2, #4
 80044ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004502:	e021      	b.n	8004548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fb8a 	bl	8004c24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800451e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	021a      	lsls	r2, r3, #8
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004544:	e000      	b.n	8004548 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004546:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop

08004564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a42      	ldr	r2, [pc, #264]	; (80046d0 <TIM_Base_SetConfig+0x11c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d013      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d2:	d00f      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a3f      	ldr	r2, [pc, #252]	; (80046d4 <TIM_Base_SetConfig+0x120>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00b      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a3e      	ldr	r2, [pc, #248]	; (80046d8 <TIM_Base_SetConfig+0x124>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d007      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a3d      	ldr	r2, [pc, #244]	; (80046dc <TIM_Base_SetConfig+0x128>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d003      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a3c      	ldr	r2, [pc, #240]	; (80046e0 <TIM_Base_SetConfig+0x12c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d108      	bne.n	8004606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a31      	ldr	r2, [pc, #196]	; (80046d0 <TIM_Base_SetConfig+0x11c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d01f      	beq.n	800464e <TIM_Base_SetConfig+0x9a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004614:	d01b      	beq.n	800464e <TIM_Base_SetConfig+0x9a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a2e      	ldr	r2, [pc, #184]	; (80046d4 <TIM_Base_SetConfig+0x120>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d017      	beq.n	800464e <TIM_Base_SetConfig+0x9a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a2d      	ldr	r2, [pc, #180]	; (80046d8 <TIM_Base_SetConfig+0x124>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <TIM_Base_SetConfig+0x9a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a2c      	ldr	r2, [pc, #176]	; (80046dc <TIM_Base_SetConfig+0x128>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00f      	beq.n	800464e <TIM_Base_SetConfig+0x9a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a2c      	ldr	r2, [pc, #176]	; (80046e4 <TIM_Base_SetConfig+0x130>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00b      	beq.n	800464e <TIM_Base_SetConfig+0x9a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a2b      	ldr	r2, [pc, #172]	; (80046e8 <TIM_Base_SetConfig+0x134>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d007      	beq.n	800464e <TIM_Base_SetConfig+0x9a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a2a      	ldr	r2, [pc, #168]	; (80046ec <TIM_Base_SetConfig+0x138>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d003      	beq.n	800464e <TIM_Base_SetConfig+0x9a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a25      	ldr	r2, [pc, #148]	; (80046e0 <TIM_Base_SetConfig+0x12c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d108      	bne.n	8004660 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a12      	ldr	r2, [pc, #72]	; (80046d0 <TIM_Base_SetConfig+0x11c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d013      	beq.n	80046b4 <TIM_Base_SetConfig+0x100>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a13      	ldr	r2, [pc, #76]	; (80046dc <TIM_Base_SetConfig+0x128>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00f      	beq.n	80046b4 <TIM_Base_SetConfig+0x100>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a13      	ldr	r2, [pc, #76]	; (80046e4 <TIM_Base_SetConfig+0x130>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00b      	beq.n	80046b4 <TIM_Base_SetConfig+0x100>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a12      	ldr	r2, [pc, #72]	; (80046e8 <TIM_Base_SetConfig+0x134>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d007      	beq.n	80046b4 <TIM_Base_SetConfig+0x100>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a11      	ldr	r2, [pc, #68]	; (80046ec <TIM_Base_SetConfig+0x138>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d003      	beq.n	80046b4 <TIM_Base_SetConfig+0x100>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a0c      	ldr	r2, [pc, #48]	; (80046e0 <TIM_Base_SetConfig+0x12c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d103      	bne.n	80046bc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	615a      	str	r2, [r3, #20]
}
 80046c2:	bf00      	nop
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	40012c00 	.word	0x40012c00
 80046d4:	40000400 	.word	0x40000400
 80046d8:	40000800 	.word	0x40000800
 80046dc:	40013400 	.word	0x40013400
 80046e0:	40015000 	.word	0x40015000
 80046e4:	40014000 	.word	0x40014000
 80046e8:	40014400 	.word	0x40014400
 80046ec:	40014800 	.word	0x40014800

080046f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	f023 0201 	bic.w	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800471e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0303 	bic.w	r3, r3, #3
 800472a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f023 0302 	bic.w	r3, r3, #2
 800473c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a30      	ldr	r2, [pc, #192]	; (800480c <TIM_OC1_SetConfig+0x11c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d013      	beq.n	8004778 <TIM_OC1_SetConfig+0x88>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a2f      	ldr	r2, [pc, #188]	; (8004810 <TIM_OC1_SetConfig+0x120>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00f      	beq.n	8004778 <TIM_OC1_SetConfig+0x88>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a2e      	ldr	r2, [pc, #184]	; (8004814 <TIM_OC1_SetConfig+0x124>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00b      	beq.n	8004778 <TIM_OC1_SetConfig+0x88>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a2d      	ldr	r2, [pc, #180]	; (8004818 <TIM_OC1_SetConfig+0x128>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d007      	beq.n	8004778 <TIM_OC1_SetConfig+0x88>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a2c      	ldr	r2, [pc, #176]	; (800481c <TIM_OC1_SetConfig+0x12c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_OC1_SetConfig+0x88>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a2b      	ldr	r2, [pc, #172]	; (8004820 <TIM_OC1_SetConfig+0x130>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d10c      	bne.n	8004792 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f023 0308 	bic.w	r3, r3, #8
 800477e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f023 0304 	bic.w	r3, r3, #4
 8004790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a1d      	ldr	r2, [pc, #116]	; (800480c <TIM_OC1_SetConfig+0x11c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d013      	beq.n	80047c2 <TIM_OC1_SetConfig+0xd2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a1c      	ldr	r2, [pc, #112]	; (8004810 <TIM_OC1_SetConfig+0x120>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00f      	beq.n	80047c2 <TIM_OC1_SetConfig+0xd2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a1b      	ldr	r2, [pc, #108]	; (8004814 <TIM_OC1_SetConfig+0x124>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00b      	beq.n	80047c2 <TIM_OC1_SetConfig+0xd2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a1a      	ldr	r2, [pc, #104]	; (8004818 <TIM_OC1_SetConfig+0x128>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d007      	beq.n	80047c2 <TIM_OC1_SetConfig+0xd2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a19      	ldr	r2, [pc, #100]	; (800481c <TIM_OC1_SetConfig+0x12c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d003      	beq.n	80047c2 <TIM_OC1_SetConfig+0xd2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a18      	ldr	r2, [pc, #96]	; (8004820 <TIM_OC1_SetConfig+0x130>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d111      	bne.n	80047e6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	621a      	str	r2, [r3, #32]
}
 8004800:	bf00      	nop
 8004802:	371c      	adds	r7, #28
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	40012c00 	.word	0x40012c00
 8004810:	40013400 	.word	0x40013400
 8004814:	40014000 	.word	0x40014000
 8004818:	40014400 	.word	0x40014400
 800481c:	40014800 	.word	0x40014800
 8004820:	40015000 	.word	0x40015000

08004824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f023 0210 	bic.w	r2, r3, #16
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f023 0320 	bic.w	r3, r3, #32
 8004872:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a2c      	ldr	r2, [pc, #176]	; (8004934 <TIM_OC2_SetConfig+0x110>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d007      	beq.n	8004898 <TIM_OC2_SetConfig+0x74>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a2b      	ldr	r2, [pc, #172]	; (8004938 <TIM_OC2_SetConfig+0x114>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <TIM_OC2_SetConfig+0x74>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a2a      	ldr	r2, [pc, #168]	; (800493c <TIM_OC2_SetConfig+0x118>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d10d      	bne.n	80048b4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800489e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a1f      	ldr	r2, [pc, #124]	; (8004934 <TIM_OC2_SetConfig+0x110>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d013      	beq.n	80048e4 <TIM_OC2_SetConfig+0xc0>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a1e      	ldr	r2, [pc, #120]	; (8004938 <TIM_OC2_SetConfig+0x114>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00f      	beq.n	80048e4 <TIM_OC2_SetConfig+0xc0>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a1e      	ldr	r2, [pc, #120]	; (8004940 <TIM_OC2_SetConfig+0x11c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d00b      	beq.n	80048e4 <TIM_OC2_SetConfig+0xc0>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a1d      	ldr	r2, [pc, #116]	; (8004944 <TIM_OC2_SetConfig+0x120>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d007      	beq.n	80048e4 <TIM_OC2_SetConfig+0xc0>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a1c      	ldr	r2, [pc, #112]	; (8004948 <TIM_OC2_SetConfig+0x124>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d003      	beq.n	80048e4 <TIM_OC2_SetConfig+0xc0>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a17      	ldr	r2, [pc, #92]	; (800493c <TIM_OC2_SetConfig+0x118>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d113      	bne.n	800490c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048ea:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048f2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	621a      	str	r2, [r3, #32]
}
 8004926:	bf00      	nop
 8004928:	371c      	adds	r7, #28
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40012c00 	.word	0x40012c00
 8004938:	40013400 	.word	0x40013400
 800493c:	40015000 	.word	0x40015000
 8004940:	40014000 	.word	0x40014000
 8004944:	40014400 	.word	0x40014400
 8004948:	40014800 	.word	0x40014800

0800494c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800497a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0303 	bic.w	r3, r3, #3
 8004986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2b      	ldr	r2, [pc, #172]	; (8004a58 <TIM_OC3_SetConfig+0x10c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <TIM_OC3_SetConfig+0x72>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a2a      	ldr	r2, [pc, #168]	; (8004a5c <TIM_OC3_SetConfig+0x110>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_OC3_SetConfig+0x72>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a29      	ldr	r2, [pc, #164]	; (8004a60 <TIM_OC3_SetConfig+0x114>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d10d      	bne.n	80049da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049d8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1e      	ldr	r2, [pc, #120]	; (8004a58 <TIM_OC3_SetConfig+0x10c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <TIM_OC3_SetConfig+0xbe>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a1d      	ldr	r2, [pc, #116]	; (8004a5c <TIM_OC3_SetConfig+0x110>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00f      	beq.n	8004a0a <TIM_OC3_SetConfig+0xbe>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a1d      	ldr	r2, [pc, #116]	; (8004a64 <TIM_OC3_SetConfig+0x118>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00b      	beq.n	8004a0a <TIM_OC3_SetConfig+0xbe>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a1c      	ldr	r2, [pc, #112]	; (8004a68 <TIM_OC3_SetConfig+0x11c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d007      	beq.n	8004a0a <TIM_OC3_SetConfig+0xbe>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a1b      	ldr	r2, [pc, #108]	; (8004a6c <TIM_OC3_SetConfig+0x120>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d003      	beq.n	8004a0a <TIM_OC3_SetConfig+0xbe>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a16      	ldr	r2, [pc, #88]	; (8004a60 <TIM_OC3_SetConfig+0x114>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d113      	bne.n	8004a32 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	621a      	str	r2, [r3, #32]
}
 8004a4c:	bf00      	nop
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	40012c00 	.word	0x40012c00
 8004a5c:	40013400 	.word	0x40013400
 8004a60:	40015000 	.word	0x40015000
 8004a64:	40014000 	.word	0x40014000
 8004a68:	40014400 	.word	0x40014400
 8004a6c:	40014800 	.word	0x40014800

08004a70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004abe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	031b      	lsls	r3, r3, #12
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a1a      	ldr	r2, [pc, #104]	; (8004b38 <TIM_OC4_SetConfig+0xc8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d013      	beq.n	8004afc <TIM_OC4_SetConfig+0x8c>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a19      	ldr	r2, [pc, #100]	; (8004b3c <TIM_OC4_SetConfig+0xcc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00f      	beq.n	8004afc <TIM_OC4_SetConfig+0x8c>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a18      	ldr	r2, [pc, #96]	; (8004b40 <TIM_OC4_SetConfig+0xd0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00b      	beq.n	8004afc <TIM_OC4_SetConfig+0x8c>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <TIM_OC4_SetConfig+0xd4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d007      	beq.n	8004afc <TIM_OC4_SetConfig+0x8c>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a16      	ldr	r2, [pc, #88]	; (8004b48 <TIM_OC4_SetConfig+0xd8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <TIM_OC4_SetConfig+0x8c>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a15      	ldr	r2, [pc, #84]	; (8004b4c <TIM_OC4_SetConfig+0xdc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d109      	bne.n	8004b10 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	40013400 	.word	0x40013400
 8004b40:	40014000 	.word	0x40014000
 8004b44:	40014400 	.word	0x40014400
 8004b48:	40014800 	.word	0x40014800
 8004b4c:	40015000 	.word	0x40015000

08004b50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	041b      	lsls	r3, r3, #16
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <TIM_OC5_SetConfig+0xbc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <TIM_OC5_SetConfig+0x82>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a18      	ldr	r2, [pc, #96]	; (8004c10 <TIM_OC5_SetConfig+0xc0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00f      	beq.n	8004bd2 <TIM_OC5_SetConfig+0x82>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a17      	ldr	r2, [pc, #92]	; (8004c14 <TIM_OC5_SetConfig+0xc4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00b      	beq.n	8004bd2 <TIM_OC5_SetConfig+0x82>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a16      	ldr	r2, [pc, #88]	; (8004c18 <TIM_OC5_SetConfig+0xc8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d007      	beq.n	8004bd2 <TIM_OC5_SetConfig+0x82>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <TIM_OC5_SetConfig+0xcc>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d003      	beq.n	8004bd2 <TIM_OC5_SetConfig+0x82>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <TIM_OC5_SetConfig+0xd0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d109      	bne.n	8004be6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	621a      	str	r2, [r3, #32]
}
 8004c00:	bf00      	nop
 8004c02:	371c      	adds	r7, #28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40013400 	.word	0x40013400
 8004c14:	40014000 	.word	0x40014000
 8004c18:	40014400 	.word	0x40014400
 8004c1c:	40014800 	.word	0x40014800
 8004c20:	40015000 	.word	0x40015000

08004c24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	021b      	lsls	r3, r3, #8
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	051b      	lsls	r3, r3, #20
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ce4 <TIM_OC6_SetConfig+0xc0>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <TIM_OC6_SetConfig+0x84>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a19      	ldr	r2, [pc, #100]	; (8004ce8 <TIM_OC6_SetConfig+0xc4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00f      	beq.n	8004ca8 <TIM_OC6_SetConfig+0x84>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a18      	ldr	r2, [pc, #96]	; (8004cec <TIM_OC6_SetConfig+0xc8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00b      	beq.n	8004ca8 <TIM_OC6_SetConfig+0x84>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <TIM_OC6_SetConfig+0xcc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d007      	beq.n	8004ca8 <TIM_OC6_SetConfig+0x84>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a16      	ldr	r2, [pc, #88]	; (8004cf4 <TIM_OC6_SetConfig+0xd0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <TIM_OC6_SetConfig+0x84>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a15      	ldr	r2, [pc, #84]	; (8004cf8 <TIM_OC6_SetConfig+0xd4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d109      	bne.n	8004cbc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	029b      	lsls	r3, r3, #10
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	621a      	str	r2, [r3, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40013400 	.word	0x40013400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40014400 	.word	0x40014400
 8004cf4:	40014800 	.word	0x40014800
 8004cf8:	40015000 	.word	0x40015000

08004cfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f003 031f 	and.w	r3, r3, #31
 8004d0e:	2201      	movs	r2, #1
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1a      	ldr	r2, [r3, #32]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	401a      	ands	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a1a      	ldr	r2, [r3, #32]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	fa01 f303 	lsl.w	r3, r1, r3
 8004d34:	431a      	orrs	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	621a      	str	r2, [r3, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
	...

08004d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e06d      	b.n	8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a30      	ldr	r2, [pc, #192]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d009      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a2f      	ldr	r2, [pc, #188]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d004      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a2d      	ldr	r2, [pc, #180]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d108      	bne.n	8004db0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004da4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1e      	ldr	r2, [pc, #120]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d01d      	beq.n	8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ddc:	d018      	beq.n	8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a1c      	ldr	r2, [pc, #112]	; (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d013      	beq.n	8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a1a      	ldr	r2, [pc, #104]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00e      	beq.n	8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a15      	ldr	r2, [pc, #84]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d009      	beq.n	8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a16      	ldr	r2, [pc, #88]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d004      	beq.n	8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a11      	ldr	r2, [pc, #68]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d10c      	bne.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	40012c00 	.word	0x40012c00
 8004e4c:	40013400 	.word	0x40013400
 8004e50:	40015000 	.word	0x40015000
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800
 8004e5c:	40014000 	.word	0x40014000

08004e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e040      	b.n	8004f30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fd f812 	bl	8001ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2224      	movs	r2, #36	; 0x24
 8004ec8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0201 	bic.w	r2, r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f8c0 	bl	8005060 <UART_SetConfig>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e022      	b.n	8004f30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 face 	bl	8005494 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fb55 	bl	80055d8 <UART_CheckIdleState>
 8004f2e:	4603      	mov	r3, r0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08a      	sub	sp, #40	; 0x28
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	4613      	mov	r3, r2
 8004f46:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	f040 8081 	bne.w	8005054 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_UART_Transmit+0x26>
 8004f58:	88fb      	ldrh	r3, [r7, #6]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e079      	b.n	8005056 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_UART_Transmit+0x38>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e072      	b.n	8005056 <HAL_UART_Transmit+0x11e>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2221      	movs	r2, #33	; 0x21
 8004f82:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004f84:	f7fd f876 	bl	8002074 <HAL_GetTick>
 8004f88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	88fa      	ldrh	r2, [r7, #6]
 8004f8e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	88fa      	ldrh	r2, [r7, #6]
 8004f96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa2:	d108      	bne.n	8004fb6 <HAL_UART_Transmit+0x7e>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d104      	bne.n	8004fb6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	61bb      	str	r3, [r7, #24]
 8004fb4:	e003      	b.n	8004fbe <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fbe:	e02d      	b.n	800501c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2180      	movs	r1, #128	; 0x80
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 fb49 	bl	8005662 <UART_WaitOnFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e03d      	b.n	8005056 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10b      	bne.n	8004ff8 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	881a      	ldrh	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fec:	b292      	uxth	r2, r2
 8004fee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	3302      	adds	r3, #2
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	e008      	b.n	800500a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	781a      	ldrb	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	b292      	uxth	r2, r2
 8005002:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	3301      	adds	r3, #1
 8005008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005010:	b29b      	uxth	r3, r3
 8005012:	3b01      	subs	r3, #1
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1cb      	bne.n	8004fc0 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2200      	movs	r2, #0
 8005030:	2140      	movs	r1, #64	; 0x40
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 fb15 	bl	8005662 <UART_WaitOnFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e009      	b.n	8005056 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2220      	movs	r2, #32
 8005046:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	e000      	b.n	8005056 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005054:	2302      	movs	r3, #2
  }
}
 8005056:	4618      	mov	r0, r3
 8005058:	3720      	adds	r7, #32
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005068:	2300      	movs	r3, #0
 800506a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	4313      	orrs	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4bac      	ldr	r3, [pc, #688]	; (8005340 <UART_SetConfig+0x2e0>)
 8005090:	4013      	ands	r3, r2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6812      	ldr	r2, [r2, #0]
 8005096:	6939      	ldr	r1, [r7, #16]
 8005098:	430b      	orrs	r3, r1
 800509a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a9a      	ldr	r2, [pc, #616]	; (8005344 <UART_SetConfig+0x2e4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d121      	bne.n	8005124 <UART_SetConfig+0xc4>
 80050e0:	4b99      	ldr	r3, [pc, #612]	; (8005348 <UART_SetConfig+0x2e8>)
 80050e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d817      	bhi.n	800511c <UART_SetConfig+0xbc>
 80050ec:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <UART_SetConfig+0x94>)
 80050ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f2:	bf00      	nop
 80050f4:	08005105 	.word	0x08005105
 80050f8:	08005111 	.word	0x08005111
 80050fc:	08005117 	.word	0x08005117
 8005100:	0800510b 	.word	0x0800510b
 8005104:	2301      	movs	r3, #1
 8005106:	77fb      	strb	r3, [r7, #31]
 8005108:	e0b2      	b.n	8005270 <UART_SetConfig+0x210>
 800510a:	2302      	movs	r3, #2
 800510c:	77fb      	strb	r3, [r7, #31]
 800510e:	e0af      	b.n	8005270 <UART_SetConfig+0x210>
 8005110:	2304      	movs	r3, #4
 8005112:	77fb      	strb	r3, [r7, #31]
 8005114:	e0ac      	b.n	8005270 <UART_SetConfig+0x210>
 8005116:	2308      	movs	r3, #8
 8005118:	77fb      	strb	r3, [r7, #31]
 800511a:	e0a9      	b.n	8005270 <UART_SetConfig+0x210>
 800511c:	2310      	movs	r3, #16
 800511e:	77fb      	strb	r3, [r7, #31]
 8005120:	bf00      	nop
 8005122:	e0a5      	b.n	8005270 <UART_SetConfig+0x210>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a88      	ldr	r2, [pc, #544]	; (800534c <UART_SetConfig+0x2ec>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d123      	bne.n	8005176 <UART_SetConfig+0x116>
 800512e:	4b86      	ldr	r3, [pc, #536]	; (8005348 <UART_SetConfig+0x2e8>)
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513a:	d012      	beq.n	8005162 <UART_SetConfig+0x102>
 800513c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005140:	d802      	bhi.n	8005148 <UART_SetConfig+0xe8>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d007      	beq.n	8005156 <UART_SetConfig+0xf6>
 8005146:	e012      	b.n	800516e <UART_SetConfig+0x10e>
 8005148:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800514c:	d00c      	beq.n	8005168 <UART_SetConfig+0x108>
 800514e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005152:	d003      	beq.n	800515c <UART_SetConfig+0xfc>
 8005154:	e00b      	b.n	800516e <UART_SetConfig+0x10e>
 8005156:	2300      	movs	r3, #0
 8005158:	77fb      	strb	r3, [r7, #31]
 800515a:	e089      	b.n	8005270 <UART_SetConfig+0x210>
 800515c:	2302      	movs	r3, #2
 800515e:	77fb      	strb	r3, [r7, #31]
 8005160:	e086      	b.n	8005270 <UART_SetConfig+0x210>
 8005162:	2304      	movs	r3, #4
 8005164:	77fb      	strb	r3, [r7, #31]
 8005166:	e083      	b.n	8005270 <UART_SetConfig+0x210>
 8005168:	2308      	movs	r3, #8
 800516a:	77fb      	strb	r3, [r7, #31]
 800516c:	e080      	b.n	8005270 <UART_SetConfig+0x210>
 800516e:	2310      	movs	r3, #16
 8005170:	77fb      	strb	r3, [r7, #31]
 8005172:	bf00      	nop
 8005174:	e07c      	b.n	8005270 <UART_SetConfig+0x210>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a75      	ldr	r2, [pc, #468]	; (8005350 <UART_SetConfig+0x2f0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d123      	bne.n	80051c8 <UART_SetConfig+0x168>
 8005180:	4b71      	ldr	r3, [pc, #452]	; (8005348 <UART_SetConfig+0x2e8>)
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005188:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800518c:	d012      	beq.n	80051b4 <UART_SetConfig+0x154>
 800518e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005192:	d802      	bhi.n	800519a <UART_SetConfig+0x13a>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <UART_SetConfig+0x148>
 8005198:	e012      	b.n	80051c0 <UART_SetConfig+0x160>
 800519a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800519e:	d00c      	beq.n	80051ba <UART_SetConfig+0x15a>
 80051a0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80051a4:	d003      	beq.n	80051ae <UART_SetConfig+0x14e>
 80051a6:	e00b      	b.n	80051c0 <UART_SetConfig+0x160>
 80051a8:	2300      	movs	r3, #0
 80051aa:	77fb      	strb	r3, [r7, #31]
 80051ac:	e060      	b.n	8005270 <UART_SetConfig+0x210>
 80051ae:	2302      	movs	r3, #2
 80051b0:	77fb      	strb	r3, [r7, #31]
 80051b2:	e05d      	b.n	8005270 <UART_SetConfig+0x210>
 80051b4:	2304      	movs	r3, #4
 80051b6:	77fb      	strb	r3, [r7, #31]
 80051b8:	e05a      	b.n	8005270 <UART_SetConfig+0x210>
 80051ba:	2308      	movs	r3, #8
 80051bc:	77fb      	strb	r3, [r7, #31]
 80051be:	e057      	b.n	8005270 <UART_SetConfig+0x210>
 80051c0:	2310      	movs	r3, #16
 80051c2:	77fb      	strb	r3, [r7, #31]
 80051c4:	bf00      	nop
 80051c6:	e053      	b.n	8005270 <UART_SetConfig+0x210>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a61      	ldr	r2, [pc, #388]	; (8005354 <UART_SetConfig+0x2f4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d123      	bne.n	800521a <UART_SetConfig+0x1ba>
 80051d2:	4b5d      	ldr	r3, [pc, #372]	; (8005348 <UART_SetConfig+0x2e8>)
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80051da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051de:	d012      	beq.n	8005206 <UART_SetConfig+0x1a6>
 80051e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051e4:	d802      	bhi.n	80051ec <UART_SetConfig+0x18c>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <UART_SetConfig+0x19a>
 80051ea:	e012      	b.n	8005212 <UART_SetConfig+0x1b2>
 80051ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051f0:	d00c      	beq.n	800520c <UART_SetConfig+0x1ac>
 80051f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051f6:	d003      	beq.n	8005200 <UART_SetConfig+0x1a0>
 80051f8:	e00b      	b.n	8005212 <UART_SetConfig+0x1b2>
 80051fa:	2300      	movs	r3, #0
 80051fc:	77fb      	strb	r3, [r7, #31]
 80051fe:	e037      	b.n	8005270 <UART_SetConfig+0x210>
 8005200:	2302      	movs	r3, #2
 8005202:	77fb      	strb	r3, [r7, #31]
 8005204:	e034      	b.n	8005270 <UART_SetConfig+0x210>
 8005206:	2304      	movs	r3, #4
 8005208:	77fb      	strb	r3, [r7, #31]
 800520a:	e031      	b.n	8005270 <UART_SetConfig+0x210>
 800520c:	2308      	movs	r3, #8
 800520e:	77fb      	strb	r3, [r7, #31]
 8005210:	e02e      	b.n	8005270 <UART_SetConfig+0x210>
 8005212:	2310      	movs	r3, #16
 8005214:	77fb      	strb	r3, [r7, #31]
 8005216:	bf00      	nop
 8005218:	e02a      	b.n	8005270 <UART_SetConfig+0x210>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a4e      	ldr	r2, [pc, #312]	; (8005358 <UART_SetConfig+0x2f8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d123      	bne.n	800526c <UART_SetConfig+0x20c>
 8005224:	4b48      	ldr	r3, [pc, #288]	; (8005348 <UART_SetConfig+0x2e8>)
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800522c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005230:	d012      	beq.n	8005258 <UART_SetConfig+0x1f8>
 8005232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005236:	d802      	bhi.n	800523e <UART_SetConfig+0x1de>
 8005238:	2b00      	cmp	r3, #0
 800523a:	d007      	beq.n	800524c <UART_SetConfig+0x1ec>
 800523c:	e012      	b.n	8005264 <UART_SetConfig+0x204>
 800523e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005242:	d00c      	beq.n	800525e <UART_SetConfig+0x1fe>
 8005244:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005248:	d003      	beq.n	8005252 <UART_SetConfig+0x1f2>
 800524a:	e00b      	b.n	8005264 <UART_SetConfig+0x204>
 800524c:	2300      	movs	r3, #0
 800524e:	77fb      	strb	r3, [r7, #31]
 8005250:	e00e      	b.n	8005270 <UART_SetConfig+0x210>
 8005252:	2302      	movs	r3, #2
 8005254:	77fb      	strb	r3, [r7, #31]
 8005256:	e00b      	b.n	8005270 <UART_SetConfig+0x210>
 8005258:	2304      	movs	r3, #4
 800525a:	77fb      	strb	r3, [r7, #31]
 800525c:	e008      	b.n	8005270 <UART_SetConfig+0x210>
 800525e:	2308      	movs	r3, #8
 8005260:	77fb      	strb	r3, [r7, #31]
 8005262:	e005      	b.n	8005270 <UART_SetConfig+0x210>
 8005264:	2310      	movs	r3, #16
 8005266:	77fb      	strb	r3, [r7, #31]
 8005268:	bf00      	nop
 800526a:	e001      	b.n	8005270 <UART_SetConfig+0x210>
 800526c:	2310      	movs	r3, #16
 800526e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005278:	f040 8090 	bne.w	800539c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 800527c:	7ffb      	ldrb	r3, [r7, #31]
 800527e:	2b08      	cmp	r3, #8
 8005280:	d86c      	bhi.n	800535c <UART_SetConfig+0x2fc>
 8005282:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <UART_SetConfig+0x228>)
 8005284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005288:	080052ad 	.word	0x080052ad
 800528c:	080052cd 	.word	0x080052cd
 8005290:	080052ed 	.word	0x080052ed
 8005294:	0800535d 	.word	0x0800535d
 8005298:	08005309 	.word	0x08005309
 800529c:	0800535d 	.word	0x0800535d
 80052a0:	0800535d 	.word	0x0800535d
 80052a4:	0800535d 	.word	0x0800535d
 80052a8:	08005329 	.word	0x08005329
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ac:	f7fe facc 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 80052b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	005a      	lsls	r2, r3, #1
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	085b      	lsrs	r3, r3, #1
 80052bc:	441a      	add	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	61bb      	str	r3, [r7, #24]
        break;
 80052ca:	e04a      	b.n	8005362 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052cc:	f7fe fade 	bl	800388c <HAL_RCC_GetPCLK2Freq>
 80052d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	005a      	lsls	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	085b      	lsrs	r3, r3, #1
 80052dc:	441a      	add	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	61bb      	str	r3, [r7, #24]
        break;
 80052ea:	e03a      	b.n	8005362 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	085b      	lsrs	r3, r3, #1
 80052f2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80052f6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6852      	ldr	r2, [r2, #4]
 80052fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005302:	b29b      	uxth	r3, r3
 8005304:	61bb      	str	r3, [r7, #24]
        break;
 8005306:	e02c      	b.n	8005362 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005308:	f7fe fa28 	bl	800375c <HAL_RCC_GetSysClockFreq>
 800530c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	005a      	lsls	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	441a      	add	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005322:	b29b      	uxth	r3, r3
 8005324:	61bb      	str	r3, [r7, #24]
        break;
 8005326:	e01c      	b.n	8005362 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	085b      	lsrs	r3, r3, #1
 800532e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	fbb2 f3f3 	udiv	r3, r2, r3
 800533a:	b29b      	uxth	r3, r3
 800533c:	61bb      	str	r3, [r7, #24]
        break;
 800533e:	e010      	b.n	8005362 <UART_SetConfig+0x302>
 8005340:	efff69f3 	.word	0xefff69f3
 8005344:	40013800 	.word	0x40013800
 8005348:	40021000 	.word	0x40021000
 800534c:	40004400 	.word	0x40004400
 8005350:	40004800 	.word	0x40004800
 8005354:	40004c00 	.word	0x40004c00
 8005358:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	75fb      	strb	r3, [r7, #23]
        break;
 8005360:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	2b0f      	cmp	r3, #15
 8005366:	d916      	bls.n	8005396 <UART_SetConfig+0x336>
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536e:	d212      	bcs.n	8005396 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	b29b      	uxth	r3, r3
 8005374:	f023 030f 	bic.w	r3, r3, #15
 8005378:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	085b      	lsrs	r3, r3, #1
 800537e:	b29b      	uxth	r3, r3
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	b29a      	uxth	r2, r3
 8005386:	897b      	ldrh	r3, [r7, #10]
 8005388:	4313      	orrs	r3, r2
 800538a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	897a      	ldrh	r2, [r7, #10]
 8005392:	60da      	str	r2, [r3, #12]
 8005394:	e072      	b.n	800547c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	75fb      	strb	r3, [r7, #23]
 800539a:	e06f      	b.n	800547c <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 800539c:	7ffb      	ldrb	r3, [r7, #31]
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d85b      	bhi.n	800545a <UART_SetConfig+0x3fa>
 80053a2:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <UART_SetConfig+0x348>)
 80053a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a8:	080053cd 	.word	0x080053cd
 80053ac:	080053eb 	.word	0x080053eb
 80053b0:	08005409 	.word	0x08005409
 80053b4:	0800545b 	.word	0x0800545b
 80053b8:	08005425 	.word	0x08005425
 80053bc:	0800545b 	.word	0x0800545b
 80053c0:	0800545b 	.word	0x0800545b
 80053c4:	0800545b 	.word	0x0800545b
 80053c8:	08005443 	.word	0x08005443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053cc:	f7fe fa3c 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 80053d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	085a      	lsrs	r2, r3, #1
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	441a      	add	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	61bb      	str	r3, [r7, #24]
        break;
 80053e8:	e03a      	b.n	8005460 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053ea:	f7fe fa4f 	bl	800388c <HAL_RCC_GetPCLK2Freq>
 80053ee:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	085a      	lsrs	r2, r3, #1
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	441a      	add	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	b29b      	uxth	r3, r3
 8005404:	61bb      	str	r3, [r7, #24]
        break;
 8005406:	e02b      	b.n	8005460 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	085b      	lsrs	r3, r3, #1
 800540e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005412:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6852      	ldr	r2, [r2, #4]
 800541a:	fbb3 f3f2 	udiv	r3, r3, r2
 800541e:	b29b      	uxth	r3, r3
 8005420:	61bb      	str	r3, [r7, #24]
        break;
 8005422:	e01d      	b.n	8005460 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005424:	f7fe f99a 	bl	800375c <HAL_RCC_GetSysClockFreq>
 8005428:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	085a      	lsrs	r2, r3, #1
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	441a      	add	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	fbb2 f3f3 	udiv	r3, r2, r3
 800543c:	b29b      	uxth	r3, r3
 800543e:	61bb      	str	r3, [r7, #24]
        break;
 8005440:	e00e      	b.n	8005460 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	085b      	lsrs	r3, r3, #1
 8005448:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	fbb2 f3f3 	udiv	r3, r2, r3
 8005454:	b29b      	uxth	r3, r3
 8005456:	61bb      	str	r3, [r7, #24]
        break;
 8005458:	e002      	b.n	8005460 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	75fb      	strb	r3, [r7, #23]
        break;
 800545e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2b0f      	cmp	r3, #15
 8005464:	d908      	bls.n	8005478 <UART_SetConfig+0x418>
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546c:	d204      	bcs.n	8005478 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	60da      	str	r2, [r3, #12]
 8005476:	e001      	b.n	800547c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005488:	7dfb      	ldrb	r3, [r7, #23]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3720      	adds	r7, #32
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop

08005494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00a      	beq.n	8005546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01a      	beq.n	80055aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005592:	d10a      	bne.n	80055aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]
  }
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af02      	add	r7, sp, #8
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80055e6:	f7fc fd45 	bl	8002074 <HAL_GetTick>
 80055ea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b08      	cmp	r3, #8
 80055f8:	d10e      	bne.n	8005618 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f82a 	bl	8005662 <UART_WaitOnFlagUntilTimeout>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e020      	b.n	800565a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b04      	cmp	r3, #4
 8005624:	d10e      	bne.n	8005644 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005626:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f814 	bl	8005662 <UART_WaitOnFlagUntilTimeout>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e00a      	b.n	800565a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	603b      	str	r3, [r7, #0]
 800566e:	4613      	mov	r3, r2
 8005670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005672:	e05d      	b.n	8005730 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567a:	d059      	beq.n	8005730 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567c:	f7fc fcfa 	bl	8002074 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	429a      	cmp	r2, r3
 800568a:	d302      	bcc.n	8005692 <UART_WaitOnFlagUntilTimeout+0x30>
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d11b      	bne.n	80056ca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0201 	bic.w	r2, r2, #1
 80056b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2220      	movs	r2, #32
 80056b6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e042      	b.n	8005750 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d02b      	beq.n	8005730 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056e6:	d123      	bne.n	8005730 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056f0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005700:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2220      	movs	r2, #32
 8005716:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2220      	movs	r2, #32
 8005722:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e00f      	b.n	8005750 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	69da      	ldr	r2, [r3, #28]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4013      	ands	r3, r2
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	429a      	cmp	r2, r3
 800573e:	bf0c      	ite	eq
 8005740:	2301      	moveq	r3, #1
 8005742:	2300      	movne	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	461a      	mov	r2, r3
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	429a      	cmp	r2, r3
 800574c:	d092      	beq.n	8005674 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <__errno>:
 8005758:	4b01      	ldr	r3, [pc, #4]	; (8005760 <__errno+0x8>)
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	20000024 	.word	0x20000024

08005764 <__libc_init_array>:
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	4e0d      	ldr	r6, [pc, #52]	; (800579c <__libc_init_array+0x38>)
 8005768:	4c0d      	ldr	r4, [pc, #52]	; (80057a0 <__libc_init_array+0x3c>)
 800576a:	1ba4      	subs	r4, r4, r6
 800576c:	10a4      	asrs	r4, r4, #2
 800576e:	2500      	movs	r5, #0
 8005770:	42a5      	cmp	r5, r4
 8005772:	d109      	bne.n	8005788 <__libc_init_array+0x24>
 8005774:	4e0b      	ldr	r6, [pc, #44]	; (80057a4 <__libc_init_array+0x40>)
 8005776:	4c0c      	ldr	r4, [pc, #48]	; (80057a8 <__libc_init_array+0x44>)
 8005778:	f002 f8a8 	bl	80078cc <_init>
 800577c:	1ba4      	subs	r4, r4, r6
 800577e:	10a4      	asrs	r4, r4, #2
 8005780:	2500      	movs	r5, #0
 8005782:	42a5      	cmp	r5, r4
 8005784:	d105      	bne.n	8005792 <__libc_init_array+0x2e>
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800578c:	4798      	blx	r3
 800578e:	3501      	adds	r5, #1
 8005790:	e7ee      	b.n	8005770 <__libc_init_array+0xc>
 8005792:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005796:	4798      	blx	r3
 8005798:	3501      	adds	r5, #1
 800579a:	e7f2      	b.n	8005782 <__libc_init_array+0x1e>
 800579c:	08007ba0 	.word	0x08007ba0
 80057a0:	08007ba0 	.word	0x08007ba0
 80057a4:	08007ba0 	.word	0x08007ba0
 80057a8:	08007ba4 	.word	0x08007ba4

080057ac <memset>:
 80057ac:	4402      	add	r2, r0
 80057ae:	4603      	mov	r3, r0
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d100      	bne.n	80057b6 <memset+0xa>
 80057b4:	4770      	bx	lr
 80057b6:	f803 1b01 	strb.w	r1, [r3], #1
 80057ba:	e7f9      	b.n	80057b0 <memset+0x4>

080057bc <__cvt>:
 80057bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057c0:	ec55 4b10 	vmov	r4, r5, d0
 80057c4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80057c6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80057ca:	2d00      	cmp	r5, #0
 80057cc:	460e      	mov	r6, r1
 80057ce:	4691      	mov	r9, r2
 80057d0:	4619      	mov	r1, r3
 80057d2:	bfb8      	it	lt
 80057d4:	4622      	movlt	r2, r4
 80057d6:	462b      	mov	r3, r5
 80057d8:	f027 0720 	bic.w	r7, r7, #32
 80057dc:	bfbb      	ittet	lt
 80057de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80057e2:	461d      	movlt	r5, r3
 80057e4:	2300      	movge	r3, #0
 80057e6:	232d      	movlt	r3, #45	; 0x2d
 80057e8:	bfb8      	it	lt
 80057ea:	4614      	movlt	r4, r2
 80057ec:	2f46      	cmp	r7, #70	; 0x46
 80057ee:	700b      	strb	r3, [r1, #0]
 80057f0:	d004      	beq.n	80057fc <__cvt+0x40>
 80057f2:	2f45      	cmp	r7, #69	; 0x45
 80057f4:	d100      	bne.n	80057f8 <__cvt+0x3c>
 80057f6:	3601      	adds	r6, #1
 80057f8:	2102      	movs	r1, #2
 80057fa:	e000      	b.n	80057fe <__cvt+0x42>
 80057fc:	2103      	movs	r1, #3
 80057fe:	ab03      	add	r3, sp, #12
 8005800:	9301      	str	r3, [sp, #4]
 8005802:	ab02      	add	r3, sp, #8
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	4632      	mov	r2, r6
 8005808:	4653      	mov	r3, sl
 800580a:	ec45 4b10 	vmov	d0, r4, r5
 800580e:	f000 fcdf 	bl	80061d0 <_dtoa_r>
 8005812:	2f47      	cmp	r7, #71	; 0x47
 8005814:	4680      	mov	r8, r0
 8005816:	d102      	bne.n	800581e <__cvt+0x62>
 8005818:	f019 0f01 	tst.w	r9, #1
 800581c:	d026      	beq.n	800586c <__cvt+0xb0>
 800581e:	2f46      	cmp	r7, #70	; 0x46
 8005820:	eb08 0906 	add.w	r9, r8, r6
 8005824:	d111      	bne.n	800584a <__cvt+0x8e>
 8005826:	f898 3000 	ldrb.w	r3, [r8]
 800582a:	2b30      	cmp	r3, #48	; 0x30
 800582c:	d10a      	bne.n	8005844 <__cvt+0x88>
 800582e:	2200      	movs	r2, #0
 8005830:	2300      	movs	r3, #0
 8005832:	4620      	mov	r0, r4
 8005834:	4629      	mov	r1, r5
 8005836:	f7fb f94f 	bl	8000ad8 <__aeabi_dcmpeq>
 800583a:	b918      	cbnz	r0, 8005844 <__cvt+0x88>
 800583c:	f1c6 0601 	rsb	r6, r6, #1
 8005840:	f8ca 6000 	str.w	r6, [sl]
 8005844:	f8da 3000 	ldr.w	r3, [sl]
 8005848:	4499      	add	r9, r3
 800584a:	2200      	movs	r2, #0
 800584c:	2300      	movs	r3, #0
 800584e:	4620      	mov	r0, r4
 8005850:	4629      	mov	r1, r5
 8005852:	f7fb f941 	bl	8000ad8 <__aeabi_dcmpeq>
 8005856:	b938      	cbnz	r0, 8005868 <__cvt+0xac>
 8005858:	2230      	movs	r2, #48	; 0x30
 800585a:	9b03      	ldr	r3, [sp, #12]
 800585c:	454b      	cmp	r3, r9
 800585e:	d205      	bcs.n	800586c <__cvt+0xb0>
 8005860:	1c59      	adds	r1, r3, #1
 8005862:	9103      	str	r1, [sp, #12]
 8005864:	701a      	strb	r2, [r3, #0]
 8005866:	e7f8      	b.n	800585a <__cvt+0x9e>
 8005868:	f8cd 900c 	str.w	r9, [sp, #12]
 800586c:	9b03      	ldr	r3, [sp, #12]
 800586e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005870:	eba3 0308 	sub.w	r3, r3, r8
 8005874:	4640      	mov	r0, r8
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	b004      	add	sp, #16
 800587a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800587e <__exponent>:
 800587e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005880:	2900      	cmp	r1, #0
 8005882:	4604      	mov	r4, r0
 8005884:	bfba      	itte	lt
 8005886:	4249      	neglt	r1, r1
 8005888:	232d      	movlt	r3, #45	; 0x2d
 800588a:	232b      	movge	r3, #43	; 0x2b
 800588c:	2909      	cmp	r1, #9
 800588e:	f804 2b02 	strb.w	r2, [r4], #2
 8005892:	7043      	strb	r3, [r0, #1]
 8005894:	dd20      	ble.n	80058d8 <__exponent+0x5a>
 8005896:	f10d 0307 	add.w	r3, sp, #7
 800589a:	461f      	mov	r7, r3
 800589c:	260a      	movs	r6, #10
 800589e:	fb91 f5f6 	sdiv	r5, r1, r6
 80058a2:	fb06 1115 	mls	r1, r6, r5, r1
 80058a6:	3130      	adds	r1, #48	; 0x30
 80058a8:	2d09      	cmp	r5, #9
 80058aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80058ae:	f103 32ff 	add.w	r2, r3, #4294967295
 80058b2:	4629      	mov	r1, r5
 80058b4:	dc09      	bgt.n	80058ca <__exponent+0x4c>
 80058b6:	3130      	adds	r1, #48	; 0x30
 80058b8:	3b02      	subs	r3, #2
 80058ba:	f802 1c01 	strb.w	r1, [r2, #-1]
 80058be:	42bb      	cmp	r3, r7
 80058c0:	4622      	mov	r2, r4
 80058c2:	d304      	bcc.n	80058ce <__exponent+0x50>
 80058c4:	1a10      	subs	r0, r2, r0
 80058c6:	b003      	add	sp, #12
 80058c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058ca:	4613      	mov	r3, r2
 80058cc:	e7e7      	b.n	800589e <__exponent+0x20>
 80058ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058d2:	f804 2b01 	strb.w	r2, [r4], #1
 80058d6:	e7f2      	b.n	80058be <__exponent+0x40>
 80058d8:	2330      	movs	r3, #48	; 0x30
 80058da:	4419      	add	r1, r3
 80058dc:	7083      	strb	r3, [r0, #2]
 80058de:	1d02      	adds	r2, r0, #4
 80058e0:	70c1      	strb	r1, [r0, #3]
 80058e2:	e7ef      	b.n	80058c4 <__exponent+0x46>

080058e4 <_printf_float>:
 80058e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e8:	b08d      	sub	sp, #52	; 0x34
 80058ea:	460c      	mov	r4, r1
 80058ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80058f0:	4616      	mov	r6, r2
 80058f2:	461f      	mov	r7, r3
 80058f4:	4605      	mov	r5, r0
 80058f6:	f001 fa23 	bl	8006d40 <_localeconv_r>
 80058fa:	6803      	ldr	r3, [r0, #0]
 80058fc:	9304      	str	r3, [sp, #16]
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fa fc6e 	bl	80001e0 <strlen>
 8005904:	2300      	movs	r3, #0
 8005906:	930a      	str	r3, [sp, #40]	; 0x28
 8005908:	f8d8 3000 	ldr.w	r3, [r8]
 800590c:	9005      	str	r0, [sp, #20]
 800590e:	3307      	adds	r3, #7
 8005910:	f023 0307 	bic.w	r3, r3, #7
 8005914:	f103 0208 	add.w	r2, r3, #8
 8005918:	f894 a018 	ldrb.w	sl, [r4, #24]
 800591c:	f8d4 b000 	ldr.w	fp, [r4]
 8005920:	f8c8 2000 	str.w	r2, [r8]
 8005924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005928:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800592c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005930:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005934:	9307      	str	r3, [sp, #28]
 8005936:	f8cd 8018 	str.w	r8, [sp, #24]
 800593a:	f04f 32ff 	mov.w	r2, #4294967295
 800593e:	4ba7      	ldr	r3, [pc, #668]	; (8005bdc <_printf_float+0x2f8>)
 8005940:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005944:	f7fb f8fa 	bl	8000b3c <__aeabi_dcmpun>
 8005948:	bb70      	cbnz	r0, 80059a8 <_printf_float+0xc4>
 800594a:	f04f 32ff 	mov.w	r2, #4294967295
 800594e:	4ba3      	ldr	r3, [pc, #652]	; (8005bdc <_printf_float+0x2f8>)
 8005950:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005954:	f7fb f8d4 	bl	8000b00 <__aeabi_dcmple>
 8005958:	bb30      	cbnz	r0, 80059a8 <_printf_float+0xc4>
 800595a:	2200      	movs	r2, #0
 800595c:	2300      	movs	r3, #0
 800595e:	4640      	mov	r0, r8
 8005960:	4649      	mov	r1, r9
 8005962:	f7fb f8c3 	bl	8000aec <__aeabi_dcmplt>
 8005966:	b110      	cbz	r0, 800596e <_printf_float+0x8a>
 8005968:	232d      	movs	r3, #45	; 0x2d
 800596a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800596e:	4a9c      	ldr	r2, [pc, #624]	; (8005be0 <_printf_float+0x2fc>)
 8005970:	4b9c      	ldr	r3, [pc, #624]	; (8005be4 <_printf_float+0x300>)
 8005972:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005976:	bf8c      	ite	hi
 8005978:	4690      	movhi	r8, r2
 800597a:	4698      	movls	r8, r3
 800597c:	2303      	movs	r3, #3
 800597e:	f02b 0204 	bic.w	r2, fp, #4
 8005982:	6123      	str	r3, [r4, #16]
 8005984:	6022      	str	r2, [r4, #0]
 8005986:	f04f 0900 	mov.w	r9, #0
 800598a:	9700      	str	r7, [sp, #0]
 800598c:	4633      	mov	r3, r6
 800598e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005990:	4621      	mov	r1, r4
 8005992:	4628      	mov	r0, r5
 8005994:	f000 f9e6 	bl	8005d64 <_printf_common>
 8005998:	3001      	adds	r0, #1
 800599a:	f040 808d 	bne.w	8005ab8 <_printf_float+0x1d4>
 800599e:	f04f 30ff 	mov.w	r0, #4294967295
 80059a2:	b00d      	add	sp, #52	; 0x34
 80059a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a8:	4642      	mov	r2, r8
 80059aa:	464b      	mov	r3, r9
 80059ac:	4640      	mov	r0, r8
 80059ae:	4649      	mov	r1, r9
 80059b0:	f7fb f8c4 	bl	8000b3c <__aeabi_dcmpun>
 80059b4:	b110      	cbz	r0, 80059bc <_printf_float+0xd8>
 80059b6:	4a8c      	ldr	r2, [pc, #560]	; (8005be8 <_printf_float+0x304>)
 80059b8:	4b8c      	ldr	r3, [pc, #560]	; (8005bec <_printf_float+0x308>)
 80059ba:	e7da      	b.n	8005972 <_printf_float+0x8e>
 80059bc:	6861      	ldr	r1, [r4, #4]
 80059be:	1c4b      	adds	r3, r1, #1
 80059c0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80059c4:	a80a      	add	r0, sp, #40	; 0x28
 80059c6:	d13e      	bne.n	8005a46 <_printf_float+0x162>
 80059c8:	2306      	movs	r3, #6
 80059ca:	6063      	str	r3, [r4, #4]
 80059cc:	2300      	movs	r3, #0
 80059ce:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80059d2:	ab09      	add	r3, sp, #36	; 0x24
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	ec49 8b10 	vmov	d0, r8, r9
 80059da:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80059de:	6022      	str	r2, [r4, #0]
 80059e0:	f8cd a004 	str.w	sl, [sp, #4]
 80059e4:	6861      	ldr	r1, [r4, #4]
 80059e6:	4628      	mov	r0, r5
 80059e8:	f7ff fee8 	bl	80057bc <__cvt>
 80059ec:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80059f0:	2b47      	cmp	r3, #71	; 0x47
 80059f2:	4680      	mov	r8, r0
 80059f4:	d109      	bne.n	8005a0a <_printf_float+0x126>
 80059f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f8:	1cd8      	adds	r0, r3, #3
 80059fa:	db02      	blt.n	8005a02 <_printf_float+0x11e>
 80059fc:	6862      	ldr	r2, [r4, #4]
 80059fe:	4293      	cmp	r3, r2
 8005a00:	dd47      	ble.n	8005a92 <_printf_float+0x1ae>
 8005a02:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a06:	fa5f fa8a 	uxtb.w	sl, sl
 8005a0a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005a0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a10:	d824      	bhi.n	8005a5c <_printf_float+0x178>
 8005a12:	3901      	subs	r1, #1
 8005a14:	4652      	mov	r2, sl
 8005a16:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a1a:	9109      	str	r1, [sp, #36]	; 0x24
 8005a1c:	f7ff ff2f 	bl	800587e <__exponent>
 8005a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a22:	1813      	adds	r3, r2, r0
 8005a24:	2a01      	cmp	r2, #1
 8005a26:	4681      	mov	r9, r0
 8005a28:	6123      	str	r3, [r4, #16]
 8005a2a:	dc02      	bgt.n	8005a32 <_printf_float+0x14e>
 8005a2c:	6822      	ldr	r2, [r4, #0]
 8005a2e:	07d1      	lsls	r1, r2, #31
 8005a30:	d501      	bpl.n	8005a36 <_printf_float+0x152>
 8005a32:	3301      	adds	r3, #1
 8005a34:	6123      	str	r3, [r4, #16]
 8005a36:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0a5      	beq.n	800598a <_printf_float+0xa6>
 8005a3e:	232d      	movs	r3, #45	; 0x2d
 8005a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a44:	e7a1      	b.n	800598a <_printf_float+0xa6>
 8005a46:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005a4a:	f000 8177 	beq.w	8005d3c <_printf_float+0x458>
 8005a4e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005a52:	d1bb      	bne.n	80059cc <_printf_float+0xe8>
 8005a54:	2900      	cmp	r1, #0
 8005a56:	d1b9      	bne.n	80059cc <_printf_float+0xe8>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e7b6      	b.n	80059ca <_printf_float+0xe6>
 8005a5c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005a60:	d119      	bne.n	8005a96 <_printf_float+0x1b2>
 8005a62:	2900      	cmp	r1, #0
 8005a64:	6863      	ldr	r3, [r4, #4]
 8005a66:	dd0c      	ble.n	8005a82 <_printf_float+0x19e>
 8005a68:	6121      	str	r1, [r4, #16]
 8005a6a:	b913      	cbnz	r3, 8005a72 <_printf_float+0x18e>
 8005a6c:	6822      	ldr	r2, [r4, #0]
 8005a6e:	07d2      	lsls	r2, r2, #31
 8005a70:	d502      	bpl.n	8005a78 <_printf_float+0x194>
 8005a72:	3301      	adds	r3, #1
 8005a74:	440b      	add	r3, r1
 8005a76:	6123      	str	r3, [r4, #16]
 8005a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a7a:	65a3      	str	r3, [r4, #88]	; 0x58
 8005a7c:	f04f 0900 	mov.w	r9, #0
 8005a80:	e7d9      	b.n	8005a36 <_printf_float+0x152>
 8005a82:	b913      	cbnz	r3, 8005a8a <_printf_float+0x1a6>
 8005a84:	6822      	ldr	r2, [r4, #0]
 8005a86:	07d0      	lsls	r0, r2, #31
 8005a88:	d501      	bpl.n	8005a8e <_printf_float+0x1aa>
 8005a8a:	3302      	adds	r3, #2
 8005a8c:	e7f3      	b.n	8005a76 <_printf_float+0x192>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e7f1      	b.n	8005a76 <_printf_float+0x192>
 8005a92:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005a96:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	db05      	blt.n	8005aaa <_printf_float+0x1c6>
 8005a9e:	6822      	ldr	r2, [r4, #0]
 8005aa0:	6123      	str	r3, [r4, #16]
 8005aa2:	07d1      	lsls	r1, r2, #31
 8005aa4:	d5e8      	bpl.n	8005a78 <_printf_float+0x194>
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	e7e5      	b.n	8005a76 <_printf_float+0x192>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	bfd4      	ite	le
 8005aae:	f1c3 0302 	rsble	r3, r3, #2
 8005ab2:	2301      	movgt	r3, #1
 8005ab4:	4413      	add	r3, r2
 8005ab6:	e7de      	b.n	8005a76 <_printf_float+0x192>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	055a      	lsls	r2, r3, #21
 8005abc:	d407      	bmi.n	8005ace <_printf_float+0x1ea>
 8005abe:	6923      	ldr	r3, [r4, #16]
 8005ac0:	4642      	mov	r2, r8
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	47b8      	blx	r7
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d12b      	bne.n	8005b24 <_printf_float+0x240>
 8005acc:	e767      	b.n	800599e <_printf_float+0xba>
 8005ace:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005ad2:	f240 80dc 	bls.w	8005c8e <_printf_float+0x3aa>
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2300      	movs	r3, #0
 8005ada:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ade:	f7fa fffb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d033      	beq.n	8005b4e <_printf_float+0x26a>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	4a41      	ldr	r2, [pc, #260]	; (8005bf0 <_printf_float+0x30c>)
 8005aea:	4631      	mov	r1, r6
 8005aec:	4628      	mov	r0, r5
 8005aee:	47b8      	blx	r7
 8005af0:	3001      	adds	r0, #1
 8005af2:	f43f af54 	beq.w	800599e <_printf_float+0xba>
 8005af6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005afa:	429a      	cmp	r2, r3
 8005afc:	db02      	blt.n	8005b04 <_printf_float+0x220>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	07d8      	lsls	r0, r3, #31
 8005b02:	d50f      	bpl.n	8005b24 <_printf_float+0x240>
 8005b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b08:	4631      	mov	r1, r6
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	47b8      	blx	r7
 8005b0e:	3001      	adds	r0, #1
 8005b10:	f43f af45 	beq.w	800599e <_printf_float+0xba>
 8005b14:	f04f 0800 	mov.w	r8, #0
 8005b18:	f104 091a 	add.w	r9, r4, #26
 8005b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	4543      	cmp	r3, r8
 8005b22:	dc09      	bgt.n	8005b38 <_printf_float+0x254>
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	079b      	lsls	r3, r3, #30
 8005b28:	f100 8103 	bmi.w	8005d32 <_printf_float+0x44e>
 8005b2c:	68e0      	ldr	r0, [r4, #12]
 8005b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b30:	4298      	cmp	r0, r3
 8005b32:	bfb8      	it	lt
 8005b34:	4618      	movlt	r0, r3
 8005b36:	e734      	b.n	80059a2 <_printf_float+0xbe>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	464a      	mov	r2, r9
 8005b3c:	4631      	mov	r1, r6
 8005b3e:	4628      	mov	r0, r5
 8005b40:	47b8      	blx	r7
 8005b42:	3001      	adds	r0, #1
 8005b44:	f43f af2b 	beq.w	800599e <_printf_float+0xba>
 8005b48:	f108 0801 	add.w	r8, r8, #1
 8005b4c:	e7e6      	b.n	8005b1c <_printf_float+0x238>
 8005b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	dc2b      	bgt.n	8005bac <_printf_float+0x2c8>
 8005b54:	2301      	movs	r3, #1
 8005b56:	4a26      	ldr	r2, [pc, #152]	; (8005bf0 <_printf_float+0x30c>)
 8005b58:	4631      	mov	r1, r6
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	47b8      	blx	r7
 8005b5e:	3001      	adds	r0, #1
 8005b60:	f43f af1d 	beq.w	800599e <_printf_float+0xba>
 8005b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b66:	b923      	cbnz	r3, 8005b72 <_printf_float+0x28e>
 8005b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b6a:	b913      	cbnz	r3, 8005b72 <_printf_float+0x28e>
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	07d9      	lsls	r1, r3, #31
 8005b70:	d5d8      	bpl.n	8005b24 <_printf_float+0x240>
 8005b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b76:	4631      	mov	r1, r6
 8005b78:	4628      	mov	r0, r5
 8005b7a:	47b8      	blx	r7
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	f43f af0e 	beq.w	800599e <_printf_float+0xba>
 8005b82:	f04f 0900 	mov.w	r9, #0
 8005b86:	f104 0a1a 	add.w	sl, r4, #26
 8005b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b8c:	425b      	negs	r3, r3
 8005b8e:	454b      	cmp	r3, r9
 8005b90:	dc01      	bgt.n	8005b96 <_printf_float+0x2b2>
 8005b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b94:	e794      	b.n	8005ac0 <_printf_float+0x1dc>
 8005b96:	2301      	movs	r3, #1
 8005b98:	4652      	mov	r2, sl
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	47b8      	blx	r7
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	f43f aefc 	beq.w	800599e <_printf_float+0xba>
 8005ba6:	f109 0901 	add.w	r9, r9, #1
 8005baa:	e7ee      	b.n	8005b8a <_printf_float+0x2a6>
 8005bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	bfa8      	it	ge
 8005bb4:	461a      	movge	r2, r3
 8005bb6:	2a00      	cmp	r2, #0
 8005bb8:	4691      	mov	r9, r2
 8005bba:	dd07      	ble.n	8005bcc <_printf_float+0x2e8>
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	4642      	mov	r2, r8
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	47b8      	blx	r7
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	f43f aee9 	beq.w	800599e <_printf_float+0xba>
 8005bcc:	f104 031a 	add.w	r3, r4, #26
 8005bd0:	f04f 0b00 	mov.w	fp, #0
 8005bd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bd8:	9306      	str	r3, [sp, #24]
 8005bda:	e015      	b.n	8005c08 <_printf_float+0x324>
 8005bdc:	7fefffff 	.word	0x7fefffff
 8005be0:	08007944 	.word	0x08007944
 8005be4:	08007940 	.word	0x08007940
 8005be8:	0800794c 	.word	0x0800794c
 8005bec:	08007948 	.word	0x08007948
 8005bf0:	08007950 	.word	0x08007950
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	9a06      	ldr	r2, [sp, #24]
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	47b8      	blx	r7
 8005bfe:	3001      	adds	r0, #1
 8005c00:	f43f aecd 	beq.w	800599e <_printf_float+0xba>
 8005c04:	f10b 0b01 	add.w	fp, fp, #1
 8005c08:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005c0c:	ebaa 0309 	sub.w	r3, sl, r9
 8005c10:	455b      	cmp	r3, fp
 8005c12:	dcef      	bgt.n	8005bf4 <_printf_float+0x310>
 8005c14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	44d0      	add	r8, sl
 8005c1c:	db15      	blt.n	8005c4a <_printf_float+0x366>
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	07da      	lsls	r2, r3, #31
 8005c22:	d412      	bmi.n	8005c4a <_printf_float+0x366>
 8005c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c28:	eba3 020a 	sub.w	r2, r3, sl
 8005c2c:	eba3 0a01 	sub.w	sl, r3, r1
 8005c30:	4592      	cmp	sl, r2
 8005c32:	bfa8      	it	ge
 8005c34:	4692      	movge	sl, r2
 8005c36:	f1ba 0f00 	cmp.w	sl, #0
 8005c3a:	dc0e      	bgt.n	8005c5a <_printf_float+0x376>
 8005c3c:	f04f 0800 	mov.w	r8, #0
 8005c40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c44:	f104 091a 	add.w	r9, r4, #26
 8005c48:	e019      	b.n	8005c7e <_printf_float+0x39a>
 8005c4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c4e:	4631      	mov	r1, r6
 8005c50:	4628      	mov	r0, r5
 8005c52:	47b8      	blx	r7
 8005c54:	3001      	adds	r0, #1
 8005c56:	d1e5      	bne.n	8005c24 <_printf_float+0x340>
 8005c58:	e6a1      	b.n	800599e <_printf_float+0xba>
 8005c5a:	4653      	mov	r3, sl
 8005c5c:	4642      	mov	r2, r8
 8005c5e:	4631      	mov	r1, r6
 8005c60:	4628      	mov	r0, r5
 8005c62:	47b8      	blx	r7
 8005c64:	3001      	adds	r0, #1
 8005c66:	d1e9      	bne.n	8005c3c <_printf_float+0x358>
 8005c68:	e699      	b.n	800599e <_printf_float+0xba>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	464a      	mov	r2, r9
 8005c6e:	4631      	mov	r1, r6
 8005c70:	4628      	mov	r0, r5
 8005c72:	47b8      	blx	r7
 8005c74:	3001      	adds	r0, #1
 8005c76:	f43f ae92 	beq.w	800599e <_printf_float+0xba>
 8005c7a:	f108 0801 	add.w	r8, r8, #1
 8005c7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c82:	1a9b      	subs	r3, r3, r2
 8005c84:	eba3 030a 	sub.w	r3, r3, sl
 8005c88:	4543      	cmp	r3, r8
 8005c8a:	dcee      	bgt.n	8005c6a <_printf_float+0x386>
 8005c8c:	e74a      	b.n	8005b24 <_printf_float+0x240>
 8005c8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c90:	2a01      	cmp	r2, #1
 8005c92:	dc01      	bgt.n	8005c98 <_printf_float+0x3b4>
 8005c94:	07db      	lsls	r3, r3, #31
 8005c96:	d53a      	bpl.n	8005d0e <_printf_float+0x42a>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	4642      	mov	r2, r8
 8005c9c:	4631      	mov	r1, r6
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	47b8      	blx	r7
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	f43f ae7b 	beq.w	800599e <_printf_float+0xba>
 8005ca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cac:	4631      	mov	r1, r6
 8005cae:	4628      	mov	r0, r5
 8005cb0:	47b8      	blx	r7
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	f108 0801 	add.w	r8, r8, #1
 8005cb8:	f43f ae71 	beq.w	800599e <_printf_float+0xba>
 8005cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f103 3aff 	add.w	sl, r3, #4294967295
 8005cc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f7fa ff05 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cce:	b9c8      	cbnz	r0, 8005d04 <_printf_float+0x420>
 8005cd0:	4653      	mov	r3, sl
 8005cd2:	4642      	mov	r2, r8
 8005cd4:	4631      	mov	r1, r6
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	47b8      	blx	r7
 8005cda:	3001      	adds	r0, #1
 8005cdc:	d10e      	bne.n	8005cfc <_printf_float+0x418>
 8005cde:	e65e      	b.n	800599e <_printf_float+0xba>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	4652      	mov	r2, sl
 8005ce4:	4631      	mov	r1, r6
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	47b8      	blx	r7
 8005cea:	3001      	adds	r0, #1
 8005cec:	f43f ae57 	beq.w	800599e <_printf_float+0xba>
 8005cf0:	f108 0801 	add.w	r8, r8, #1
 8005cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	4543      	cmp	r3, r8
 8005cfa:	dcf1      	bgt.n	8005ce0 <_printf_float+0x3fc>
 8005cfc:	464b      	mov	r3, r9
 8005cfe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d02:	e6de      	b.n	8005ac2 <_printf_float+0x1de>
 8005d04:	f04f 0800 	mov.w	r8, #0
 8005d08:	f104 0a1a 	add.w	sl, r4, #26
 8005d0c:	e7f2      	b.n	8005cf4 <_printf_float+0x410>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e7df      	b.n	8005cd2 <_printf_float+0x3ee>
 8005d12:	2301      	movs	r3, #1
 8005d14:	464a      	mov	r2, r9
 8005d16:	4631      	mov	r1, r6
 8005d18:	4628      	mov	r0, r5
 8005d1a:	47b8      	blx	r7
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	f43f ae3e 	beq.w	800599e <_printf_float+0xba>
 8005d22:	f108 0801 	add.w	r8, r8, #1
 8005d26:	68e3      	ldr	r3, [r4, #12]
 8005d28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d2a:	1a9b      	subs	r3, r3, r2
 8005d2c:	4543      	cmp	r3, r8
 8005d2e:	dcf0      	bgt.n	8005d12 <_printf_float+0x42e>
 8005d30:	e6fc      	b.n	8005b2c <_printf_float+0x248>
 8005d32:	f04f 0800 	mov.w	r8, #0
 8005d36:	f104 0919 	add.w	r9, r4, #25
 8005d3a:	e7f4      	b.n	8005d26 <_printf_float+0x442>
 8005d3c:	2900      	cmp	r1, #0
 8005d3e:	f43f ae8b 	beq.w	8005a58 <_printf_float+0x174>
 8005d42:	2300      	movs	r3, #0
 8005d44:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005d48:	ab09      	add	r3, sp, #36	; 0x24
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	ec49 8b10 	vmov	d0, r8, r9
 8005d50:	6022      	str	r2, [r4, #0]
 8005d52:	f8cd a004 	str.w	sl, [sp, #4]
 8005d56:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	f7ff fd2e 	bl	80057bc <__cvt>
 8005d60:	4680      	mov	r8, r0
 8005d62:	e648      	b.n	80059f6 <_printf_float+0x112>

08005d64 <_printf_common>:
 8005d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d68:	4691      	mov	r9, r2
 8005d6a:	461f      	mov	r7, r3
 8005d6c:	688a      	ldr	r2, [r1, #8]
 8005d6e:	690b      	ldr	r3, [r1, #16]
 8005d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d74:	4293      	cmp	r3, r2
 8005d76:	bfb8      	it	lt
 8005d78:	4613      	movlt	r3, r2
 8005d7a:	f8c9 3000 	str.w	r3, [r9]
 8005d7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d82:	4606      	mov	r6, r0
 8005d84:	460c      	mov	r4, r1
 8005d86:	b112      	cbz	r2, 8005d8e <_printf_common+0x2a>
 8005d88:	3301      	adds	r3, #1
 8005d8a:	f8c9 3000 	str.w	r3, [r9]
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	0699      	lsls	r1, r3, #26
 8005d92:	bf42      	ittt	mi
 8005d94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005d98:	3302      	addmi	r3, #2
 8005d9a:	f8c9 3000 	strmi.w	r3, [r9]
 8005d9e:	6825      	ldr	r5, [r4, #0]
 8005da0:	f015 0506 	ands.w	r5, r5, #6
 8005da4:	d107      	bne.n	8005db6 <_printf_common+0x52>
 8005da6:	f104 0a19 	add.w	sl, r4, #25
 8005daa:	68e3      	ldr	r3, [r4, #12]
 8005dac:	f8d9 2000 	ldr.w	r2, [r9]
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	42ab      	cmp	r3, r5
 8005db4:	dc28      	bgt.n	8005e08 <_printf_common+0xa4>
 8005db6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	3300      	adds	r3, #0
 8005dbe:	bf18      	it	ne
 8005dc0:	2301      	movne	r3, #1
 8005dc2:	0692      	lsls	r2, r2, #26
 8005dc4:	d42d      	bmi.n	8005e22 <_printf_common+0xbe>
 8005dc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dca:	4639      	mov	r1, r7
 8005dcc:	4630      	mov	r0, r6
 8005dce:	47c0      	blx	r8
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d020      	beq.n	8005e16 <_printf_common+0xb2>
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	68e5      	ldr	r5, [r4, #12]
 8005dd8:	f8d9 2000 	ldr.w	r2, [r9]
 8005ddc:	f003 0306 	and.w	r3, r3, #6
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	bf08      	it	eq
 8005de4:	1aad      	subeq	r5, r5, r2
 8005de6:	68a3      	ldr	r3, [r4, #8]
 8005de8:	6922      	ldr	r2, [r4, #16]
 8005dea:	bf0c      	ite	eq
 8005dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005df0:	2500      	movne	r5, #0
 8005df2:	4293      	cmp	r3, r2
 8005df4:	bfc4      	itt	gt
 8005df6:	1a9b      	subgt	r3, r3, r2
 8005df8:	18ed      	addgt	r5, r5, r3
 8005dfa:	f04f 0900 	mov.w	r9, #0
 8005dfe:	341a      	adds	r4, #26
 8005e00:	454d      	cmp	r5, r9
 8005e02:	d11a      	bne.n	8005e3a <_printf_common+0xd6>
 8005e04:	2000      	movs	r0, #0
 8005e06:	e008      	b.n	8005e1a <_printf_common+0xb6>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	4652      	mov	r2, sl
 8005e0c:	4639      	mov	r1, r7
 8005e0e:	4630      	mov	r0, r6
 8005e10:	47c0      	blx	r8
 8005e12:	3001      	adds	r0, #1
 8005e14:	d103      	bne.n	8005e1e <_printf_common+0xba>
 8005e16:	f04f 30ff 	mov.w	r0, #4294967295
 8005e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1e:	3501      	adds	r5, #1
 8005e20:	e7c3      	b.n	8005daa <_printf_common+0x46>
 8005e22:	18e1      	adds	r1, r4, r3
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	2030      	movs	r0, #48	; 0x30
 8005e28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e2c:	4422      	add	r2, r4
 8005e2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e36:	3302      	adds	r3, #2
 8005e38:	e7c5      	b.n	8005dc6 <_printf_common+0x62>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	4639      	mov	r1, r7
 8005e40:	4630      	mov	r0, r6
 8005e42:	47c0      	blx	r8
 8005e44:	3001      	adds	r0, #1
 8005e46:	d0e6      	beq.n	8005e16 <_printf_common+0xb2>
 8005e48:	f109 0901 	add.w	r9, r9, #1
 8005e4c:	e7d8      	b.n	8005e00 <_printf_common+0x9c>
	...

08005e50 <_printf_i>:
 8005e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e54:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005e58:	460c      	mov	r4, r1
 8005e5a:	7e09      	ldrb	r1, [r1, #24]
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	296e      	cmp	r1, #110	; 0x6e
 8005e60:	4617      	mov	r7, r2
 8005e62:	4606      	mov	r6, r0
 8005e64:	4698      	mov	r8, r3
 8005e66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e68:	f000 80b3 	beq.w	8005fd2 <_printf_i+0x182>
 8005e6c:	d822      	bhi.n	8005eb4 <_printf_i+0x64>
 8005e6e:	2963      	cmp	r1, #99	; 0x63
 8005e70:	d036      	beq.n	8005ee0 <_printf_i+0x90>
 8005e72:	d80a      	bhi.n	8005e8a <_printf_i+0x3a>
 8005e74:	2900      	cmp	r1, #0
 8005e76:	f000 80b9 	beq.w	8005fec <_printf_i+0x19c>
 8005e7a:	2958      	cmp	r1, #88	; 0x58
 8005e7c:	f000 8083 	beq.w	8005f86 <_printf_i+0x136>
 8005e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e84:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005e88:	e032      	b.n	8005ef0 <_printf_i+0xa0>
 8005e8a:	2964      	cmp	r1, #100	; 0x64
 8005e8c:	d001      	beq.n	8005e92 <_printf_i+0x42>
 8005e8e:	2969      	cmp	r1, #105	; 0x69
 8005e90:	d1f6      	bne.n	8005e80 <_printf_i+0x30>
 8005e92:	6820      	ldr	r0, [r4, #0]
 8005e94:	6813      	ldr	r3, [r2, #0]
 8005e96:	0605      	lsls	r5, r0, #24
 8005e98:	f103 0104 	add.w	r1, r3, #4
 8005e9c:	d52a      	bpl.n	8005ef4 <_printf_i+0xa4>
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6011      	str	r1, [r2, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	da03      	bge.n	8005eae <_printf_i+0x5e>
 8005ea6:	222d      	movs	r2, #45	; 0x2d
 8005ea8:	425b      	negs	r3, r3
 8005eaa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005eae:	486f      	ldr	r0, [pc, #444]	; (800606c <_printf_i+0x21c>)
 8005eb0:	220a      	movs	r2, #10
 8005eb2:	e039      	b.n	8005f28 <_printf_i+0xd8>
 8005eb4:	2973      	cmp	r1, #115	; 0x73
 8005eb6:	f000 809d 	beq.w	8005ff4 <_printf_i+0x1a4>
 8005eba:	d808      	bhi.n	8005ece <_printf_i+0x7e>
 8005ebc:	296f      	cmp	r1, #111	; 0x6f
 8005ebe:	d020      	beq.n	8005f02 <_printf_i+0xb2>
 8005ec0:	2970      	cmp	r1, #112	; 0x70
 8005ec2:	d1dd      	bne.n	8005e80 <_printf_i+0x30>
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	f043 0320 	orr.w	r3, r3, #32
 8005eca:	6023      	str	r3, [r4, #0]
 8005ecc:	e003      	b.n	8005ed6 <_printf_i+0x86>
 8005ece:	2975      	cmp	r1, #117	; 0x75
 8005ed0:	d017      	beq.n	8005f02 <_printf_i+0xb2>
 8005ed2:	2978      	cmp	r1, #120	; 0x78
 8005ed4:	d1d4      	bne.n	8005e80 <_printf_i+0x30>
 8005ed6:	2378      	movs	r3, #120	; 0x78
 8005ed8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005edc:	4864      	ldr	r0, [pc, #400]	; (8006070 <_printf_i+0x220>)
 8005ede:	e055      	b.n	8005f8c <_printf_i+0x13c>
 8005ee0:	6813      	ldr	r3, [r2, #0]
 8005ee2:	1d19      	adds	r1, r3, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6011      	str	r1, [r2, #0]
 8005ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e08c      	b.n	800600e <_printf_i+0x1be>
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6011      	str	r1, [r2, #0]
 8005ef8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005efc:	bf18      	it	ne
 8005efe:	b21b      	sxthne	r3, r3
 8005f00:	e7cf      	b.n	8005ea2 <_printf_i+0x52>
 8005f02:	6813      	ldr	r3, [r2, #0]
 8005f04:	6825      	ldr	r5, [r4, #0]
 8005f06:	1d18      	adds	r0, r3, #4
 8005f08:	6010      	str	r0, [r2, #0]
 8005f0a:	0628      	lsls	r0, r5, #24
 8005f0c:	d501      	bpl.n	8005f12 <_printf_i+0xc2>
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	e002      	b.n	8005f18 <_printf_i+0xc8>
 8005f12:	0668      	lsls	r0, r5, #25
 8005f14:	d5fb      	bpl.n	8005f0e <_printf_i+0xbe>
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	4854      	ldr	r0, [pc, #336]	; (800606c <_printf_i+0x21c>)
 8005f1a:	296f      	cmp	r1, #111	; 0x6f
 8005f1c:	bf14      	ite	ne
 8005f1e:	220a      	movne	r2, #10
 8005f20:	2208      	moveq	r2, #8
 8005f22:	2100      	movs	r1, #0
 8005f24:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f28:	6865      	ldr	r5, [r4, #4]
 8005f2a:	60a5      	str	r5, [r4, #8]
 8005f2c:	2d00      	cmp	r5, #0
 8005f2e:	f2c0 8095 	blt.w	800605c <_printf_i+0x20c>
 8005f32:	6821      	ldr	r1, [r4, #0]
 8005f34:	f021 0104 	bic.w	r1, r1, #4
 8005f38:	6021      	str	r1, [r4, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d13d      	bne.n	8005fba <_printf_i+0x16a>
 8005f3e:	2d00      	cmp	r5, #0
 8005f40:	f040 808e 	bne.w	8006060 <_printf_i+0x210>
 8005f44:	4665      	mov	r5, ip
 8005f46:	2a08      	cmp	r2, #8
 8005f48:	d10b      	bne.n	8005f62 <_printf_i+0x112>
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	07db      	lsls	r3, r3, #31
 8005f4e:	d508      	bpl.n	8005f62 <_printf_i+0x112>
 8005f50:	6923      	ldr	r3, [r4, #16]
 8005f52:	6862      	ldr	r2, [r4, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	bfde      	ittt	le
 8005f58:	2330      	movle	r3, #48	; 0x30
 8005f5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f62:	ebac 0305 	sub.w	r3, ip, r5
 8005f66:	6123      	str	r3, [r4, #16]
 8005f68:	f8cd 8000 	str.w	r8, [sp]
 8005f6c:	463b      	mov	r3, r7
 8005f6e:	aa03      	add	r2, sp, #12
 8005f70:	4621      	mov	r1, r4
 8005f72:	4630      	mov	r0, r6
 8005f74:	f7ff fef6 	bl	8005d64 <_printf_common>
 8005f78:	3001      	adds	r0, #1
 8005f7a:	d14d      	bne.n	8006018 <_printf_i+0x1c8>
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f80:	b005      	add	sp, #20
 8005f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f86:	4839      	ldr	r0, [pc, #228]	; (800606c <_printf_i+0x21c>)
 8005f88:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005f8c:	6813      	ldr	r3, [r2, #0]
 8005f8e:	6821      	ldr	r1, [r4, #0]
 8005f90:	1d1d      	adds	r5, r3, #4
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6015      	str	r5, [r2, #0]
 8005f96:	060a      	lsls	r2, r1, #24
 8005f98:	d50b      	bpl.n	8005fb2 <_printf_i+0x162>
 8005f9a:	07ca      	lsls	r2, r1, #31
 8005f9c:	bf44      	itt	mi
 8005f9e:	f041 0120 	orrmi.w	r1, r1, #32
 8005fa2:	6021      	strmi	r1, [r4, #0]
 8005fa4:	b91b      	cbnz	r3, 8005fae <_printf_i+0x15e>
 8005fa6:	6822      	ldr	r2, [r4, #0]
 8005fa8:	f022 0220 	bic.w	r2, r2, #32
 8005fac:	6022      	str	r2, [r4, #0]
 8005fae:	2210      	movs	r2, #16
 8005fb0:	e7b7      	b.n	8005f22 <_printf_i+0xd2>
 8005fb2:	064d      	lsls	r5, r1, #25
 8005fb4:	bf48      	it	mi
 8005fb6:	b29b      	uxthmi	r3, r3
 8005fb8:	e7ef      	b.n	8005f9a <_printf_i+0x14a>
 8005fba:	4665      	mov	r5, ip
 8005fbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fc0:	fb02 3311 	mls	r3, r2, r1, r3
 8005fc4:	5cc3      	ldrb	r3, [r0, r3]
 8005fc6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005fca:	460b      	mov	r3, r1
 8005fcc:	2900      	cmp	r1, #0
 8005fce:	d1f5      	bne.n	8005fbc <_printf_i+0x16c>
 8005fd0:	e7b9      	b.n	8005f46 <_printf_i+0xf6>
 8005fd2:	6813      	ldr	r3, [r2, #0]
 8005fd4:	6825      	ldr	r5, [r4, #0]
 8005fd6:	6961      	ldr	r1, [r4, #20]
 8005fd8:	1d18      	adds	r0, r3, #4
 8005fda:	6010      	str	r0, [r2, #0]
 8005fdc:	0628      	lsls	r0, r5, #24
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	d501      	bpl.n	8005fe6 <_printf_i+0x196>
 8005fe2:	6019      	str	r1, [r3, #0]
 8005fe4:	e002      	b.n	8005fec <_printf_i+0x19c>
 8005fe6:	066a      	lsls	r2, r5, #25
 8005fe8:	d5fb      	bpl.n	8005fe2 <_printf_i+0x192>
 8005fea:	8019      	strh	r1, [r3, #0]
 8005fec:	2300      	movs	r3, #0
 8005fee:	6123      	str	r3, [r4, #16]
 8005ff0:	4665      	mov	r5, ip
 8005ff2:	e7b9      	b.n	8005f68 <_printf_i+0x118>
 8005ff4:	6813      	ldr	r3, [r2, #0]
 8005ff6:	1d19      	adds	r1, r3, #4
 8005ff8:	6011      	str	r1, [r2, #0]
 8005ffa:	681d      	ldr	r5, [r3, #0]
 8005ffc:	6862      	ldr	r2, [r4, #4]
 8005ffe:	2100      	movs	r1, #0
 8006000:	4628      	mov	r0, r5
 8006002:	f7fa f8f5 	bl	80001f0 <memchr>
 8006006:	b108      	cbz	r0, 800600c <_printf_i+0x1bc>
 8006008:	1b40      	subs	r0, r0, r5
 800600a:	6060      	str	r0, [r4, #4]
 800600c:	6863      	ldr	r3, [r4, #4]
 800600e:	6123      	str	r3, [r4, #16]
 8006010:	2300      	movs	r3, #0
 8006012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006016:	e7a7      	b.n	8005f68 <_printf_i+0x118>
 8006018:	6923      	ldr	r3, [r4, #16]
 800601a:	462a      	mov	r2, r5
 800601c:	4639      	mov	r1, r7
 800601e:	4630      	mov	r0, r6
 8006020:	47c0      	blx	r8
 8006022:	3001      	adds	r0, #1
 8006024:	d0aa      	beq.n	8005f7c <_printf_i+0x12c>
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	079b      	lsls	r3, r3, #30
 800602a:	d413      	bmi.n	8006054 <_printf_i+0x204>
 800602c:	68e0      	ldr	r0, [r4, #12]
 800602e:	9b03      	ldr	r3, [sp, #12]
 8006030:	4298      	cmp	r0, r3
 8006032:	bfb8      	it	lt
 8006034:	4618      	movlt	r0, r3
 8006036:	e7a3      	b.n	8005f80 <_printf_i+0x130>
 8006038:	2301      	movs	r3, #1
 800603a:	464a      	mov	r2, r9
 800603c:	4639      	mov	r1, r7
 800603e:	4630      	mov	r0, r6
 8006040:	47c0      	blx	r8
 8006042:	3001      	adds	r0, #1
 8006044:	d09a      	beq.n	8005f7c <_printf_i+0x12c>
 8006046:	3501      	adds	r5, #1
 8006048:	68e3      	ldr	r3, [r4, #12]
 800604a:	9a03      	ldr	r2, [sp, #12]
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	42ab      	cmp	r3, r5
 8006050:	dcf2      	bgt.n	8006038 <_printf_i+0x1e8>
 8006052:	e7eb      	b.n	800602c <_printf_i+0x1dc>
 8006054:	2500      	movs	r5, #0
 8006056:	f104 0919 	add.w	r9, r4, #25
 800605a:	e7f5      	b.n	8006048 <_printf_i+0x1f8>
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1ac      	bne.n	8005fba <_printf_i+0x16a>
 8006060:	7803      	ldrb	r3, [r0, #0]
 8006062:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006066:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800606a:	e76c      	b.n	8005f46 <_printf_i+0xf6>
 800606c:	08007952 	.word	0x08007952
 8006070:	08007963 	.word	0x08007963

08006074 <siprintf>:
 8006074:	b40e      	push	{r1, r2, r3}
 8006076:	b500      	push	{lr}
 8006078:	b09c      	sub	sp, #112	; 0x70
 800607a:	ab1d      	add	r3, sp, #116	; 0x74
 800607c:	9002      	str	r0, [sp, #8]
 800607e:	9006      	str	r0, [sp, #24]
 8006080:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006084:	4809      	ldr	r0, [pc, #36]	; (80060ac <siprintf+0x38>)
 8006086:	9107      	str	r1, [sp, #28]
 8006088:	9104      	str	r1, [sp, #16]
 800608a:	4909      	ldr	r1, [pc, #36]	; (80060b0 <siprintf+0x3c>)
 800608c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006090:	9105      	str	r1, [sp, #20]
 8006092:	6800      	ldr	r0, [r0, #0]
 8006094:	9301      	str	r3, [sp, #4]
 8006096:	a902      	add	r1, sp, #8
 8006098:	f001 fa5e 	bl	8007558 <_svfiprintf_r>
 800609c:	9b02      	ldr	r3, [sp, #8]
 800609e:	2200      	movs	r2, #0
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	b01c      	add	sp, #112	; 0x70
 80060a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060a8:	b003      	add	sp, #12
 80060aa:	4770      	bx	lr
 80060ac:	20000024 	.word	0x20000024
 80060b0:	ffff0208 	.word	0xffff0208

080060b4 <quorem>:
 80060b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b8:	6903      	ldr	r3, [r0, #16]
 80060ba:	690c      	ldr	r4, [r1, #16]
 80060bc:	42a3      	cmp	r3, r4
 80060be:	4680      	mov	r8, r0
 80060c0:	f2c0 8082 	blt.w	80061c8 <quorem+0x114>
 80060c4:	3c01      	subs	r4, #1
 80060c6:	f101 0714 	add.w	r7, r1, #20
 80060ca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80060ce:	f100 0614 	add.w	r6, r0, #20
 80060d2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80060d6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80060da:	eb06 030c 	add.w	r3, r6, ip
 80060de:	3501      	adds	r5, #1
 80060e0:	eb07 090c 	add.w	r9, r7, ip
 80060e4:	9301      	str	r3, [sp, #4]
 80060e6:	fbb0 f5f5 	udiv	r5, r0, r5
 80060ea:	b395      	cbz	r5, 8006152 <quorem+0x9e>
 80060ec:	f04f 0a00 	mov.w	sl, #0
 80060f0:	4638      	mov	r0, r7
 80060f2:	46b6      	mov	lr, r6
 80060f4:	46d3      	mov	fp, sl
 80060f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80060fa:	b293      	uxth	r3, r2
 80060fc:	fb05 a303 	mla	r3, r5, r3, sl
 8006100:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006104:	b29b      	uxth	r3, r3
 8006106:	ebab 0303 	sub.w	r3, fp, r3
 800610a:	0c12      	lsrs	r2, r2, #16
 800610c:	f8de b000 	ldr.w	fp, [lr]
 8006110:	fb05 a202 	mla	r2, r5, r2, sl
 8006114:	fa13 f38b 	uxtah	r3, r3, fp
 8006118:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800611c:	fa1f fb82 	uxth.w	fp, r2
 8006120:	f8de 2000 	ldr.w	r2, [lr]
 8006124:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006128:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800612c:	b29b      	uxth	r3, r3
 800612e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006132:	4581      	cmp	r9, r0
 8006134:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006138:	f84e 3b04 	str.w	r3, [lr], #4
 800613c:	d2db      	bcs.n	80060f6 <quorem+0x42>
 800613e:	f856 300c 	ldr.w	r3, [r6, ip]
 8006142:	b933      	cbnz	r3, 8006152 <quorem+0x9e>
 8006144:	9b01      	ldr	r3, [sp, #4]
 8006146:	3b04      	subs	r3, #4
 8006148:	429e      	cmp	r6, r3
 800614a:	461a      	mov	r2, r3
 800614c:	d330      	bcc.n	80061b0 <quorem+0xfc>
 800614e:	f8c8 4010 	str.w	r4, [r8, #16]
 8006152:	4640      	mov	r0, r8
 8006154:	f001 f82a 	bl	80071ac <__mcmp>
 8006158:	2800      	cmp	r0, #0
 800615a:	db25      	blt.n	80061a8 <quorem+0xf4>
 800615c:	3501      	adds	r5, #1
 800615e:	4630      	mov	r0, r6
 8006160:	f04f 0c00 	mov.w	ip, #0
 8006164:	f857 2b04 	ldr.w	r2, [r7], #4
 8006168:	f8d0 e000 	ldr.w	lr, [r0]
 800616c:	b293      	uxth	r3, r2
 800616e:	ebac 0303 	sub.w	r3, ip, r3
 8006172:	0c12      	lsrs	r2, r2, #16
 8006174:	fa13 f38e 	uxtah	r3, r3, lr
 8006178:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800617c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006180:	b29b      	uxth	r3, r3
 8006182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006186:	45b9      	cmp	r9, r7
 8006188:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800618c:	f840 3b04 	str.w	r3, [r0], #4
 8006190:	d2e8      	bcs.n	8006164 <quorem+0xb0>
 8006192:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006196:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800619a:	b92a      	cbnz	r2, 80061a8 <quorem+0xf4>
 800619c:	3b04      	subs	r3, #4
 800619e:	429e      	cmp	r6, r3
 80061a0:	461a      	mov	r2, r3
 80061a2:	d30b      	bcc.n	80061bc <quorem+0x108>
 80061a4:	f8c8 4010 	str.w	r4, [r8, #16]
 80061a8:	4628      	mov	r0, r5
 80061aa:	b003      	add	sp, #12
 80061ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	3b04      	subs	r3, #4
 80061b4:	2a00      	cmp	r2, #0
 80061b6:	d1ca      	bne.n	800614e <quorem+0x9a>
 80061b8:	3c01      	subs	r4, #1
 80061ba:	e7c5      	b.n	8006148 <quorem+0x94>
 80061bc:	6812      	ldr	r2, [r2, #0]
 80061be:	3b04      	subs	r3, #4
 80061c0:	2a00      	cmp	r2, #0
 80061c2:	d1ef      	bne.n	80061a4 <quorem+0xf0>
 80061c4:	3c01      	subs	r4, #1
 80061c6:	e7ea      	b.n	800619e <quorem+0xea>
 80061c8:	2000      	movs	r0, #0
 80061ca:	e7ee      	b.n	80061aa <quorem+0xf6>
 80061cc:	0000      	movs	r0, r0
	...

080061d0 <_dtoa_r>:
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	ec57 6b10 	vmov	r6, r7, d0
 80061d8:	b097      	sub	sp, #92	; 0x5c
 80061da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80061dc:	9106      	str	r1, [sp, #24]
 80061de:	4604      	mov	r4, r0
 80061e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80061e2:	9312      	str	r3, [sp, #72]	; 0x48
 80061e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80061e8:	e9cd 6700 	strd	r6, r7, [sp]
 80061ec:	b93d      	cbnz	r5, 80061fe <_dtoa_r+0x2e>
 80061ee:	2010      	movs	r0, #16
 80061f0:	f000 fdb4 	bl	8006d5c <malloc>
 80061f4:	6260      	str	r0, [r4, #36]	; 0x24
 80061f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80061fa:	6005      	str	r5, [r0, #0]
 80061fc:	60c5      	str	r5, [r0, #12]
 80061fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006200:	6819      	ldr	r1, [r3, #0]
 8006202:	b151      	cbz	r1, 800621a <_dtoa_r+0x4a>
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	604a      	str	r2, [r1, #4]
 8006208:	2301      	movs	r3, #1
 800620a:	4093      	lsls	r3, r2
 800620c:	608b      	str	r3, [r1, #8]
 800620e:	4620      	mov	r0, r4
 8006210:	f000 fdeb 	bl	8006dea <_Bfree>
 8006214:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006216:	2200      	movs	r2, #0
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	1e3b      	subs	r3, r7, #0
 800621c:	bfbb      	ittet	lt
 800621e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006222:	9301      	strlt	r3, [sp, #4]
 8006224:	2300      	movge	r3, #0
 8006226:	2201      	movlt	r2, #1
 8006228:	bfac      	ite	ge
 800622a:	f8c8 3000 	strge.w	r3, [r8]
 800622e:	f8c8 2000 	strlt.w	r2, [r8]
 8006232:	4baf      	ldr	r3, [pc, #700]	; (80064f0 <_dtoa_r+0x320>)
 8006234:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006238:	ea33 0308 	bics.w	r3, r3, r8
 800623c:	d114      	bne.n	8006268 <_dtoa_r+0x98>
 800623e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006240:	f242 730f 	movw	r3, #9999	; 0x270f
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	9b00      	ldr	r3, [sp, #0]
 8006248:	b923      	cbnz	r3, 8006254 <_dtoa_r+0x84>
 800624a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800624e:	2800      	cmp	r0, #0
 8006250:	f000 8542 	beq.w	8006cd8 <_dtoa_r+0xb08>
 8006254:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006256:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006504 <_dtoa_r+0x334>
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 8544 	beq.w	8006ce8 <_dtoa_r+0xb18>
 8006260:	f10b 0303 	add.w	r3, fp, #3
 8006264:	f000 bd3e 	b.w	8006ce4 <_dtoa_r+0xb14>
 8006268:	e9dd 6700 	ldrd	r6, r7, [sp]
 800626c:	2200      	movs	r2, #0
 800626e:	2300      	movs	r3, #0
 8006270:	4630      	mov	r0, r6
 8006272:	4639      	mov	r1, r7
 8006274:	f7fa fc30 	bl	8000ad8 <__aeabi_dcmpeq>
 8006278:	4681      	mov	r9, r0
 800627a:	b168      	cbz	r0, 8006298 <_dtoa_r+0xc8>
 800627c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800627e:	2301      	movs	r3, #1
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 8524 	beq.w	8006cd2 <_dtoa_r+0xb02>
 800628a:	4b9a      	ldr	r3, [pc, #616]	; (80064f4 <_dtoa_r+0x324>)
 800628c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800628e:	f103 3bff 	add.w	fp, r3, #4294967295
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	f000 bd28 	b.w	8006ce8 <_dtoa_r+0xb18>
 8006298:	aa14      	add	r2, sp, #80	; 0x50
 800629a:	a915      	add	r1, sp, #84	; 0x54
 800629c:	ec47 6b10 	vmov	d0, r6, r7
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 fffa 	bl	800729a <__d2b>
 80062a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80062aa:	9004      	str	r0, [sp, #16]
 80062ac:	2d00      	cmp	r5, #0
 80062ae:	d07c      	beq.n	80063aa <_dtoa_r+0x1da>
 80062b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80062b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80062b8:	46b2      	mov	sl, r6
 80062ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80062be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80062c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80062c6:	2200      	movs	r2, #0
 80062c8:	4b8b      	ldr	r3, [pc, #556]	; (80064f8 <_dtoa_r+0x328>)
 80062ca:	4650      	mov	r0, sl
 80062cc:	4659      	mov	r1, fp
 80062ce:	f7f9 ffe3 	bl	8000298 <__aeabi_dsub>
 80062d2:	a381      	add	r3, pc, #516	; (adr r3, 80064d8 <_dtoa_r+0x308>)
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f7fa f996 	bl	8000608 <__aeabi_dmul>
 80062dc:	a380      	add	r3, pc, #512	; (adr r3, 80064e0 <_dtoa_r+0x310>)
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	f7f9 ffdb 	bl	800029c <__adddf3>
 80062e6:	4606      	mov	r6, r0
 80062e8:	4628      	mov	r0, r5
 80062ea:	460f      	mov	r7, r1
 80062ec:	f7fa f922 	bl	8000534 <__aeabi_i2d>
 80062f0:	a37d      	add	r3, pc, #500	; (adr r3, 80064e8 <_dtoa_r+0x318>)
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	f7fa f987 	bl	8000608 <__aeabi_dmul>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	4630      	mov	r0, r6
 8006300:	4639      	mov	r1, r7
 8006302:	f7f9 ffcb 	bl	800029c <__adddf3>
 8006306:	4606      	mov	r6, r0
 8006308:	460f      	mov	r7, r1
 800630a:	f7fa fc2d 	bl	8000b68 <__aeabi_d2iz>
 800630e:	2200      	movs	r2, #0
 8006310:	4682      	mov	sl, r0
 8006312:	2300      	movs	r3, #0
 8006314:	4630      	mov	r0, r6
 8006316:	4639      	mov	r1, r7
 8006318:	f7fa fbe8 	bl	8000aec <__aeabi_dcmplt>
 800631c:	b148      	cbz	r0, 8006332 <_dtoa_r+0x162>
 800631e:	4650      	mov	r0, sl
 8006320:	f7fa f908 	bl	8000534 <__aeabi_i2d>
 8006324:	4632      	mov	r2, r6
 8006326:	463b      	mov	r3, r7
 8006328:	f7fa fbd6 	bl	8000ad8 <__aeabi_dcmpeq>
 800632c:	b908      	cbnz	r0, 8006332 <_dtoa_r+0x162>
 800632e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006332:	f1ba 0f16 	cmp.w	sl, #22
 8006336:	d859      	bhi.n	80063ec <_dtoa_r+0x21c>
 8006338:	4970      	ldr	r1, [pc, #448]	; (80064fc <_dtoa_r+0x32c>)
 800633a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800633e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006342:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006346:	f7fa fbef 	bl	8000b28 <__aeabi_dcmpgt>
 800634a:	2800      	cmp	r0, #0
 800634c:	d050      	beq.n	80063f0 <_dtoa_r+0x220>
 800634e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006352:	2300      	movs	r3, #0
 8006354:	930f      	str	r3, [sp, #60]	; 0x3c
 8006356:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006358:	1b5d      	subs	r5, r3, r5
 800635a:	f1b5 0801 	subs.w	r8, r5, #1
 800635e:	bf49      	itett	mi
 8006360:	f1c5 0301 	rsbmi	r3, r5, #1
 8006364:	2300      	movpl	r3, #0
 8006366:	9305      	strmi	r3, [sp, #20]
 8006368:	f04f 0800 	movmi.w	r8, #0
 800636c:	bf58      	it	pl
 800636e:	9305      	strpl	r3, [sp, #20]
 8006370:	f1ba 0f00 	cmp.w	sl, #0
 8006374:	db3e      	blt.n	80063f4 <_dtoa_r+0x224>
 8006376:	2300      	movs	r3, #0
 8006378:	44d0      	add	r8, sl
 800637a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800637e:	9307      	str	r3, [sp, #28]
 8006380:	9b06      	ldr	r3, [sp, #24]
 8006382:	2b09      	cmp	r3, #9
 8006384:	f200 8090 	bhi.w	80064a8 <_dtoa_r+0x2d8>
 8006388:	2b05      	cmp	r3, #5
 800638a:	bfc4      	itt	gt
 800638c:	3b04      	subgt	r3, #4
 800638e:	9306      	strgt	r3, [sp, #24]
 8006390:	9b06      	ldr	r3, [sp, #24]
 8006392:	f1a3 0302 	sub.w	r3, r3, #2
 8006396:	bfcc      	ite	gt
 8006398:	2500      	movgt	r5, #0
 800639a:	2501      	movle	r5, #1
 800639c:	2b03      	cmp	r3, #3
 800639e:	f200 808f 	bhi.w	80064c0 <_dtoa_r+0x2f0>
 80063a2:	e8df f003 	tbb	[pc, r3]
 80063a6:	7f7d      	.short	0x7f7d
 80063a8:	7131      	.short	0x7131
 80063aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80063ae:	441d      	add	r5, r3
 80063b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80063b4:	2820      	cmp	r0, #32
 80063b6:	dd13      	ble.n	80063e0 <_dtoa_r+0x210>
 80063b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80063bc:	9b00      	ldr	r3, [sp, #0]
 80063be:	fa08 f800 	lsl.w	r8, r8, r0
 80063c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80063c6:	fa23 f000 	lsr.w	r0, r3, r0
 80063ca:	ea48 0000 	orr.w	r0, r8, r0
 80063ce:	f7fa f8a1 	bl	8000514 <__aeabi_ui2d>
 80063d2:	2301      	movs	r3, #1
 80063d4:	4682      	mov	sl, r0
 80063d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80063da:	3d01      	subs	r5, #1
 80063dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80063de:	e772      	b.n	80062c6 <_dtoa_r+0xf6>
 80063e0:	9b00      	ldr	r3, [sp, #0]
 80063e2:	f1c0 0020 	rsb	r0, r0, #32
 80063e6:	fa03 f000 	lsl.w	r0, r3, r0
 80063ea:	e7f0      	b.n	80063ce <_dtoa_r+0x1fe>
 80063ec:	2301      	movs	r3, #1
 80063ee:	e7b1      	b.n	8006354 <_dtoa_r+0x184>
 80063f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80063f2:	e7b0      	b.n	8006356 <_dtoa_r+0x186>
 80063f4:	9b05      	ldr	r3, [sp, #20]
 80063f6:	eba3 030a 	sub.w	r3, r3, sl
 80063fa:	9305      	str	r3, [sp, #20]
 80063fc:	f1ca 0300 	rsb	r3, sl, #0
 8006400:	9307      	str	r3, [sp, #28]
 8006402:	2300      	movs	r3, #0
 8006404:	930e      	str	r3, [sp, #56]	; 0x38
 8006406:	e7bb      	b.n	8006380 <_dtoa_r+0x1b0>
 8006408:	2301      	movs	r3, #1
 800640a:	930a      	str	r3, [sp, #40]	; 0x28
 800640c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800640e:	2b00      	cmp	r3, #0
 8006410:	dd59      	ble.n	80064c6 <_dtoa_r+0x2f6>
 8006412:	9302      	str	r3, [sp, #8]
 8006414:	4699      	mov	r9, r3
 8006416:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006418:	2200      	movs	r2, #0
 800641a:	6072      	str	r2, [r6, #4]
 800641c:	2204      	movs	r2, #4
 800641e:	f102 0014 	add.w	r0, r2, #20
 8006422:	4298      	cmp	r0, r3
 8006424:	6871      	ldr	r1, [r6, #4]
 8006426:	d953      	bls.n	80064d0 <_dtoa_r+0x300>
 8006428:	4620      	mov	r0, r4
 800642a:	f000 fcaa 	bl	8006d82 <_Balloc>
 800642e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006430:	6030      	str	r0, [r6, #0]
 8006432:	f1b9 0f0e 	cmp.w	r9, #14
 8006436:	f8d3 b000 	ldr.w	fp, [r3]
 800643a:	f200 80e6 	bhi.w	800660a <_dtoa_r+0x43a>
 800643e:	2d00      	cmp	r5, #0
 8006440:	f000 80e3 	beq.w	800660a <_dtoa_r+0x43a>
 8006444:	ed9d 7b00 	vldr	d7, [sp]
 8006448:	f1ba 0f00 	cmp.w	sl, #0
 800644c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006450:	dd74      	ble.n	800653c <_dtoa_r+0x36c>
 8006452:	4a2a      	ldr	r2, [pc, #168]	; (80064fc <_dtoa_r+0x32c>)
 8006454:	f00a 030f 	and.w	r3, sl, #15
 8006458:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800645c:	ed93 7b00 	vldr	d7, [r3]
 8006460:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006464:	06f0      	lsls	r0, r6, #27
 8006466:	ed8d 7b08 	vstr	d7, [sp, #32]
 800646a:	d565      	bpl.n	8006538 <_dtoa_r+0x368>
 800646c:	4b24      	ldr	r3, [pc, #144]	; (8006500 <_dtoa_r+0x330>)
 800646e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006472:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006476:	f7fa f9f1 	bl	800085c <__aeabi_ddiv>
 800647a:	e9cd 0100 	strd	r0, r1, [sp]
 800647e:	f006 060f 	and.w	r6, r6, #15
 8006482:	2503      	movs	r5, #3
 8006484:	4f1e      	ldr	r7, [pc, #120]	; (8006500 <_dtoa_r+0x330>)
 8006486:	e04c      	b.n	8006522 <_dtoa_r+0x352>
 8006488:	2301      	movs	r3, #1
 800648a:	930a      	str	r3, [sp, #40]	; 0x28
 800648c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800648e:	4453      	add	r3, sl
 8006490:	f103 0901 	add.w	r9, r3, #1
 8006494:	9302      	str	r3, [sp, #8]
 8006496:	464b      	mov	r3, r9
 8006498:	2b01      	cmp	r3, #1
 800649a:	bfb8      	it	lt
 800649c:	2301      	movlt	r3, #1
 800649e:	e7ba      	b.n	8006416 <_dtoa_r+0x246>
 80064a0:	2300      	movs	r3, #0
 80064a2:	e7b2      	b.n	800640a <_dtoa_r+0x23a>
 80064a4:	2300      	movs	r3, #0
 80064a6:	e7f0      	b.n	800648a <_dtoa_r+0x2ba>
 80064a8:	2501      	movs	r5, #1
 80064aa:	2300      	movs	r3, #0
 80064ac:	9306      	str	r3, [sp, #24]
 80064ae:	950a      	str	r5, [sp, #40]	; 0x28
 80064b0:	f04f 33ff 	mov.w	r3, #4294967295
 80064b4:	9302      	str	r3, [sp, #8]
 80064b6:	4699      	mov	r9, r3
 80064b8:	2200      	movs	r2, #0
 80064ba:	2312      	movs	r3, #18
 80064bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80064be:	e7aa      	b.n	8006416 <_dtoa_r+0x246>
 80064c0:	2301      	movs	r3, #1
 80064c2:	930a      	str	r3, [sp, #40]	; 0x28
 80064c4:	e7f4      	b.n	80064b0 <_dtoa_r+0x2e0>
 80064c6:	2301      	movs	r3, #1
 80064c8:	9302      	str	r3, [sp, #8]
 80064ca:	4699      	mov	r9, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	e7f5      	b.n	80064bc <_dtoa_r+0x2ec>
 80064d0:	3101      	adds	r1, #1
 80064d2:	6071      	str	r1, [r6, #4]
 80064d4:	0052      	lsls	r2, r2, #1
 80064d6:	e7a2      	b.n	800641e <_dtoa_r+0x24e>
 80064d8:	636f4361 	.word	0x636f4361
 80064dc:	3fd287a7 	.word	0x3fd287a7
 80064e0:	8b60c8b3 	.word	0x8b60c8b3
 80064e4:	3fc68a28 	.word	0x3fc68a28
 80064e8:	509f79fb 	.word	0x509f79fb
 80064ec:	3fd34413 	.word	0x3fd34413
 80064f0:	7ff00000 	.word	0x7ff00000
 80064f4:	08007951 	.word	0x08007951
 80064f8:	3ff80000 	.word	0x3ff80000
 80064fc:	080079b0 	.word	0x080079b0
 8006500:	08007988 	.word	0x08007988
 8006504:	0800797d 	.word	0x0800797d
 8006508:	07f1      	lsls	r1, r6, #31
 800650a:	d508      	bpl.n	800651e <_dtoa_r+0x34e>
 800650c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006514:	f7fa f878 	bl	8000608 <__aeabi_dmul>
 8006518:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800651c:	3501      	adds	r5, #1
 800651e:	1076      	asrs	r6, r6, #1
 8006520:	3708      	adds	r7, #8
 8006522:	2e00      	cmp	r6, #0
 8006524:	d1f0      	bne.n	8006508 <_dtoa_r+0x338>
 8006526:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800652a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800652e:	f7fa f995 	bl	800085c <__aeabi_ddiv>
 8006532:	e9cd 0100 	strd	r0, r1, [sp]
 8006536:	e01a      	b.n	800656e <_dtoa_r+0x39e>
 8006538:	2502      	movs	r5, #2
 800653a:	e7a3      	b.n	8006484 <_dtoa_r+0x2b4>
 800653c:	f000 80a0 	beq.w	8006680 <_dtoa_r+0x4b0>
 8006540:	f1ca 0600 	rsb	r6, sl, #0
 8006544:	4b9f      	ldr	r3, [pc, #636]	; (80067c4 <_dtoa_r+0x5f4>)
 8006546:	4fa0      	ldr	r7, [pc, #640]	; (80067c8 <_dtoa_r+0x5f8>)
 8006548:	f006 020f 	and.w	r2, r6, #15
 800654c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006558:	f7fa f856 	bl	8000608 <__aeabi_dmul>
 800655c:	e9cd 0100 	strd	r0, r1, [sp]
 8006560:	1136      	asrs	r6, r6, #4
 8006562:	2300      	movs	r3, #0
 8006564:	2502      	movs	r5, #2
 8006566:	2e00      	cmp	r6, #0
 8006568:	d17f      	bne.n	800666a <_dtoa_r+0x49a>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e1      	bne.n	8006532 <_dtoa_r+0x362>
 800656e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 8087 	beq.w	8006684 <_dtoa_r+0x4b4>
 8006576:	e9dd 6700 	ldrd	r6, r7, [sp]
 800657a:	2200      	movs	r2, #0
 800657c:	4b93      	ldr	r3, [pc, #588]	; (80067cc <_dtoa_r+0x5fc>)
 800657e:	4630      	mov	r0, r6
 8006580:	4639      	mov	r1, r7
 8006582:	f7fa fab3 	bl	8000aec <__aeabi_dcmplt>
 8006586:	2800      	cmp	r0, #0
 8006588:	d07c      	beq.n	8006684 <_dtoa_r+0x4b4>
 800658a:	f1b9 0f00 	cmp.w	r9, #0
 800658e:	d079      	beq.n	8006684 <_dtoa_r+0x4b4>
 8006590:	9b02      	ldr	r3, [sp, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	dd35      	ble.n	8006602 <_dtoa_r+0x432>
 8006596:	f10a 33ff 	add.w	r3, sl, #4294967295
 800659a:	9308      	str	r3, [sp, #32]
 800659c:	4639      	mov	r1, r7
 800659e:	2200      	movs	r2, #0
 80065a0:	4b8b      	ldr	r3, [pc, #556]	; (80067d0 <_dtoa_r+0x600>)
 80065a2:	4630      	mov	r0, r6
 80065a4:	f7fa f830 	bl	8000608 <__aeabi_dmul>
 80065a8:	e9cd 0100 	strd	r0, r1, [sp]
 80065ac:	9f02      	ldr	r7, [sp, #8]
 80065ae:	3501      	adds	r5, #1
 80065b0:	4628      	mov	r0, r5
 80065b2:	f7f9 ffbf 	bl	8000534 <__aeabi_i2d>
 80065b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065ba:	f7fa f825 	bl	8000608 <__aeabi_dmul>
 80065be:	2200      	movs	r2, #0
 80065c0:	4b84      	ldr	r3, [pc, #528]	; (80067d4 <_dtoa_r+0x604>)
 80065c2:	f7f9 fe6b 	bl	800029c <__adddf3>
 80065c6:	4605      	mov	r5, r0
 80065c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80065cc:	2f00      	cmp	r7, #0
 80065ce:	d15d      	bne.n	800668c <_dtoa_r+0x4bc>
 80065d0:	2200      	movs	r2, #0
 80065d2:	4b81      	ldr	r3, [pc, #516]	; (80067d8 <_dtoa_r+0x608>)
 80065d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065d8:	f7f9 fe5e 	bl	8000298 <__aeabi_dsub>
 80065dc:	462a      	mov	r2, r5
 80065de:	4633      	mov	r3, r6
 80065e0:	e9cd 0100 	strd	r0, r1, [sp]
 80065e4:	f7fa faa0 	bl	8000b28 <__aeabi_dcmpgt>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	f040 8288 	bne.w	8006afe <_dtoa_r+0x92e>
 80065ee:	462a      	mov	r2, r5
 80065f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80065f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065f8:	f7fa fa78 	bl	8000aec <__aeabi_dcmplt>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	f040 827c 	bne.w	8006afa <_dtoa_r+0x92a>
 8006602:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006606:	e9cd 2300 	strd	r2, r3, [sp]
 800660a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800660c:	2b00      	cmp	r3, #0
 800660e:	f2c0 8150 	blt.w	80068b2 <_dtoa_r+0x6e2>
 8006612:	f1ba 0f0e 	cmp.w	sl, #14
 8006616:	f300 814c 	bgt.w	80068b2 <_dtoa_r+0x6e2>
 800661a:	4b6a      	ldr	r3, [pc, #424]	; (80067c4 <_dtoa_r+0x5f4>)
 800661c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006620:	ed93 7b00 	vldr	d7, [r3]
 8006624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006626:	2b00      	cmp	r3, #0
 8006628:	ed8d 7b02 	vstr	d7, [sp, #8]
 800662c:	f280 80d8 	bge.w	80067e0 <_dtoa_r+0x610>
 8006630:	f1b9 0f00 	cmp.w	r9, #0
 8006634:	f300 80d4 	bgt.w	80067e0 <_dtoa_r+0x610>
 8006638:	f040 825e 	bne.w	8006af8 <_dtoa_r+0x928>
 800663c:	2200      	movs	r2, #0
 800663e:	4b66      	ldr	r3, [pc, #408]	; (80067d8 <_dtoa_r+0x608>)
 8006640:	ec51 0b17 	vmov	r0, r1, d7
 8006644:	f7f9 ffe0 	bl	8000608 <__aeabi_dmul>
 8006648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800664c:	f7fa fa62 	bl	8000b14 <__aeabi_dcmpge>
 8006650:	464f      	mov	r7, r9
 8006652:	464e      	mov	r6, r9
 8006654:	2800      	cmp	r0, #0
 8006656:	f040 8234 	bne.w	8006ac2 <_dtoa_r+0x8f2>
 800665a:	2331      	movs	r3, #49	; 0x31
 800665c:	f10b 0501 	add.w	r5, fp, #1
 8006660:	f88b 3000 	strb.w	r3, [fp]
 8006664:	f10a 0a01 	add.w	sl, sl, #1
 8006668:	e22f      	b.n	8006aca <_dtoa_r+0x8fa>
 800666a:	07f2      	lsls	r2, r6, #31
 800666c:	d505      	bpl.n	800667a <_dtoa_r+0x4aa>
 800666e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006672:	f7f9 ffc9 	bl	8000608 <__aeabi_dmul>
 8006676:	3501      	adds	r5, #1
 8006678:	2301      	movs	r3, #1
 800667a:	1076      	asrs	r6, r6, #1
 800667c:	3708      	adds	r7, #8
 800667e:	e772      	b.n	8006566 <_dtoa_r+0x396>
 8006680:	2502      	movs	r5, #2
 8006682:	e774      	b.n	800656e <_dtoa_r+0x39e>
 8006684:	f8cd a020 	str.w	sl, [sp, #32]
 8006688:	464f      	mov	r7, r9
 800668a:	e791      	b.n	80065b0 <_dtoa_r+0x3e0>
 800668c:	4b4d      	ldr	r3, [pc, #308]	; (80067c4 <_dtoa_r+0x5f4>)
 800668e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006692:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006698:	2b00      	cmp	r3, #0
 800669a:	d047      	beq.n	800672c <_dtoa_r+0x55c>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	2000      	movs	r0, #0
 80066a2:	494e      	ldr	r1, [pc, #312]	; (80067dc <_dtoa_r+0x60c>)
 80066a4:	f7fa f8da 	bl	800085c <__aeabi_ddiv>
 80066a8:	462a      	mov	r2, r5
 80066aa:	4633      	mov	r3, r6
 80066ac:	f7f9 fdf4 	bl	8000298 <__aeabi_dsub>
 80066b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80066b4:	465d      	mov	r5, fp
 80066b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066ba:	f7fa fa55 	bl	8000b68 <__aeabi_d2iz>
 80066be:	4606      	mov	r6, r0
 80066c0:	f7f9 ff38 	bl	8000534 <__aeabi_i2d>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066cc:	f7f9 fde4 	bl	8000298 <__aeabi_dsub>
 80066d0:	3630      	adds	r6, #48	; 0x30
 80066d2:	f805 6b01 	strb.w	r6, [r5], #1
 80066d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80066da:	e9cd 0100 	strd	r0, r1, [sp]
 80066de:	f7fa fa05 	bl	8000aec <__aeabi_dcmplt>
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d163      	bne.n	80067ae <_dtoa_r+0x5de>
 80066e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066ea:	2000      	movs	r0, #0
 80066ec:	4937      	ldr	r1, [pc, #220]	; (80067cc <_dtoa_r+0x5fc>)
 80066ee:	f7f9 fdd3 	bl	8000298 <__aeabi_dsub>
 80066f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80066f6:	f7fa f9f9 	bl	8000aec <__aeabi_dcmplt>
 80066fa:	2800      	cmp	r0, #0
 80066fc:	f040 80b7 	bne.w	800686e <_dtoa_r+0x69e>
 8006700:	eba5 030b 	sub.w	r3, r5, fp
 8006704:	429f      	cmp	r7, r3
 8006706:	f77f af7c 	ble.w	8006602 <_dtoa_r+0x432>
 800670a:	2200      	movs	r2, #0
 800670c:	4b30      	ldr	r3, [pc, #192]	; (80067d0 <_dtoa_r+0x600>)
 800670e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006712:	f7f9 ff79 	bl	8000608 <__aeabi_dmul>
 8006716:	2200      	movs	r2, #0
 8006718:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800671c:	4b2c      	ldr	r3, [pc, #176]	; (80067d0 <_dtoa_r+0x600>)
 800671e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006722:	f7f9 ff71 	bl	8000608 <__aeabi_dmul>
 8006726:	e9cd 0100 	strd	r0, r1, [sp]
 800672a:	e7c4      	b.n	80066b6 <_dtoa_r+0x4e6>
 800672c:	462a      	mov	r2, r5
 800672e:	4633      	mov	r3, r6
 8006730:	f7f9 ff6a 	bl	8000608 <__aeabi_dmul>
 8006734:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006738:	eb0b 0507 	add.w	r5, fp, r7
 800673c:	465e      	mov	r6, fp
 800673e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006742:	f7fa fa11 	bl	8000b68 <__aeabi_d2iz>
 8006746:	4607      	mov	r7, r0
 8006748:	f7f9 fef4 	bl	8000534 <__aeabi_i2d>
 800674c:	3730      	adds	r7, #48	; 0x30
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006756:	f7f9 fd9f 	bl	8000298 <__aeabi_dsub>
 800675a:	f806 7b01 	strb.w	r7, [r6], #1
 800675e:	42ae      	cmp	r6, r5
 8006760:	e9cd 0100 	strd	r0, r1, [sp]
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	d126      	bne.n	80067b8 <_dtoa_r+0x5e8>
 800676a:	4b1c      	ldr	r3, [pc, #112]	; (80067dc <_dtoa_r+0x60c>)
 800676c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006770:	f7f9 fd94 	bl	800029c <__adddf3>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	e9dd 0100 	ldrd	r0, r1, [sp]
 800677c:	f7fa f9d4 	bl	8000b28 <__aeabi_dcmpgt>
 8006780:	2800      	cmp	r0, #0
 8006782:	d174      	bne.n	800686e <_dtoa_r+0x69e>
 8006784:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006788:	2000      	movs	r0, #0
 800678a:	4914      	ldr	r1, [pc, #80]	; (80067dc <_dtoa_r+0x60c>)
 800678c:	f7f9 fd84 	bl	8000298 <__aeabi_dsub>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006798:	f7fa f9a8 	bl	8000aec <__aeabi_dcmplt>
 800679c:	2800      	cmp	r0, #0
 800679e:	f43f af30 	beq.w	8006602 <_dtoa_r+0x432>
 80067a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067a6:	2b30      	cmp	r3, #48	; 0x30
 80067a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80067ac:	d002      	beq.n	80067b4 <_dtoa_r+0x5e4>
 80067ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80067b2:	e04a      	b.n	800684a <_dtoa_r+0x67a>
 80067b4:	4615      	mov	r5, r2
 80067b6:	e7f4      	b.n	80067a2 <_dtoa_r+0x5d2>
 80067b8:	4b05      	ldr	r3, [pc, #20]	; (80067d0 <_dtoa_r+0x600>)
 80067ba:	f7f9 ff25 	bl	8000608 <__aeabi_dmul>
 80067be:	e9cd 0100 	strd	r0, r1, [sp]
 80067c2:	e7bc      	b.n	800673e <_dtoa_r+0x56e>
 80067c4:	080079b0 	.word	0x080079b0
 80067c8:	08007988 	.word	0x08007988
 80067cc:	3ff00000 	.word	0x3ff00000
 80067d0:	40240000 	.word	0x40240000
 80067d4:	401c0000 	.word	0x401c0000
 80067d8:	40140000 	.word	0x40140000
 80067dc:	3fe00000 	.word	0x3fe00000
 80067e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80067e4:	465d      	mov	r5, fp
 80067e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067ea:	4630      	mov	r0, r6
 80067ec:	4639      	mov	r1, r7
 80067ee:	f7fa f835 	bl	800085c <__aeabi_ddiv>
 80067f2:	f7fa f9b9 	bl	8000b68 <__aeabi_d2iz>
 80067f6:	4680      	mov	r8, r0
 80067f8:	f7f9 fe9c 	bl	8000534 <__aeabi_i2d>
 80067fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006800:	f7f9 ff02 	bl	8000608 <__aeabi_dmul>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4630      	mov	r0, r6
 800680a:	4639      	mov	r1, r7
 800680c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006810:	f7f9 fd42 	bl	8000298 <__aeabi_dsub>
 8006814:	f805 6b01 	strb.w	r6, [r5], #1
 8006818:	eba5 060b 	sub.w	r6, r5, fp
 800681c:	45b1      	cmp	r9, r6
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	d139      	bne.n	8006898 <_dtoa_r+0x6c8>
 8006824:	f7f9 fd3a 	bl	800029c <__adddf3>
 8006828:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800682c:	4606      	mov	r6, r0
 800682e:	460f      	mov	r7, r1
 8006830:	f7fa f97a 	bl	8000b28 <__aeabi_dcmpgt>
 8006834:	b9c8      	cbnz	r0, 800686a <_dtoa_r+0x69a>
 8006836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800683a:	4630      	mov	r0, r6
 800683c:	4639      	mov	r1, r7
 800683e:	f7fa f94b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006842:	b110      	cbz	r0, 800684a <_dtoa_r+0x67a>
 8006844:	f018 0f01 	tst.w	r8, #1
 8006848:	d10f      	bne.n	800686a <_dtoa_r+0x69a>
 800684a:	9904      	ldr	r1, [sp, #16]
 800684c:	4620      	mov	r0, r4
 800684e:	f000 facc 	bl	8006dea <_Bfree>
 8006852:	2300      	movs	r3, #0
 8006854:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006856:	702b      	strb	r3, [r5, #0]
 8006858:	f10a 0301 	add.w	r3, sl, #1
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 8241 	beq.w	8006ce8 <_dtoa_r+0xb18>
 8006866:	601d      	str	r5, [r3, #0]
 8006868:	e23e      	b.n	8006ce8 <_dtoa_r+0xb18>
 800686a:	f8cd a020 	str.w	sl, [sp, #32]
 800686e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006872:	2a39      	cmp	r2, #57	; 0x39
 8006874:	f105 33ff 	add.w	r3, r5, #4294967295
 8006878:	d108      	bne.n	800688c <_dtoa_r+0x6bc>
 800687a:	459b      	cmp	fp, r3
 800687c:	d10a      	bne.n	8006894 <_dtoa_r+0x6c4>
 800687e:	9b08      	ldr	r3, [sp, #32]
 8006880:	3301      	adds	r3, #1
 8006882:	9308      	str	r3, [sp, #32]
 8006884:	2330      	movs	r3, #48	; 0x30
 8006886:	f88b 3000 	strb.w	r3, [fp]
 800688a:	465b      	mov	r3, fp
 800688c:	781a      	ldrb	r2, [r3, #0]
 800688e:	3201      	adds	r2, #1
 8006890:	701a      	strb	r2, [r3, #0]
 8006892:	e78c      	b.n	80067ae <_dtoa_r+0x5de>
 8006894:	461d      	mov	r5, r3
 8006896:	e7ea      	b.n	800686e <_dtoa_r+0x69e>
 8006898:	2200      	movs	r2, #0
 800689a:	4b9b      	ldr	r3, [pc, #620]	; (8006b08 <_dtoa_r+0x938>)
 800689c:	f7f9 feb4 	bl	8000608 <__aeabi_dmul>
 80068a0:	2200      	movs	r2, #0
 80068a2:	2300      	movs	r3, #0
 80068a4:	4606      	mov	r6, r0
 80068a6:	460f      	mov	r7, r1
 80068a8:	f7fa f916 	bl	8000ad8 <__aeabi_dcmpeq>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d09a      	beq.n	80067e6 <_dtoa_r+0x616>
 80068b0:	e7cb      	b.n	800684a <_dtoa_r+0x67a>
 80068b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068b4:	2a00      	cmp	r2, #0
 80068b6:	f000 808b 	beq.w	80069d0 <_dtoa_r+0x800>
 80068ba:	9a06      	ldr	r2, [sp, #24]
 80068bc:	2a01      	cmp	r2, #1
 80068be:	dc6e      	bgt.n	800699e <_dtoa_r+0x7ce>
 80068c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80068c2:	2a00      	cmp	r2, #0
 80068c4:	d067      	beq.n	8006996 <_dtoa_r+0x7c6>
 80068c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068ca:	9f07      	ldr	r7, [sp, #28]
 80068cc:	9d05      	ldr	r5, [sp, #20]
 80068ce:	9a05      	ldr	r2, [sp, #20]
 80068d0:	2101      	movs	r1, #1
 80068d2:	441a      	add	r2, r3
 80068d4:	4620      	mov	r0, r4
 80068d6:	9205      	str	r2, [sp, #20]
 80068d8:	4498      	add	r8, r3
 80068da:	f000 fb26 	bl	8006f2a <__i2b>
 80068de:	4606      	mov	r6, r0
 80068e0:	2d00      	cmp	r5, #0
 80068e2:	dd0c      	ble.n	80068fe <_dtoa_r+0x72e>
 80068e4:	f1b8 0f00 	cmp.w	r8, #0
 80068e8:	dd09      	ble.n	80068fe <_dtoa_r+0x72e>
 80068ea:	4545      	cmp	r5, r8
 80068ec:	9a05      	ldr	r2, [sp, #20]
 80068ee:	462b      	mov	r3, r5
 80068f0:	bfa8      	it	ge
 80068f2:	4643      	movge	r3, r8
 80068f4:	1ad2      	subs	r2, r2, r3
 80068f6:	9205      	str	r2, [sp, #20]
 80068f8:	1aed      	subs	r5, r5, r3
 80068fa:	eba8 0803 	sub.w	r8, r8, r3
 80068fe:	9b07      	ldr	r3, [sp, #28]
 8006900:	b1eb      	cbz	r3, 800693e <_dtoa_r+0x76e>
 8006902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006904:	2b00      	cmp	r3, #0
 8006906:	d067      	beq.n	80069d8 <_dtoa_r+0x808>
 8006908:	b18f      	cbz	r7, 800692e <_dtoa_r+0x75e>
 800690a:	4631      	mov	r1, r6
 800690c:	463a      	mov	r2, r7
 800690e:	4620      	mov	r0, r4
 8006910:	f000 fbaa 	bl	8007068 <__pow5mult>
 8006914:	9a04      	ldr	r2, [sp, #16]
 8006916:	4601      	mov	r1, r0
 8006918:	4606      	mov	r6, r0
 800691a:	4620      	mov	r0, r4
 800691c:	f000 fb0e 	bl	8006f3c <__multiply>
 8006920:	9904      	ldr	r1, [sp, #16]
 8006922:	9008      	str	r0, [sp, #32]
 8006924:	4620      	mov	r0, r4
 8006926:	f000 fa60 	bl	8006dea <_Bfree>
 800692a:	9b08      	ldr	r3, [sp, #32]
 800692c:	9304      	str	r3, [sp, #16]
 800692e:	9b07      	ldr	r3, [sp, #28]
 8006930:	1bda      	subs	r2, r3, r7
 8006932:	d004      	beq.n	800693e <_dtoa_r+0x76e>
 8006934:	9904      	ldr	r1, [sp, #16]
 8006936:	4620      	mov	r0, r4
 8006938:	f000 fb96 	bl	8007068 <__pow5mult>
 800693c:	9004      	str	r0, [sp, #16]
 800693e:	2101      	movs	r1, #1
 8006940:	4620      	mov	r0, r4
 8006942:	f000 faf2 	bl	8006f2a <__i2b>
 8006946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006948:	4607      	mov	r7, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 81d0 	beq.w	8006cf0 <_dtoa_r+0xb20>
 8006950:	461a      	mov	r2, r3
 8006952:	4601      	mov	r1, r0
 8006954:	4620      	mov	r0, r4
 8006956:	f000 fb87 	bl	8007068 <__pow5mult>
 800695a:	9b06      	ldr	r3, [sp, #24]
 800695c:	2b01      	cmp	r3, #1
 800695e:	4607      	mov	r7, r0
 8006960:	dc40      	bgt.n	80069e4 <_dtoa_r+0x814>
 8006962:	9b00      	ldr	r3, [sp, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d139      	bne.n	80069dc <_dtoa_r+0x80c>
 8006968:	9b01      	ldr	r3, [sp, #4]
 800696a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800696e:	2b00      	cmp	r3, #0
 8006970:	d136      	bne.n	80069e0 <_dtoa_r+0x810>
 8006972:	9b01      	ldr	r3, [sp, #4]
 8006974:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006978:	0d1b      	lsrs	r3, r3, #20
 800697a:	051b      	lsls	r3, r3, #20
 800697c:	b12b      	cbz	r3, 800698a <_dtoa_r+0x7ba>
 800697e:	9b05      	ldr	r3, [sp, #20]
 8006980:	3301      	adds	r3, #1
 8006982:	9305      	str	r3, [sp, #20]
 8006984:	f108 0801 	add.w	r8, r8, #1
 8006988:	2301      	movs	r3, #1
 800698a:	9307      	str	r3, [sp, #28]
 800698c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800698e:	2b00      	cmp	r3, #0
 8006990:	d12a      	bne.n	80069e8 <_dtoa_r+0x818>
 8006992:	2001      	movs	r0, #1
 8006994:	e030      	b.n	80069f8 <_dtoa_r+0x828>
 8006996:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006998:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800699c:	e795      	b.n	80068ca <_dtoa_r+0x6fa>
 800699e:	9b07      	ldr	r3, [sp, #28]
 80069a0:	f109 37ff 	add.w	r7, r9, #4294967295
 80069a4:	42bb      	cmp	r3, r7
 80069a6:	bfbf      	itttt	lt
 80069a8:	9b07      	ldrlt	r3, [sp, #28]
 80069aa:	9707      	strlt	r7, [sp, #28]
 80069ac:	1afa      	sublt	r2, r7, r3
 80069ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80069b0:	bfbb      	ittet	lt
 80069b2:	189b      	addlt	r3, r3, r2
 80069b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80069b6:	1bdf      	subge	r7, r3, r7
 80069b8:	2700      	movlt	r7, #0
 80069ba:	f1b9 0f00 	cmp.w	r9, #0
 80069be:	bfb5      	itete	lt
 80069c0:	9b05      	ldrlt	r3, [sp, #20]
 80069c2:	9d05      	ldrge	r5, [sp, #20]
 80069c4:	eba3 0509 	sublt.w	r5, r3, r9
 80069c8:	464b      	movge	r3, r9
 80069ca:	bfb8      	it	lt
 80069cc:	2300      	movlt	r3, #0
 80069ce:	e77e      	b.n	80068ce <_dtoa_r+0x6fe>
 80069d0:	9f07      	ldr	r7, [sp, #28]
 80069d2:	9d05      	ldr	r5, [sp, #20]
 80069d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80069d6:	e783      	b.n	80068e0 <_dtoa_r+0x710>
 80069d8:	9a07      	ldr	r2, [sp, #28]
 80069da:	e7ab      	b.n	8006934 <_dtoa_r+0x764>
 80069dc:	2300      	movs	r3, #0
 80069de:	e7d4      	b.n	800698a <_dtoa_r+0x7ba>
 80069e0:	9b00      	ldr	r3, [sp, #0]
 80069e2:	e7d2      	b.n	800698a <_dtoa_r+0x7ba>
 80069e4:	2300      	movs	r3, #0
 80069e6:	9307      	str	r3, [sp, #28]
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80069ee:	6918      	ldr	r0, [r3, #16]
 80069f0:	f000 fa4d 	bl	8006e8e <__hi0bits>
 80069f4:	f1c0 0020 	rsb	r0, r0, #32
 80069f8:	4440      	add	r0, r8
 80069fa:	f010 001f 	ands.w	r0, r0, #31
 80069fe:	d047      	beq.n	8006a90 <_dtoa_r+0x8c0>
 8006a00:	f1c0 0320 	rsb	r3, r0, #32
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	dd3b      	ble.n	8006a80 <_dtoa_r+0x8b0>
 8006a08:	9b05      	ldr	r3, [sp, #20]
 8006a0a:	f1c0 001c 	rsb	r0, r0, #28
 8006a0e:	4403      	add	r3, r0
 8006a10:	9305      	str	r3, [sp, #20]
 8006a12:	4405      	add	r5, r0
 8006a14:	4480      	add	r8, r0
 8006a16:	9b05      	ldr	r3, [sp, #20]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	dd05      	ble.n	8006a28 <_dtoa_r+0x858>
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	9904      	ldr	r1, [sp, #16]
 8006a20:	4620      	mov	r0, r4
 8006a22:	f000 fb6f 	bl	8007104 <__lshift>
 8006a26:	9004      	str	r0, [sp, #16]
 8006a28:	f1b8 0f00 	cmp.w	r8, #0
 8006a2c:	dd05      	ble.n	8006a3a <_dtoa_r+0x86a>
 8006a2e:	4639      	mov	r1, r7
 8006a30:	4642      	mov	r2, r8
 8006a32:	4620      	mov	r0, r4
 8006a34:	f000 fb66 	bl	8007104 <__lshift>
 8006a38:	4607      	mov	r7, r0
 8006a3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a3c:	b353      	cbz	r3, 8006a94 <_dtoa_r+0x8c4>
 8006a3e:	4639      	mov	r1, r7
 8006a40:	9804      	ldr	r0, [sp, #16]
 8006a42:	f000 fbb3 	bl	80071ac <__mcmp>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	da24      	bge.n	8006a94 <_dtoa_r+0x8c4>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	220a      	movs	r2, #10
 8006a4e:	9904      	ldr	r1, [sp, #16]
 8006a50:	4620      	mov	r0, r4
 8006a52:	f000 f9e1 	bl	8006e18 <__multadd>
 8006a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a58:	9004      	str	r0, [sp, #16]
 8006a5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 814d 	beq.w	8006cfe <_dtoa_r+0xb2e>
 8006a64:	2300      	movs	r3, #0
 8006a66:	4631      	mov	r1, r6
 8006a68:	220a      	movs	r2, #10
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f000 f9d4 	bl	8006e18 <__multadd>
 8006a70:	9b02      	ldr	r3, [sp, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	4606      	mov	r6, r0
 8006a76:	dc4f      	bgt.n	8006b18 <_dtoa_r+0x948>
 8006a78:	9b06      	ldr	r3, [sp, #24]
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	dd4c      	ble.n	8006b18 <_dtoa_r+0x948>
 8006a7e:	e011      	b.n	8006aa4 <_dtoa_r+0x8d4>
 8006a80:	d0c9      	beq.n	8006a16 <_dtoa_r+0x846>
 8006a82:	9a05      	ldr	r2, [sp, #20]
 8006a84:	331c      	adds	r3, #28
 8006a86:	441a      	add	r2, r3
 8006a88:	9205      	str	r2, [sp, #20]
 8006a8a:	441d      	add	r5, r3
 8006a8c:	4498      	add	r8, r3
 8006a8e:	e7c2      	b.n	8006a16 <_dtoa_r+0x846>
 8006a90:	4603      	mov	r3, r0
 8006a92:	e7f6      	b.n	8006a82 <_dtoa_r+0x8b2>
 8006a94:	f1b9 0f00 	cmp.w	r9, #0
 8006a98:	dc38      	bgt.n	8006b0c <_dtoa_r+0x93c>
 8006a9a:	9b06      	ldr	r3, [sp, #24]
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	dd35      	ble.n	8006b0c <_dtoa_r+0x93c>
 8006aa0:	f8cd 9008 	str.w	r9, [sp, #8]
 8006aa4:	9b02      	ldr	r3, [sp, #8]
 8006aa6:	b963      	cbnz	r3, 8006ac2 <_dtoa_r+0x8f2>
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	2205      	movs	r2, #5
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 f9b3 	bl	8006e18 <__multadd>
 8006ab2:	4601      	mov	r1, r0
 8006ab4:	4607      	mov	r7, r0
 8006ab6:	9804      	ldr	r0, [sp, #16]
 8006ab8:	f000 fb78 	bl	80071ac <__mcmp>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	f73f adcc 	bgt.w	800665a <_dtoa_r+0x48a>
 8006ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ac4:	465d      	mov	r5, fp
 8006ac6:	ea6f 0a03 	mvn.w	sl, r3
 8006aca:	f04f 0900 	mov.w	r9, #0
 8006ace:	4639      	mov	r1, r7
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f000 f98a 	bl	8006dea <_Bfree>
 8006ad6:	2e00      	cmp	r6, #0
 8006ad8:	f43f aeb7 	beq.w	800684a <_dtoa_r+0x67a>
 8006adc:	f1b9 0f00 	cmp.w	r9, #0
 8006ae0:	d005      	beq.n	8006aee <_dtoa_r+0x91e>
 8006ae2:	45b1      	cmp	r9, r6
 8006ae4:	d003      	beq.n	8006aee <_dtoa_r+0x91e>
 8006ae6:	4649      	mov	r1, r9
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 f97e 	bl	8006dea <_Bfree>
 8006aee:	4631      	mov	r1, r6
 8006af0:	4620      	mov	r0, r4
 8006af2:	f000 f97a 	bl	8006dea <_Bfree>
 8006af6:	e6a8      	b.n	800684a <_dtoa_r+0x67a>
 8006af8:	2700      	movs	r7, #0
 8006afa:	463e      	mov	r6, r7
 8006afc:	e7e1      	b.n	8006ac2 <_dtoa_r+0x8f2>
 8006afe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006b02:	463e      	mov	r6, r7
 8006b04:	e5a9      	b.n	800665a <_dtoa_r+0x48a>
 8006b06:	bf00      	nop
 8006b08:	40240000 	.word	0x40240000
 8006b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b0e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 80fa 	beq.w	8006d0c <_dtoa_r+0xb3c>
 8006b18:	2d00      	cmp	r5, #0
 8006b1a:	dd05      	ble.n	8006b28 <_dtoa_r+0x958>
 8006b1c:	4631      	mov	r1, r6
 8006b1e:	462a      	mov	r2, r5
 8006b20:	4620      	mov	r0, r4
 8006b22:	f000 faef 	bl	8007104 <__lshift>
 8006b26:	4606      	mov	r6, r0
 8006b28:	9b07      	ldr	r3, [sp, #28]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d04c      	beq.n	8006bc8 <_dtoa_r+0x9f8>
 8006b2e:	6871      	ldr	r1, [r6, #4]
 8006b30:	4620      	mov	r0, r4
 8006b32:	f000 f926 	bl	8006d82 <_Balloc>
 8006b36:	6932      	ldr	r2, [r6, #16]
 8006b38:	3202      	adds	r2, #2
 8006b3a:	4605      	mov	r5, r0
 8006b3c:	0092      	lsls	r2, r2, #2
 8006b3e:	f106 010c 	add.w	r1, r6, #12
 8006b42:	300c      	adds	r0, #12
 8006b44:	f000 f912 	bl	8006d6c <memcpy>
 8006b48:	2201      	movs	r2, #1
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f000 fad9 	bl	8007104 <__lshift>
 8006b52:	9b00      	ldr	r3, [sp, #0]
 8006b54:	f8cd b014 	str.w	fp, [sp, #20]
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	46b1      	mov	r9, r6
 8006b5e:	9307      	str	r3, [sp, #28]
 8006b60:	4606      	mov	r6, r0
 8006b62:	4639      	mov	r1, r7
 8006b64:	9804      	ldr	r0, [sp, #16]
 8006b66:	f7ff faa5 	bl	80060b4 <quorem>
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006b72:	9804      	ldr	r0, [sp, #16]
 8006b74:	f000 fb1a 	bl	80071ac <__mcmp>
 8006b78:	4632      	mov	r2, r6
 8006b7a:	9000      	str	r0, [sp, #0]
 8006b7c:	4639      	mov	r1, r7
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f000 fb2e 	bl	80071e0 <__mdiff>
 8006b84:	68c3      	ldr	r3, [r0, #12]
 8006b86:	4602      	mov	r2, r0
 8006b88:	bb03      	cbnz	r3, 8006bcc <_dtoa_r+0x9fc>
 8006b8a:	4601      	mov	r1, r0
 8006b8c:	9008      	str	r0, [sp, #32]
 8006b8e:	9804      	ldr	r0, [sp, #16]
 8006b90:	f000 fb0c 	bl	80071ac <__mcmp>
 8006b94:	9a08      	ldr	r2, [sp, #32]
 8006b96:	4603      	mov	r3, r0
 8006b98:	4611      	mov	r1, r2
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	9308      	str	r3, [sp, #32]
 8006b9e:	f000 f924 	bl	8006dea <_Bfree>
 8006ba2:	9b08      	ldr	r3, [sp, #32]
 8006ba4:	b9a3      	cbnz	r3, 8006bd0 <_dtoa_r+0xa00>
 8006ba6:	9a06      	ldr	r2, [sp, #24]
 8006ba8:	b992      	cbnz	r2, 8006bd0 <_dtoa_r+0xa00>
 8006baa:	9a07      	ldr	r2, [sp, #28]
 8006bac:	b982      	cbnz	r2, 8006bd0 <_dtoa_r+0xa00>
 8006bae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006bb2:	d029      	beq.n	8006c08 <_dtoa_r+0xa38>
 8006bb4:	9b00      	ldr	r3, [sp, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	dd01      	ble.n	8006bbe <_dtoa_r+0x9ee>
 8006bba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006bbe:	9b05      	ldr	r3, [sp, #20]
 8006bc0:	1c5d      	adds	r5, r3, #1
 8006bc2:	f883 8000 	strb.w	r8, [r3]
 8006bc6:	e782      	b.n	8006ace <_dtoa_r+0x8fe>
 8006bc8:	4630      	mov	r0, r6
 8006bca:	e7c2      	b.n	8006b52 <_dtoa_r+0x982>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e7e3      	b.n	8006b98 <_dtoa_r+0x9c8>
 8006bd0:	9a00      	ldr	r2, [sp, #0]
 8006bd2:	2a00      	cmp	r2, #0
 8006bd4:	db04      	blt.n	8006be0 <_dtoa_r+0xa10>
 8006bd6:	d125      	bne.n	8006c24 <_dtoa_r+0xa54>
 8006bd8:	9a06      	ldr	r2, [sp, #24]
 8006bda:	bb1a      	cbnz	r2, 8006c24 <_dtoa_r+0xa54>
 8006bdc:	9a07      	ldr	r2, [sp, #28]
 8006bde:	bb0a      	cbnz	r2, 8006c24 <_dtoa_r+0xa54>
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	ddec      	ble.n	8006bbe <_dtoa_r+0x9ee>
 8006be4:	2201      	movs	r2, #1
 8006be6:	9904      	ldr	r1, [sp, #16]
 8006be8:	4620      	mov	r0, r4
 8006bea:	f000 fa8b 	bl	8007104 <__lshift>
 8006bee:	4639      	mov	r1, r7
 8006bf0:	9004      	str	r0, [sp, #16]
 8006bf2:	f000 fadb 	bl	80071ac <__mcmp>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	dc03      	bgt.n	8006c02 <_dtoa_r+0xa32>
 8006bfa:	d1e0      	bne.n	8006bbe <_dtoa_r+0x9ee>
 8006bfc:	f018 0f01 	tst.w	r8, #1
 8006c00:	d0dd      	beq.n	8006bbe <_dtoa_r+0x9ee>
 8006c02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006c06:	d1d8      	bne.n	8006bba <_dtoa_r+0x9ea>
 8006c08:	9b05      	ldr	r3, [sp, #20]
 8006c0a:	9a05      	ldr	r2, [sp, #20]
 8006c0c:	1c5d      	adds	r5, r3, #1
 8006c0e:	2339      	movs	r3, #57	; 0x39
 8006c10:	7013      	strb	r3, [r2, #0]
 8006c12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c16:	2b39      	cmp	r3, #57	; 0x39
 8006c18:	f105 32ff 	add.w	r2, r5, #4294967295
 8006c1c:	d04f      	beq.n	8006cbe <_dtoa_r+0xaee>
 8006c1e:	3301      	adds	r3, #1
 8006c20:	7013      	strb	r3, [r2, #0]
 8006c22:	e754      	b.n	8006ace <_dtoa_r+0x8fe>
 8006c24:	9a05      	ldr	r2, [sp, #20]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f102 0501 	add.w	r5, r2, #1
 8006c2c:	dd06      	ble.n	8006c3c <_dtoa_r+0xa6c>
 8006c2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006c32:	d0e9      	beq.n	8006c08 <_dtoa_r+0xa38>
 8006c34:	f108 0801 	add.w	r8, r8, #1
 8006c38:	9b05      	ldr	r3, [sp, #20]
 8006c3a:	e7c2      	b.n	8006bc2 <_dtoa_r+0x9f2>
 8006c3c:	9a02      	ldr	r2, [sp, #8]
 8006c3e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006c42:	eba5 030b 	sub.w	r3, r5, fp
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d021      	beq.n	8006c8e <_dtoa_r+0xabe>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	220a      	movs	r2, #10
 8006c4e:	9904      	ldr	r1, [sp, #16]
 8006c50:	4620      	mov	r0, r4
 8006c52:	f000 f8e1 	bl	8006e18 <__multadd>
 8006c56:	45b1      	cmp	r9, r6
 8006c58:	9004      	str	r0, [sp, #16]
 8006c5a:	f04f 0300 	mov.w	r3, #0
 8006c5e:	f04f 020a 	mov.w	r2, #10
 8006c62:	4649      	mov	r1, r9
 8006c64:	4620      	mov	r0, r4
 8006c66:	d105      	bne.n	8006c74 <_dtoa_r+0xaa4>
 8006c68:	f000 f8d6 	bl	8006e18 <__multadd>
 8006c6c:	4681      	mov	r9, r0
 8006c6e:	4606      	mov	r6, r0
 8006c70:	9505      	str	r5, [sp, #20]
 8006c72:	e776      	b.n	8006b62 <_dtoa_r+0x992>
 8006c74:	f000 f8d0 	bl	8006e18 <__multadd>
 8006c78:	4631      	mov	r1, r6
 8006c7a:	4681      	mov	r9, r0
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	220a      	movs	r2, #10
 8006c80:	4620      	mov	r0, r4
 8006c82:	f000 f8c9 	bl	8006e18 <__multadd>
 8006c86:	4606      	mov	r6, r0
 8006c88:	e7f2      	b.n	8006c70 <_dtoa_r+0xaa0>
 8006c8a:	f04f 0900 	mov.w	r9, #0
 8006c8e:	2201      	movs	r2, #1
 8006c90:	9904      	ldr	r1, [sp, #16]
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 fa36 	bl	8007104 <__lshift>
 8006c98:	4639      	mov	r1, r7
 8006c9a:	9004      	str	r0, [sp, #16]
 8006c9c:	f000 fa86 	bl	80071ac <__mcmp>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	dcb6      	bgt.n	8006c12 <_dtoa_r+0xa42>
 8006ca4:	d102      	bne.n	8006cac <_dtoa_r+0xadc>
 8006ca6:	f018 0f01 	tst.w	r8, #1
 8006caa:	d1b2      	bne.n	8006c12 <_dtoa_r+0xa42>
 8006cac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006cb0:	2b30      	cmp	r3, #48	; 0x30
 8006cb2:	f105 32ff 	add.w	r2, r5, #4294967295
 8006cb6:	f47f af0a 	bne.w	8006ace <_dtoa_r+0x8fe>
 8006cba:	4615      	mov	r5, r2
 8006cbc:	e7f6      	b.n	8006cac <_dtoa_r+0xadc>
 8006cbe:	4593      	cmp	fp, r2
 8006cc0:	d105      	bne.n	8006cce <_dtoa_r+0xafe>
 8006cc2:	2331      	movs	r3, #49	; 0x31
 8006cc4:	f10a 0a01 	add.w	sl, sl, #1
 8006cc8:	f88b 3000 	strb.w	r3, [fp]
 8006ccc:	e6ff      	b.n	8006ace <_dtoa_r+0x8fe>
 8006cce:	4615      	mov	r5, r2
 8006cd0:	e79f      	b.n	8006c12 <_dtoa_r+0xa42>
 8006cd2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006d38 <_dtoa_r+0xb68>
 8006cd6:	e007      	b.n	8006ce8 <_dtoa_r+0xb18>
 8006cd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cda:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006d3c <_dtoa_r+0xb6c>
 8006cde:	b11b      	cbz	r3, 8006ce8 <_dtoa_r+0xb18>
 8006ce0:	f10b 0308 	add.w	r3, fp, #8
 8006ce4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	4658      	mov	r0, fp
 8006cea:	b017      	add	sp, #92	; 0x5c
 8006cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf0:	9b06      	ldr	r3, [sp, #24]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	f77f ae35 	ble.w	8006962 <_dtoa_r+0x792>
 8006cf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cfa:	9307      	str	r3, [sp, #28]
 8006cfc:	e649      	b.n	8006992 <_dtoa_r+0x7c2>
 8006cfe:	9b02      	ldr	r3, [sp, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	dc03      	bgt.n	8006d0c <_dtoa_r+0xb3c>
 8006d04:	9b06      	ldr	r3, [sp, #24]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	f73f aecc 	bgt.w	8006aa4 <_dtoa_r+0x8d4>
 8006d0c:	465d      	mov	r5, fp
 8006d0e:	4639      	mov	r1, r7
 8006d10:	9804      	ldr	r0, [sp, #16]
 8006d12:	f7ff f9cf 	bl	80060b4 <quorem>
 8006d16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006d1a:	f805 8b01 	strb.w	r8, [r5], #1
 8006d1e:	9a02      	ldr	r2, [sp, #8]
 8006d20:	eba5 030b 	sub.w	r3, r5, fp
 8006d24:	429a      	cmp	r2, r3
 8006d26:	ddb0      	ble.n	8006c8a <_dtoa_r+0xaba>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	220a      	movs	r2, #10
 8006d2c:	9904      	ldr	r1, [sp, #16]
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f000 f872 	bl	8006e18 <__multadd>
 8006d34:	9004      	str	r0, [sp, #16]
 8006d36:	e7ea      	b.n	8006d0e <_dtoa_r+0xb3e>
 8006d38:	08007950 	.word	0x08007950
 8006d3c:	08007974 	.word	0x08007974

08006d40 <_localeconv_r>:
 8006d40:	4b04      	ldr	r3, [pc, #16]	; (8006d54 <_localeconv_r+0x14>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6a18      	ldr	r0, [r3, #32]
 8006d46:	4b04      	ldr	r3, [pc, #16]	; (8006d58 <_localeconv_r+0x18>)
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	bf08      	it	eq
 8006d4c:	4618      	moveq	r0, r3
 8006d4e:	30f0      	adds	r0, #240	; 0xf0
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	20000024 	.word	0x20000024
 8006d58:	20000088 	.word	0x20000088

08006d5c <malloc>:
 8006d5c:	4b02      	ldr	r3, [pc, #8]	; (8006d68 <malloc+0xc>)
 8006d5e:	4601      	mov	r1, r0
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	f000 bb45 	b.w	80073f0 <_malloc_r>
 8006d66:	bf00      	nop
 8006d68:	20000024 	.word	0x20000024

08006d6c <memcpy>:
 8006d6c:	b510      	push	{r4, lr}
 8006d6e:	1e43      	subs	r3, r0, #1
 8006d70:	440a      	add	r2, r1
 8006d72:	4291      	cmp	r1, r2
 8006d74:	d100      	bne.n	8006d78 <memcpy+0xc>
 8006d76:	bd10      	pop	{r4, pc}
 8006d78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d80:	e7f7      	b.n	8006d72 <memcpy+0x6>

08006d82 <_Balloc>:
 8006d82:	b570      	push	{r4, r5, r6, lr}
 8006d84:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d86:	4604      	mov	r4, r0
 8006d88:	460e      	mov	r6, r1
 8006d8a:	b93d      	cbnz	r5, 8006d9c <_Balloc+0x1a>
 8006d8c:	2010      	movs	r0, #16
 8006d8e:	f7ff ffe5 	bl	8006d5c <malloc>
 8006d92:	6260      	str	r0, [r4, #36]	; 0x24
 8006d94:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d98:	6005      	str	r5, [r0, #0]
 8006d9a:	60c5      	str	r5, [r0, #12]
 8006d9c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006d9e:	68eb      	ldr	r3, [r5, #12]
 8006da0:	b183      	cbz	r3, 8006dc4 <_Balloc+0x42>
 8006da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006daa:	b9b8      	cbnz	r0, 8006ddc <_Balloc+0x5a>
 8006dac:	2101      	movs	r1, #1
 8006dae:	fa01 f506 	lsl.w	r5, r1, r6
 8006db2:	1d6a      	adds	r2, r5, #5
 8006db4:	0092      	lsls	r2, r2, #2
 8006db6:	4620      	mov	r0, r4
 8006db8:	f000 fabe 	bl	8007338 <_calloc_r>
 8006dbc:	b160      	cbz	r0, 8006dd8 <_Balloc+0x56>
 8006dbe:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006dc2:	e00e      	b.n	8006de2 <_Balloc+0x60>
 8006dc4:	2221      	movs	r2, #33	; 0x21
 8006dc6:	2104      	movs	r1, #4
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 fab5 	bl	8007338 <_calloc_r>
 8006dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dd0:	60e8      	str	r0, [r5, #12]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e4      	bne.n	8006da2 <_Balloc+0x20>
 8006dd8:	2000      	movs	r0, #0
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	6802      	ldr	r2, [r0, #0]
 8006dde:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006de2:	2300      	movs	r3, #0
 8006de4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006de8:	e7f7      	b.n	8006dda <_Balloc+0x58>

08006dea <_Bfree>:
 8006dea:	b570      	push	{r4, r5, r6, lr}
 8006dec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006dee:	4606      	mov	r6, r0
 8006df0:	460d      	mov	r5, r1
 8006df2:	b93c      	cbnz	r4, 8006e04 <_Bfree+0x1a>
 8006df4:	2010      	movs	r0, #16
 8006df6:	f7ff ffb1 	bl	8006d5c <malloc>
 8006dfa:	6270      	str	r0, [r6, #36]	; 0x24
 8006dfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e00:	6004      	str	r4, [r0, #0]
 8006e02:	60c4      	str	r4, [r0, #12]
 8006e04:	b13d      	cbz	r5, 8006e16 <_Bfree+0x2c>
 8006e06:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006e08:	686a      	ldr	r2, [r5, #4]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e10:	6029      	str	r1, [r5, #0]
 8006e12:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006e16:	bd70      	pop	{r4, r5, r6, pc}

08006e18 <__multadd>:
 8006e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e1c:	690d      	ldr	r5, [r1, #16]
 8006e1e:	461f      	mov	r7, r3
 8006e20:	4606      	mov	r6, r0
 8006e22:	460c      	mov	r4, r1
 8006e24:	f101 0c14 	add.w	ip, r1, #20
 8006e28:	2300      	movs	r3, #0
 8006e2a:	f8dc 0000 	ldr.w	r0, [ip]
 8006e2e:	b281      	uxth	r1, r0
 8006e30:	fb02 7101 	mla	r1, r2, r1, r7
 8006e34:	0c0f      	lsrs	r7, r1, #16
 8006e36:	0c00      	lsrs	r0, r0, #16
 8006e38:	fb02 7000 	mla	r0, r2, r0, r7
 8006e3c:	b289      	uxth	r1, r1
 8006e3e:	3301      	adds	r3, #1
 8006e40:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006e44:	429d      	cmp	r5, r3
 8006e46:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006e4a:	f84c 1b04 	str.w	r1, [ip], #4
 8006e4e:	dcec      	bgt.n	8006e2a <__multadd+0x12>
 8006e50:	b1d7      	cbz	r7, 8006e88 <__multadd+0x70>
 8006e52:	68a3      	ldr	r3, [r4, #8]
 8006e54:	42ab      	cmp	r3, r5
 8006e56:	dc12      	bgt.n	8006e7e <__multadd+0x66>
 8006e58:	6861      	ldr	r1, [r4, #4]
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	3101      	adds	r1, #1
 8006e5e:	f7ff ff90 	bl	8006d82 <_Balloc>
 8006e62:	6922      	ldr	r2, [r4, #16]
 8006e64:	3202      	adds	r2, #2
 8006e66:	f104 010c 	add.w	r1, r4, #12
 8006e6a:	4680      	mov	r8, r0
 8006e6c:	0092      	lsls	r2, r2, #2
 8006e6e:	300c      	adds	r0, #12
 8006e70:	f7ff ff7c 	bl	8006d6c <memcpy>
 8006e74:	4621      	mov	r1, r4
 8006e76:	4630      	mov	r0, r6
 8006e78:	f7ff ffb7 	bl	8006dea <_Bfree>
 8006e7c:	4644      	mov	r4, r8
 8006e7e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e82:	3501      	adds	r5, #1
 8006e84:	615f      	str	r7, [r3, #20]
 8006e86:	6125      	str	r5, [r4, #16]
 8006e88:	4620      	mov	r0, r4
 8006e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006e8e <__hi0bits>:
 8006e8e:	0c02      	lsrs	r2, r0, #16
 8006e90:	0412      	lsls	r2, r2, #16
 8006e92:	4603      	mov	r3, r0
 8006e94:	b9b2      	cbnz	r2, 8006ec4 <__hi0bits+0x36>
 8006e96:	0403      	lsls	r3, r0, #16
 8006e98:	2010      	movs	r0, #16
 8006e9a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006e9e:	bf04      	itt	eq
 8006ea0:	021b      	lsleq	r3, r3, #8
 8006ea2:	3008      	addeq	r0, #8
 8006ea4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006ea8:	bf04      	itt	eq
 8006eaa:	011b      	lsleq	r3, r3, #4
 8006eac:	3004      	addeq	r0, #4
 8006eae:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006eb2:	bf04      	itt	eq
 8006eb4:	009b      	lsleq	r3, r3, #2
 8006eb6:	3002      	addeq	r0, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	db06      	blt.n	8006eca <__hi0bits+0x3c>
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	d503      	bpl.n	8006ec8 <__hi0bits+0x3a>
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	4770      	bx	lr
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	e7e8      	b.n	8006e9a <__hi0bits+0xc>
 8006ec8:	2020      	movs	r0, #32
 8006eca:	4770      	bx	lr

08006ecc <__lo0bits>:
 8006ecc:	6803      	ldr	r3, [r0, #0]
 8006ece:	f013 0207 	ands.w	r2, r3, #7
 8006ed2:	4601      	mov	r1, r0
 8006ed4:	d00b      	beq.n	8006eee <__lo0bits+0x22>
 8006ed6:	07da      	lsls	r2, r3, #31
 8006ed8:	d423      	bmi.n	8006f22 <__lo0bits+0x56>
 8006eda:	0798      	lsls	r0, r3, #30
 8006edc:	bf49      	itett	mi
 8006ede:	085b      	lsrmi	r3, r3, #1
 8006ee0:	089b      	lsrpl	r3, r3, #2
 8006ee2:	2001      	movmi	r0, #1
 8006ee4:	600b      	strmi	r3, [r1, #0]
 8006ee6:	bf5c      	itt	pl
 8006ee8:	600b      	strpl	r3, [r1, #0]
 8006eea:	2002      	movpl	r0, #2
 8006eec:	4770      	bx	lr
 8006eee:	b298      	uxth	r0, r3
 8006ef0:	b9a8      	cbnz	r0, 8006f1e <__lo0bits+0x52>
 8006ef2:	0c1b      	lsrs	r3, r3, #16
 8006ef4:	2010      	movs	r0, #16
 8006ef6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006efa:	bf04      	itt	eq
 8006efc:	0a1b      	lsreq	r3, r3, #8
 8006efe:	3008      	addeq	r0, #8
 8006f00:	071a      	lsls	r2, r3, #28
 8006f02:	bf04      	itt	eq
 8006f04:	091b      	lsreq	r3, r3, #4
 8006f06:	3004      	addeq	r0, #4
 8006f08:	079a      	lsls	r2, r3, #30
 8006f0a:	bf04      	itt	eq
 8006f0c:	089b      	lsreq	r3, r3, #2
 8006f0e:	3002      	addeq	r0, #2
 8006f10:	07da      	lsls	r2, r3, #31
 8006f12:	d402      	bmi.n	8006f1a <__lo0bits+0x4e>
 8006f14:	085b      	lsrs	r3, r3, #1
 8006f16:	d006      	beq.n	8006f26 <__lo0bits+0x5a>
 8006f18:	3001      	adds	r0, #1
 8006f1a:	600b      	str	r3, [r1, #0]
 8006f1c:	4770      	bx	lr
 8006f1e:	4610      	mov	r0, r2
 8006f20:	e7e9      	b.n	8006ef6 <__lo0bits+0x2a>
 8006f22:	2000      	movs	r0, #0
 8006f24:	4770      	bx	lr
 8006f26:	2020      	movs	r0, #32
 8006f28:	4770      	bx	lr

08006f2a <__i2b>:
 8006f2a:	b510      	push	{r4, lr}
 8006f2c:	460c      	mov	r4, r1
 8006f2e:	2101      	movs	r1, #1
 8006f30:	f7ff ff27 	bl	8006d82 <_Balloc>
 8006f34:	2201      	movs	r2, #1
 8006f36:	6144      	str	r4, [r0, #20]
 8006f38:	6102      	str	r2, [r0, #16]
 8006f3a:	bd10      	pop	{r4, pc}

08006f3c <__multiply>:
 8006f3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f40:	4614      	mov	r4, r2
 8006f42:	690a      	ldr	r2, [r1, #16]
 8006f44:	6923      	ldr	r3, [r4, #16]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	bfb8      	it	lt
 8006f4a:	460b      	movlt	r3, r1
 8006f4c:	4688      	mov	r8, r1
 8006f4e:	bfbc      	itt	lt
 8006f50:	46a0      	movlt	r8, r4
 8006f52:	461c      	movlt	r4, r3
 8006f54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f58:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006f5c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f64:	eb07 0609 	add.w	r6, r7, r9
 8006f68:	42b3      	cmp	r3, r6
 8006f6a:	bfb8      	it	lt
 8006f6c:	3101      	addlt	r1, #1
 8006f6e:	f7ff ff08 	bl	8006d82 <_Balloc>
 8006f72:	f100 0514 	add.w	r5, r0, #20
 8006f76:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006f7a:	462b      	mov	r3, r5
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	4573      	cmp	r3, lr
 8006f80:	d316      	bcc.n	8006fb0 <__multiply+0x74>
 8006f82:	f104 0214 	add.w	r2, r4, #20
 8006f86:	f108 0114 	add.w	r1, r8, #20
 8006f8a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006f8e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	9b00      	ldr	r3, [sp, #0]
 8006f96:	9201      	str	r2, [sp, #4]
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d80c      	bhi.n	8006fb6 <__multiply+0x7a>
 8006f9c:	2e00      	cmp	r6, #0
 8006f9e:	dd03      	ble.n	8006fa8 <__multiply+0x6c>
 8006fa0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d05d      	beq.n	8007064 <__multiply+0x128>
 8006fa8:	6106      	str	r6, [r0, #16]
 8006faa:	b003      	add	sp, #12
 8006fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb0:	f843 2b04 	str.w	r2, [r3], #4
 8006fb4:	e7e3      	b.n	8006f7e <__multiply+0x42>
 8006fb6:	f8b2 b000 	ldrh.w	fp, [r2]
 8006fba:	f1bb 0f00 	cmp.w	fp, #0
 8006fbe:	d023      	beq.n	8007008 <__multiply+0xcc>
 8006fc0:	4689      	mov	r9, r1
 8006fc2:	46ac      	mov	ip, r5
 8006fc4:	f04f 0800 	mov.w	r8, #0
 8006fc8:	f859 4b04 	ldr.w	r4, [r9], #4
 8006fcc:	f8dc a000 	ldr.w	sl, [ip]
 8006fd0:	b2a3      	uxth	r3, r4
 8006fd2:	fa1f fa8a 	uxth.w	sl, sl
 8006fd6:	fb0b a303 	mla	r3, fp, r3, sl
 8006fda:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006fde:	f8dc 4000 	ldr.w	r4, [ip]
 8006fe2:	4443      	add	r3, r8
 8006fe4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006fe8:	fb0b 840a 	mla	r4, fp, sl, r8
 8006fec:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006ff0:	46e2      	mov	sl, ip
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006ff8:	454f      	cmp	r7, r9
 8006ffa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006ffe:	f84a 3b04 	str.w	r3, [sl], #4
 8007002:	d82b      	bhi.n	800705c <__multiply+0x120>
 8007004:	f8cc 8004 	str.w	r8, [ip, #4]
 8007008:	9b01      	ldr	r3, [sp, #4]
 800700a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800700e:	3204      	adds	r2, #4
 8007010:	f1ba 0f00 	cmp.w	sl, #0
 8007014:	d020      	beq.n	8007058 <__multiply+0x11c>
 8007016:	682b      	ldr	r3, [r5, #0]
 8007018:	4689      	mov	r9, r1
 800701a:	46a8      	mov	r8, r5
 800701c:	f04f 0b00 	mov.w	fp, #0
 8007020:	f8b9 c000 	ldrh.w	ip, [r9]
 8007024:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007028:	fb0a 440c 	mla	r4, sl, ip, r4
 800702c:	445c      	add	r4, fp
 800702e:	46c4      	mov	ip, r8
 8007030:	b29b      	uxth	r3, r3
 8007032:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007036:	f84c 3b04 	str.w	r3, [ip], #4
 800703a:	f859 3b04 	ldr.w	r3, [r9], #4
 800703e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007042:	0c1b      	lsrs	r3, r3, #16
 8007044:	fb0a b303 	mla	r3, sl, r3, fp
 8007048:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800704c:	454f      	cmp	r7, r9
 800704e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007052:	d805      	bhi.n	8007060 <__multiply+0x124>
 8007054:	f8c8 3004 	str.w	r3, [r8, #4]
 8007058:	3504      	adds	r5, #4
 800705a:	e79b      	b.n	8006f94 <__multiply+0x58>
 800705c:	46d4      	mov	ip, sl
 800705e:	e7b3      	b.n	8006fc8 <__multiply+0x8c>
 8007060:	46e0      	mov	r8, ip
 8007062:	e7dd      	b.n	8007020 <__multiply+0xe4>
 8007064:	3e01      	subs	r6, #1
 8007066:	e799      	b.n	8006f9c <__multiply+0x60>

08007068 <__pow5mult>:
 8007068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800706c:	4615      	mov	r5, r2
 800706e:	f012 0203 	ands.w	r2, r2, #3
 8007072:	4606      	mov	r6, r0
 8007074:	460f      	mov	r7, r1
 8007076:	d007      	beq.n	8007088 <__pow5mult+0x20>
 8007078:	3a01      	subs	r2, #1
 800707a:	4c21      	ldr	r4, [pc, #132]	; (8007100 <__pow5mult+0x98>)
 800707c:	2300      	movs	r3, #0
 800707e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007082:	f7ff fec9 	bl	8006e18 <__multadd>
 8007086:	4607      	mov	r7, r0
 8007088:	10ad      	asrs	r5, r5, #2
 800708a:	d035      	beq.n	80070f8 <__pow5mult+0x90>
 800708c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800708e:	b93c      	cbnz	r4, 80070a0 <__pow5mult+0x38>
 8007090:	2010      	movs	r0, #16
 8007092:	f7ff fe63 	bl	8006d5c <malloc>
 8007096:	6270      	str	r0, [r6, #36]	; 0x24
 8007098:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800709c:	6004      	str	r4, [r0, #0]
 800709e:	60c4      	str	r4, [r0, #12]
 80070a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80070a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070a8:	b94c      	cbnz	r4, 80070be <__pow5mult+0x56>
 80070aa:	f240 2171 	movw	r1, #625	; 0x271
 80070ae:	4630      	mov	r0, r6
 80070b0:	f7ff ff3b 	bl	8006f2a <__i2b>
 80070b4:	2300      	movs	r3, #0
 80070b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80070ba:	4604      	mov	r4, r0
 80070bc:	6003      	str	r3, [r0, #0]
 80070be:	f04f 0800 	mov.w	r8, #0
 80070c2:	07eb      	lsls	r3, r5, #31
 80070c4:	d50a      	bpl.n	80070dc <__pow5mult+0x74>
 80070c6:	4639      	mov	r1, r7
 80070c8:	4622      	mov	r2, r4
 80070ca:	4630      	mov	r0, r6
 80070cc:	f7ff ff36 	bl	8006f3c <__multiply>
 80070d0:	4639      	mov	r1, r7
 80070d2:	4681      	mov	r9, r0
 80070d4:	4630      	mov	r0, r6
 80070d6:	f7ff fe88 	bl	8006dea <_Bfree>
 80070da:	464f      	mov	r7, r9
 80070dc:	106d      	asrs	r5, r5, #1
 80070de:	d00b      	beq.n	80070f8 <__pow5mult+0x90>
 80070e0:	6820      	ldr	r0, [r4, #0]
 80070e2:	b938      	cbnz	r0, 80070f4 <__pow5mult+0x8c>
 80070e4:	4622      	mov	r2, r4
 80070e6:	4621      	mov	r1, r4
 80070e8:	4630      	mov	r0, r6
 80070ea:	f7ff ff27 	bl	8006f3c <__multiply>
 80070ee:	6020      	str	r0, [r4, #0]
 80070f0:	f8c0 8000 	str.w	r8, [r0]
 80070f4:	4604      	mov	r4, r0
 80070f6:	e7e4      	b.n	80070c2 <__pow5mult+0x5a>
 80070f8:	4638      	mov	r0, r7
 80070fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070fe:	bf00      	nop
 8007100:	08007a78 	.word	0x08007a78

08007104 <__lshift>:
 8007104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007108:	460c      	mov	r4, r1
 800710a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800710e:	6923      	ldr	r3, [r4, #16]
 8007110:	6849      	ldr	r1, [r1, #4]
 8007112:	eb0a 0903 	add.w	r9, sl, r3
 8007116:	68a3      	ldr	r3, [r4, #8]
 8007118:	4607      	mov	r7, r0
 800711a:	4616      	mov	r6, r2
 800711c:	f109 0501 	add.w	r5, r9, #1
 8007120:	42ab      	cmp	r3, r5
 8007122:	db32      	blt.n	800718a <__lshift+0x86>
 8007124:	4638      	mov	r0, r7
 8007126:	f7ff fe2c 	bl	8006d82 <_Balloc>
 800712a:	2300      	movs	r3, #0
 800712c:	4680      	mov	r8, r0
 800712e:	f100 0114 	add.w	r1, r0, #20
 8007132:	461a      	mov	r2, r3
 8007134:	4553      	cmp	r3, sl
 8007136:	db2b      	blt.n	8007190 <__lshift+0x8c>
 8007138:	6920      	ldr	r0, [r4, #16]
 800713a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800713e:	f104 0314 	add.w	r3, r4, #20
 8007142:	f016 021f 	ands.w	r2, r6, #31
 8007146:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800714a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800714e:	d025      	beq.n	800719c <__lshift+0x98>
 8007150:	f1c2 0e20 	rsb	lr, r2, #32
 8007154:	2000      	movs	r0, #0
 8007156:	681e      	ldr	r6, [r3, #0]
 8007158:	468a      	mov	sl, r1
 800715a:	4096      	lsls	r6, r2
 800715c:	4330      	orrs	r0, r6
 800715e:	f84a 0b04 	str.w	r0, [sl], #4
 8007162:	f853 0b04 	ldr.w	r0, [r3], #4
 8007166:	459c      	cmp	ip, r3
 8007168:	fa20 f00e 	lsr.w	r0, r0, lr
 800716c:	d814      	bhi.n	8007198 <__lshift+0x94>
 800716e:	6048      	str	r0, [r1, #4]
 8007170:	b108      	cbz	r0, 8007176 <__lshift+0x72>
 8007172:	f109 0502 	add.w	r5, r9, #2
 8007176:	3d01      	subs	r5, #1
 8007178:	4638      	mov	r0, r7
 800717a:	f8c8 5010 	str.w	r5, [r8, #16]
 800717e:	4621      	mov	r1, r4
 8007180:	f7ff fe33 	bl	8006dea <_Bfree>
 8007184:	4640      	mov	r0, r8
 8007186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800718a:	3101      	adds	r1, #1
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	e7c7      	b.n	8007120 <__lshift+0x1c>
 8007190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007194:	3301      	adds	r3, #1
 8007196:	e7cd      	b.n	8007134 <__lshift+0x30>
 8007198:	4651      	mov	r1, sl
 800719a:	e7dc      	b.n	8007156 <__lshift+0x52>
 800719c:	3904      	subs	r1, #4
 800719e:	f853 2b04 	ldr.w	r2, [r3], #4
 80071a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80071a6:	459c      	cmp	ip, r3
 80071a8:	d8f9      	bhi.n	800719e <__lshift+0x9a>
 80071aa:	e7e4      	b.n	8007176 <__lshift+0x72>

080071ac <__mcmp>:
 80071ac:	6903      	ldr	r3, [r0, #16]
 80071ae:	690a      	ldr	r2, [r1, #16]
 80071b0:	1a9b      	subs	r3, r3, r2
 80071b2:	b530      	push	{r4, r5, lr}
 80071b4:	d10c      	bne.n	80071d0 <__mcmp+0x24>
 80071b6:	0092      	lsls	r2, r2, #2
 80071b8:	3014      	adds	r0, #20
 80071ba:	3114      	adds	r1, #20
 80071bc:	1884      	adds	r4, r0, r2
 80071be:	4411      	add	r1, r2
 80071c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80071c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80071c8:	4295      	cmp	r5, r2
 80071ca:	d003      	beq.n	80071d4 <__mcmp+0x28>
 80071cc:	d305      	bcc.n	80071da <__mcmp+0x2e>
 80071ce:	2301      	movs	r3, #1
 80071d0:	4618      	mov	r0, r3
 80071d2:	bd30      	pop	{r4, r5, pc}
 80071d4:	42a0      	cmp	r0, r4
 80071d6:	d3f3      	bcc.n	80071c0 <__mcmp+0x14>
 80071d8:	e7fa      	b.n	80071d0 <__mcmp+0x24>
 80071da:	f04f 33ff 	mov.w	r3, #4294967295
 80071de:	e7f7      	b.n	80071d0 <__mcmp+0x24>

080071e0 <__mdiff>:
 80071e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	460d      	mov	r5, r1
 80071e6:	4607      	mov	r7, r0
 80071e8:	4611      	mov	r1, r2
 80071ea:	4628      	mov	r0, r5
 80071ec:	4614      	mov	r4, r2
 80071ee:	f7ff ffdd 	bl	80071ac <__mcmp>
 80071f2:	1e06      	subs	r6, r0, #0
 80071f4:	d108      	bne.n	8007208 <__mdiff+0x28>
 80071f6:	4631      	mov	r1, r6
 80071f8:	4638      	mov	r0, r7
 80071fa:	f7ff fdc2 	bl	8006d82 <_Balloc>
 80071fe:	2301      	movs	r3, #1
 8007200:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007208:	bfa4      	itt	ge
 800720a:	4623      	movge	r3, r4
 800720c:	462c      	movge	r4, r5
 800720e:	4638      	mov	r0, r7
 8007210:	6861      	ldr	r1, [r4, #4]
 8007212:	bfa6      	itte	ge
 8007214:	461d      	movge	r5, r3
 8007216:	2600      	movge	r6, #0
 8007218:	2601      	movlt	r6, #1
 800721a:	f7ff fdb2 	bl	8006d82 <_Balloc>
 800721e:	692b      	ldr	r3, [r5, #16]
 8007220:	60c6      	str	r6, [r0, #12]
 8007222:	6926      	ldr	r6, [r4, #16]
 8007224:	f105 0914 	add.w	r9, r5, #20
 8007228:	f104 0214 	add.w	r2, r4, #20
 800722c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007230:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007234:	f100 0514 	add.w	r5, r0, #20
 8007238:	f04f 0e00 	mov.w	lr, #0
 800723c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007240:	f859 4b04 	ldr.w	r4, [r9], #4
 8007244:	fa1e f18a 	uxtah	r1, lr, sl
 8007248:	b2a3      	uxth	r3, r4
 800724a:	1ac9      	subs	r1, r1, r3
 800724c:	0c23      	lsrs	r3, r4, #16
 800724e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007252:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007256:	b289      	uxth	r1, r1
 8007258:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800725c:	45c8      	cmp	r8, r9
 800725e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007262:	4694      	mov	ip, r2
 8007264:	f845 3b04 	str.w	r3, [r5], #4
 8007268:	d8e8      	bhi.n	800723c <__mdiff+0x5c>
 800726a:	45bc      	cmp	ip, r7
 800726c:	d304      	bcc.n	8007278 <__mdiff+0x98>
 800726e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007272:	b183      	cbz	r3, 8007296 <__mdiff+0xb6>
 8007274:	6106      	str	r6, [r0, #16]
 8007276:	e7c5      	b.n	8007204 <__mdiff+0x24>
 8007278:	f85c 1b04 	ldr.w	r1, [ip], #4
 800727c:	fa1e f381 	uxtah	r3, lr, r1
 8007280:	141a      	asrs	r2, r3, #16
 8007282:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007286:	b29b      	uxth	r3, r3
 8007288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800728c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007290:	f845 3b04 	str.w	r3, [r5], #4
 8007294:	e7e9      	b.n	800726a <__mdiff+0x8a>
 8007296:	3e01      	subs	r6, #1
 8007298:	e7e9      	b.n	800726e <__mdiff+0x8e>

0800729a <__d2b>:
 800729a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800729e:	460e      	mov	r6, r1
 80072a0:	2101      	movs	r1, #1
 80072a2:	ec59 8b10 	vmov	r8, r9, d0
 80072a6:	4615      	mov	r5, r2
 80072a8:	f7ff fd6b 	bl	8006d82 <_Balloc>
 80072ac:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80072b0:	4607      	mov	r7, r0
 80072b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072b6:	bb34      	cbnz	r4, 8007306 <__d2b+0x6c>
 80072b8:	9301      	str	r3, [sp, #4]
 80072ba:	f1b8 0300 	subs.w	r3, r8, #0
 80072be:	d027      	beq.n	8007310 <__d2b+0x76>
 80072c0:	a802      	add	r0, sp, #8
 80072c2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80072c6:	f7ff fe01 	bl	8006ecc <__lo0bits>
 80072ca:	9900      	ldr	r1, [sp, #0]
 80072cc:	b1f0      	cbz	r0, 800730c <__d2b+0x72>
 80072ce:	9a01      	ldr	r2, [sp, #4]
 80072d0:	f1c0 0320 	rsb	r3, r0, #32
 80072d4:	fa02 f303 	lsl.w	r3, r2, r3
 80072d8:	430b      	orrs	r3, r1
 80072da:	40c2      	lsrs	r2, r0
 80072dc:	617b      	str	r3, [r7, #20]
 80072de:	9201      	str	r2, [sp, #4]
 80072e0:	9b01      	ldr	r3, [sp, #4]
 80072e2:	61bb      	str	r3, [r7, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	bf14      	ite	ne
 80072e8:	2102      	movne	r1, #2
 80072ea:	2101      	moveq	r1, #1
 80072ec:	6139      	str	r1, [r7, #16]
 80072ee:	b1c4      	cbz	r4, 8007322 <__d2b+0x88>
 80072f0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80072f4:	4404      	add	r4, r0
 80072f6:	6034      	str	r4, [r6, #0]
 80072f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072fc:	6028      	str	r0, [r5, #0]
 80072fe:	4638      	mov	r0, r7
 8007300:	b003      	add	sp, #12
 8007302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800730a:	e7d5      	b.n	80072b8 <__d2b+0x1e>
 800730c:	6179      	str	r1, [r7, #20]
 800730e:	e7e7      	b.n	80072e0 <__d2b+0x46>
 8007310:	a801      	add	r0, sp, #4
 8007312:	f7ff fddb 	bl	8006ecc <__lo0bits>
 8007316:	9b01      	ldr	r3, [sp, #4]
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	2101      	movs	r1, #1
 800731c:	6139      	str	r1, [r7, #16]
 800731e:	3020      	adds	r0, #32
 8007320:	e7e5      	b.n	80072ee <__d2b+0x54>
 8007322:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007326:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800732a:	6030      	str	r0, [r6, #0]
 800732c:	6918      	ldr	r0, [r3, #16]
 800732e:	f7ff fdae 	bl	8006e8e <__hi0bits>
 8007332:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007336:	e7e1      	b.n	80072fc <__d2b+0x62>

08007338 <_calloc_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	fb02 f401 	mul.w	r4, r2, r1
 800733e:	4621      	mov	r1, r4
 8007340:	f000 f856 	bl	80073f0 <_malloc_r>
 8007344:	4605      	mov	r5, r0
 8007346:	b118      	cbz	r0, 8007350 <_calloc_r+0x18>
 8007348:	4622      	mov	r2, r4
 800734a:	2100      	movs	r1, #0
 800734c:	f7fe fa2e 	bl	80057ac <memset>
 8007350:	4628      	mov	r0, r5
 8007352:	bd38      	pop	{r3, r4, r5, pc}

08007354 <_free_r>:
 8007354:	b538      	push	{r3, r4, r5, lr}
 8007356:	4605      	mov	r5, r0
 8007358:	2900      	cmp	r1, #0
 800735a:	d045      	beq.n	80073e8 <_free_r+0x94>
 800735c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007360:	1f0c      	subs	r4, r1, #4
 8007362:	2b00      	cmp	r3, #0
 8007364:	bfb8      	it	lt
 8007366:	18e4      	addlt	r4, r4, r3
 8007368:	f000 fa29 	bl	80077be <__malloc_lock>
 800736c:	4a1f      	ldr	r2, [pc, #124]	; (80073ec <_free_r+0x98>)
 800736e:	6813      	ldr	r3, [r2, #0]
 8007370:	4610      	mov	r0, r2
 8007372:	b933      	cbnz	r3, 8007382 <_free_r+0x2e>
 8007374:	6063      	str	r3, [r4, #4]
 8007376:	6014      	str	r4, [r2, #0]
 8007378:	4628      	mov	r0, r5
 800737a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800737e:	f000 ba1f 	b.w	80077c0 <__malloc_unlock>
 8007382:	42a3      	cmp	r3, r4
 8007384:	d90c      	bls.n	80073a0 <_free_r+0x4c>
 8007386:	6821      	ldr	r1, [r4, #0]
 8007388:	1862      	adds	r2, r4, r1
 800738a:	4293      	cmp	r3, r2
 800738c:	bf04      	itt	eq
 800738e:	681a      	ldreq	r2, [r3, #0]
 8007390:	685b      	ldreq	r3, [r3, #4]
 8007392:	6063      	str	r3, [r4, #4]
 8007394:	bf04      	itt	eq
 8007396:	1852      	addeq	r2, r2, r1
 8007398:	6022      	streq	r2, [r4, #0]
 800739a:	6004      	str	r4, [r0, #0]
 800739c:	e7ec      	b.n	8007378 <_free_r+0x24>
 800739e:	4613      	mov	r3, r2
 80073a0:	685a      	ldr	r2, [r3, #4]
 80073a2:	b10a      	cbz	r2, 80073a8 <_free_r+0x54>
 80073a4:	42a2      	cmp	r2, r4
 80073a6:	d9fa      	bls.n	800739e <_free_r+0x4a>
 80073a8:	6819      	ldr	r1, [r3, #0]
 80073aa:	1858      	adds	r0, r3, r1
 80073ac:	42a0      	cmp	r0, r4
 80073ae:	d10b      	bne.n	80073c8 <_free_r+0x74>
 80073b0:	6820      	ldr	r0, [r4, #0]
 80073b2:	4401      	add	r1, r0
 80073b4:	1858      	adds	r0, r3, r1
 80073b6:	4282      	cmp	r2, r0
 80073b8:	6019      	str	r1, [r3, #0]
 80073ba:	d1dd      	bne.n	8007378 <_free_r+0x24>
 80073bc:	6810      	ldr	r0, [r2, #0]
 80073be:	6852      	ldr	r2, [r2, #4]
 80073c0:	605a      	str	r2, [r3, #4]
 80073c2:	4401      	add	r1, r0
 80073c4:	6019      	str	r1, [r3, #0]
 80073c6:	e7d7      	b.n	8007378 <_free_r+0x24>
 80073c8:	d902      	bls.n	80073d0 <_free_r+0x7c>
 80073ca:	230c      	movs	r3, #12
 80073cc:	602b      	str	r3, [r5, #0]
 80073ce:	e7d3      	b.n	8007378 <_free_r+0x24>
 80073d0:	6820      	ldr	r0, [r4, #0]
 80073d2:	1821      	adds	r1, r4, r0
 80073d4:	428a      	cmp	r2, r1
 80073d6:	bf04      	itt	eq
 80073d8:	6811      	ldreq	r1, [r2, #0]
 80073da:	6852      	ldreq	r2, [r2, #4]
 80073dc:	6062      	str	r2, [r4, #4]
 80073de:	bf04      	itt	eq
 80073e0:	1809      	addeq	r1, r1, r0
 80073e2:	6021      	streq	r1, [r4, #0]
 80073e4:	605c      	str	r4, [r3, #4]
 80073e6:	e7c7      	b.n	8007378 <_free_r+0x24>
 80073e8:	bd38      	pop	{r3, r4, r5, pc}
 80073ea:	bf00      	nop
 80073ec:	2000027c 	.word	0x2000027c

080073f0 <_malloc_r>:
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	1ccd      	adds	r5, r1, #3
 80073f4:	f025 0503 	bic.w	r5, r5, #3
 80073f8:	3508      	adds	r5, #8
 80073fa:	2d0c      	cmp	r5, #12
 80073fc:	bf38      	it	cc
 80073fe:	250c      	movcc	r5, #12
 8007400:	2d00      	cmp	r5, #0
 8007402:	4606      	mov	r6, r0
 8007404:	db01      	blt.n	800740a <_malloc_r+0x1a>
 8007406:	42a9      	cmp	r1, r5
 8007408:	d903      	bls.n	8007412 <_malloc_r+0x22>
 800740a:	230c      	movs	r3, #12
 800740c:	6033      	str	r3, [r6, #0]
 800740e:	2000      	movs	r0, #0
 8007410:	bd70      	pop	{r4, r5, r6, pc}
 8007412:	f000 f9d4 	bl	80077be <__malloc_lock>
 8007416:	4a21      	ldr	r2, [pc, #132]	; (800749c <_malloc_r+0xac>)
 8007418:	6814      	ldr	r4, [r2, #0]
 800741a:	4621      	mov	r1, r4
 800741c:	b991      	cbnz	r1, 8007444 <_malloc_r+0x54>
 800741e:	4c20      	ldr	r4, [pc, #128]	; (80074a0 <_malloc_r+0xb0>)
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	b91b      	cbnz	r3, 800742c <_malloc_r+0x3c>
 8007424:	4630      	mov	r0, r6
 8007426:	f000 f98f 	bl	8007748 <_sbrk_r>
 800742a:	6020      	str	r0, [r4, #0]
 800742c:	4629      	mov	r1, r5
 800742e:	4630      	mov	r0, r6
 8007430:	f000 f98a 	bl	8007748 <_sbrk_r>
 8007434:	1c43      	adds	r3, r0, #1
 8007436:	d124      	bne.n	8007482 <_malloc_r+0x92>
 8007438:	230c      	movs	r3, #12
 800743a:	6033      	str	r3, [r6, #0]
 800743c:	4630      	mov	r0, r6
 800743e:	f000 f9bf 	bl	80077c0 <__malloc_unlock>
 8007442:	e7e4      	b.n	800740e <_malloc_r+0x1e>
 8007444:	680b      	ldr	r3, [r1, #0]
 8007446:	1b5b      	subs	r3, r3, r5
 8007448:	d418      	bmi.n	800747c <_malloc_r+0x8c>
 800744a:	2b0b      	cmp	r3, #11
 800744c:	d90f      	bls.n	800746e <_malloc_r+0x7e>
 800744e:	600b      	str	r3, [r1, #0]
 8007450:	50cd      	str	r5, [r1, r3]
 8007452:	18cc      	adds	r4, r1, r3
 8007454:	4630      	mov	r0, r6
 8007456:	f000 f9b3 	bl	80077c0 <__malloc_unlock>
 800745a:	f104 000b 	add.w	r0, r4, #11
 800745e:	1d23      	adds	r3, r4, #4
 8007460:	f020 0007 	bic.w	r0, r0, #7
 8007464:	1ac3      	subs	r3, r0, r3
 8007466:	d0d3      	beq.n	8007410 <_malloc_r+0x20>
 8007468:	425a      	negs	r2, r3
 800746a:	50e2      	str	r2, [r4, r3]
 800746c:	e7d0      	b.n	8007410 <_malloc_r+0x20>
 800746e:	428c      	cmp	r4, r1
 8007470:	684b      	ldr	r3, [r1, #4]
 8007472:	bf16      	itet	ne
 8007474:	6063      	strne	r3, [r4, #4]
 8007476:	6013      	streq	r3, [r2, #0]
 8007478:	460c      	movne	r4, r1
 800747a:	e7eb      	b.n	8007454 <_malloc_r+0x64>
 800747c:	460c      	mov	r4, r1
 800747e:	6849      	ldr	r1, [r1, #4]
 8007480:	e7cc      	b.n	800741c <_malloc_r+0x2c>
 8007482:	1cc4      	adds	r4, r0, #3
 8007484:	f024 0403 	bic.w	r4, r4, #3
 8007488:	42a0      	cmp	r0, r4
 800748a:	d005      	beq.n	8007498 <_malloc_r+0xa8>
 800748c:	1a21      	subs	r1, r4, r0
 800748e:	4630      	mov	r0, r6
 8007490:	f000 f95a 	bl	8007748 <_sbrk_r>
 8007494:	3001      	adds	r0, #1
 8007496:	d0cf      	beq.n	8007438 <_malloc_r+0x48>
 8007498:	6025      	str	r5, [r4, #0]
 800749a:	e7db      	b.n	8007454 <_malloc_r+0x64>
 800749c:	2000027c 	.word	0x2000027c
 80074a0:	20000280 	.word	0x20000280

080074a4 <__ssputs_r>:
 80074a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a8:	688e      	ldr	r6, [r1, #8]
 80074aa:	429e      	cmp	r6, r3
 80074ac:	4682      	mov	sl, r0
 80074ae:	460c      	mov	r4, r1
 80074b0:	4690      	mov	r8, r2
 80074b2:	4699      	mov	r9, r3
 80074b4:	d837      	bhi.n	8007526 <__ssputs_r+0x82>
 80074b6:	898a      	ldrh	r2, [r1, #12]
 80074b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074bc:	d031      	beq.n	8007522 <__ssputs_r+0x7e>
 80074be:	6825      	ldr	r5, [r4, #0]
 80074c0:	6909      	ldr	r1, [r1, #16]
 80074c2:	1a6f      	subs	r7, r5, r1
 80074c4:	6965      	ldr	r5, [r4, #20]
 80074c6:	2302      	movs	r3, #2
 80074c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074cc:	fb95 f5f3 	sdiv	r5, r5, r3
 80074d0:	f109 0301 	add.w	r3, r9, #1
 80074d4:	443b      	add	r3, r7
 80074d6:	429d      	cmp	r5, r3
 80074d8:	bf38      	it	cc
 80074da:	461d      	movcc	r5, r3
 80074dc:	0553      	lsls	r3, r2, #21
 80074de:	d530      	bpl.n	8007542 <__ssputs_r+0x9e>
 80074e0:	4629      	mov	r1, r5
 80074e2:	f7ff ff85 	bl	80073f0 <_malloc_r>
 80074e6:	4606      	mov	r6, r0
 80074e8:	b950      	cbnz	r0, 8007500 <__ssputs_r+0x5c>
 80074ea:	230c      	movs	r3, #12
 80074ec:	f8ca 3000 	str.w	r3, [sl]
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074f6:	81a3      	strh	r3, [r4, #12]
 80074f8:	f04f 30ff 	mov.w	r0, #4294967295
 80074fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007500:	463a      	mov	r2, r7
 8007502:	6921      	ldr	r1, [r4, #16]
 8007504:	f7ff fc32 	bl	8006d6c <memcpy>
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800750e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007512:	81a3      	strh	r3, [r4, #12]
 8007514:	6126      	str	r6, [r4, #16]
 8007516:	6165      	str	r5, [r4, #20]
 8007518:	443e      	add	r6, r7
 800751a:	1bed      	subs	r5, r5, r7
 800751c:	6026      	str	r6, [r4, #0]
 800751e:	60a5      	str	r5, [r4, #8]
 8007520:	464e      	mov	r6, r9
 8007522:	454e      	cmp	r6, r9
 8007524:	d900      	bls.n	8007528 <__ssputs_r+0x84>
 8007526:	464e      	mov	r6, r9
 8007528:	4632      	mov	r2, r6
 800752a:	4641      	mov	r1, r8
 800752c:	6820      	ldr	r0, [r4, #0]
 800752e:	f000 f92d 	bl	800778c <memmove>
 8007532:	68a3      	ldr	r3, [r4, #8]
 8007534:	1b9b      	subs	r3, r3, r6
 8007536:	60a3      	str	r3, [r4, #8]
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	441e      	add	r6, r3
 800753c:	6026      	str	r6, [r4, #0]
 800753e:	2000      	movs	r0, #0
 8007540:	e7dc      	b.n	80074fc <__ssputs_r+0x58>
 8007542:	462a      	mov	r2, r5
 8007544:	f000 f93d 	bl	80077c2 <_realloc_r>
 8007548:	4606      	mov	r6, r0
 800754a:	2800      	cmp	r0, #0
 800754c:	d1e2      	bne.n	8007514 <__ssputs_r+0x70>
 800754e:	6921      	ldr	r1, [r4, #16]
 8007550:	4650      	mov	r0, sl
 8007552:	f7ff feff 	bl	8007354 <_free_r>
 8007556:	e7c8      	b.n	80074ea <__ssputs_r+0x46>

08007558 <_svfiprintf_r>:
 8007558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	461d      	mov	r5, r3
 800755e:	898b      	ldrh	r3, [r1, #12]
 8007560:	061f      	lsls	r7, r3, #24
 8007562:	b09d      	sub	sp, #116	; 0x74
 8007564:	4680      	mov	r8, r0
 8007566:	460c      	mov	r4, r1
 8007568:	4616      	mov	r6, r2
 800756a:	d50f      	bpl.n	800758c <_svfiprintf_r+0x34>
 800756c:	690b      	ldr	r3, [r1, #16]
 800756e:	b96b      	cbnz	r3, 800758c <_svfiprintf_r+0x34>
 8007570:	2140      	movs	r1, #64	; 0x40
 8007572:	f7ff ff3d 	bl	80073f0 <_malloc_r>
 8007576:	6020      	str	r0, [r4, #0]
 8007578:	6120      	str	r0, [r4, #16]
 800757a:	b928      	cbnz	r0, 8007588 <_svfiprintf_r+0x30>
 800757c:	230c      	movs	r3, #12
 800757e:	f8c8 3000 	str.w	r3, [r8]
 8007582:	f04f 30ff 	mov.w	r0, #4294967295
 8007586:	e0c8      	b.n	800771a <_svfiprintf_r+0x1c2>
 8007588:	2340      	movs	r3, #64	; 0x40
 800758a:	6163      	str	r3, [r4, #20]
 800758c:	2300      	movs	r3, #0
 800758e:	9309      	str	r3, [sp, #36]	; 0x24
 8007590:	2320      	movs	r3, #32
 8007592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007596:	2330      	movs	r3, #48	; 0x30
 8007598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800759c:	9503      	str	r5, [sp, #12]
 800759e:	f04f 0b01 	mov.w	fp, #1
 80075a2:	4637      	mov	r7, r6
 80075a4:	463d      	mov	r5, r7
 80075a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80075aa:	b10b      	cbz	r3, 80075b0 <_svfiprintf_r+0x58>
 80075ac:	2b25      	cmp	r3, #37	; 0x25
 80075ae:	d13e      	bne.n	800762e <_svfiprintf_r+0xd6>
 80075b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80075b4:	d00b      	beq.n	80075ce <_svfiprintf_r+0x76>
 80075b6:	4653      	mov	r3, sl
 80075b8:	4632      	mov	r2, r6
 80075ba:	4621      	mov	r1, r4
 80075bc:	4640      	mov	r0, r8
 80075be:	f7ff ff71 	bl	80074a4 <__ssputs_r>
 80075c2:	3001      	adds	r0, #1
 80075c4:	f000 80a4 	beq.w	8007710 <_svfiprintf_r+0x1b8>
 80075c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ca:	4453      	add	r3, sl
 80075cc:	9309      	str	r3, [sp, #36]	; 0x24
 80075ce:	783b      	ldrb	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 809d 	beq.w	8007710 <_svfiprintf_r+0x1b8>
 80075d6:	2300      	movs	r3, #0
 80075d8:	f04f 32ff 	mov.w	r2, #4294967295
 80075dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075e0:	9304      	str	r3, [sp, #16]
 80075e2:	9307      	str	r3, [sp, #28]
 80075e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075e8:	931a      	str	r3, [sp, #104]	; 0x68
 80075ea:	462f      	mov	r7, r5
 80075ec:	2205      	movs	r2, #5
 80075ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80075f2:	4850      	ldr	r0, [pc, #320]	; (8007734 <_svfiprintf_r+0x1dc>)
 80075f4:	f7f8 fdfc 	bl	80001f0 <memchr>
 80075f8:	9b04      	ldr	r3, [sp, #16]
 80075fa:	b9d0      	cbnz	r0, 8007632 <_svfiprintf_r+0xda>
 80075fc:	06d9      	lsls	r1, r3, #27
 80075fe:	bf44      	itt	mi
 8007600:	2220      	movmi	r2, #32
 8007602:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007606:	071a      	lsls	r2, r3, #28
 8007608:	bf44      	itt	mi
 800760a:	222b      	movmi	r2, #43	; 0x2b
 800760c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007610:	782a      	ldrb	r2, [r5, #0]
 8007612:	2a2a      	cmp	r2, #42	; 0x2a
 8007614:	d015      	beq.n	8007642 <_svfiprintf_r+0xea>
 8007616:	9a07      	ldr	r2, [sp, #28]
 8007618:	462f      	mov	r7, r5
 800761a:	2000      	movs	r0, #0
 800761c:	250a      	movs	r5, #10
 800761e:	4639      	mov	r1, r7
 8007620:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007624:	3b30      	subs	r3, #48	; 0x30
 8007626:	2b09      	cmp	r3, #9
 8007628:	d94d      	bls.n	80076c6 <_svfiprintf_r+0x16e>
 800762a:	b1b8      	cbz	r0, 800765c <_svfiprintf_r+0x104>
 800762c:	e00f      	b.n	800764e <_svfiprintf_r+0xf6>
 800762e:	462f      	mov	r7, r5
 8007630:	e7b8      	b.n	80075a4 <_svfiprintf_r+0x4c>
 8007632:	4a40      	ldr	r2, [pc, #256]	; (8007734 <_svfiprintf_r+0x1dc>)
 8007634:	1a80      	subs	r0, r0, r2
 8007636:	fa0b f000 	lsl.w	r0, fp, r0
 800763a:	4318      	orrs	r0, r3
 800763c:	9004      	str	r0, [sp, #16]
 800763e:	463d      	mov	r5, r7
 8007640:	e7d3      	b.n	80075ea <_svfiprintf_r+0x92>
 8007642:	9a03      	ldr	r2, [sp, #12]
 8007644:	1d11      	adds	r1, r2, #4
 8007646:	6812      	ldr	r2, [r2, #0]
 8007648:	9103      	str	r1, [sp, #12]
 800764a:	2a00      	cmp	r2, #0
 800764c:	db01      	blt.n	8007652 <_svfiprintf_r+0xfa>
 800764e:	9207      	str	r2, [sp, #28]
 8007650:	e004      	b.n	800765c <_svfiprintf_r+0x104>
 8007652:	4252      	negs	r2, r2
 8007654:	f043 0302 	orr.w	r3, r3, #2
 8007658:	9207      	str	r2, [sp, #28]
 800765a:	9304      	str	r3, [sp, #16]
 800765c:	783b      	ldrb	r3, [r7, #0]
 800765e:	2b2e      	cmp	r3, #46	; 0x2e
 8007660:	d10c      	bne.n	800767c <_svfiprintf_r+0x124>
 8007662:	787b      	ldrb	r3, [r7, #1]
 8007664:	2b2a      	cmp	r3, #42	; 0x2a
 8007666:	d133      	bne.n	80076d0 <_svfiprintf_r+0x178>
 8007668:	9b03      	ldr	r3, [sp, #12]
 800766a:	1d1a      	adds	r2, r3, #4
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	9203      	str	r2, [sp, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	bfb8      	it	lt
 8007674:	f04f 33ff 	movlt.w	r3, #4294967295
 8007678:	3702      	adds	r7, #2
 800767a:	9305      	str	r3, [sp, #20]
 800767c:	4d2e      	ldr	r5, [pc, #184]	; (8007738 <_svfiprintf_r+0x1e0>)
 800767e:	7839      	ldrb	r1, [r7, #0]
 8007680:	2203      	movs	r2, #3
 8007682:	4628      	mov	r0, r5
 8007684:	f7f8 fdb4 	bl	80001f0 <memchr>
 8007688:	b138      	cbz	r0, 800769a <_svfiprintf_r+0x142>
 800768a:	2340      	movs	r3, #64	; 0x40
 800768c:	1b40      	subs	r0, r0, r5
 800768e:	fa03 f000 	lsl.w	r0, r3, r0
 8007692:	9b04      	ldr	r3, [sp, #16]
 8007694:	4303      	orrs	r3, r0
 8007696:	3701      	adds	r7, #1
 8007698:	9304      	str	r3, [sp, #16]
 800769a:	7839      	ldrb	r1, [r7, #0]
 800769c:	4827      	ldr	r0, [pc, #156]	; (800773c <_svfiprintf_r+0x1e4>)
 800769e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076a2:	2206      	movs	r2, #6
 80076a4:	1c7e      	adds	r6, r7, #1
 80076a6:	f7f8 fda3 	bl	80001f0 <memchr>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d038      	beq.n	8007720 <_svfiprintf_r+0x1c8>
 80076ae:	4b24      	ldr	r3, [pc, #144]	; (8007740 <_svfiprintf_r+0x1e8>)
 80076b0:	bb13      	cbnz	r3, 80076f8 <_svfiprintf_r+0x1a0>
 80076b2:	9b03      	ldr	r3, [sp, #12]
 80076b4:	3307      	adds	r3, #7
 80076b6:	f023 0307 	bic.w	r3, r3, #7
 80076ba:	3308      	adds	r3, #8
 80076bc:	9303      	str	r3, [sp, #12]
 80076be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c0:	444b      	add	r3, r9
 80076c2:	9309      	str	r3, [sp, #36]	; 0x24
 80076c4:	e76d      	b.n	80075a2 <_svfiprintf_r+0x4a>
 80076c6:	fb05 3202 	mla	r2, r5, r2, r3
 80076ca:	2001      	movs	r0, #1
 80076cc:	460f      	mov	r7, r1
 80076ce:	e7a6      	b.n	800761e <_svfiprintf_r+0xc6>
 80076d0:	2300      	movs	r3, #0
 80076d2:	3701      	adds	r7, #1
 80076d4:	9305      	str	r3, [sp, #20]
 80076d6:	4619      	mov	r1, r3
 80076d8:	250a      	movs	r5, #10
 80076da:	4638      	mov	r0, r7
 80076dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076e0:	3a30      	subs	r2, #48	; 0x30
 80076e2:	2a09      	cmp	r2, #9
 80076e4:	d903      	bls.n	80076ee <_svfiprintf_r+0x196>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0c8      	beq.n	800767c <_svfiprintf_r+0x124>
 80076ea:	9105      	str	r1, [sp, #20]
 80076ec:	e7c6      	b.n	800767c <_svfiprintf_r+0x124>
 80076ee:	fb05 2101 	mla	r1, r5, r1, r2
 80076f2:	2301      	movs	r3, #1
 80076f4:	4607      	mov	r7, r0
 80076f6:	e7f0      	b.n	80076da <_svfiprintf_r+0x182>
 80076f8:	ab03      	add	r3, sp, #12
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	4622      	mov	r2, r4
 80076fe:	4b11      	ldr	r3, [pc, #68]	; (8007744 <_svfiprintf_r+0x1ec>)
 8007700:	a904      	add	r1, sp, #16
 8007702:	4640      	mov	r0, r8
 8007704:	f7fe f8ee 	bl	80058e4 <_printf_float>
 8007708:	f1b0 3fff 	cmp.w	r0, #4294967295
 800770c:	4681      	mov	r9, r0
 800770e:	d1d6      	bne.n	80076be <_svfiprintf_r+0x166>
 8007710:	89a3      	ldrh	r3, [r4, #12]
 8007712:	065b      	lsls	r3, r3, #25
 8007714:	f53f af35 	bmi.w	8007582 <_svfiprintf_r+0x2a>
 8007718:	9809      	ldr	r0, [sp, #36]	; 0x24
 800771a:	b01d      	add	sp, #116	; 0x74
 800771c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007720:	ab03      	add	r3, sp, #12
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	4622      	mov	r2, r4
 8007726:	4b07      	ldr	r3, [pc, #28]	; (8007744 <_svfiprintf_r+0x1ec>)
 8007728:	a904      	add	r1, sp, #16
 800772a:	4640      	mov	r0, r8
 800772c:	f7fe fb90 	bl	8005e50 <_printf_i>
 8007730:	e7ea      	b.n	8007708 <_svfiprintf_r+0x1b0>
 8007732:	bf00      	nop
 8007734:	08007a84 	.word	0x08007a84
 8007738:	08007a8a 	.word	0x08007a8a
 800773c:	08007a8e 	.word	0x08007a8e
 8007740:	080058e5 	.word	0x080058e5
 8007744:	080074a5 	.word	0x080074a5

08007748 <_sbrk_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	4c06      	ldr	r4, [pc, #24]	; (8007764 <_sbrk_r+0x1c>)
 800774c:	2300      	movs	r3, #0
 800774e:	4605      	mov	r5, r0
 8007750:	4608      	mov	r0, r1
 8007752:	6023      	str	r3, [r4, #0]
 8007754:	f7fa f99a 	bl	8001a8c <_sbrk>
 8007758:	1c43      	adds	r3, r0, #1
 800775a:	d102      	bne.n	8007762 <_sbrk_r+0x1a>
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	b103      	cbz	r3, 8007762 <_sbrk_r+0x1a>
 8007760:	602b      	str	r3, [r5, #0]
 8007762:	bd38      	pop	{r3, r4, r5, pc}
 8007764:	2000f4e4 	.word	0x2000f4e4

08007768 <__ascii_mbtowc>:
 8007768:	b082      	sub	sp, #8
 800776a:	b901      	cbnz	r1, 800776e <__ascii_mbtowc+0x6>
 800776c:	a901      	add	r1, sp, #4
 800776e:	b142      	cbz	r2, 8007782 <__ascii_mbtowc+0x1a>
 8007770:	b14b      	cbz	r3, 8007786 <__ascii_mbtowc+0x1e>
 8007772:	7813      	ldrb	r3, [r2, #0]
 8007774:	600b      	str	r3, [r1, #0]
 8007776:	7812      	ldrb	r2, [r2, #0]
 8007778:	1c10      	adds	r0, r2, #0
 800777a:	bf18      	it	ne
 800777c:	2001      	movne	r0, #1
 800777e:	b002      	add	sp, #8
 8007780:	4770      	bx	lr
 8007782:	4610      	mov	r0, r2
 8007784:	e7fb      	b.n	800777e <__ascii_mbtowc+0x16>
 8007786:	f06f 0001 	mvn.w	r0, #1
 800778a:	e7f8      	b.n	800777e <__ascii_mbtowc+0x16>

0800778c <memmove>:
 800778c:	4288      	cmp	r0, r1
 800778e:	b510      	push	{r4, lr}
 8007790:	eb01 0302 	add.w	r3, r1, r2
 8007794:	d807      	bhi.n	80077a6 <memmove+0x1a>
 8007796:	1e42      	subs	r2, r0, #1
 8007798:	4299      	cmp	r1, r3
 800779a:	d00a      	beq.n	80077b2 <memmove+0x26>
 800779c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80077a4:	e7f8      	b.n	8007798 <memmove+0xc>
 80077a6:	4283      	cmp	r3, r0
 80077a8:	d9f5      	bls.n	8007796 <memmove+0xa>
 80077aa:	1881      	adds	r1, r0, r2
 80077ac:	1ad2      	subs	r2, r2, r3
 80077ae:	42d3      	cmn	r3, r2
 80077b0:	d100      	bne.n	80077b4 <memmove+0x28>
 80077b2:	bd10      	pop	{r4, pc}
 80077b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80077bc:	e7f7      	b.n	80077ae <memmove+0x22>

080077be <__malloc_lock>:
 80077be:	4770      	bx	lr

080077c0 <__malloc_unlock>:
 80077c0:	4770      	bx	lr

080077c2 <_realloc_r>:
 80077c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c4:	4607      	mov	r7, r0
 80077c6:	4614      	mov	r4, r2
 80077c8:	460e      	mov	r6, r1
 80077ca:	b921      	cbnz	r1, 80077d6 <_realloc_r+0x14>
 80077cc:	4611      	mov	r1, r2
 80077ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80077d2:	f7ff be0d 	b.w	80073f0 <_malloc_r>
 80077d6:	b922      	cbnz	r2, 80077e2 <_realloc_r+0x20>
 80077d8:	f7ff fdbc 	bl	8007354 <_free_r>
 80077dc:	4625      	mov	r5, r4
 80077de:	4628      	mov	r0, r5
 80077e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077e2:	f000 f821 	bl	8007828 <_malloc_usable_size_r>
 80077e6:	42a0      	cmp	r0, r4
 80077e8:	d20f      	bcs.n	800780a <_realloc_r+0x48>
 80077ea:	4621      	mov	r1, r4
 80077ec:	4638      	mov	r0, r7
 80077ee:	f7ff fdff 	bl	80073f0 <_malloc_r>
 80077f2:	4605      	mov	r5, r0
 80077f4:	2800      	cmp	r0, #0
 80077f6:	d0f2      	beq.n	80077de <_realloc_r+0x1c>
 80077f8:	4631      	mov	r1, r6
 80077fa:	4622      	mov	r2, r4
 80077fc:	f7ff fab6 	bl	8006d6c <memcpy>
 8007800:	4631      	mov	r1, r6
 8007802:	4638      	mov	r0, r7
 8007804:	f7ff fda6 	bl	8007354 <_free_r>
 8007808:	e7e9      	b.n	80077de <_realloc_r+0x1c>
 800780a:	4635      	mov	r5, r6
 800780c:	e7e7      	b.n	80077de <_realloc_r+0x1c>

0800780e <__ascii_wctomb>:
 800780e:	b149      	cbz	r1, 8007824 <__ascii_wctomb+0x16>
 8007810:	2aff      	cmp	r2, #255	; 0xff
 8007812:	bf85      	ittet	hi
 8007814:	238a      	movhi	r3, #138	; 0x8a
 8007816:	6003      	strhi	r3, [r0, #0]
 8007818:	700a      	strbls	r2, [r1, #0]
 800781a:	f04f 30ff 	movhi.w	r0, #4294967295
 800781e:	bf98      	it	ls
 8007820:	2001      	movls	r0, #1
 8007822:	4770      	bx	lr
 8007824:	4608      	mov	r0, r1
 8007826:	4770      	bx	lr

08007828 <_malloc_usable_size_r>:
 8007828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800782c:	1f18      	subs	r0, r3, #4
 800782e:	2b00      	cmp	r3, #0
 8007830:	bfbc      	itt	lt
 8007832:	580b      	ldrlt	r3, [r1, r0]
 8007834:	18c0      	addlt	r0, r0, r3
 8007836:	4770      	bx	lr

08007838 <round>:
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783a:	ec57 6b10 	vmov	r6, r7, d0
 800783e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8007842:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8007846:	2c13      	cmp	r4, #19
 8007848:	463b      	mov	r3, r7
 800784a:	463d      	mov	r5, r7
 800784c:	dc17      	bgt.n	800787e <round+0x46>
 800784e:	2c00      	cmp	r4, #0
 8007850:	da09      	bge.n	8007866 <round+0x2e>
 8007852:	3401      	adds	r4, #1
 8007854:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8007858:	d103      	bne.n	8007862 <round+0x2a>
 800785a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800785e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007862:	2100      	movs	r1, #0
 8007864:	e02c      	b.n	80078c0 <round+0x88>
 8007866:	4a18      	ldr	r2, [pc, #96]	; (80078c8 <round+0x90>)
 8007868:	4122      	asrs	r2, r4
 800786a:	4217      	tst	r7, r2
 800786c:	d100      	bne.n	8007870 <round+0x38>
 800786e:	b19e      	cbz	r6, 8007898 <round+0x60>
 8007870:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007874:	4123      	asrs	r3, r4
 8007876:	442b      	add	r3, r5
 8007878:	ea23 0302 	bic.w	r3, r3, r2
 800787c:	e7f1      	b.n	8007862 <round+0x2a>
 800787e:	2c33      	cmp	r4, #51	; 0x33
 8007880:	dd0d      	ble.n	800789e <round+0x66>
 8007882:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007886:	d107      	bne.n	8007898 <round+0x60>
 8007888:	4630      	mov	r0, r6
 800788a:	4639      	mov	r1, r7
 800788c:	ee10 2a10 	vmov	r2, s0
 8007890:	f7f8 fd04 	bl	800029c <__adddf3>
 8007894:	4606      	mov	r6, r0
 8007896:	460f      	mov	r7, r1
 8007898:	ec47 6b10 	vmov	d0, r6, r7
 800789c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800789e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80078a2:	f04f 30ff 	mov.w	r0, #4294967295
 80078a6:	40d0      	lsrs	r0, r2
 80078a8:	4206      	tst	r6, r0
 80078aa:	d0f5      	beq.n	8007898 <round+0x60>
 80078ac:	2201      	movs	r2, #1
 80078ae:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80078b2:	fa02 f404 	lsl.w	r4, r2, r4
 80078b6:	1931      	adds	r1, r6, r4
 80078b8:	bf28      	it	cs
 80078ba:	189b      	addcs	r3, r3, r2
 80078bc:	ea21 0100 	bic.w	r1, r1, r0
 80078c0:	461f      	mov	r7, r3
 80078c2:	460e      	mov	r6, r1
 80078c4:	e7e8      	b.n	8007898 <round+0x60>
 80078c6:	bf00      	nop
 80078c8:	000fffff 	.word	0x000fffff

080078cc <_init>:
 80078cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ce:	bf00      	nop
 80078d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d2:	bc08      	pop	{r3}
 80078d4:	469e      	mov	lr, r3
 80078d6:	4770      	bx	lr

080078d8 <_fini>:
 80078d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078da:	bf00      	nop
 80078dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078de:	bc08      	pop	{r3}
 80078e0:	469e      	mov	lr, r3
 80078e2:	4770      	bx	lr

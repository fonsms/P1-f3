
SECO-P1-F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007584  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08007728  08007728  00017728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079e0  080079e0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  080079e0  080079e0  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079e0  080079e0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079e0  080079e0  000179e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079e4  080079e4  000179e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080079e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d3b0  200001f8  08007bdc  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000d5a8  08007bdc  0002d5a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5c3  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e8e  00000000  00000000  0002d7e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca0  00000000  00000000  0002f678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b98  00000000  00000000  00030318  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dd70  00000000  00000000  00030eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b1fd  00000000  00000000  0004ec20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b08fa  00000000  00000000  00059e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010a717  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e50  00000000  00000000  0010a794  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800770c 	.word	0x0800770c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800770c 	.word	0x0800770c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_GPIO_Init+0x7c>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <MX_GPIO_Init+0x7c>)
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	6153      	str	r3, [r2, #20]
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_GPIO_Init+0x7c>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_GPIO_Init+0x7c>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <MX_GPIO_Init+0x7c>)
 8000c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c30:	6153      	str	r3, [r2, #20]
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <MX_GPIO_Init+0x7c>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c48:	f001 fc00 	bl	800244c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	4619      	mov	r1, r3
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c68:	f001 fa66 	bl	8002138 <HAL_GPIO_Init>

}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40021000 	.word	0x40021000

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7c:	f001 f8e4 	bl	8001e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c80:	f000 f82a 	bl	8000cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c84:	f7ff ffb8 	bl	8000bf8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c88:	f001 f842 	bl	8001d10 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c8c:	f000 fe84 	bl	8001998 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c90:	f000 fed6 	bl	8001a40 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000c94:	f000 ff3a 	bl	8001b0c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <main+0x58>)
 8000c9c:	f003 f804 	bl	8003ca8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <main+0x58>)
 8000ca4:	f003 f800 	bl	8003ca8 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000ca8:	213c      	movs	r1, #60	; 0x3c
 8000caa:	480a      	ldr	r0, [pc, #40]	; (8000cd4 <main+0x5c>)
 8000cac:	f003 f8ee 	bl	8003e8c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <main+0x5c>)
 8000cb2:	f002 ff79 	bl	8003ba8 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

	//reductora();// Uncommenting this line to calculate the reducer value
	//funtion_trasfer(12);// Uncommenting this line to calculate the function transfer

	setref(-3*M_PI,1); // set a first  ref to linear controler
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8000cc8 <main+0x50>
 8000cbc:	f000 fbe6 	bl	800148c <setref>

	while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <main+0x48>
 8000cc2:	bf00      	nop
 8000cc4:	f3af 8000 	nop.w
 8000cc8:	7f3321d2 	.word	0x7f3321d2
 8000ccc:	c022d97c 	.word	0xc022d97c
 8000cd0:	2000d460 	.word	0x2000d460
 8000cd4:	2000d4e0 	.word	0x2000d4e0

08000cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b0a6      	sub	sp, #152	; 0x98
 8000cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cde:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ce2:	2228      	movs	r2, #40	; 0x28
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f004 fc82 	bl	80055f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2258      	movs	r2, #88	; 0x58
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f004 fc74 	bl	80055f0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d10:	2310      	movs	r3, #16
 8000d12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d16:	2302      	movs	r3, #2
 8000d18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000d24:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8000d28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 fba0 	bl	800247c <HAL_RCC_OscConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d42:	f000 fd6f 	bl	8001824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d46:	230f      	movs	r3, #15
 8000d48:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d56:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d60:	2102      	movs	r1, #2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f002 faa0 	bl	80032a8 <HAL_RCC_ClockConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d6e:	f000 fd59 	bl	8001824 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <SystemClock_Config+0xc4>)
 8000d74:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 fcc5 	bl	8003714 <HAL_RCCEx_PeriphCLKConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000d90:	f000 fd48 	bl	8001824 <Error_Handler>
  }
}
 8000d94:	bf00      	nop
 8000d96:	3798      	adds	r7, #152	; 0x98
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	00300002 	.word	0x00300002

08000da0 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief  Period elapsed callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000da0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]

	if (htim->Instance==TIM6) {
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a56      	ldr	r2, [pc, #344]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	f040 818c 	bne.w	80010ce <HAL_TIM_PeriodElapsedCallback+0x32e>

		if (FLAG_PROPORTIONAL_CONTROLER == true||FLAG_DERIVATIVE_CONTROLER == true ||FLAG_INTEGRATOR_CONTROLER == true) {
 8000db6:	4b55      	ldr	r3, [pc, #340]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d108      	bne.n	8000dd0 <HAL_TIM_PeriodElapsedCallback+0x30>
 8000dbe:	4b54      	ldr	r3, [pc, #336]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d104      	bne.n	8000dd0 <HAL_TIM_PeriodElapsedCallback+0x30>
 8000dc6:	4b53      	ldr	r3, [pc, #332]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 811a 	beq.w	8001004 <HAL_TIM_PeriodElapsedCallback+0x264>
			i += 1;
 8000dd0:	4b51      	ldr	r3, [pc, #324]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	4a50      	ldr	r2, [pc, #320]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000dd8:	6013      	str	r3, [r2, #0]
			current_value =__HAL_TIM_GET_COUNTER(&htim2);
 8000dda:	4b50      	ldr	r3, [pc, #320]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fb97 	bl	8000514 <__aeabi_ui2d>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	494d      	ldr	r1, [pc, #308]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000dec:	e9c1 2300 	strd	r2, r3, [r1]
			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8000df0:	4b4a      	ldr	r3, [pc, #296]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0310 	and.w	r3, r3, #16
 8000dfa:	2b10      	cmp	r3, #16
 8000dfc:	d151      	bne.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x102>

				if(FLAG_COUNT_OVERFLOW == true && current_value > last_value ){
 8000dfe:	4b49      	ldr	r3, [pc, #292]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d023      	beq.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0xae>
 8000e06:	4b46      	ldr	r3, [pc, #280]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e0c:	4b46      	ldr	r3, [pc, #280]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e12:	f7ff fe89 	bl	8000b28 <__aeabi_dcmpgt>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d018      	beq.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0xae>
					diff = -((max_enconder_count-current_value) + last_value);
 8000e1c:	4b40      	ldr	r3, [pc, #256]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	a137      	add	r1, pc, #220	; (adr r1, 8000f00 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e28:	f7ff fa36 	bl	8000298 <__aeabi_dsub>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4610      	mov	r0, r2
 8000e32:	4619      	mov	r1, r3
 8000e34:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3a:	f7ff fa2f 	bl	800029c <__adddf3>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4690      	mov	r8, r2
 8000e44:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8000e48:	4b38      	ldr	r3, [pc, #224]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e4a:	e9c3 8900 	strd	r8, r9, [r3]
				}
				if(current_value <= last_value || current_value <= last_value){
 8000e4e:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e54:	4b34      	ldr	r3, [pc, #208]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5a:	f7ff fe51 	bl	8000b00 <__aeabi_dcmple>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10a      	bne.n	8000e7a <HAL_TIM_PeriodElapsedCallback+0xda>
 8000e64:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	f7ff fe46 	bl	8000b00 <__aeabi_dcmple>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d06c      	beq.n	8000f54 <HAL_TIM_PeriodElapsedCallback+0x1b4>
					diff = -(last_value - current_value);
 8000e7a:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e80:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e86:	f7ff fa07 	bl	8000298 <__aeabi_dsub>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	4614      	mov	r4, r2
 8000e90:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000e94:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e96:	e9c3 4500 	strd	r4, r5, [r3]
					FLAG_COUNT_OVERFLOW = false;
 8000e9a:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	e058      	b.n	8000f54 <HAL_TIM_PeriodElapsedCallback+0x1b4>


			}
			else {

				if (FLAG_COUNT_OVERFLOW == true && current_value < last_value) {
 8000ea2:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d042      	beq.n	8000f30 <HAL_TIM_PeriodElapsedCallback+0x190>
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000eac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000eb2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4623      	mov	r3, r4
 8000eba:	f7ff fe17 	bl	8000aec <__aeabi_dcmplt>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d035      	beq.n	8000f30 <HAL_TIM_PeriodElapsedCallback+0x190>
					diff = (max_enconder_count - last_value) + current_value;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000ec6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4623      	mov	r3, r4
 8000ece:	a10c      	add	r1, pc, #48	; (adr r1, 8000f00 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ed4:	f7ff f9e0 	bl	8000298 <__aeabi_dsub>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	460c      	mov	r4, r1
 8000edc:	4618      	mov	r0, r3
 8000ede:	4621      	mov	r1, r4
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000ee2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4623      	mov	r3, r4
 8000eea:	f7ff f9d7 	bl	800029c <__adddf3>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460c      	mov	r4, r1
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ef4:	e9c2 3400 	strd	r3, r4, [r2]
 8000ef8:	e02c      	b.n	8000f54 <HAL_TIM_PeriodElapsedCallback+0x1b4>
 8000efa:	bf00      	nop
 8000efc:	f3af 8000 	nop.w
 8000f00:	00000000 	.word	0x00000000
 8000f04:	40efffe0 	.word	0x40efffe0
 8000f08:	40001000 	.word	0x40001000
 8000f0c:	20000272 	.word	0x20000272
 8000f10:	20000273 	.word	0x20000273
 8000f14:	20000274 	.word	0x20000274
 8000f18:	20000228 	.word	0x20000228
 8000f1c:	2000d4e0 	.word	0x2000d4e0
 8000f20:	20000238 	.word	0x20000238
 8000f24:	20000275 	.word	0x20000275
 8000f28:	20000248 	.word	0x20000248
 8000f2c:	20000240 	.word	0x20000240
				} else {
					diff = current_value - last_value;
 8000f30:	4b6f      	ldr	r3, [pc, #444]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000f32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f36:	4b6f      	ldr	r3, [pc, #444]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000f38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4623      	mov	r3, r4
 8000f40:	f7ff f9aa 	bl	8000298 <__aeabi_dsub>
 8000f44:	4603      	mov	r3, r0
 8000f46:	460c      	mov	r4, r1
 8000f48:	4a6b      	ldr	r2, [pc, #428]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000f4a:	e9c2 3400 	strd	r3, r4, [r2]
					FLAG_COUNT_OVERFLOW = false;
 8000f4e:	4b6b      	ldr	r3, [pc, #428]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]

				}

			}

			last_value = current_value;
 8000f54:	4b66      	ldr	r3, [pc, #408]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000f56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f5a:	4a66      	ldr	r2, [pc, #408]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000f5c:	e9c2 3400 	strd	r3, r4, [r2]
			pos_i = pos_i + diff;
 8000f60:	4b67      	ldr	r3, [pc, #412]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000f62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f66:	4b64      	ldr	r3, [pc, #400]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000f68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4623      	mov	r3, r4
 8000f70:	f7ff f994 	bl	800029c <__adddf3>
 8000f74:	4603      	mov	r3, r0
 8000f76:	460c      	mov	r4, r1
 8000f78:	4a61      	ldr	r2, [pc, #388]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000f7a:	e9c2 3400 	strd	r3, r4, [r2]
			if(i<num_muestras_controlador){
 8000f7e:	4b61      	ldr	r3, [pc, #388]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d809      	bhi.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x1fe>
				pos_buffer[i]= pos_i;
 8000f8a:	4b5e      	ldr	r3, [pc, #376]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b5c      	ldr	r3, [pc, #368]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000f90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f94:	495c      	ldr	r1, [pc, #368]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000f96:	00d2      	lsls	r2, r2, #3
 8000f98:	440a      	add	r2, r1
 8000f9a:	e9c2 3400 	strd	r3, r4, [r2]
			}


			if(i == num_muestras_controlador && FLAG_PROPORTIONAL == true){
 8000f9e:	4b59      	ldr	r3, [pc, #356]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d105      	bne.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0x216>
 8000faa:	4b58      	ldr	r3, [pc, #352]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0x216>
				enviarcuenta();
 8000fb2:	f000 f9ab 	bl	800130c <enviarcuenta>
			}
			if (FLAG_PROPORTIONAL_CONTROLER == true) {
 8000fb6:	4b56      	ldr	r3, [pc, #344]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d008      	beq.n	8000fd0 <HAL_TIM_PeriodElapsedCallback+0x230>
				controlador_proporcional(pos_i);
 8000fbe:	4b50      	ldr	r3, [pc, #320]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000fc0:	ed93 7b00 	vldr	d7, [r3]
 8000fc4:	eeb0 0a47 	vmov.f32	s0, s14
 8000fc8:	eef0 0a67 	vmov.f32	s1, s15
 8000fcc:	f000 fa98 	bl	8001500 <controlador_proporcional>
			}
			if (FLAG_DERIVATIVE_CONTROLER == true) {
 8000fd0:	4b50      	ldr	r3, [pc, #320]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d008      	beq.n	8000fea <HAL_TIM_PeriodElapsedCallback+0x24a>
				controlador_derivativo(pos_i);
 8000fd8:	4b49      	ldr	r3, [pc, #292]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000fda:	ed93 7b00 	vldr	d7, [r3]
 8000fde:	eeb0 0a47 	vmov.f32	s0, s14
 8000fe2:	eef0 0a67 	vmov.f32	s1, s15
 8000fe6:	f000 fadf 	bl	80015a8 <controlador_derivativo>

			}
			if (FLAG_INTEGRATOR_CONTROLER == true) {
 8000fea:	4b4b      	ldr	r3, [pc, #300]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d008      	beq.n	8001004 <HAL_TIM_PeriodElapsedCallback+0x264>
				controlador_integrador(pos_i);
 8000ff2:	4b43      	ldr	r3, [pc, #268]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000ff4:	ed93 7b00 	vldr	d7, [r3]
 8000ff8:	eeb0 0a47 	vmov.f32	s0, s14
 8000ffc:	eef0 0a67 	vmov.f32	s1, s15
 8001000:	f000 fb52 	bl	80016a8 <controlador_integrador>
			}


		}
		if (FLAG_REDUCER == true) {
 8001004:	4b45      	ldr	r3, [pc, #276]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d027      	beq.n	800105c <HAL_TIM_PeriodElapsedCallback+0x2bc>
			i += 1;
 800100c:	4b3d      	ldr	r3, [pc, #244]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3301      	adds	r3, #1
 8001012:	4a3c      	ldr	r2, [pc, #240]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001014:	6013      	str	r3, [r2, #0]
			if(i == 4000){
 8001016:	4b3b      	ldr	r3, [pc, #236]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800101e:	d11d      	bne.n	800105c <HAL_TIM_PeriodElapsedCallback+0x2bc>
				cuenta = __HAL_TIM_GET_COUNTER(&htim2);
 8001020:	4b3f      	ldr	r3, [pc, #252]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fa74 	bl	8000514 <__aeabi_ui2d>
 800102c:	4603      	mov	r3, r0
 800102e:	460c      	mov	r4, r1
 8001030:	4a3c      	ldr	r2, [pc, #240]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001032:	e9c2 3400 	strd	r3, r4, [r2]
				cuenta2 = TIM2->CNT;
 8001036:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa69 	bl	8000514 <__aeabi_ui2d>
 8001042:	4603      	mov	r3, r0
 8001044:	460c      	mov	r4, r1
 8001046:	4a38      	ldr	r2, [pc, #224]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001048:	e9c2 3400 	strd	r3, r4, [r2]
				HAL_TIM_Base_Stop_IT(&htim6);
 800104c:	4837      	ldr	r0, [pc, #220]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800104e:	f002 fdd5 	bl	8003bfc <HAL_TIM_Base_Stop_IT>
				enviarcuenta();
 8001052:	f000 f95b 	bl	800130c <enviarcuenta>
				FLAG_REDUCER = false;
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
			}
		}
		if (FLAG_TRANSFER == true) {
 800105c:	4b34      	ldr	r3, [pc, #208]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d03c      	beq.n	80010de <HAL_TIM_PeriodElapsedCallback+0x33e>
			medidas[i] = __HAL_TIM_GET_COUNTER(&htim2);
 8001064:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800106c:	681d      	ldr	r5, [r3, #0]
 800106e:	4610      	mov	r0, r2
 8001070:	f7ff fa50 	bl	8000514 <__aeabi_ui2d>
 8001074:	4603      	mov	r3, r0
 8001076:	460c      	mov	r4, r1
 8001078:	492e      	ldr	r1, [pc, #184]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800107a:	00ea      	lsls	r2, r5, #3
 800107c:	440a      	add	r2, r1
 800107e:	e9c2 3400 	strd	r3, r4, [r2]
			i += 1;
 8001082:	4b20      	ldr	r3, [pc, #128]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	4a1e      	ldr	r2, [pc, #120]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800108a:	6013      	str	r3, [r2, #0]
			if(i == 600){
 800108c:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001094:	d109      	bne.n	80010aa <HAL_TIM_PeriodElapsedCallback+0x30a>
				selec_voltage(0);
 8001096:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80010e8 <HAL_TIM_PeriodElapsedCallback+0x348>
 800109a:	f000 f8e9 	bl	8001270 <selec_voltage>

				i += 1;
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	3301      	adds	r3, #1
 80010a4:	4a17      	ldr	r2, [pc, #92]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80010a6:	6013      	str	r3, [r2, #0]


	}
	else {
	}
}
 80010a8:	e019      	b.n	80010de <HAL_TIM_PeriodElapsedCallback+0x33e>
			else if(i == 1200){
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80010b2:	d114      	bne.n	80010de <HAL_TIM_PeriodElapsedCallback+0x33e>
				selec_voltage(0);
 80010b4:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80010e8 <HAL_TIM_PeriodElapsedCallback+0x348>
 80010b8:	f000 f8da 	bl	8001270 <selec_voltage>
				HAL_TIM_Base_Stop_IT(&htim6);
 80010bc:	481b      	ldr	r0, [pc, #108]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80010be:	f002 fd9d 	bl	8003bfc <HAL_TIM_Base_Stop_IT>
				enviarcuenta();
 80010c2:	f000 f923 	bl	800130c <enviarcuenta>
				FLAG_TRANSFER = false;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
}
 80010cc:	e007      	b.n	80010de <HAL_TIM_PeriodElapsedCallback+0x33e>
	else if(htim->Instance==TIM2){
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010d6:	d102      	bne.n	80010de <HAL_TIM_PeriodElapsedCallback+0x33e>
		FLAG_COUNT_OVERFLOW = true;
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...
 80010f0:	20000238 	.word	0x20000238
 80010f4:	20000248 	.word	0x20000248
 80010f8:	20000240 	.word	0x20000240
 80010fc:	20000275 	.word	0x20000275
 8001100:	20000250 	.word	0x20000250
 8001104:	20000228 	.word	0x20000228
 8001108:	20007698 	.word	0x20007698
 800110c:	20000276 	.word	0x20000276
 8001110:	20000272 	.word	0x20000272
 8001114:	20000273 	.word	0x20000273
 8001118:	20000274 	.word	0x20000274
 800111c:	20000270 	.word	0x20000270
 8001120:	2000d4e0 	.word	0x2000d4e0
 8001124:	20000220 	.word	0x20000220
 8001128:	20000218 	.word	0x20000218
 800112c:	2000d4a0 	.word	0x2000d4a0
 8001130:	20000271 	.word	0x20000271
 8001134:	200002f0 	.word	0x200002f0

08001138 <move>:
 * @brief  Start PWM pins with specific duties cycles
 * @param  v1: Duty cycle of first PWM .
 * @param  v2:  Duty cycle of second PWM.
 * @retval None
 */
void move(double_t v1,double_t v2){
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001142:	ed87 1b00 	vstr	d1, [r7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001146:	2201      	movs	r2, #1
 8001148:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800114c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001150:	f001 f97c 	bl	800244c <HAL_GPIO_WritePin>
	v1 = round(v1);
 8001154:	ed97 0b02 	vldr	d0, [r7, #8]
 8001158:	f006 fa8e 	bl	8007678 <round>
 800115c:	ed87 0b02 	vstr	d0, [r7, #8]
	v2 = round(v2);
 8001160:	ed97 0b00 	vldr	d0, [r7]
 8001164:	f006 fa88 	bl	8007678 <round>
 8001168:	ed87 0b00 	vstr	d0, [r7]

	if(v1>999){
 800116c:	a33d      	add	r3, pc, #244	; (adr r3, 8001264 <move+0x12c>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001176:	f7ff fcd7 	bl	8000b28 <__aeabi_dcmpgt>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d005      	beq.n	800118c <move+0x54>
		v1 = 999;
 8001180:	a438      	add	r4, pc, #224	; (adr r4, 8001264 <move+0x12c>)
 8001182:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001186:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800118a:	e010      	b.n	80011ae <move+0x76>
	}
	else if(v1<0){
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001198:	f7ff fca8 	bl	8000aec <__aeabi_dcmplt>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <move+0x76>
		v1 = 0;
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	f04f 0400 	mov.w	r4, #0
 80011aa:	e9c7 3402 	strd	r3, r4, [r7, #8]
	}

	if(v2<0){
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011ba:	f7ff fc97 	bl	8000aec <__aeabi_dcmplt>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d006      	beq.n	80011d2 <move+0x9a>
		v2 = 0;
 80011c4:	f04f 0300 	mov.w	r3, #0
 80011c8:	f04f 0400 	mov.w	r4, #0
 80011cc:	e9c7 3400 	strd	r3, r4, [r7]
 80011d0:	e00e      	b.n	80011f0 <move+0xb8>
	}
	else if(v2>999){
 80011d2:	a324      	add	r3, pc, #144	; (adr r3, 8001264 <move+0x12c>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011dc:	f7ff fca4 	bl	8000b28 <__aeabi_dcmpgt>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <move+0xb8>
		v2 = 999;
 80011e6:	a41f      	add	r4, pc, #124	; (adr r4, 8001264 <move+0x12c>)
 80011e8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80011ec:	e9c7 3400 	strd	r3, r4, [r7]
	}

	if(v1 != 0 && v2 !=0){
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011fc:	f7ff fc6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d116      	bne.n	8001234 <move+0xfc>
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	f04f 0300 	mov.w	r3, #0
 800120e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001212:	f7ff fc61 	bl	8000ad8 <__aeabi_dcmpeq>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d10b      	bne.n	8001234 <move+0xfc>
		v1 = 0;
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	f04f 0400 	mov.w	r4, #0
 8001224:	e9c7 3402 	strd	r3, r4, [r7, #8]
		v2 = 0;
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	f04f 0400 	mov.w	r4, #0
 8001230:	e9c7 3400 	strd	r3, r4, [r7]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,v1);
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <move+0x128>)
 8001236:	681c      	ldr	r4, [r3, #0]
 8001238:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800123c:	f7ff fcbc 	bl	8000bb8 <__aeabi_d2uiz>
 8001240:	4603      	mov	r3, r0
 8001242:	6363      	str	r3, [r4, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,v2);
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <move+0x128>)
 8001246:	681c      	ldr	r4, [r3, #0]
 8001248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800124c:	f7ff fcb4 	bl	8000bb8 <__aeabi_d2uiz>
 8001250:	4603      	mov	r3, r0
 8001252:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	bd90      	pop	{r4, r7, pc}
 800125c:	f3af 8000 	nop.w
 8001260:	2000d460 	.word	0x2000d460
 8001264:	00000000 	.word	0x00000000
 8001268:	408f3800 	.word	0x408f3800
 800126c:	00000000 	.word	0x00000000

08001270 <selec_voltage>:
/**
 * @brief  Estimate the duty cycle of the PWM, according to the mean voltage selected and call move function with this values.
 * @param  V: the average voltage of the PWM.
 * @retval None
 */
void selec_voltage (double_t V){
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	ed87 0b00 	vstr	d0, [r7]
	double tension_pwm;
	tension_pwm = (V/12)*999;
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b22      	ldr	r3, [pc, #136]	; (8001308 <selec_voltage+0x98>)
 8001280:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001284:	f7ff faea 	bl	800085c <__aeabi_ddiv>
 8001288:	4603      	mov	r3, r0
 800128a:	460c      	mov	r4, r1
 800128c:	4618      	mov	r0, r3
 800128e:	4621      	mov	r1, r4
 8001290:	a319      	add	r3, pc, #100	; (adr r3, 80012f8 <selec_voltage+0x88>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	f7ff f9b7 	bl	8000608 <__aeabi_dmul>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if (V>0) {
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	f04f 0300 	mov.w	r3, #0
 80012aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012ae:	f7ff fc3b 	bl	8000b28 <__aeabi_dcmpgt>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <selec_voltage+0x56>
		move(tension_pwm,0);
 80012b8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8001300 <selec_voltage+0x90>
 80012bc:	ed97 0b02 	vldr	d0, [r7, #8]
 80012c0:	f7ff ff3a 	bl	8001138 <move>
	}else {
		tension_pwm = abs(tension_pwm);
		move(0,tension_pwm);
	}

}
 80012c4:	e014      	b.n	80012f0 <selec_voltage+0x80>
		tension_pwm = abs(tension_pwm);
 80012c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012ca:	f7ff fc4d 	bl	8000b68 <__aeabi_d2iz>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bfb8      	it	lt
 80012d4:	425b      	neglt	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f92c 	bl	8000534 <__aeabi_i2d>
 80012dc:	4603      	mov	r3, r0
 80012de:	460c      	mov	r4, r1
 80012e0:	e9c7 3402 	strd	r3, r4, [r7, #8]
		move(0,tension_pwm);
 80012e4:	ed97 1b02 	vldr	d1, [r7, #8]
 80012e8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8001300 <selec_voltage+0x90>
 80012ec:	f7ff ff24 	bl	8001138 <move>
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd90      	pop	{r4, r7, pc}
 80012f8:	00000000 	.word	0x00000000
 80012fc:	408f3800 	.word	0x408f3800
	...
 8001308:	40280000 	.word	0x40280000

0800130c <enviarcuenta>:
/**
 * @brief  Send measures via ST link USB for UART
 * @retval None
 */
void enviarcuenta(){
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b087      	sub	sp, #28
 8001310:	af02      	add	r7, sp, #8
	if (FLAG_TRANSFER == true) {
 8001312:	4b51      	ldr	r3, [pc, #324]	; (8001458 <enviarcuenta+0x14c>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d028      	beq.n	800136c <enviarcuenta+0x60>
		for(int i = 0; i<num_muestras_controlador; i++){
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	e010      	b.n	8001342 <enviarcuenta+0x36>
			sprintf(str_name, "%s%d\t%f\n",str_name , i,medidas[i]);
 8001320:	4a4e      	ldr	r2, [pc, #312]	; (800145c <enviarcuenta+0x150>)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	4413      	add	r3, r2
 8001328:	e9d3 3400 	ldrd	r3, r4, [r3]
 800132c:	e9cd 3400 	strd	r3, r4, [sp]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4a4b      	ldr	r2, [pc, #300]	; (8001460 <enviarcuenta+0x154>)
 8001334:	494b      	ldr	r1, [pc, #300]	; (8001464 <enviarcuenta+0x158>)
 8001336:	484a      	ldr	r0, [pc, #296]	; (8001460 <enviarcuenta+0x154>)
 8001338:	f004 fdbe 	bl	8005eb8 <siprintf>
		for(int i = 0; i<num_muestras_controlador; i++){
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3301      	adds	r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001348:	4293      	cmp	r3, r2
 800134a:	dde9      	ble.n	8001320 <enviarcuenta+0x14>
		}
		sprintf(str_name, "%s#",str_name);
 800134c:	4a44      	ldr	r2, [pc, #272]	; (8001460 <enviarcuenta+0x154>)
 800134e:	4946      	ldr	r1, [pc, #280]	; (8001468 <enviarcuenta+0x15c>)
 8001350:	4843      	ldr	r0, [pc, #268]	; (8001460 <enviarcuenta+0x154>)
 8001352:	f004 fdb1 	bl	8005eb8 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) str_name, strlen(str_name), HAL_MAX_DELAY);
 8001356:	4842      	ldr	r0, [pc, #264]	; (8001460 <enviarcuenta+0x154>)
 8001358:	f7fe ff42 	bl	80001e0 <strlen>
 800135c:	4603      	mov	r3, r0
 800135e:	b29a      	uxth	r2, r3
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
 8001364:	493e      	ldr	r1, [pc, #248]	; (8001460 <enviarcuenta+0x154>)
 8001366:	4841      	ldr	r0, [pc, #260]	; (800146c <enviarcuenta+0x160>)
 8001368:	f003 fd08 	bl	8004d7c <HAL_UART_Transmit>
	}
	if (FLAG_REDUCER == true) {
 800136c:	4b40      	ldr	r3, [pc, #256]	; (8001470 <enviarcuenta+0x164>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d018      	beq.n	80013a6 <enviarcuenta+0x9a>
		sprintf(str_name_reducer, "Cuenta = %f\t %f", cuenta,cuenta2);
 8001374:	4b3f      	ldr	r3, [pc, #252]	; (8001474 <enviarcuenta+0x168>)
 8001376:	e9d3 1200 	ldrd	r1, r2, [r3]
 800137a:	4b3f      	ldr	r3, [pc, #252]	; (8001478 <enviarcuenta+0x16c>)
 800137c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001380:	e9cd 3400 	strd	r3, r4, [sp]
 8001384:	4613      	mov	r3, r2
 8001386:	460a      	mov	r2, r1
 8001388:	493c      	ldr	r1, [pc, #240]	; (800147c <enviarcuenta+0x170>)
 800138a:	483d      	ldr	r0, [pc, #244]	; (8001480 <enviarcuenta+0x174>)
 800138c:	f004 fd94 	bl	8005eb8 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) str_name_reducer, strlen(str_name_reducer), HAL_MAX_DELAY);
 8001390:	483b      	ldr	r0, [pc, #236]	; (8001480 <enviarcuenta+0x174>)
 8001392:	f7fe ff25 	bl	80001e0 <strlen>
 8001396:	4603      	mov	r3, r0
 8001398:	b29a      	uxth	r2, r3
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	4938      	ldr	r1, [pc, #224]	; (8001480 <enviarcuenta+0x174>)
 80013a0:	4832      	ldr	r0, [pc, #200]	; (800146c <enviarcuenta+0x160>)
 80013a2:	f003 fceb 	bl	8004d7c <HAL_UART_Transmit>
	}
	if (FLAG_PROPORTIONAL == true) {
 80013a6:	4b37      	ldr	r3, [pc, #220]	; (8001484 <enviarcuenta+0x178>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d050      	beq.n	8001450 <enviarcuenta+0x144>
		for(int i = 0; i<(int)(num_muestras_controlador/2); i++){
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	e010      	b.n	80013d6 <enviarcuenta+0xca>
			sprintf(str_name, "%s%d\t%f\n",str_name , i,pos_buffer[i]);
 80013b4:	4a34      	ldr	r2, [pc, #208]	; (8001488 <enviarcuenta+0x17c>)
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4413      	add	r3, r2
 80013bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013c0:	e9cd 3400 	strd	r3, r4, [sp]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	4a26      	ldr	r2, [pc, #152]	; (8001460 <enviarcuenta+0x154>)
 80013c8:	4926      	ldr	r1, [pc, #152]	; (8001464 <enviarcuenta+0x158>)
 80013ca:	4825      	ldr	r0, [pc, #148]	; (8001460 <enviarcuenta+0x154>)
 80013cc:	f004 fd74 	bl	8005eb8 <siprintf>
		for(int i = 0; i<(int)(num_muestras_controlador/2); i++){
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	3301      	adds	r3, #1
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f240 52db 	movw	r2, #1499	; 0x5db
 80013dc:	4293      	cmp	r3, r2
 80013de:	dde9      	ble.n	80013b4 <enviarcuenta+0xa8>
		}
		HAL_UART_Transmit(&huart2,(uint8_t*) str_name, strlen(str_name), HAL_MAX_DELAY);
 80013e0:	481f      	ldr	r0, [pc, #124]	; (8001460 <enviarcuenta+0x154>)
 80013e2:	f7fe fefd 	bl	80001e0 <strlen>
 80013e6:	4603      	mov	r3, r0
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	491c      	ldr	r1, [pc, #112]	; (8001460 <enviarcuenta+0x154>)
 80013f0:	481e      	ldr	r0, [pc, #120]	; (800146c <enviarcuenta+0x160>)
 80013f2:	f003 fcc3 	bl	8004d7c <HAL_UART_Transmit>
		strcpy(str_name,"");
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <enviarcuenta+0x154>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
		for(int i = (num_muestras_controlador/2); i<(int)(num_muestras_controlador); i++){
 80013fc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	e010      	b.n	8001426 <enviarcuenta+0x11a>
					sprintf(str_name, "%s%d\t%f\n",str_name , i,pos_buffer[i]);
 8001404:	4a20      	ldr	r2, [pc, #128]	; (8001488 <enviarcuenta+0x17c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001410:	e9cd 3400 	strd	r3, r4, [sp]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <enviarcuenta+0x154>)
 8001418:	4912      	ldr	r1, [pc, #72]	; (8001464 <enviarcuenta+0x158>)
 800141a:	4811      	ldr	r0, [pc, #68]	; (8001460 <enviarcuenta+0x154>)
 800141c:	f004 fd4c 	bl	8005eb8 <siprintf>
		for(int i = (num_muestras_controlador/2); i<(int)(num_muestras_controlador); i++){
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3301      	adds	r3, #1
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800142c:	4293      	cmp	r3, r2
 800142e:	dde9      	ble.n	8001404 <enviarcuenta+0xf8>
				}
		sprintf(str_name, "%s#",str_name);
 8001430:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <enviarcuenta+0x154>)
 8001432:	490d      	ldr	r1, [pc, #52]	; (8001468 <enviarcuenta+0x15c>)
 8001434:	480a      	ldr	r0, [pc, #40]	; (8001460 <enviarcuenta+0x154>)
 8001436:	f004 fd3f 	bl	8005eb8 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) str_name, strlen(str_name), HAL_MAX_DELAY);
 800143a:	4809      	ldr	r0, [pc, #36]	; (8001460 <enviarcuenta+0x154>)
 800143c:	f7fe fed0 	bl	80001e0 <strlen>
 8001440:	4603      	mov	r3, r0
 8001442:	b29a      	uxth	r2, r3
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
 8001448:	4905      	ldr	r1, [pc, #20]	; (8001460 <enviarcuenta+0x154>)
 800144a:	4808      	ldr	r0, [pc, #32]	; (800146c <enviarcuenta+0x160>)
 800144c:	f003 fc96 	bl	8004d7c <HAL_UART_Transmit>
	}

}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	bd90      	pop	{r4, r7, pc}
 8001458:	20000271 	.word	0x20000271
 800145c:	200002f0 	.word	0x200002f0
 8001460:	20002870 	.word	0x20002870
 8001464:	08007728 	.word	0x08007728
 8001468:	08007734 	.word	0x08007734
 800146c:	2000d520 	.word	0x2000d520
 8001470:	20000270 	.word	0x20000270
 8001474:	20000220 	.word	0x20000220
 8001478:	20000218 	.word	0x20000218
 800147c:	08007738 	.word	0x08007738
 8001480:	20000288 	.word	0x20000288
 8001484:	20000276 	.word	0x20000276
 8001488:	20007698 	.word	0x20007698

0800148c <setref>:
/**
 * @brief Set reference for controller
 * @param ref: reference
 * @retval None
 */
void setref(double ref, enum Controlador controlador){
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	ed87 0b02 	vstr	d0, [r7, #8]
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
	referencia = ref;
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <setref+0x58>)
 800149c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80014a0:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80014a4:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <setref+0x5c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2200      	movs	r2, #0
 80014aa:	625a      	str	r2, [r3, #36]	; 0x24
	if (controlador == Lineal) {
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d105      	bne.n	80014be <setref+0x32>
		FLAG_PROPORTIONAL_CONTROLER = true;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <setref+0x60>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
		FLAG_PROPORTIONAL = true;
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <setref+0x64>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
	}
	if (controlador == Derivativo) {
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d102      	bne.n	80014ca <setref+0x3e>
		FLAG_DERIVATIVE_CONTROLER = true;
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <setref+0x68>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]

	}
	if (controlador == Integrador) {
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d102      	bne.n	80014d6 <setref+0x4a>
		FLAG_INTEGRATOR_CONTROLER = true;
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <setref+0x6c>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
	}

	HAL_TIM_Base_Start_IT(&htim6);
 80014d6:	4809      	ldr	r0, [pc, #36]	; (80014fc <setref+0x70>)
 80014d8:	f002 fb66 	bl	8003ba8 <HAL_TIM_Base_Start_IT>
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd90      	pop	{r4, r7, pc}
 80014e4:	20000230 	.word	0x20000230
 80014e8:	2000d4e0 	.word	0x2000d4e0
 80014ec:	20000272 	.word	0x20000272
 80014f0:	20000276 	.word	0x20000276
 80014f4:	20000273 	.word	0x20000273
 80014f8:	20000274 	.word	0x20000274
 80014fc:	2000d4a0 	.word	0x2000d4a0

08001500 <controlador_proporcional>:

/**
 * @brief	Linear Controller
 * @retval None
 */
void controlador_proporcional(double pos_i){
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	ed87 0b00 	vstr	d0, [r7]

	e = referencia - (pos_i * 2 * M_PI / pulse_per_revolution);
 800150a:	4b23      	ldr	r3, [pc, #140]	; (8001598 <controlador_proporcional+0x98>)
 800150c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001510:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	f7fe fec0 	bl	800029c <__adddf3>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	a318      	add	r3, pc, #96	; (adr r3, 8001588 <controlador_proporcional+0x88>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7ff f86d 	bl	8000608 <__aeabi_dmul>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	a316      	add	r3, pc, #88	; (adr r3, 8001590 <controlador_proporcional+0x90>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7ff f98e 	bl	800085c <__aeabi_ddiv>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4620      	mov	r0, r4
 8001546:	4629      	mov	r1, r5
 8001548:	f7fe fea6 	bl	8000298 <__aeabi_dsub>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
 8001550:	4a12      	ldr	r2, [pc, #72]	; (800159c <controlador_proporcional+0x9c>)
 8001552:	e9c2 3400 	strd	r3, r4, [r2]
	selec_voltage((double)kp * e);
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <controlador_proporcional+0xa0>)
 8001558:	e9d3 0100 	ldrd	r0, r1, [r3]
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <controlador_proporcional+0x9c>)
 800155e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001562:	461a      	mov	r2, r3
 8001564:	4623      	mov	r3, r4
 8001566:	f7ff f84f 	bl	8000608 <__aeabi_dmul>
 800156a:	4603      	mov	r3, r0
 800156c:	460c      	mov	r4, r1
 800156e:	ec44 3b17 	vmov	d7, r3, r4
 8001572:	eeb0 0a47 	vmov.f32	s0, s14
 8001576:	eef0 0a67 	vmov.f32	s1, s15
 800157a:	f7ff fe79 	bl	8001270 <selec_voltage>

}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bdb0      	pop	{r4, r5, r7, pc}
 8001586:	bf00      	nop
 8001588:	54442d18 	.word	0x54442d18
 800158c:	400921fb 	.word	0x400921fb
 8001590:	00000000 	.word	0x00000000
 8001594:	40aba000 	.word	0x40aba000
 8001598:	20000230 	.word	0x20000230
 800159c:	20000258 	.word	0x20000258
 80015a0:	20000000 	.word	0x20000000
 80015a4:	00000000 	.word	0x00000000

080015a8 <controlador_derivativo>:
void controlador_derivativo(double pos_i){
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	ed87 0b00 	vstr	d0, [r7]

	e_last = e;
 80015b2:	4b37      	ldr	r3, [pc, #220]	; (8001690 <controlador_derivativo+0xe8>)
 80015b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015b8:	4a36      	ldr	r2, [pc, #216]	; (8001694 <controlador_derivativo+0xec>)
 80015ba:	e9c2 3400 	strd	r3, r4, [r2]
	e = referencia - (pos_i * 2 * M_PI / pulse_per_revolution);
 80015be:	4b36      	ldr	r3, [pc, #216]	; (8001698 <controlador_derivativo+0xf0>)
 80015c0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80015c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	f7fe fe66 	bl	800029c <__adddf3>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	a329      	add	r3, pc, #164	; (adr r3, 8001680 <controlador_derivativo+0xd8>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7ff f813 	bl	8000608 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	a327      	add	r3, pc, #156	; (adr r3, 8001688 <controlador_derivativo+0xe0>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7ff f934 	bl	800085c <__aeabi_ddiv>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4620      	mov	r0, r4
 80015fa:	4629      	mov	r1, r5
 80015fc:	f7fe fe4c 	bl	8000298 <__aeabi_dsub>
 8001600:	4603      	mov	r3, r0
 8001602:	460c      	mov	r4, r1
 8001604:	4a22      	ldr	r2, [pc, #136]	; (8001690 <controlador_derivativo+0xe8>)
 8001606:	e9c2 3400 	strd	r3, r4, [r2]
	selec_voltage((double)(kp * e +kd * (e-e_last)));
 800160a:	4b24      	ldr	r3, [pc, #144]	; (800169c <controlador_derivativo+0xf4>)
 800160c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <controlador_derivativo+0xe8>)
 8001612:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001616:	461a      	mov	r2, r3
 8001618:	4623      	mov	r3, r4
 800161a:	f7fe fff5 	bl	8000608 <__aeabi_dmul>
 800161e:	4603      	mov	r3, r0
 8001620:	460c      	mov	r4, r1
 8001622:	461d      	mov	r5, r3
 8001624:	4626      	mov	r6, r4
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <controlador_derivativo+0xe8>)
 8001628:	e9d3 0100 	ldrd	r0, r1, [r3]
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <controlador_derivativo+0xec>)
 800162e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001632:	461a      	mov	r2, r3
 8001634:	4623      	mov	r3, r4
 8001636:	f7fe fe2f 	bl	8000298 <__aeabi_dsub>
 800163a:	4603      	mov	r3, r0
 800163c:	460c      	mov	r4, r1
 800163e:	4618      	mov	r0, r3
 8001640:	4621      	mov	r1, r4
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <controlador_derivativo+0xf8>)
 8001644:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001648:	461a      	mov	r2, r3
 800164a:	4623      	mov	r3, r4
 800164c:	f7fe ffdc 	bl	8000608 <__aeabi_dmul>
 8001650:	4603      	mov	r3, r0
 8001652:	460c      	mov	r4, r1
 8001654:	461a      	mov	r2, r3
 8001656:	4623      	mov	r3, r4
 8001658:	4628      	mov	r0, r5
 800165a:	4631      	mov	r1, r6
 800165c:	f7fe fe1e 	bl	800029c <__adddf3>
 8001660:	4603      	mov	r3, r0
 8001662:	460c      	mov	r4, r1
 8001664:	ec44 3b17 	vmov	d7, r3, r4
 8001668:	eeb0 0a47 	vmov.f32	s0, s14
 800166c:	eef0 0a67 	vmov.f32	s1, s15
 8001670:	f7ff fdfe 	bl	8001270 <selec_voltage>
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800167c:	f3af 8000 	nop.w
 8001680:	54442d18 	.word	0x54442d18
 8001684:	400921fb 	.word	0x400921fb
 8001688:	00000000 	.word	0x00000000
 800168c:	40aba000 	.word	0x40aba000
 8001690:	20000258 	.word	0x20000258
 8001694:	20000260 	.word	0x20000260
 8001698:	20000230 	.word	0x20000230
 800169c:	20000000 	.word	0x20000000
 80016a0:	20000008 	.word	0x20000008
 80016a4:	00000000 	.word	0x00000000

080016a8 <controlador_integrador>:
void controlador_integrador(double pos_i){
 80016a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	ed87 0b00 	vstr	d0, [r7]
	if (referencia <0) {
 80016b2:	4b57      	ldr	r3, [pc, #348]	; (8001810 <controlador_integrador+0x168>)
 80016b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	f7ff fa14 	bl	8000aec <__aeabi_dcmplt>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d037      	beq.n	800173a <controlador_integrador+0x92>

		e = referencia + (pos_i * 2 * M_PI / pulse_per_revolution);
 80016ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	f7fe fde3 	bl	800029c <__adddf3>
 80016d6:	4603      	mov	r3, r0
 80016d8:	460c      	mov	r4, r1
 80016da:	4618      	mov	r0, r3
 80016dc:	4621      	mov	r1, r4
 80016de:	a348      	add	r3, pc, #288	; (adr r3, 8001800 <controlador_integrador+0x158>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe ff90 	bl	8000608 <__aeabi_dmul>
 80016e8:	4603      	mov	r3, r0
 80016ea:	460c      	mov	r4, r1
 80016ec:	4618      	mov	r0, r3
 80016ee:	4621      	mov	r1, r4
 80016f0:	a345      	add	r3, pc, #276	; (adr r3, 8001808 <controlador_integrador+0x160>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	f7ff f8b1 	bl	800085c <__aeabi_ddiv>
 80016fa:	4603      	mov	r3, r0
 80016fc:	460c      	mov	r4, r1
 80016fe:	4618      	mov	r0, r3
 8001700:	4621      	mov	r1, r4
 8001702:	4b43      	ldr	r3, [pc, #268]	; (8001810 <controlador_integrador+0x168>)
 8001704:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001708:	461a      	mov	r2, r3
 800170a:	4623      	mov	r3, r4
 800170c:	f7fe fdc6 	bl	800029c <__adddf3>
 8001710:	4603      	mov	r3, r0
 8001712:	460c      	mov	r4, r1
 8001714:	4a3f      	ldr	r2, [pc, #252]	; (8001814 <controlador_integrador+0x16c>)
 8001716:	e9c2 3400 	strd	r3, r4, [r2]
		e_sum= e_sum + e;
 800171a:	4b3f      	ldr	r3, [pc, #252]	; (8001818 <controlador_integrador+0x170>)
 800171c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001720:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <controlador_integrador+0x16c>)
 8001722:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001726:	461a      	mov	r2, r3
 8001728:	4623      	mov	r3, r4
 800172a:	f7fe fdb7 	bl	800029c <__adddf3>
 800172e:	4603      	mov	r3, r0
 8001730:	460c      	mov	r4, r1
 8001732:	4a39      	ldr	r2, [pc, #228]	; (8001818 <controlador_integrador+0x170>)
 8001734:	e9c2 3400 	strd	r3, r4, [r2]
 8001738:	e034      	b.n	80017a4 <controlador_integrador+0xfc>
	}else {

		e = referencia - (pos_i * 2 * M_PI / pulse_per_revolution);
 800173a:	4b35      	ldr	r3, [pc, #212]	; (8001810 <controlador_integrador+0x168>)
 800173c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001740:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	f7fe fda8 	bl	800029c <__adddf3>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	a32a      	add	r3, pc, #168	; (adr r3, 8001800 <controlador_integrador+0x158>)
 8001756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175a:	f7fe ff55 	bl	8000608 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	a328      	add	r3, pc, #160	; (adr r3, 8001808 <controlador_integrador+0x160>)
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	f7ff f876 	bl	800085c <__aeabi_ddiv>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4620      	mov	r0, r4
 8001776:	4629      	mov	r1, r5
 8001778:	f7fe fd8e 	bl	8000298 <__aeabi_dsub>
 800177c:	4603      	mov	r3, r0
 800177e:	460c      	mov	r4, r1
 8001780:	4a24      	ldr	r2, [pc, #144]	; (8001814 <controlador_integrador+0x16c>)
 8001782:	e9c2 3400 	strd	r3, r4, [r2]
		e_sum = e_sum + e;
 8001786:	4b24      	ldr	r3, [pc, #144]	; (8001818 <controlador_integrador+0x170>)
 8001788:	e9d3 0100 	ldrd	r0, r1, [r3]
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <controlador_integrador+0x16c>)
 800178e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001792:	461a      	mov	r2, r3
 8001794:	4623      	mov	r3, r4
 8001796:	f7fe fd81 	bl	800029c <__adddf3>
 800179a:	4603      	mov	r3, r0
 800179c:	460c      	mov	r4, r1
 800179e:	4a1e      	ldr	r2, [pc, #120]	; (8001818 <controlador_integrador+0x170>)
 80017a0:	e9c2 3400 	strd	r3, r4, [r2]
	}

	selec_voltage((double)(kp * e +ki * e_sum));
 80017a4:	4b1d      	ldr	r3, [pc, #116]	; (800181c <controlador_integrador+0x174>)
 80017a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <controlador_integrador+0x16c>)
 80017ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4623      	mov	r3, r4
 80017b4:	f7fe ff28 	bl	8000608 <__aeabi_dmul>
 80017b8:	4603      	mov	r3, r0
 80017ba:	460c      	mov	r4, r1
 80017bc:	461d      	mov	r5, r3
 80017be:	4626      	mov	r6, r4
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <controlador_integrador+0x178>)
 80017c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <controlador_integrador+0x170>)
 80017c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4623      	mov	r3, r4
 80017d0:	f7fe ff1a 	bl	8000608 <__aeabi_dmul>
 80017d4:	4603      	mov	r3, r0
 80017d6:	460c      	mov	r4, r1
 80017d8:	461a      	mov	r2, r3
 80017da:	4623      	mov	r3, r4
 80017dc:	4628      	mov	r0, r5
 80017de:	4631      	mov	r1, r6
 80017e0:	f7fe fd5c 	bl	800029c <__adddf3>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	ec44 3b17 	vmov	d7, r3, r4
 80017ec:	eeb0 0a47 	vmov.f32	s0, s14
 80017f0:	eef0 0a67 	vmov.f32	s1, s15
 80017f4:	f7ff fd3c 	bl	8001270 <selec_voltage>

}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001800:	54442d18 	.word	0x54442d18
 8001804:	400921fb 	.word	0x400921fb
 8001808:	00000000 	.word	0x00000000
 800180c:	40aba000 	.word	0x40aba000
 8001810:	20000230 	.word	0x20000230
 8001814:	20000258 	.word	0x20000258
 8001818:	20000268 	.word	0x20000268
 800181c:	20000000 	.word	0x20000000
 8001820:	20000010 	.word	0x20000010

08001824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_MspInit+0x44>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <HAL_MspInit+0x44>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6193      	str	r3, [r2, #24]
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_MspInit+0x44>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_MspInit+0x44>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	4a08      	ldr	r2, [pc, #32]	; (8001878 <HAL_MspInit+0x44>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	61d3      	str	r3, [r2, #28]
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_MspInit+0x44>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <MemManage_Handler+0x4>

08001896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d0:	f000 fb00 	bl	8001ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <TIM2_IRQHandler+0x10>)
 80018de:	f002 fb2c 	bl	8003f3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000d4e0 	.word	0x2000d4e0

080018ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <TIM3_IRQHandler+0x10>)
 80018f2:	f002 fb22 	bl	8003f3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000d460 	.word	0x2000d460

08001900 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <TIM6_DAC_IRQHandler+0x10>)
 8001906:	f002 fb18 	bl	8003f3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000d4a0 	.word	0x2000d4a0

08001914 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <_sbrk+0x50>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <_sbrk+0x16>
		heap_end = &end;
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <_sbrk+0x50>)
 8001926:	4a10      	ldr	r2, [pc, #64]	; (8001968 <_sbrk+0x54>)
 8001928:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <_sbrk+0x50>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <_sbrk+0x50>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4413      	add	r3, r2
 8001938:	466a      	mov	r2, sp
 800193a:	4293      	cmp	r3, r2
 800193c:	d907      	bls.n	800194e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800193e:	f003 fe2d 	bl	800559c <__errno>
 8001942:	4602      	mov	r2, r0
 8001944:	230c      	movs	r3, #12
 8001946:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
 800194c:	e006      	b.n	800195c <_sbrk+0x48>
	}

	heap_end += incr;
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <_sbrk+0x50>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	4a03      	ldr	r2, [pc, #12]	; (8001964 <_sbrk+0x50>)
 8001958:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000278 	.word	0x20000278
 8001968:	2000d5a8 	.word	0x2000d5a8

0800196c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <SystemInit+0x28>)
 8001972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001976:	4a07      	ldr	r2, [pc, #28]	; (8001994 <SystemInit+0x28>)
 8001978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800197c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <SystemInit+0x28>)
 8001982:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001986:	609a      	str	r2, [r3, #8]
#endif
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	2224      	movs	r2, #36	; 0x24
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 fe22 	bl	80055f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ac:	463b      	mov	r3, r7
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80019b6:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <MX_TIM2_Init+0xa4>)
 80019b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019be:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <MX_TIM2_Init+0xa4>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c4:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <MX_TIM2_Init+0xa4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <MX_TIM2_Init+0xa4>)
 80019cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <MX_TIM2_Init+0xa4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <MX_TIM2_Init+0xa4>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019de:	2303      	movs	r3, #3
 80019e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019e6:	2301      	movs	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019f6:	2301      	movs	r3, #1
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	4619      	mov	r1, r3
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <MX_TIM2_Init+0xa4>)
 8001a0a:	f002 f9ad 	bl	8003d68 <HAL_TIM_Encoder_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001a14:	f7ff ff06 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a20:	463b      	mov	r3, r7
 8001a22:	4619      	mov	r1, r3
 8001a24:	4805      	ldr	r0, [pc, #20]	; (8001a3c <MX_TIM2_Init+0xa4>)
 8001a26:	f003 f8b1 	bl	8004b8c <HAL_TIMEx_MasterConfigSynchronization>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001a30:	f7ff fef8 	bl	8001824 <Error_Handler>
  }

}
 8001a34:	bf00      	nop
 8001a36:	3730      	adds	r7, #48	; 0x30
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	2000d4e0 	.word	0x2000d4e0

08001a40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a46:	f107 031c 	add.w	r3, r7, #28
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a52:	463b      	mov	r3, r7
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
 8001a60:	615a      	str	r2, [r3, #20]
 8001a62:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001a64:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <MX_TIM3_Init+0xc4>)
 8001a66:	4a28      	ldr	r2, [pc, #160]	; (8001b08 <MX_TIM3_Init+0xc8>)
 8001a68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 8001a6a:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <MX_TIM3_Init+0xc4>)
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <MX_TIM3_Init+0xc4>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <MX_TIM3_Init+0xc4>)
 8001a78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7e:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <MX_TIM3_Init+0xc4>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a84:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <MX_TIM3_Init+0xc4>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a8a:	481e      	ldr	r0, [pc, #120]	; (8001b04 <MX_TIM3_Init+0xc4>)
 8001a8c:	f002 f8e1 	bl	8003c52 <HAL_TIM_PWM_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001a96:	f7ff fec5 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4816      	ldr	r0, [pc, #88]	; (8001b04 <MX_TIM3_Init+0xc4>)
 8001aaa:	f003 f86f 	bl	8004b8c <HAL_TIMEx_MasterConfigSynchronization>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001ab4:	f7ff feb6 	bl	8001824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab8:	2360      	movs	r3, #96	; 0x60
 8001aba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac8:	463b      	mov	r3, r7
 8001aca:	2200      	movs	r2, #0
 8001acc:	4619      	mov	r1, r3
 8001ace:	480d      	ldr	r0, [pc, #52]	; (8001b04 <MX_TIM3_Init+0xc4>)
 8001ad0:	f002 fb52 	bl	8004178 <HAL_TIM_PWM_ConfigChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001ada:	f7ff fea3 	bl	8001824 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ade:	463b      	mov	r3, r7
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4807      	ldr	r0, [pc, #28]	; (8001b04 <MX_TIM3_Init+0xc4>)
 8001ae6:	f002 fb47 	bl	8004178 <HAL_TIM_PWM_ConfigChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001af0:	f7ff fe98 	bl	8001824 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001af4:	4803      	ldr	r0, [pc, #12]	; (8001b04 <MX_TIM3_Init+0xc4>)
 8001af6:	f000 f8d3 	bl	8001ca0 <HAL_TIM_MspPostInit>

}
 8001afa:	bf00      	nop
 8001afc:	3728      	adds	r7, #40	; 0x28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000d460 	.word	0x2000d460
 8001b08:	40000400 	.word	0x40000400

08001b0c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_TIM6_Init+0x64>)
 8001b1e:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <MX_TIM6_Init+0x68>)
 8001b20:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 199;
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <MX_TIM6_Init+0x64>)
 8001b24:	22c7      	movs	r2, #199	; 0xc7
 8001b26:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_TIM6_Init+0x64>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 299;
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <MX_TIM6_Init+0x64>)
 8001b30:	f240 122b 	movw	r2, #299	; 0x12b
 8001b34:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <MX_TIM6_Init+0x64>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b3c:	480c      	ldr	r0, [pc, #48]	; (8001b70 <MX_TIM6_Init+0x64>)
 8001b3e:	f002 f807 	bl	8003b50 <HAL_TIM_Base_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b48:	f7ff fe6c 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <MX_TIM6_Init+0x64>)
 8001b5a:	f003 f817 	bl	8004b8c <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b64:	f7ff fe5e 	bl	8001824 <Error_Handler>
  }

}
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	2000d4a0 	.word	0x2000d4a0
 8001b74:	40001000 	.word	0x40001000

08001b78 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b98:	d130      	bne.n	8001bfc <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	4a19      	ldr	r2, [pc, #100]	; (8001c04 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	61d3      	str	r3, [r2, #28]
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	4a13      	ldr	r2, [pc, #76]	; (8001c04 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbc:	6153      	str	r3, [r2, #20]
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be8:	f000 faa6 	bl	8002138 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	201c      	movs	r0, #28
 8001bf2:	f000 fa6a 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bf6:	201c      	movs	r0, #28
 8001bf8:	f000 fa83 	bl	8002102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3728      	adds	r7, #40	; 0x28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000

08001c08 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <HAL_TIM_PWM_MspInit+0x44>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d113      	bne.n	8001c42 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_TIM_PWM_MspInit+0x48>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	4a0c      	ldr	r2, [pc, #48]	; (8001c50 <HAL_TIM_PWM_MspInit+0x48>)
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	61d3      	str	r3, [r2, #28]
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_TIM_PWM_MspInit+0x48>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	201d      	movs	r0, #29
 8001c38:	f000 fa47 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c3c:	201d      	movs	r0, #29
 8001c3e:	f000 fa60 	bl	8002102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40000400 	.word	0x40000400
 8001c50:	40021000 	.word	0x40021000

08001c54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <HAL_TIM_Base_MspInit+0x44>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d113      	bne.n	8001c8e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_TIM_Base_MspInit+0x48>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	4a0c      	ldr	r2, [pc, #48]	; (8001c9c <HAL_TIM_Base_MspInit+0x48>)
 8001c6c:	f043 0310 	orr.w	r3, r3, #16
 8001c70:	61d3      	str	r3, [r2, #28]
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_TIM_Base_MspInit+0x48>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	2036      	movs	r0, #54	; 0x36
 8001c84:	f000 fa21 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c88:	2036      	movs	r0, #54	; 0x36
 8001c8a:	f000 fa3a 	bl	8002102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40001000 	.word	0x40001000
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <HAL_TIM_MspPostInit+0x64>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d11b      	bne.n	8001cfa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_TIM_MspPostInit+0x68>)
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <HAL_TIM_MspPostInit+0x68>)
 8001cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ccc:	6153      	str	r3, [r2, #20]
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_TIM_MspPostInit+0x68>)
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001cda:	2330      	movs	r3, #48	; 0x30
 8001cdc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cea:	2302      	movs	r3, #2
 8001cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4805      	ldr	r0, [pc, #20]	; (8001d0c <HAL_TIM_MspPostInit+0x6c>)
 8001cf6:	f000 fa1f 	bl	8002138 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cfa:	bf00      	nop
 8001cfc:	3720      	adds	r7, #32
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	48000400 	.word	0x48000400

08001d10 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001d14:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d16:	4a15      	ldr	r2, [pc, #84]	; (8001d6c <MX_USART2_UART_Init+0x5c>)
 8001d18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001d1a:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d1c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001d20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d36:	220c      	movs	r2, #12
 8001d38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d52:	4805      	ldr	r0, [pc, #20]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d54:	f002 ffc4 	bl	8004ce0 <HAL_UART_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d5e:	f7ff fd61 	bl	8001824 <Error_Handler>
  }

}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2000d520 	.word	0x2000d520
 8001d6c:	40004400 	.word	0x40004400

08001d70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	; 0x28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a17      	ldr	r2, [pc, #92]	; (8001dec <HAL_UART_MspInit+0x7c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d128      	bne.n	8001de4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <HAL_UART_MspInit+0x80>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	4a16      	ldr	r2, [pc, #88]	; (8001df0 <HAL_UART_MspInit+0x80>)
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9c:	61d3      	str	r3, [r2, #28]
 8001d9e:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <HAL_UART_MspInit+0x80>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_UART_MspInit+0x80>)
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <HAL_UART_MspInit+0x80>)
 8001db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db4:	6153      	str	r3, [r2, #20]
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_UART_MspInit+0x80>)
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dc2:	230c      	movs	r3, #12
 8001dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dd2:	2307      	movs	r3, #7
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de0:	f000 f9aa 	bl	8002138 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001de4:	bf00      	nop
 8001de6:	3728      	adds	r7, #40	; 0x28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40004400 	.word	0x40004400
 8001df0:	40021000 	.word	0x40021000

08001df4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e2c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001df8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001dfa:	e003      	b.n	8001e04 <LoopCopyDataInit>

08001dfc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001dfe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e00:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e02:	3104      	adds	r1, #4

08001e04 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e04:	480b      	ldr	r0, [pc, #44]	; (8001e34 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e08:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e0a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e0c:	d3f6      	bcc.n	8001dfc <CopyDataInit>
	ldr	r2, =_sbss
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e10:	e002      	b.n	8001e18 <LoopFillZerobss>

08001e12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e12:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e14:	f842 3b04 	str.w	r3, [r2], #4

08001e18 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <LoopForever+0x16>)
	cmp	r2, r3
 8001e1a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e1c:	d3f9      	bcc.n	8001e12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e1e:	f7ff fda5 	bl	800196c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e22:	f003 fbc1 	bl	80055a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e26:	f7fe ff27 	bl	8000c78 <main>

08001e2a <LoopForever>:

LoopForever:
    b LoopForever
 8001e2a:	e7fe      	b.n	8001e2a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e2c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001e30:	080079e8 	.word	0x080079e8
	ldr	r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e38:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8001e3c:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8001e40:	2000d5a8 	.word	0x2000d5a8

08001e44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <ADC1_2_IRQHandler>
	...

08001e48 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e4c:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <HAL_Init+0x28>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a07      	ldr	r2, [pc, #28]	; (8001e70 <HAL_Init+0x28>)
 8001e52:	f043 0310 	orr.w	r3, r3, #16
 8001e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e58:	2003      	movs	r0, #3
 8001e5a:	f000 f92b 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f000 f808 	bl	8001e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e64:	f7ff fce6 	bl	8001834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40022000 	.word	0x40022000

08001e74 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_InitTick+0x54>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_InitTick+0x58>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4619      	mov	r1, r3
 8001e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f943 	bl	800211e <HAL_SYSTICK_Config>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00e      	b.n	8001ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b0f      	cmp	r3, #15
 8001ea6:	d80a      	bhi.n	8001ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f000 f90b 	bl	80020ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb4:	4a06      	ldr	r2, [pc, #24]	; (8001ed0 <HAL_InitTick+0x5c>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e000      	b.n	8001ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000018 	.word	0x20000018
 8001ecc:	20000020 	.word	0x20000020
 8001ed0:	2000001c 	.word	0x2000001c

08001ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_IncTick+0x20>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_IncTick+0x24>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <HAL_IncTick+0x24>)
 8001ee6:	6013      	str	r3, [r2, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000020 	.word	0x20000020
 8001ef8:	2000d5a0 	.word	0x2000d5a0

08001efc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return uwTick;  
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <HAL_GetTick+0x14>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	2000d5a0 	.word	0x2000d5a0

08001f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f30:	4013      	ands	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <__NVIC_GetPriorityGrouping+0x18>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 0307 	and.w	r3, r3, #7
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db0b      	blt.n	8001fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	4907      	ldr	r1, [pc, #28]	; (8001fb0 <__NVIC_EnableIRQ+0x38>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2001      	movs	r0, #1
 8001f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e100 	.word	0xe000e100

08001fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	db0a      	blt.n	8001fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	490c      	ldr	r1, [pc, #48]	; (8002000 <__NVIC_SetPriority+0x4c>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fdc:	e00a      	b.n	8001ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4908      	ldr	r1, [pc, #32]	; (8002004 <__NVIC_SetPriority+0x50>)
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3b04      	subs	r3, #4
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	761a      	strb	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f1c3 0307 	rsb	r3, r3, #7
 8002022:	2b04      	cmp	r3, #4
 8002024:	bf28      	it	cs
 8002026:	2304      	movcs	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3304      	adds	r3, #4
 800202e:	2b06      	cmp	r3, #6
 8002030:	d902      	bls.n	8002038 <NVIC_EncodePriority+0x30>
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3b03      	subs	r3, #3
 8002036:	e000      	b.n	800203a <NVIC_EncodePriority+0x32>
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	f04f 32ff 	mov.w	r2, #4294967295
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	401a      	ands	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002050:	f04f 31ff 	mov.w	r1, #4294967295
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43d9      	mvns	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	4313      	orrs	r3, r2
         );
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	; 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002080:	d301      	bcc.n	8002086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002082:	2301      	movs	r3, #1
 8002084:	e00f      	b.n	80020a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002086:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <SysTick_Config+0x40>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208e:	210f      	movs	r1, #15
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f7ff ff8e 	bl	8001fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <SysTick_Config+0x40>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <SysTick_Config+0x40>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff29 	bl	8001f14 <__NVIC_SetPriorityGrouping>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff3e 	bl	8001f5c <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff8e 	bl	8002008 <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5d 	bl	8001fb4 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff31 	bl	8001f78 <__NVIC_EnableIRQ>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffa2 	bl	8002070 <SysTick_Config>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002146:	e160      	b.n	800240a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	2101      	movs	r1, #1
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	fa01 f303 	lsl.w	r3, r1, r3
 8002154:	4013      	ands	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 8152 	beq.w	8002404 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x38>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b12      	cmp	r3, #18
 800216e:	d123      	bne.n	80021b8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	08da      	lsrs	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3208      	adds	r2, #8
 8002178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	6939      	ldr	r1, [r7, #16]
 80021b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0203 	and.w	r2, r3, #3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d00b      	beq.n	800220c <HAL_GPIO_Init+0xd4>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d007      	beq.n	800220c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002200:	2b11      	cmp	r3, #17
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b12      	cmp	r3, #18
 800220a:	d130      	bne.n	800226e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002242:	2201      	movs	r2, #1
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	091b      	lsrs	r3, r3, #4
 8002258:	f003 0201 	and.w	r2, r3, #1
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	2203      	movs	r2, #3
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80ac 	beq.w	8002404 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ac:	4b5e      	ldr	r3, [pc, #376]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	4a5d      	ldr	r2, [pc, #372]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6193      	str	r3, [r2, #24]
 80022b8:	4b5b      	ldr	r3, [pc, #364]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022c4:	4a59      	ldr	r2, [pc, #356]	; (800242c <HAL_GPIO_Init+0x2f4>)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	089b      	lsrs	r3, r3, #2
 80022ca:	3302      	adds	r3, #2
 80022cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	220f      	movs	r2, #15
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022ee:	d025      	beq.n	800233c <HAL_GPIO_Init+0x204>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a4f      	ldr	r2, [pc, #316]	; (8002430 <HAL_GPIO_Init+0x2f8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d01f      	beq.n	8002338 <HAL_GPIO_Init+0x200>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a4e      	ldr	r2, [pc, #312]	; (8002434 <HAL_GPIO_Init+0x2fc>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d019      	beq.n	8002334 <HAL_GPIO_Init+0x1fc>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a4d      	ldr	r2, [pc, #308]	; (8002438 <HAL_GPIO_Init+0x300>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d013      	beq.n	8002330 <HAL_GPIO_Init+0x1f8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a4c      	ldr	r2, [pc, #304]	; (800243c <HAL_GPIO_Init+0x304>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d00d      	beq.n	800232c <HAL_GPIO_Init+0x1f4>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a4b      	ldr	r2, [pc, #300]	; (8002440 <HAL_GPIO_Init+0x308>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d007      	beq.n	8002328 <HAL_GPIO_Init+0x1f0>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a4a      	ldr	r2, [pc, #296]	; (8002444 <HAL_GPIO_Init+0x30c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d101      	bne.n	8002324 <HAL_GPIO_Init+0x1ec>
 8002320:	2306      	movs	r3, #6
 8002322:	e00c      	b.n	800233e <HAL_GPIO_Init+0x206>
 8002324:	2307      	movs	r3, #7
 8002326:	e00a      	b.n	800233e <HAL_GPIO_Init+0x206>
 8002328:	2305      	movs	r3, #5
 800232a:	e008      	b.n	800233e <HAL_GPIO_Init+0x206>
 800232c:	2304      	movs	r3, #4
 800232e:	e006      	b.n	800233e <HAL_GPIO_Init+0x206>
 8002330:	2303      	movs	r3, #3
 8002332:	e004      	b.n	800233e <HAL_GPIO_Init+0x206>
 8002334:	2302      	movs	r3, #2
 8002336:	e002      	b.n	800233e <HAL_GPIO_Init+0x206>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <HAL_GPIO_Init+0x206>
 800233c:	2300      	movs	r3, #0
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	f002 0203 	and.w	r2, r2, #3
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	4093      	lsls	r3, r2
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800234e:	4937      	ldr	r1, [pc, #220]	; (800242c <HAL_GPIO_Init+0x2f4>)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	3302      	adds	r3, #2
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800235c:	4b3a      	ldr	r3, [pc, #232]	; (8002448 <HAL_GPIO_Init+0x310>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	43db      	mvns	r3, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002380:	4a31      	ldr	r2, [pc, #196]	; (8002448 <HAL_GPIO_Init+0x310>)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002386:	4b30      	ldr	r3, [pc, #192]	; (8002448 <HAL_GPIO_Init+0x310>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023aa:	4a27      	ldr	r2, [pc, #156]	; (8002448 <HAL_GPIO_Init+0x310>)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <HAL_GPIO_Init+0x310>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023d4:	4a1c      	ldr	r2, [pc, #112]	; (8002448 <HAL_GPIO_Init+0x310>)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023da:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_GPIO_Init+0x310>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023fe:	4a12      	ldr	r2, [pc, #72]	; (8002448 <HAL_GPIO_Init+0x310>)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3301      	adds	r3, #1
 8002408:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	f47f ae97 	bne.w	8002148 <HAL_GPIO_Init+0x10>
  }
}
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	40010000 	.word	0x40010000
 8002430:	48000400 	.word	0x48000400
 8002434:	48000800 	.word	0x48000800
 8002438:	48000c00 	.word	0x48000c00
 800243c:	48001000 	.word	0x48001000
 8002440:	48001400 	.word	0x48001400
 8002444:	48001800 	.word	0x48001800
 8002448:	40010400 	.word	0x40010400

0800244c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	807b      	strh	r3, [r7, #2]
 8002458:	4613      	mov	r3, r2
 800245a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800245c:	787b      	ldrb	r3, [r7, #1]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002462:	887a      	ldrh	r2, [r7, #2]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002468:	e002      	b.n	8002470 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800246a:	887a      	ldrh	r2, [r7, #2]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002482:	af00      	add	r7, sp, #0
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d102      	bne.n	8002496 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	f000 bf01 	b.w	8003298 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 8160 	beq.w	8002766 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024a6:	4bae      	ldr	r3, [pc, #696]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d00c      	beq.n	80024cc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024b2:	4bab      	ldr	r3, [pc, #684]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d159      	bne.n	8002572 <HAL_RCC_OscConfig+0xf6>
 80024be:	4ba8      	ldr	r3, [pc, #672]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80024c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ca:	d152      	bne.n	8002572 <HAL_RCC_OscConfig+0xf6>
 80024cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024d0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024e0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e4:	fab3 f383 	clz	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d102      	bne.n	80024fe <HAL_RCC_OscConfig+0x82>
 80024f8:	4b99      	ldr	r3, [pc, #612]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	e015      	b.n	800252a <HAL_RCC_OscConfig+0xae>
 80024fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002502:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002516:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800251a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002526:	4b8e      	ldr	r3, [pc, #568]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800252e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002532:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002536:	fa92 f2a2 	rbit	r2, r2
 800253a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800253e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002542:	fab2 f282 	clz	r2, r2
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	f042 0220 	orr.w	r2, r2, #32
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	f002 021f 	and.w	r2, r2, #31
 8002552:	2101      	movs	r1, #1
 8002554:	fa01 f202 	lsl.w	r2, r1, r2
 8002558:	4013      	ands	r3, r2
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8102 	beq.w	8002764 <HAL_RCC_OscConfig+0x2e8>
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 80fc 	bne.w	8002764 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f000 be93 	b.w	8003298 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257c:	d106      	bne.n	800258c <HAL_RCC_OscConfig+0x110>
 800257e:	4b78      	ldr	r3, [pc, #480]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a77      	ldr	r2, [pc, #476]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 8002584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e030      	b.n	80025ee <HAL_RCC_OscConfig+0x172>
 800258c:	1d3b      	adds	r3, r7, #4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x134>
 8002596:	4b72      	ldr	r3, [pc, #456]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a71      	ldr	r2, [pc, #452]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 800259c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b6f      	ldr	r3, [pc, #444]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a6e      	ldr	r2, [pc, #440]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 80025a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e01e      	b.n	80025ee <HAL_RCC_OscConfig+0x172>
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ba:	d10c      	bne.n	80025d6 <HAL_RCC_OscConfig+0x15a>
 80025bc:	4b68      	ldr	r3, [pc, #416]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a67      	ldr	r2, [pc, #412]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 80025c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	4b65      	ldr	r3, [pc, #404]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a64      	ldr	r2, [pc, #400]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 80025ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	e00b      	b.n	80025ee <HAL_RCC_OscConfig+0x172>
 80025d6:	4b62      	ldr	r3, [pc, #392]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a61      	ldr	r2, [pc, #388]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 80025dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b5f      	ldr	r3, [pc, #380]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a5e      	ldr	r2, [pc, #376]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 80025e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ec:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d059      	beq.n	80026ac <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7ff fc80 	bl	8001efc <HAL_GetTick>
 80025fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002600:	e00a      	b.n	8002618 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002602:	f7ff fc7b 	bl	8001efc <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	; 0x64
 8002610:	d902      	bls.n	8002618 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	f000 be40 	b.w	8003298 <HAL_RCC_OscConfig+0xe1c>
 8002618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800261c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800262c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b01      	cmp	r3, #1
 8002642:	d102      	bne.n	800264a <HAL_RCC_OscConfig+0x1ce>
 8002644:	4b46      	ldr	r3, [pc, #280]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	e015      	b.n	8002676 <HAL_RCC_OscConfig+0x1fa>
 800264a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800264e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800265e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002662:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002666:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002672:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800267a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800267e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002682:	fa92 f2a2 	rbit	r2, r2
 8002686:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800268a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800268e:	fab2 f282 	clz	r2, r2
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	f042 0220 	orr.w	r2, r2, #32
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	f002 021f 	and.w	r2, r2, #31
 800269e:	2101      	movs	r1, #1
 80026a0:	fa01 f202 	lsl.w	r2, r1, r2
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0ab      	beq.n	8002602 <HAL_RCC_OscConfig+0x186>
 80026aa:	e05c      	b.n	8002766 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7ff fc26 	bl	8001efc <HAL_GetTick>
 80026b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b4:	e00a      	b.n	80026cc <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b6:	f7ff fc21 	bl	8001efc <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d902      	bls.n	80026cc <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	f000 bde6 	b.w	8003298 <HAL_RCC_OscConfig+0xe1c>
 80026cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80026e0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d102      	bne.n	80026fe <HAL_RCC_OscConfig+0x282>
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	e015      	b.n	800272a <HAL_RCC_OscConfig+0x2ae>
 80026fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002702:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002712:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002716:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800271a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002726:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <HAL_RCC_OscConfig+0x2e4>)
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800272e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002732:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002736:	fa92 f2a2 	rbit	r2, r2
 800273a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800273e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002742:	fab2 f282 	clz	r2, r2
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	f042 0220 	orr.w	r2, r2, #32
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	f002 021f 	and.w	r2, r2, #31
 8002752:	2101      	movs	r1, #1
 8002754:	fa01 f202 	lsl.w	r2, r1, r2
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1ab      	bne.n	80026b6 <HAL_RCC_OscConfig+0x23a>
 800275e:	e002      	b.n	8002766 <HAL_RCC_OscConfig+0x2ea>
 8002760:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 8170 	beq.w	8002a56 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002776:	4bd0      	ldr	r3, [pc, #832]	; (8002ab8 <HAL_RCC_OscConfig+0x63c>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00c      	beq.n	800279c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002782:	4bcd      	ldr	r3, [pc, #820]	; (8002ab8 <HAL_RCC_OscConfig+0x63c>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b08      	cmp	r3, #8
 800278c:	d16d      	bne.n	800286a <HAL_RCC_OscConfig+0x3ee>
 800278e:	4bca      	ldr	r3, [pc, #808]	; (8002ab8 <HAL_RCC_OscConfig+0x63c>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800279a:	d166      	bne.n	800286a <HAL_RCC_OscConfig+0x3ee>
 800279c:	2302      	movs	r3, #2
 800279e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80027ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d102      	bne.n	80027cc <HAL_RCC_OscConfig+0x350>
 80027c6:	4bbc      	ldr	r3, [pc, #752]	; (8002ab8 <HAL_RCC_OscConfig+0x63c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	e013      	b.n	80027f4 <HAL_RCC_OscConfig+0x378>
 80027cc:	2302      	movs	r3, #2
 80027ce:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80027de:	2302      	movs	r3, #2
 80027e0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80027e4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80027f0:	4bb1      	ldr	r3, [pc, #708]	; (8002ab8 <HAL_RCC_OscConfig+0x63c>)
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	2202      	movs	r2, #2
 80027f6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80027fa:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80027fe:	fa92 f2a2 	rbit	r2, r2
 8002802:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002806:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800280a:	fab2 f282 	clz	r2, r2
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	f042 0220 	orr.w	r2, r2, #32
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	f002 021f 	and.w	r2, r2, #31
 800281a:	2101      	movs	r1, #1
 800281c:	fa01 f202 	lsl.w	r2, r1, r2
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d007      	beq.n	8002836 <HAL_RCC_OscConfig+0x3ba>
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d002      	beq.n	8002836 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	f000 bd31 	b.w	8003298 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002836:	4ba0      	ldr	r3, [pc, #640]	; (8002ab8 <HAL_RCC_OscConfig+0x63c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800283e:	1d3b      	adds	r3, r7, #4
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	21f8      	movs	r1, #248	; 0xf8
 8002846:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800284e:	fa91 f1a1 	rbit	r1, r1
 8002852:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002856:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800285a:	fab1 f181 	clz	r1, r1
 800285e:	b2c9      	uxtb	r1, r1
 8002860:	408b      	lsls	r3, r1
 8002862:	4995      	ldr	r1, [pc, #596]	; (8002ab8 <HAL_RCC_OscConfig+0x63c>)
 8002864:	4313      	orrs	r3, r2
 8002866:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002868:	e0f5      	b.n	8002a56 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800286a:	1d3b      	adds	r3, r7, #4
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 8085 	beq.w	8002980 <HAL_RCC_OscConfig+0x504>
 8002876:	2301      	movs	r3, #1
 8002878:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002888:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800288c:	fab3 f383 	clz	r3, r3
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002896:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	461a      	mov	r2, r3
 800289e:	2301      	movs	r3, #1
 80028a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7ff fb2b 	bl	8001efc <HAL_GetTick>
 80028a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ac:	f7ff fb26 	bl	8001efc <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d902      	bls.n	80028c2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	f000 bceb 	b.w	8003298 <HAL_RCC_OscConfig+0xe1c>
 80028c2:	2302      	movs	r3, #2
 80028c4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80028d4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d102      	bne.n	80028f2 <HAL_RCC_OscConfig+0x476>
 80028ec:	4b72      	ldr	r3, [pc, #456]	; (8002ab8 <HAL_RCC_OscConfig+0x63c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	e013      	b.n	800291a <HAL_RCC_OscConfig+0x49e>
 80028f2:	2302      	movs	r3, #2
 80028f4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002904:	2302      	movs	r3, #2
 8002906:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800290a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002916:	4b68      	ldr	r3, [pc, #416]	; (8002ab8 <HAL_RCC_OscConfig+0x63c>)
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	2202      	movs	r2, #2
 800291c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002920:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002924:	fa92 f2a2 	rbit	r2, r2
 8002928:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800292c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002930:	fab2 f282 	clz	r2, r2
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	f042 0220 	orr.w	r2, r2, #32
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	f002 021f 	and.w	r2, r2, #31
 8002940:	2101      	movs	r1, #1
 8002942:	fa01 f202 	lsl.w	r2, r1, r2
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0af      	beq.n	80028ac <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294c:	4b5a      	ldr	r3, [pc, #360]	; (8002ab8 <HAL_RCC_OscConfig+0x63c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	21f8      	movs	r1, #248	; 0xf8
 800295c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002964:	fa91 f1a1 	rbit	r1, r1
 8002968:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800296c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002970:	fab1 f181 	clz	r1, r1
 8002974:	b2c9      	uxtb	r1, r1
 8002976:	408b      	lsls	r3, r1
 8002978:	494f      	ldr	r1, [pc, #316]	; (8002ab8 <HAL_RCC_OscConfig+0x63c>)
 800297a:	4313      	orrs	r3, r2
 800297c:	600b      	str	r3, [r1, #0]
 800297e:	e06a      	b.n	8002a56 <HAL_RCC_OscConfig+0x5da>
 8002980:	2301      	movs	r3, #1
 8002982:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002992:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	461a      	mov	r2, r3
 80029a8:	2300      	movs	r3, #0
 80029aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7ff faa6 	bl	8001efc <HAL_GetTick>
 80029b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b4:	e00a      	b.n	80029cc <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b6:	f7ff faa1 	bl	8001efc <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d902      	bls.n	80029cc <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	f000 bc66 	b.w	8003298 <HAL_RCC_OscConfig+0xe1c>
 80029cc:	2302      	movs	r3, #2
 80029ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80029de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d102      	bne.n	80029fc <HAL_RCC_OscConfig+0x580>
 80029f6:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <HAL_RCC_OscConfig+0x63c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	e013      	b.n	8002a24 <HAL_RCC_OscConfig+0x5a8>
 80029fc:	2302      	movs	r3, #2
 80029fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002a0e:	2302      	movs	r3, #2
 8002a10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002a14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002a20:	4b25      	ldr	r3, [pc, #148]	; (8002ab8 <HAL_RCC_OscConfig+0x63c>)
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	2202      	movs	r2, #2
 8002a26:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002a2a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002a2e:	fa92 f2a2 	rbit	r2, r2
 8002a32:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002a36:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002a3a:	fab2 f282 	clz	r2, r2
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	f042 0220 	orr.w	r2, r2, #32
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	f002 021f 	and.w	r2, r2, #31
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1af      	bne.n	80029b6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80da 	beq.w	8002c1a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d069      	beq.n	8002b44 <HAL_RCC_OscConfig+0x6c8>
 8002a70:	2301      	movs	r3, #1
 8002a72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002a82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCC_OscConfig+0x640>)
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	461a      	mov	r2, r3
 8002a96:	2301      	movs	r3, #1
 8002a98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7ff fa2f 	bl	8001efc <HAL_GetTick>
 8002a9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa2:	e00d      	b.n	8002ac0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa4:	f7ff fa2a 	bl	8001efc <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d905      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e3ef      	b.n	8003298 <HAL_RCC_OscConfig+0xe1c>
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	10908120 	.word	0x10908120
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aca:	fa93 f2a3 	rbit	r2, r3
 8002ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002ad8:	2202      	movs	r2, #2
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	fa93 f2a3 	rbit	r2, r3
 8002ae6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002af0:	2202      	movs	r2, #2
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	fa93 f2a3 	rbit	r2, r3
 8002afe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002b02:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b04:	4ba4      	ldr	r3, [pc, #656]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b08:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	6019      	str	r1, [r3, #0]
 8002b10:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	fa93 f1a3 	rbit	r1, r3
 8002b1a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002b1e:	6019      	str	r1, [r3, #0]
  return result;
 8002b20:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	2101      	movs	r1, #1
 8002b38:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0b0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x628>
 8002b42:	e06a      	b.n	8002c1a <HAL_RCC_OscConfig+0x79e>
 8002b44:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b48:	2201      	movs	r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	fa93 f2a3 	rbit	r2, r3
 8002b56:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b5a:	601a      	str	r2, [r3, #0]
  return result;
 8002b5c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b60:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b8c      	ldr	r3, [pc, #560]	; (8002d9c <HAL_RCC_OscConfig+0x920>)
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	461a      	mov	r2, r3
 8002b72:	2300      	movs	r3, #0
 8002b74:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b76:	f7ff f9c1 	bl	8001efc <HAL_GetTick>
 8002b7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b7e:	e009      	b.n	8002b94 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b80:	f7ff f9bc 	bl	8001efc <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e381      	b.n	8003298 <HAL_RCC_OscConfig+0xe1c>
 8002b94:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b98:	2202      	movs	r2, #2
 8002b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	fa93 f2a3 	rbit	r2, r3
 8002ba6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	fa93 f2a3 	rbit	r2, r3
 8002bbe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bc8:	2202      	movs	r2, #2
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	fa93 f2a3 	rbit	r2, r3
 8002bd6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002bda:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bdc:	4b6e      	ldr	r3, [pc, #440]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002be4:	2102      	movs	r1, #2
 8002be6:	6019      	str	r1, [r3, #0]
 8002be8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	fa93 f1a3 	rbit	r1, r3
 8002bf2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002bf6:	6019      	str	r1, [r3, #0]
  return result;
 8002bf8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	2101      	movs	r1, #1
 8002c10:	fa01 f303 	lsl.w	r3, r1, r3
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1b2      	bne.n	8002b80 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1a:	1d3b      	adds	r3, r7, #4
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 8157 	beq.w	8002ed8 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c30:	4b59      	ldr	r3, [pc, #356]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d112      	bne.n	8002c62 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3c:	4b56      	ldr	r3, [pc, #344]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	4a55      	ldr	r2, [pc, #340]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c46:	61d3      	str	r3, [r2, #28]
 8002c48:	4b53      	ldr	r3, [pc, #332]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c50:	f107 030c 	add.w	r3, r7, #12
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	f107 030c 	add.w	r3, r7, #12
 8002c5a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c62:	4b4f      	ldr	r3, [pc, #316]	; (8002da0 <HAL_RCC_OscConfig+0x924>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d11a      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6e:	4b4c      	ldr	r3, [pc, #304]	; (8002da0 <HAL_RCC_OscConfig+0x924>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a4b      	ldr	r2, [pc, #300]	; (8002da0 <HAL_RCC_OscConfig+0x924>)
 8002c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c78:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7a:	f7ff f93f 	bl	8001efc <HAL_GetTick>
 8002c7e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c82:	e009      	b.n	8002c98 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c84:	f7ff f93a 	bl	8001efc <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b64      	cmp	r3, #100	; 0x64
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e2ff      	b.n	8003298 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <HAL_RCC_OscConfig+0x924>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ef      	beq.n	8002c84 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca4:	1d3b      	adds	r3, r7, #4
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d106      	bne.n	8002cbc <HAL_RCC_OscConfig+0x840>
 8002cae:	4b3a      	ldr	r3, [pc, #232]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	4a39      	ldr	r2, [pc, #228]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6213      	str	r3, [r2, #32]
 8002cba:	e02f      	b.n	8002d1c <HAL_RCC_OscConfig+0x8a0>
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x864>
 8002cc6:	4b34      	ldr	r3, [pc, #208]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	4a33      	ldr	r2, [pc, #204]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002ccc:	f023 0301 	bic.w	r3, r3, #1
 8002cd0:	6213      	str	r3, [r2, #32]
 8002cd2:	4b31      	ldr	r3, [pc, #196]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4a30      	ldr	r2, [pc, #192]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002cd8:	f023 0304 	bic.w	r3, r3, #4
 8002cdc:	6213      	str	r3, [r2, #32]
 8002cde:	e01d      	b.n	8002d1c <HAL_RCC_OscConfig+0x8a0>
 8002ce0:	1d3b      	adds	r3, r7, #4
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b05      	cmp	r3, #5
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x888>
 8002cea:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	4a2a      	ldr	r2, [pc, #168]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002cf0:	f043 0304 	orr.w	r3, r3, #4
 8002cf4:	6213      	str	r3, [r2, #32]
 8002cf6:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4a27      	ldr	r2, [pc, #156]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	6213      	str	r3, [r2, #32]
 8002d02:	e00b      	b.n	8002d1c <HAL_RCC_OscConfig+0x8a0>
 8002d04:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4a23      	ldr	r2, [pc, #140]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	6213      	str	r3, [r2, #32]
 8002d10:	4b21      	ldr	r3, [pc, #132]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	4a20      	ldr	r2, [pc, #128]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002d16:	f023 0304 	bic.w	r3, r3, #4
 8002d1a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d1c:	1d3b      	adds	r3, r7, #4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d06a      	beq.n	8002dfc <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d26:	f7ff f8e9 	bl	8001efc <HAL_GetTick>
 8002d2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2e:	e00b      	b.n	8002d48 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7ff f8e4 	bl	8001efc <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e2a7      	b.n	8003298 <HAL_RCC_OscConfig+0xe1c>
 8002d48:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	fa93 f2a3 	rbit	r2, r3
 8002d5a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002d64:	2202      	movs	r2, #2
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	fa93 f2a3 	rbit	r2, r3
 8002d72:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d76:	601a      	str	r2, [r3, #0]
  return result;
 8002d78:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d7c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d108      	bne.n	8002da4 <HAL_RCC_OscConfig+0x928>
 8002d92:	4b01      	ldr	r3, [pc, #4]	; (8002d98 <HAL_RCC_OscConfig+0x91c>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	e013      	b.n	8002dc0 <HAL_RCC_OscConfig+0x944>
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	10908120 	.word	0x10908120
 8002da0:	40007000 	.word	0x40007000
 8002da4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002da8:	2202      	movs	r2, #2
 8002daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	fa93 f2a3 	rbit	r2, r3
 8002db6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	4bc0      	ldr	r3, [pc, #768]	; (80030c0 <HAL_RCC_OscConfig+0xc44>)
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	6011      	str	r1, [r2, #0]
 8002dc8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	fa92 f1a2 	rbit	r1, r2
 8002dd2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002dd6:	6011      	str	r1, [r2, #0]
  return result;
 8002dd8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	fab2 f282 	clz	r2, r2
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	f002 021f 	and.w	r2, r2, #31
 8002dee:	2101      	movs	r1, #1
 8002df0:	fa01 f202 	lsl.w	r2, r1, r2
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d09a      	beq.n	8002d30 <HAL_RCC_OscConfig+0x8b4>
 8002dfa:	e063      	b.n	8002ec4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfc:	f7ff f87e 	bl	8001efc <HAL_GetTick>
 8002e00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e04:	e00b      	b.n	8002e1e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7ff f879 	bl	8001efc <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e23c      	b.n	8003298 <HAL_RCC_OscConfig+0xe1c>
 8002e1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e22:	2202      	movs	r2, #2
 8002e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	fa93 f2a3 	rbit	r2, r3
 8002e30:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	fa93 f2a3 	rbit	r2, r3
 8002e48:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e4c:	601a      	str	r2, [r3, #0]
  return result;
 8002e4e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	f043 0302 	orr.w	r3, r3, #2
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d102      	bne.n	8002e6e <HAL_RCC_OscConfig+0x9f2>
 8002e68:	4b95      	ldr	r3, [pc, #596]	; (80030c0 <HAL_RCC_OscConfig+0xc44>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	e00d      	b.n	8002e8a <HAL_RCC_OscConfig+0xa0e>
 8002e6e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e72:	2202      	movs	r2, #2
 8002e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	fa93 f2a3 	rbit	r2, r3
 8002e80:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	4b8e      	ldr	r3, [pc, #568]	; (80030c0 <HAL_RCC_OscConfig+0xc44>)
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002e8e:	2102      	movs	r1, #2
 8002e90:	6011      	str	r1, [r2, #0]
 8002e92:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	fa92 f1a2 	rbit	r1, r2
 8002e9c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002ea0:	6011      	str	r1, [r2, #0]
  return result;
 8002ea2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	fab2 f282 	clz	r2, r2
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	f002 021f 	and.w	r2, r2, #31
 8002eb8:	2101      	movs	r1, #1
 8002eba:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1a0      	bne.n	8002e06 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ec4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d105      	bne.n	8002ed8 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ecc:	4b7c      	ldr	r3, [pc, #496]	; (80030c0 <HAL_RCC_OscConfig+0xc44>)
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	4a7b      	ldr	r2, [pc, #492]	; (80030c0 <HAL_RCC_OscConfig+0xc44>)
 8002ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed8:	1d3b      	adds	r3, r7, #4
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 81d9 	beq.w	8003296 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ee4:	4b76      	ldr	r3, [pc, #472]	; (80030c0 <HAL_RCC_OscConfig+0xc44>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	f000 81a6 	beq.w	800323e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef2:	1d3b      	adds	r3, r7, #4
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	f040 811e 	bne.w	800313a <HAL_RCC_OscConfig+0xcbe>
 8002efe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002f02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	fa93 f2a3 	rbit	r2, r3
 8002f12:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002f16:	601a      	str	r2, [r3, #0]
  return result;
 8002f18:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002f1c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	461a      	mov	r2, r3
 8002f30:	2300      	movs	r3, #0
 8002f32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe ffe2 	bl	8001efc <HAL_GetTick>
 8002f38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f3c:	e009      	b.n	8002f52 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3e:	f7fe ffdd 	bl	8001efc <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e1a2      	b.n	8003298 <HAL_RCC_OscConfig+0xe1c>
 8002f52:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	fa93 f2a3 	rbit	r2, r3
 8002f66:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f6a:	601a      	str	r2, [r3, #0]
  return result;
 8002f6c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d102      	bne.n	8002f8c <HAL_RCC_OscConfig+0xb10>
 8002f86:	4b4e      	ldr	r3, [pc, #312]	; (80030c0 <HAL_RCC_OscConfig+0xc44>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	e01b      	b.n	8002fc4 <HAL_RCC_OscConfig+0xb48>
 8002f8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	fa93 f2a3 	rbit	r2, r3
 8002fa0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002faa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	fa93 f2a3 	rbit	r2, r3
 8002fba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	4b3f      	ldr	r3, [pc, #252]	; (80030c0 <HAL_RCC_OscConfig+0xc44>)
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002fc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fcc:	6011      	str	r1, [r2, #0]
 8002fce:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	fa92 f1a2 	rbit	r1, r2
 8002fd8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002fdc:	6011      	str	r1, [r2, #0]
  return result;
 8002fde:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	fab2 f282 	clz	r2, r2
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	f042 0220 	orr.w	r2, r2, #32
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	f002 021f 	and.w	r2, r2, #31
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d19e      	bne.n	8002f3e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003000:	4b2f      	ldr	r3, [pc, #188]	; (80030c0 <HAL_RCC_OscConfig+0xc44>)
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	f023 020f 	bic.w	r2, r3, #15
 8003008:	1d3b      	adds	r3, r7, #4
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	492c      	ldr	r1, [pc, #176]	; (80030c0 <HAL_RCC_OscConfig+0xc44>)
 8003010:	4313      	orrs	r3, r2
 8003012:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003014:	4b2a      	ldr	r3, [pc, #168]	; (80030c0 <HAL_RCC_OscConfig+0xc44>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800301c:	1d3b      	adds	r3, r7, #4
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6a19      	ldr	r1, [r3, #32]
 8003022:	1d3b      	adds	r3, r7, #4
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	430b      	orrs	r3, r1
 800302a:	4925      	ldr	r1, [pc, #148]	; (80030c0 <HAL_RCC_OscConfig+0xc44>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
 8003030:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003034:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fa93 f2a3 	rbit	r2, r3
 8003044:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003048:	601a      	str	r2, [r3, #0]
  return result;
 800304a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800304e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003050:	fab3 f383 	clz	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800305a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	461a      	mov	r2, r3
 8003062:	2301      	movs	r3, #1
 8003064:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003066:	f7fe ff49 	bl	8001efc <HAL_GetTick>
 800306a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800306e:	e009      	b.n	8003084 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003070:	f7fe ff44 	bl	8001efc <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e109      	b.n	8003298 <HAL_RCC_OscConfig+0xe1c>
 8003084:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003088:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800308c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	fa93 f2a3 	rbit	r2, r3
 8003098:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800309c:	601a      	str	r2, [r3, #0]
  return result;
 800309e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030a4:	fab3 f383 	clz	r3, r3
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d105      	bne.n	80030c4 <HAL_RCC_OscConfig+0xc48>
 80030b8:	4b01      	ldr	r3, [pc, #4]	; (80030c0 <HAL_RCC_OscConfig+0xc44>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	e01e      	b.n	80030fc <HAL_RCC_OscConfig+0xc80>
 80030be:	bf00      	nop
 80030c0:	40021000 	.word	0x40021000
 80030c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80030c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	fa93 f2a3 	rbit	r2, r3
 80030d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80030e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	fa93 f2a3 	rbit	r2, r3
 80030f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	4b6a      	ldr	r3, [pc, #424]	; (80032a4 <HAL_RCC_OscConfig+0xe28>)
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003100:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003104:	6011      	str	r1, [r2, #0]
 8003106:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	fa92 f1a2 	rbit	r1, r2
 8003110:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003114:	6011      	str	r1, [r2, #0]
  return result;
 8003116:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	fab2 f282 	clz	r2, r2
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	f042 0220 	orr.w	r2, r2, #32
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	f002 021f 	and.w	r2, r2, #31
 800312c:	2101      	movs	r1, #1
 800312e:	fa01 f202 	lsl.w	r2, r1, r2
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d09b      	beq.n	8003070 <HAL_RCC_OscConfig+0xbf4>
 8003138:	e0ad      	b.n	8003296 <HAL_RCC_OscConfig+0xe1a>
 800313a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800313e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	fa93 f2a3 	rbit	r2, r3
 800314e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003152:	601a      	str	r2, [r3, #0]
  return result;
 8003154:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003158:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003164:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	461a      	mov	r2, r3
 800316c:	2300      	movs	r3, #0
 800316e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fe fec4 	bl	8001efc <HAL_GetTick>
 8003174:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003178:	e009      	b.n	800318e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317a:	f7fe febf 	bl	8001efc <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e084      	b.n	8003298 <HAL_RCC_OscConfig+0xe1c>
 800318e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003192:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003196:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	fa93 f2a3 	rbit	r2, r3
 80031a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031a6:	601a      	str	r2, [r3, #0]
  return result;
 80031a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d102      	bne.n	80031c8 <HAL_RCC_OscConfig+0xd4c>
 80031c2:	4b38      	ldr	r3, [pc, #224]	; (80032a4 <HAL_RCC_OscConfig+0xe28>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	e01b      	b.n	8003200 <HAL_RCC_OscConfig+0xd84>
 80031c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	fa93 f2a3 	rbit	r2, r3
 80031dc:	f107 0320 	add.w	r3, r7, #32
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	f107 031c 	add.w	r3, r7, #28
 80031e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	f107 031c 	add.w	r3, r7, #28
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	fa93 f2a3 	rbit	r2, r3
 80031f6:	f107 0318 	add.w	r3, r7, #24
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	4b29      	ldr	r3, [pc, #164]	; (80032a4 <HAL_RCC_OscConfig+0xe28>)
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	f107 0214 	add.w	r2, r7, #20
 8003204:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003208:	6011      	str	r1, [r2, #0]
 800320a:	f107 0214 	add.w	r2, r7, #20
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	fa92 f1a2 	rbit	r1, r2
 8003214:	f107 0210 	add.w	r2, r7, #16
 8003218:	6011      	str	r1, [r2, #0]
  return result;
 800321a:	f107 0210 	add.w	r2, r7, #16
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	fab2 f282 	clz	r2, r2
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	f042 0220 	orr.w	r2, r2, #32
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	f002 021f 	and.w	r2, r2, #31
 8003230:	2101      	movs	r1, #1
 8003232:	fa01 f202 	lsl.w	r2, r1, r2
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d19e      	bne.n	800317a <HAL_RCC_OscConfig+0xcfe>
 800323c:	e02b      	b.n	8003296 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e025      	b.n	8003298 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800324c:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <HAL_RCC_OscConfig+0xe28>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003254:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <HAL_RCC_OscConfig+0xe28>)
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800325c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003260:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003264:	1d3b      	adds	r3, r7, #4
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	429a      	cmp	r2, r3
 800326c:	d111      	bne.n	8003292 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800326e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003272:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003276:	1d3b      	adds	r3, r7, #4
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800327c:	429a      	cmp	r2, r3
 800327e:	d108      	bne.n	8003292 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003280:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003284:	f003 020f 	and.w	r2, r3, #15
 8003288:	1d3b      	adds	r3, r7, #4
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800328e:	429a      	cmp	r2, r3
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000

080032a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b09e      	sub	sp, #120	; 0x78
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e162      	b.n	8003586 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032c0:	4b90      	ldr	r3, [pc, #576]	; (8003504 <HAL_RCC_ClockConfig+0x25c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d910      	bls.n	80032f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ce:	4b8d      	ldr	r3, [pc, #564]	; (8003504 <HAL_RCC_ClockConfig+0x25c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 0207 	bic.w	r2, r3, #7
 80032d6:	498b      	ldr	r1, [pc, #556]	; (8003504 <HAL_RCC_ClockConfig+0x25c>)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032de:	4b89      	ldr	r3, [pc, #548]	; (8003504 <HAL_RCC_ClockConfig+0x25c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e14a      	b.n	8003586 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032fc:	4b82      	ldr	r3, [pc, #520]	; (8003508 <HAL_RCC_ClockConfig+0x260>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	497f      	ldr	r1, [pc, #508]	; (8003508 <HAL_RCC_ClockConfig+0x260>)
 800330a:	4313      	orrs	r3, r2
 800330c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 80dc 	beq.w	80034d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d13c      	bne.n	800339e <HAL_RCC_ClockConfig+0xf6>
 8003324:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003328:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800332c:	fa93 f3a3 	rbit	r3, r3
 8003330:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003334:	fab3 f383 	clz	r3, r3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	b2db      	uxtb	r3, r3
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d102      	bne.n	800334e <HAL_RCC_ClockConfig+0xa6>
 8003348:	4b6f      	ldr	r3, [pc, #444]	; (8003508 <HAL_RCC_ClockConfig+0x260>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	e00f      	b.n	800336e <HAL_RCC_ClockConfig+0xc6>
 800334e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003352:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	667b      	str	r3, [r7, #100]	; 0x64
 800335c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003360:	663b      	str	r3, [r7, #96]	; 0x60
 8003362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	65fb      	str	r3, [r7, #92]	; 0x5c
 800336a:	4b67      	ldr	r3, [pc, #412]	; (8003508 <HAL_RCC_ClockConfig+0x260>)
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003372:	65ba      	str	r2, [r7, #88]	; 0x58
 8003374:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003376:	fa92 f2a2 	rbit	r2, r2
 800337a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800337c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800337e:	fab2 f282 	clz	r2, r2
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	f042 0220 	orr.w	r2, r2, #32
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	f002 021f 	and.w	r2, r2, #31
 800338e:	2101      	movs	r1, #1
 8003390:	fa01 f202 	lsl.w	r2, r1, r2
 8003394:	4013      	ands	r3, r2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d17b      	bne.n	8003492 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e0f3      	b.n	8003586 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d13c      	bne.n	8003420 <HAL_RCC_ClockConfig+0x178>
 80033a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ae:	fa93 f3a3 	rbit	r3, r3
 80033b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d102      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x128>
 80033ca:	4b4f      	ldr	r3, [pc, #316]	; (8003508 <HAL_RCC_ClockConfig+0x260>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	e00f      	b.n	80033f0 <HAL_RCC_ClockConfig+0x148>
 80033d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d8:	fa93 f3a3 	rbit	r3, r3
 80033dc:	647b      	str	r3, [r7, #68]	; 0x44
 80033de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033e2:	643b      	str	r3, [r7, #64]	; 0x40
 80033e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ec:	4b46      	ldr	r3, [pc, #280]	; (8003508 <HAL_RCC_ClockConfig+0x260>)
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033f4:	63ba      	str	r2, [r7, #56]	; 0x38
 80033f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033f8:	fa92 f2a2 	rbit	r2, r2
 80033fc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80033fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003400:	fab2 f282 	clz	r2, r2
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	f042 0220 	orr.w	r2, r2, #32
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	f002 021f 	and.w	r2, r2, #31
 8003410:	2101      	movs	r1, #1
 8003412:	fa01 f202 	lsl.w	r2, r1, r2
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d13a      	bne.n	8003492 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0b2      	b.n	8003586 <HAL_RCC_ClockConfig+0x2de>
 8003420:	2302      	movs	r3, #2
 8003422:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	fa93 f3a3 	rbit	r3, r3
 800342a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342e:	fab3 f383 	clz	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	095b      	lsrs	r3, r3, #5
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b01      	cmp	r3, #1
 8003440:	d102      	bne.n	8003448 <HAL_RCC_ClockConfig+0x1a0>
 8003442:	4b31      	ldr	r3, [pc, #196]	; (8003508 <HAL_RCC_ClockConfig+0x260>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	e00d      	b.n	8003464 <HAL_RCC_ClockConfig+0x1bc>
 8003448:	2302      	movs	r3, #2
 800344a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	627b      	str	r3, [r7, #36]	; 0x24
 8003454:	2302      	movs	r3, #2
 8003456:	623b      	str	r3, [r7, #32]
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	fa93 f3a3 	rbit	r3, r3
 800345e:	61fb      	str	r3, [r7, #28]
 8003460:	4b29      	ldr	r3, [pc, #164]	; (8003508 <HAL_RCC_ClockConfig+0x260>)
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	2202      	movs	r2, #2
 8003466:	61ba      	str	r2, [r7, #24]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	fa92 f2a2 	rbit	r2, r2
 800346e:	617a      	str	r2, [r7, #20]
  return result;
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	fab2 f282 	clz	r2, r2
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	f042 0220 	orr.w	r2, r2, #32
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	f002 021f 	and.w	r2, r2, #31
 8003482:	2101      	movs	r1, #1
 8003484:	fa01 f202 	lsl.w	r2, r1, r2
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e079      	b.n	8003586 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HAL_RCC_ClockConfig+0x260>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f023 0203 	bic.w	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	491a      	ldr	r1, [pc, #104]	; (8003508 <HAL_RCC_ClockConfig+0x260>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a4:	f7fe fd2a 	bl	8001efc <HAL_GetTick>
 80034a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ac:	f7fe fd26 	bl	8001efc <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e061      	b.n	8003586 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <HAL_RCC_ClockConfig+0x260>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 020c 	and.w	r2, r3, #12
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d1eb      	bne.n	80034ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_ClockConfig+0x25c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d214      	bcs.n	800350c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b08      	ldr	r3, [pc, #32]	; (8003504 <HAL_RCC_ClockConfig+0x25c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 0207 	bic.w	r2, r3, #7
 80034ea:	4906      	ldr	r1, [pc, #24]	; (8003504 <HAL_RCC_ClockConfig+0x25c>)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b04      	ldr	r3, [pc, #16]	; (8003504 <HAL_RCC_ClockConfig+0x25c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d005      	beq.n	800350c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e040      	b.n	8003586 <HAL_RCC_ClockConfig+0x2de>
 8003504:	40022000 	.word	0x40022000
 8003508:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003518:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <HAL_RCC_ClockConfig+0x2e8>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	491a      	ldr	r1, [pc, #104]	; (8003590 <HAL_RCC_ClockConfig+0x2e8>)
 8003526:	4313      	orrs	r3, r2
 8003528:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d009      	beq.n	800354a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003536:	4b16      	ldr	r3, [pc, #88]	; (8003590 <HAL_RCC_ClockConfig+0x2e8>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4912      	ldr	r1, [pc, #72]	; (8003590 <HAL_RCC_ClockConfig+0x2e8>)
 8003546:	4313      	orrs	r3, r2
 8003548:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800354a:	f000 f829 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 800354e:	4601      	mov	r1, r0
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <HAL_RCC_ClockConfig+0x2e8>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003558:	22f0      	movs	r2, #240	; 0xf0
 800355a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	fa92 f2a2 	rbit	r2, r2
 8003562:	60fa      	str	r2, [r7, #12]
  return result;
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	fab2 f282 	clz	r2, r2
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	40d3      	lsrs	r3, r2
 800356e:	4a09      	ldr	r2, [pc, #36]	; (8003594 <HAL_RCC_ClockConfig+0x2ec>)
 8003570:	5cd3      	ldrb	r3, [r2, r3]
 8003572:	fa21 f303 	lsr.w	r3, r1, r3
 8003576:	4a08      	ldr	r2, [pc, #32]	; (8003598 <HAL_RCC_ClockConfig+0x2f0>)
 8003578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800357a:	4b08      	ldr	r3, [pc, #32]	; (800359c <HAL_RCC_ClockConfig+0x2f4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe fc78 	bl	8001e74 <HAL_InitTick>
  
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3778      	adds	r7, #120	; 0x78
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000
 8003594:	08007748 	.word	0x08007748
 8003598:	20000018 	.word	0x20000018
 800359c:	2000001c 	.word	0x2000001c

080035a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b08b      	sub	sp, #44	; 0x2c
 80035a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
 80035aa:	2300      	movs	r3, #0
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	2300      	movs	r3, #0
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80035ba:	4b2a      	ldr	r3, [pc, #168]	; (8003664 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d002      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x30>
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_GetSysClockFreq+0x36>
 80035ce:	e03f      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035d0:	4b25      	ldr	r3, [pc, #148]	; (8003668 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035d2:	623b      	str	r3, [r7, #32]
      break;
 80035d4:	e03f      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80035dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80035e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	fa92 f2a2 	rbit	r2, r2
 80035e8:	607a      	str	r2, [r7, #4]
  return result;
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	fab2 f282 	clz	r2, r2
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	40d3      	lsrs	r3, r2
 80035f4:	4a1d      	ldr	r2, [pc, #116]	; (800366c <HAL_RCC_GetSysClockFreq+0xcc>)
 80035f6:	5cd3      	ldrb	r3, [r2, r3]
 80035f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035fa:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	220f      	movs	r2, #15
 8003604:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	fa92 f2a2 	rbit	r2, r2
 800360c:	60fa      	str	r2, [r7, #12]
  return result;
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	fab2 f282 	clz	r2, r2
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	40d3      	lsrs	r3, r2
 8003618:	4a15      	ldr	r2, [pc, #84]	; (8003670 <HAL_RCC_GetSysClockFreq+0xd0>)
 800361a:	5cd3      	ldrb	r3, [r2, r3]
 800361c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003628:	4a0f      	ldr	r2, [pc, #60]	; (8003668 <HAL_RCC_GetSysClockFreq+0xc8>)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
 8003638:	e007      	b.n	800364a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800363a:	4a0b      	ldr	r2, [pc, #44]	; (8003668 <HAL_RCC_GetSysClockFreq+0xc8>)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	fb02 f303 	mul.w	r3, r2, r3
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	623b      	str	r3, [r7, #32]
      break;
 800364e:	e002      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003652:	623b      	str	r3, [r7, #32]
      break;
 8003654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003656:	6a3b      	ldr	r3, [r7, #32]
}
 8003658:	4618      	mov	r0, r3
 800365a:	372c      	adds	r7, #44	; 0x2c
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40021000 	.word	0x40021000
 8003668:	007a1200 	.word	0x007a1200
 800366c:	08007760 	.word	0x08007760
 8003670:	08007770 	.word	0x08007770

08003674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003678:	4b03      	ldr	r3, [pc, #12]	; (8003688 <HAL_RCC_GetHCLKFreq+0x14>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	20000018 	.word	0x20000018

0800368c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003692:	f7ff ffef 	bl	8003674 <HAL_RCC_GetHCLKFreq>
 8003696:	4601      	mov	r1, r0
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80036a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	fa92 f2a2 	rbit	r2, r2
 80036ac:	603a      	str	r2, [r7, #0]
  return result;
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	fab2 f282 	clz	r2, r2
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	40d3      	lsrs	r3, r2
 80036b8:	4a04      	ldr	r2, [pc, #16]	; (80036cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80036ba:	5cd3      	ldrb	r3, [r2, r3]
 80036bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	08007758 	.word	0x08007758

080036d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80036d6:	f7ff ffcd 	bl	8003674 <HAL_RCC_GetHCLKFreq>
 80036da:	4601      	mov	r1, r0
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80036e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80036e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	fa92 f2a2 	rbit	r2, r2
 80036f0:	603a      	str	r2, [r7, #0]
  return result;
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	fab2 f282 	clz	r2, r2
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	40d3      	lsrs	r3, r2
 80036fc:	4a04      	ldr	r2, [pc, #16]	; (8003710 <HAL_RCC_GetPCLK2Freq+0x40>)
 80036fe:	5cd3      	ldrb	r3, [r2, r3]
 8003700:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40021000 	.word	0x40021000
 8003710:	08007758 	.word	0x08007758

08003714 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b092      	sub	sp, #72	; 0x48
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80d7 	beq.w	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003732:	2300      	movs	r3, #0
 8003734:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003738:	4b4e      	ldr	r3, [pc, #312]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10e      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003744:	4b4b      	ldr	r3, [pc, #300]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	4a4a      	ldr	r2, [pc, #296]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374e:	61d3      	str	r3, [r2, #28]
 8003750:	4b48      	ldr	r3, [pc, #288]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375c:	2301      	movs	r3, #1
 800375e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003762:	4b45      	ldr	r3, [pc, #276]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376a:	2b00      	cmp	r3, #0
 800376c:	d118      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800376e:	4b42      	ldr	r3, [pc, #264]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a41      	ldr	r2, [pc, #260]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003778:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377a:	f7fe fbbf 	bl	8001efc <HAL_GetTick>
 800377e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003780:	e008      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003782:	f7fe fbbb 	bl	8001efc <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b64      	cmp	r3, #100	; 0x64
 800378e:	d901      	bls.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e1d6      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003794:	4b38      	ldr	r3, [pc, #224]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037a0:	4b34      	ldr	r3, [pc, #208]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 8084 	beq.w	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037bc:	429a      	cmp	r2, r3
 80037be:	d07c      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037c0:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	fa93 f3a3 	rbit	r3, r3
 80037d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037da:	fab3 f383 	clz	r3, r3
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b26      	ldr	r3, [pc, #152]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	461a      	mov	r2, r3
 80037ea:	2301      	movs	r3, #1
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f6:	fa93 f3a3 	rbit	r3, r3
 80037fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80037fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037fe:	fab3 f383 	clz	r3, r3
 8003802:	b2db      	uxtb	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	4b1d      	ldr	r3, [pc, #116]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	461a      	mov	r2, r3
 800380e:	2300      	movs	r3, #0
 8003810:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003812:	4a18      	ldr	r2, [pc, #96]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003816:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d04b      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003822:	f7fe fb6b 	bl	8001efc <HAL_GetTick>
 8003826:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003828:	e00a      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fe fb67 	bl	8001efc <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	; 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d901      	bls.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e180      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003840:	2302      	movs	r3, #2
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003846:	fa93 f3a3 	rbit	r3, r3
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
 800384c:	2302      	movs	r3, #2
 800384e:	623b      	str	r3, [r7, #32]
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	61fb      	str	r3, [r7, #28]
  return result;
 8003858:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	095b      	lsrs	r3, r3, #5
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f043 0302 	orr.w	r3, r3, #2
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d108      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800386e:	4b01      	ldr	r3, [pc, #4]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	e00d      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003874:	40021000 	.word	0x40021000
 8003878:	40007000 	.word	0x40007000
 800387c:	10908100 	.word	0x10908100
 8003880:	2302      	movs	r3, #2
 8003882:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	fa93 f3a3 	rbit	r3, r3
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	4ba0      	ldr	r3, [pc, #640]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	2202      	movs	r2, #2
 8003892:	613a      	str	r2, [r7, #16]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	fa92 f2a2 	rbit	r2, r2
 800389a:	60fa      	str	r2, [r7, #12]
  return result;
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	fab2 f282 	clz	r2, r2
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	f002 021f 	and.w	r2, r2, #31
 80038ae:	2101      	movs	r1, #1
 80038b0:	fa01 f202 	lsl.w	r2, r1, r2
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0b7      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80038ba:	4b95      	ldr	r3, [pc, #596]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4992      	ldr	r1, [pc, #584]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d105      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d4:	4b8e      	ldr	r3, [pc, #568]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	4a8d      	ldr	r2, [pc, #564]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038ec:	4b88      	ldr	r3, [pc, #544]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	f023 0203 	bic.w	r2, r3, #3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	4985      	ldr	r1, [pc, #532]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d008      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800390a:	4b81      	ldr	r3, [pc, #516]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	497e      	ldr	r1, [pc, #504]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003918:	4313      	orrs	r3, r2
 800391a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003928:	4b79      	ldr	r3, [pc, #484]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	4976      	ldr	r1, [pc, #472]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003936:	4313      	orrs	r3, r2
 8003938:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003946:	4b72      	ldr	r3, [pc, #456]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f023 0210 	bic.w	r2, r3, #16
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	496f      	ldr	r1, [pc, #444]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003954:	4313      	orrs	r3, r2
 8003956:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003964:	4b6a      	ldr	r3, [pc, #424]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003970:	4967      	ldr	r1, [pc, #412]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003972:	4313      	orrs	r3, r2
 8003974:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d008      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003982:	4b63      	ldr	r3, [pc, #396]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f023 0220 	bic.w	r2, r3, #32
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	4960      	ldr	r1, [pc, #384]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003990:	4313      	orrs	r3, r2
 8003992:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039a0:	4b5b      	ldr	r3, [pc, #364]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	4958      	ldr	r1, [pc, #352]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d008      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039be:	4b54      	ldr	r3, [pc, #336]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	4951      	ldr	r1, [pc, #324]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d008      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039dc:	4b4c      	ldr	r3, [pc, #304]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	4949      	ldr	r1, [pc, #292]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d008      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039fa:	4b45      	ldr	r3, [pc, #276]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	4942      	ldr	r1, [pc, #264]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a18:	4b3d      	ldr	r3, [pc, #244]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	493a      	ldr	r1, [pc, #232]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d008      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003a36:	4b36      	ldr	r3, [pc, #216]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	4933      	ldr	r1, [pc, #204]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a54:	4b2e      	ldr	r3, [pc, #184]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a60:	492b      	ldr	r1, [pc, #172]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003a72:	4b27      	ldr	r3, [pc, #156]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	4924      	ldr	r1, [pc, #144]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003a90:	4b1f      	ldr	r3, [pc, #124]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	491c      	ldr	r1, [pc, #112]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003aae:	4b18      	ldr	r3, [pc, #96]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aba:	4915      	ldr	r1, [pc, #84]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003acc:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad8:	490d      	ldr	r1, [pc, #52]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d008      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003aea:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af6:	4906      	ldr	r1, [pc, #24]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00c      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003b08:	4b01      	ldr	r3, [pc, #4]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	e002      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003b0e:	bf00      	nop
 8003b10:	40021000 	.word	0x40021000
 8003b14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1c:	490b      	ldr	r1, [pc, #44]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d008      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003b2e:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3a:	4904      	ldr	r1, [pc, #16]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3748      	adds	r7, #72	; 0x48
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000

08003b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e01d      	b.n	8003b9e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fe f86c 	bl	8001c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4610      	mov	r0, r2
 8003b90:	f000 fc32 	bl	80043f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <HAL_TIM_Base_Start_IT+0x50>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b06      	cmp	r3, #6
 8003bd0:	d00b      	beq.n	8003bea <HAL_TIM_Base_Start_IT+0x42>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd8:	d007      	beq.n	8003bea <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0201 	orr.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	00010007 	.word	0x00010007

08003bfc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0201 	bic.w	r2, r2, #1
 8003c12:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6a1a      	ldr	r2, [r3, #32]
 8003c1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10f      	bne.n	8003c44 <HAL_TIM_Base_Stop_IT+0x48>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6a1a      	ldr	r2, [r3, #32]
 8003c2a:	f240 4344 	movw	r3, #1092	; 0x444
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d107      	bne.n	8003c44 <HAL_TIM_Base_Stop_IT+0x48>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0201 	bic.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e01d      	b.n	8003ca0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d106      	bne.n	8003c7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7fd ffc5 	bl	8001c08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2202      	movs	r2, #2
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4610      	mov	r0, r2
 8003c92:	f000 fbb1 	bl	80043f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	6839      	ldr	r1, [r7, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 ff40 	bl	8004b40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a21      	ldr	r2, [pc, #132]	; (8003d4c <HAL_TIM_PWM_Start+0xa4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d018      	beq.n	8003cfc <HAL_TIM_PWM_Start+0x54>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a20      	ldr	r2, [pc, #128]	; (8003d50 <HAL_TIM_PWM_Start+0xa8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d013      	beq.n	8003cfc <HAL_TIM_PWM_Start+0x54>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <HAL_TIM_PWM_Start+0xac>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00e      	beq.n	8003cfc <HAL_TIM_PWM_Start+0x54>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1d      	ldr	r2, [pc, #116]	; (8003d58 <HAL_TIM_PWM_Start+0xb0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d009      	beq.n	8003cfc <HAL_TIM_PWM_Start+0x54>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1b      	ldr	r2, [pc, #108]	; (8003d5c <HAL_TIM_PWM_Start+0xb4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <HAL_TIM_PWM_Start+0x54>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1a      	ldr	r2, [pc, #104]	; (8003d60 <HAL_TIM_PWM_Start+0xb8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d101      	bne.n	8003d00 <HAL_TIM_PWM_Start+0x58>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <HAL_TIM_PWM_Start+0x5a>
 8003d00:	2300      	movs	r3, #0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <HAL_TIM_PWM_Start+0xbc>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b06      	cmp	r3, #6
 8003d26:	d00b      	beq.n	8003d40 <HAL_TIM_PWM_Start+0x98>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2e:	d007      	beq.n	8003d40 <HAL_TIM_PWM_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40012c00 	.word	0x40012c00
 8003d50:	40013400 	.word	0x40013400
 8003d54:	40014000 	.word	0x40014000
 8003d58:	40014400 	.word	0x40014400
 8003d5c:	40014800 	.word	0x40014800
 8003d60:	40015000 	.word	0x40015000
 8003d64:	00010007 	.word	0x00010007

08003d68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e083      	b.n	8003e84 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d106      	bne.n	8003d96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7fd fef1 	bl	8001b78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003dac:	f023 0307 	bic.w	r3, r3, #7
 8003db0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3304      	adds	r3, #4
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	f000 fb1b 	bl	80043f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dea:	f023 0303 	bic.w	r3, r3, #3
 8003dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e08:	f023 030c 	bic.w	r3, r3, #12
 8003e0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	4313      	orrs	r3, r2
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	011a      	lsls	r2, r3, #4
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	031b      	lsls	r3, r3, #12
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003e4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_TIM_Encoder_Start_IT+0x16>
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d010      	beq.n	8003ec2 <HAL_TIM_Encoder_Start_IT+0x36>
 8003ea0:	e01f      	b.n	8003ee2 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fe48 	bl	8004b40 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0202 	orr.w	r2, r2, #2
 8003ebe:	60da      	str	r2, [r3, #12]
      break;
 8003ec0:	e02e      	b.n	8003f20 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	2104      	movs	r1, #4
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fe38 	bl	8004b40 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0204 	orr.w	r2, r2, #4
 8003ede:	60da      	str	r2, [r3, #12]
      break;
 8003ee0:	e01e      	b.n	8003f20 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fe28 	bl	8004b40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	2104      	movs	r1, #4
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fe21 	bl	8004b40 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0202 	orr.w	r2, r2, #2
 8003f0c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0204 	orr.w	r2, r2, #4
 8003f1c:	60da      	str	r2, [r3, #12]
      break;
 8003f1e:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d122      	bne.n	8003f96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d11b      	bne.n	8003f96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f06f 0202 	mvn.w	r2, #2
 8003f66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fa1d 	bl	80043bc <HAL_TIM_IC_CaptureCallback>
 8003f82:	e005      	b.n	8003f90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fa0f 	bl	80043a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fa20 	bl	80043d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d122      	bne.n	8003fea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d11b      	bne.n	8003fea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f06f 0204 	mvn.w	r2, #4
 8003fba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f9f3 	bl	80043bc <HAL_TIM_IC_CaptureCallback>
 8003fd6:	e005      	b.n	8003fe4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f9e5 	bl	80043a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f9f6 	bl	80043d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d122      	bne.n	800403e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b08      	cmp	r3, #8
 8004004:	d11b      	bne.n	800403e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f06f 0208 	mvn.w	r2, #8
 800400e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2204      	movs	r2, #4
 8004014:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f9c9 	bl	80043bc <HAL_TIM_IC_CaptureCallback>
 800402a:	e005      	b.n	8004038 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f9bb 	bl	80043a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f9cc 	bl	80043d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b10      	cmp	r3, #16
 800404a:	d122      	bne.n	8004092 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	2b10      	cmp	r3, #16
 8004058:	d11b      	bne.n	8004092 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f06f 0210 	mvn.w	r2, #16
 8004062:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2208      	movs	r2, #8
 8004068:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f99f 	bl	80043bc <HAL_TIM_IC_CaptureCallback>
 800407e:	e005      	b.n	800408c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f991 	bl	80043a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f9a2 	bl	80043d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d10e      	bne.n	80040be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d107      	bne.n	80040be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f06f 0201 	mvn.w	r2, #1
 80040b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7fc fe71 	bl	8000da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c8:	2b80      	cmp	r3, #128	; 0x80
 80040ca:	d10e      	bne.n	80040ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d6:	2b80      	cmp	r3, #128	; 0x80
 80040d8:	d107      	bne.n	80040ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fde7 	bl	8004cb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f8:	d10e      	bne.n	8004118 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004104:	2b80      	cmp	r3, #128	; 0x80
 8004106:	d107      	bne.n	8004118 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fdda 	bl	8004ccc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004122:	2b40      	cmp	r3, #64	; 0x40
 8004124:	d10e      	bne.n	8004144 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b40      	cmp	r3, #64	; 0x40
 8004132:	d107      	bne.n	8004144 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800413c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f950 	bl	80043e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b20      	cmp	r3, #32
 8004150:	d10e      	bne.n	8004170 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b20      	cmp	r3, #32
 800415e:	d107      	bne.n	8004170 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0220 	mvn.w	r2, #32
 8004168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fd9a 	bl	8004ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004170:	bf00      	nop
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800418e:	2302      	movs	r3, #2
 8004190:	e105      	b.n	800439e <HAL_TIM_PWM_ConfigChannel+0x226>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2202      	movs	r2, #2
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b14      	cmp	r3, #20
 80041a6:	f200 80f0 	bhi.w	800438a <HAL_TIM_PWM_ConfigChannel+0x212>
 80041aa:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80041ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b0:	08004205 	.word	0x08004205
 80041b4:	0800438b 	.word	0x0800438b
 80041b8:	0800438b 	.word	0x0800438b
 80041bc:	0800438b 	.word	0x0800438b
 80041c0:	08004245 	.word	0x08004245
 80041c4:	0800438b 	.word	0x0800438b
 80041c8:	0800438b 	.word	0x0800438b
 80041cc:	0800438b 	.word	0x0800438b
 80041d0:	08004287 	.word	0x08004287
 80041d4:	0800438b 	.word	0x0800438b
 80041d8:	0800438b 	.word	0x0800438b
 80041dc:	0800438b 	.word	0x0800438b
 80041e0:	080042c7 	.word	0x080042c7
 80041e4:	0800438b 	.word	0x0800438b
 80041e8:	0800438b 	.word	0x0800438b
 80041ec:	0800438b 	.word	0x0800438b
 80041f0:	08004309 	.word	0x08004309
 80041f4:	0800438b 	.word	0x0800438b
 80041f8:	0800438b 	.word	0x0800438b
 80041fc:	0800438b 	.word	0x0800438b
 8004200:	08004349 	.word	0x08004349
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	4618      	mov	r0, r3
 800420c:	f000 f992 	bl	8004534 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0208 	orr.w	r2, r2, #8
 800421e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0204 	bic.w	r2, r2, #4
 800422e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6999      	ldr	r1, [r3, #24]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	691a      	ldr	r2, [r3, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	619a      	str	r2, [r3, #24]
      break;
 8004242:	e0a3      	b.n	800438c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68b9      	ldr	r1, [r7, #8]
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fa0c 	bl	8004668 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800425e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800426e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6999      	ldr	r1, [r3, #24]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	021a      	lsls	r2, r3, #8
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	619a      	str	r2, [r3, #24]
      break;
 8004284:	e082      	b.n	800438c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68b9      	ldr	r1, [r7, #8]
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fa7f 	bl	8004790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69da      	ldr	r2, [r3, #28]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0208 	orr.w	r2, r2, #8
 80042a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0204 	bic.w	r2, r2, #4
 80042b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69d9      	ldr	r1, [r3, #28]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	61da      	str	r2, [r3, #28]
      break;
 80042c4:	e062      	b.n	800438c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 faf1 	bl	80048b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69da      	ldr	r2, [r3, #28]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69da      	ldr	r2, [r3, #28]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69d9      	ldr	r1, [r3, #28]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	021a      	lsls	r2, r3, #8
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	61da      	str	r2, [r3, #28]
      break;
 8004306:	e041      	b.n	800438c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fb40 	bl	8004994 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0208 	orr.w	r2, r2, #8
 8004322:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0204 	bic.w	r2, r2, #4
 8004332:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004346:	e021      	b.n	800438c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68b9      	ldr	r1, [r7, #8]
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fb8a 	bl	8004a68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004362:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004372:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	021a      	lsls	r2, r3, #8
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004388:	e000      	b.n	800438c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800438a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop

080043a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a42      	ldr	r2, [pc, #264]	; (8004514 <TIM_Base_SetConfig+0x11c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d013      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004416:	d00f      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a3f      	ldr	r2, [pc, #252]	; (8004518 <TIM_Base_SetConfig+0x120>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00b      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a3e      	ldr	r2, [pc, #248]	; (800451c <TIM_Base_SetConfig+0x124>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d007      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a3d      	ldr	r2, [pc, #244]	; (8004520 <TIM_Base_SetConfig+0x128>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d003      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a3c      	ldr	r2, [pc, #240]	; (8004524 <TIM_Base_SetConfig+0x12c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d108      	bne.n	800444a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a31      	ldr	r2, [pc, #196]	; (8004514 <TIM_Base_SetConfig+0x11c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01f      	beq.n	8004492 <TIM_Base_SetConfig+0x9a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004458:	d01b      	beq.n	8004492 <TIM_Base_SetConfig+0x9a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a2e      	ldr	r2, [pc, #184]	; (8004518 <TIM_Base_SetConfig+0x120>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d017      	beq.n	8004492 <TIM_Base_SetConfig+0x9a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a2d      	ldr	r2, [pc, #180]	; (800451c <TIM_Base_SetConfig+0x124>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <TIM_Base_SetConfig+0x9a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a2c      	ldr	r2, [pc, #176]	; (8004520 <TIM_Base_SetConfig+0x128>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00f      	beq.n	8004492 <TIM_Base_SetConfig+0x9a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a2c      	ldr	r2, [pc, #176]	; (8004528 <TIM_Base_SetConfig+0x130>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00b      	beq.n	8004492 <TIM_Base_SetConfig+0x9a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a2b      	ldr	r2, [pc, #172]	; (800452c <TIM_Base_SetConfig+0x134>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d007      	beq.n	8004492 <TIM_Base_SetConfig+0x9a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a2a      	ldr	r2, [pc, #168]	; (8004530 <TIM_Base_SetConfig+0x138>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d003      	beq.n	8004492 <TIM_Base_SetConfig+0x9a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a25      	ldr	r2, [pc, #148]	; (8004524 <TIM_Base_SetConfig+0x12c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d108      	bne.n	80044a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a12      	ldr	r2, [pc, #72]	; (8004514 <TIM_Base_SetConfig+0x11c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d013      	beq.n	80044f8 <TIM_Base_SetConfig+0x100>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a13      	ldr	r2, [pc, #76]	; (8004520 <TIM_Base_SetConfig+0x128>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00f      	beq.n	80044f8 <TIM_Base_SetConfig+0x100>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a13      	ldr	r2, [pc, #76]	; (8004528 <TIM_Base_SetConfig+0x130>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00b      	beq.n	80044f8 <TIM_Base_SetConfig+0x100>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a12      	ldr	r2, [pc, #72]	; (800452c <TIM_Base_SetConfig+0x134>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d007      	beq.n	80044f8 <TIM_Base_SetConfig+0x100>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a11      	ldr	r2, [pc, #68]	; (8004530 <TIM_Base_SetConfig+0x138>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d003      	beq.n	80044f8 <TIM_Base_SetConfig+0x100>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a0c      	ldr	r2, [pc, #48]	; (8004524 <TIM_Base_SetConfig+0x12c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d103      	bne.n	8004500 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	615a      	str	r2, [r3, #20]
}
 8004506:	bf00      	nop
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40012c00 	.word	0x40012c00
 8004518:	40000400 	.word	0x40000400
 800451c:	40000800 	.word	0x40000800
 8004520:	40013400 	.word	0x40013400
 8004524:	40015000 	.word	0x40015000
 8004528:	40014000 	.word	0x40014000
 800452c:	40014400 	.word	0x40014400
 8004530:	40014800 	.word	0x40014800

08004534 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f023 0201 	bic.w	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0303 	bic.w	r3, r3, #3
 800456e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f023 0302 	bic.w	r3, r3, #2
 8004580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a30      	ldr	r2, [pc, #192]	; (8004650 <TIM_OC1_SetConfig+0x11c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d013      	beq.n	80045bc <TIM_OC1_SetConfig+0x88>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a2f      	ldr	r2, [pc, #188]	; (8004654 <TIM_OC1_SetConfig+0x120>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00f      	beq.n	80045bc <TIM_OC1_SetConfig+0x88>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a2e      	ldr	r2, [pc, #184]	; (8004658 <TIM_OC1_SetConfig+0x124>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00b      	beq.n	80045bc <TIM_OC1_SetConfig+0x88>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a2d      	ldr	r2, [pc, #180]	; (800465c <TIM_OC1_SetConfig+0x128>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d007      	beq.n	80045bc <TIM_OC1_SetConfig+0x88>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a2c      	ldr	r2, [pc, #176]	; (8004660 <TIM_OC1_SetConfig+0x12c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d003      	beq.n	80045bc <TIM_OC1_SetConfig+0x88>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a2b      	ldr	r2, [pc, #172]	; (8004664 <TIM_OC1_SetConfig+0x130>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d10c      	bne.n	80045d6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 0308 	bic.w	r3, r3, #8
 80045c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f023 0304 	bic.w	r3, r3, #4
 80045d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a1d      	ldr	r2, [pc, #116]	; (8004650 <TIM_OC1_SetConfig+0x11c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d013      	beq.n	8004606 <TIM_OC1_SetConfig+0xd2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <TIM_OC1_SetConfig+0x120>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00f      	beq.n	8004606 <TIM_OC1_SetConfig+0xd2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a1b      	ldr	r2, [pc, #108]	; (8004658 <TIM_OC1_SetConfig+0x124>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00b      	beq.n	8004606 <TIM_OC1_SetConfig+0xd2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a1a      	ldr	r2, [pc, #104]	; (800465c <TIM_OC1_SetConfig+0x128>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d007      	beq.n	8004606 <TIM_OC1_SetConfig+0xd2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a19      	ldr	r2, [pc, #100]	; (8004660 <TIM_OC1_SetConfig+0x12c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d003      	beq.n	8004606 <TIM_OC1_SetConfig+0xd2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a18      	ldr	r2, [pc, #96]	; (8004664 <TIM_OC1_SetConfig+0x130>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d111      	bne.n	800462a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800460c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	621a      	str	r2, [r3, #32]
}
 8004644:	bf00      	nop
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	40012c00 	.word	0x40012c00
 8004654:	40013400 	.word	0x40013400
 8004658:	40014000 	.word	0x40014000
 800465c:	40014400 	.word	0x40014400
 8004660:	40014800 	.word	0x40014800
 8004664:	40015000 	.word	0x40015000

08004668 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	f023 0210 	bic.w	r2, r3, #16
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800469a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	021b      	lsls	r3, r3, #8
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f023 0320 	bic.w	r3, r3, #32
 80046b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a2c      	ldr	r2, [pc, #176]	; (8004778 <TIM_OC2_SetConfig+0x110>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d007      	beq.n	80046dc <TIM_OC2_SetConfig+0x74>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a2b      	ldr	r2, [pc, #172]	; (800477c <TIM_OC2_SetConfig+0x114>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d003      	beq.n	80046dc <TIM_OC2_SetConfig+0x74>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a2a      	ldr	r2, [pc, #168]	; (8004780 <TIM_OC2_SetConfig+0x118>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d10d      	bne.n	80046f8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <TIM_OC2_SetConfig+0x110>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d013      	beq.n	8004728 <TIM_OC2_SetConfig+0xc0>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a1e      	ldr	r2, [pc, #120]	; (800477c <TIM_OC2_SetConfig+0x114>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00f      	beq.n	8004728 <TIM_OC2_SetConfig+0xc0>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a1e      	ldr	r2, [pc, #120]	; (8004784 <TIM_OC2_SetConfig+0x11c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00b      	beq.n	8004728 <TIM_OC2_SetConfig+0xc0>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a1d      	ldr	r2, [pc, #116]	; (8004788 <TIM_OC2_SetConfig+0x120>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d007      	beq.n	8004728 <TIM_OC2_SetConfig+0xc0>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a1c      	ldr	r2, [pc, #112]	; (800478c <TIM_OC2_SetConfig+0x124>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d003      	beq.n	8004728 <TIM_OC2_SetConfig+0xc0>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a17      	ldr	r2, [pc, #92]	; (8004780 <TIM_OC2_SetConfig+0x118>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d113      	bne.n	8004750 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800472e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004736:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	621a      	str	r2, [r3, #32]
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40013400 	.word	0x40013400
 8004780:	40015000 	.word	0x40015000
 8004784:	40014000 	.word	0x40014000
 8004788:	40014400 	.word	0x40014400
 800478c:	40014800 	.word	0x40014800

08004790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0303 	bic.w	r3, r3, #3
 80047ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	021b      	lsls	r3, r3, #8
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a2b      	ldr	r2, [pc, #172]	; (800489c <TIM_OC3_SetConfig+0x10c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d007      	beq.n	8004802 <TIM_OC3_SetConfig+0x72>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a2a      	ldr	r2, [pc, #168]	; (80048a0 <TIM_OC3_SetConfig+0x110>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d003      	beq.n	8004802 <TIM_OC3_SetConfig+0x72>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a29      	ldr	r2, [pc, #164]	; (80048a4 <TIM_OC3_SetConfig+0x114>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d10d      	bne.n	800481e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	021b      	lsls	r3, r3, #8
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800481c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a1e      	ldr	r2, [pc, #120]	; (800489c <TIM_OC3_SetConfig+0x10c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d013      	beq.n	800484e <TIM_OC3_SetConfig+0xbe>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a1d      	ldr	r2, [pc, #116]	; (80048a0 <TIM_OC3_SetConfig+0x110>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d00f      	beq.n	800484e <TIM_OC3_SetConfig+0xbe>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a1d      	ldr	r2, [pc, #116]	; (80048a8 <TIM_OC3_SetConfig+0x118>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00b      	beq.n	800484e <TIM_OC3_SetConfig+0xbe>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a1c      	ldr	r2, [pc, #112]	; (80048ac <TIM_OC3_SetConfig+0x11c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d007      	beq.n	800484e <TIM_OC3_SetConfig+0xbe>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a1b      	ldr	r2, [pc, #108]	; (80048b0 <TIM_OC3_SetConfig+0x120>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d003      	beq.n	800484e <TIM_OC3_SetConfig+0xbe>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a16      	ldr	r2, [pc, #88]	; (80048a4 <TIM_OC3_SetConfig+0x114>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d113      	bne.n	8004876 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800485c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	621a      	str	r2, [r3, #32]
}
 8004890:	bf00      	nop
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	40012c00 	.word	0x40012c00
 80048a0:	40013400 	.word	0x40013400
 80048a4:	40015000 	.word	0x40015000
 80048a8:	40014000 	.word	0x40014000
 80048ac:	40014400 	.word	0x40014400
 80048b0:	40014800 	.word	0x40014800

080048b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	031b      	lsls	r3, r3, #12
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a1a      	ldr	r2, [pc, #104]	; (800497c <TIM_OC4_SetConfig+0xc8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d013      	beq.n	8004940 <TIM_OC4_SetConfig+0x8c>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a19      	ldr	r2, [pc, #100]	; (8004980 <TIM_OC4_SetConfig+0xcc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00f      	beq.n	8004940 <TIM_OC4_SetConfig+0x8c>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a18      	ldr	r2, [pc, #96]	; (8004984 <TIM_OC4_SetConfig+0xd0>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00b      	beq.n	8004940 <TIM_OC4_SetConfig+0x8c>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a17      	ldr	r2, [pc, #92]	; (8004988 <TIM_OC4_SetConfig+0xd4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d007      	beq.n	8004940 <TIM_OC4_SetConfig+0x8c>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a16      	ldr	r2, [pc, #88]	; (800498c <TIM_OC4_SetConfig+0xd8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d003      	beq.n	8004940 <TIM_OC4_SetConfig+0x8c>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a15      	ldr	r2, [pc, #84]	; (8004990 <TIM_OC4_SetConfig+0xdc>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d109      	bne.n	8004954 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	019b      	lsls	r3, r3, #6
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40013400 	.word	0x40013400
 8004984:	40014000 	.word	0x40014000
 8004988:	40014400 	.word	0x40014400
 800498c:	40014800 	.word	0x40014800
 8004990:	40015000 	.word	0x40015000

08004994 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	041b      	lsls	r3, r3, #16
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a19      	ldr	r2, [pc, #100]	; (8004a50 <TIM_OC5_SetConfig+0xbc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d013      	beq.n	8004a16 <TIM_OC5_SetConfig+0x82>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a18      	ldr	r2, [pc, #96]	; (8004a54 <TIM_OC5_SetConfig+0xc0>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00f      	beq.n	8004a16 <TIM_OC5_SetConfig+0x82>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a17      	ldr	r2, [pc, #92]	; (8004a58 <TIM_OC5_SetConfig+0xc4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00b      	beq.n	8004a16 <TIM_OC5_SetConfig+0x82>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a16      	ldr	r2, [pc, #88]	; (8004a5c <TIM_OC5_SetConfig+0xc8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d007      	beq.n	8004a16 <TIM_OC5_SetConfig+0x82>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a15      	ldr	r2, [pc, #84]	; (8004a60 <TIM_OC5_SetConfig+0xcc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d003      	beq.n	8004a16 <TIM_OC5_SetConfig+0x82>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a14      	ldr	r2, [pc, #80]	; (8004a64 <TIM_OC5_SetConfig+0xd0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d109      	bne.n	8004a2a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	021b      	lsls	r3, r3, #8
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	621a      	str	r2, [r3, #32]
}
 8004a44:	bf00      	nop
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	40012c00 	.word	0x40012c00
 8004a54:	40013400 	.word	0x40013400
 8004a58:	40014000 	.word	0x40014000
 8004a5c:	40014400 	.word	0x40014400
 8004a60:	40014800 	.word	0x40014800
 8004a64:	40015000 	.word	0x40015000

08004a68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	021b      	lsls	r3, r3, #8
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004aae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	051b      	lsls	r3, r3, #20
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a1a      	ldr	r2, [pc, #104]	; (8004b28 <TIM_OC6_SetConfig+0xc0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d013      	beq.n	8004aec <TIM_OC6_SetConfig+0x84>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <TIM_OC6_SetConfig+0xc4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00f      	beq.n	8004aec <TIM_OC6_SetConfig+0x84>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a18      	ldr	r2, [pc, #96]	; (8004b30 <TIM_OC6_SetConfig+0xc8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00b      	beq.n	8004aec <TIM_OC6_SetConfig+0x84>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a17      	ldr	r2, [pc, #92]	; (8004b34 <TIM_OC6_SetConfig+0xcc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d007      	beq.n	8004aec <TIM_OC6_SetConfig+0x84>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a16      	ldr	r2, [pc, #88]	; (8004b38 <TIM_OC6_SetConfig+0xd0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d003      	beq.n	8004aec <TIM_OC6_SetConfig+0x84>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <TIM_OC6_SetConfig+0xd4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d109      	bne.n	8004b00 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	029b      	lsls	r3, r3, #10
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40013400 	.word	0x40013400
 8004b30:	40014000 	.word	0x40014000
 8004b34:	40014400 	.word	0x40014400
 8004b38:	40014800 	.word	0x40014800
 8004b3c:	40015000 	.word	0x40015000

08004b40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 031f 	and.w	r3, r3, #31
 8004b52:	2201      	movs	r2, #1
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a1a      	ldr	r2, [r3, #32]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	43db      	mvns	r3, r3
 8004b62:	401a      	ands	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a1a      	ldr	r2, [r3, #32]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 031f 	and.w	r3, r3, #31
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	fa01 f303 	lsl.w	r3, r1, r3
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e06d      	b.n	8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a30      	ldr	r2, [pc, #192]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d009      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2f      	ldr	r2, [pc, #188]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d004      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2d      	ldr	r2, [pc, #180]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d108      	bne.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004be8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a1e      	ldr	r2, [pc, #120]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d01d      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c20:	d018      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a1c      	ldr	r2, [pc, #112]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d013      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a1a      	ldr	r2, [pc, #104]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00e      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a15      	ldr	r2, [pc, #84]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d009      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a16      	ldr	r2, [pc, #88]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d004      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a11      	ldr	r2, [pc, #68]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d10c      	bne.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40013400 	.word	0x40013400
 8004c94:	40015000 	.word	0x40015000
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40000800 	.word	0x40000800
 8004ca0:	40014000 	.word	0x40014000

08004ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e040      	b.n	8004d74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fd f834 	bl	8001d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2224      	movs	r2, #36	; 0x24
 8004d0c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0201 	bic.w	r2, r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f8c0 	bl	8004ea4 <UART_SetConfig>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e022      	b.n	8004d74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 face 	bl	80052d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fb55 	bl	800541c <UART_CheckIdleState>
 8004d72:	4603      	mov	r3, r0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08a      	sub	sp, #40	; 0x28
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	f040 8081 	bne.w	8004e98 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <HAL_UART_Transmit+0x26>
 8004d9c:	88fb      	ldrh	r3, [r7, #6]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e079      	b.n	8004e9a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_UART_Transmit+0x38>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e072      	b.n	8004e9a <HAL_UART_Transmit+0x11e>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2221      	movs	r2, #33	; 0x21
 8004dc6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004dc8:	f7fd f898 	bl	8001efc <HAL_GetTick>
 8004dcc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	88fa      	ldrh	r2, [r7, #6]
 8004dd2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	88fa      	ldrh	r2, [r7, #6]
 8004dda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de6:	d108      	bne.n	8004dfa <HAL_UART_Transmit+0x7e>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004df0:	2300      	movs	r3, #0
 8004df2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	61bb      	str	r3, [r7, #24]
 8004df8:	e003      	b.n	8004e02 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e02:	e02d      	b.n	8004e60 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2180      	movs	r1, #128	; 0x80
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 fb49 	bl	80054a6 <UART_WaitOnFlagUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e03d      	b.n	8004e9a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10b      	bne.n	8004e3c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	881a      	ldrh	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e30:	b292      	uxth	r2, r2
 8004e32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	3302      	adds	r3, #2
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	e008      	b.n	8004e4e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	781a      	ldrb	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	b292      	uxth	r2, r2
 8004e46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1cb      	bne.n	8004e04 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2200      	movs	r2, #0
 8004e74:	2140      	movs	r1, #64	; 0x40
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 fb15 	bl	80054a6 <UART_WaitOnFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e009      	b.n	8004e9a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	e000      	b.n	8004e9a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004e98:	2302      	movs	r3, #2
  }
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3720      	adds	r7, #32
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4bac      	ldr	r3, [pc, #688]	; (8005184 <UART_SetConfig+0x2e0>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6812      	ldr	r2, [r2, #0]
 8004eda:	6939      	ldr	r1, [r7, #16]
 8004edc:	430b      	orrs	r3, r1
 8004ede:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a9a      	ldr	r2, [pc, #616]	; (8005188 <UART_SetConfig+0x2e4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d121      	bne.n	8004f68 <UART_SetConfig+0xc4>
 8004f24:	4b99      	ldr	r3, [pc, #612]	; (800518c <UART_SetConfig+0x2e8>)
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	f003 0303 	and.w	r3, r3, #3
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d817      	bhi.n	8004f60 <UART_SetConfig+0xbc>
 8004f30:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <UART_SetConfig+0x94>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004f49 	.word	0x08004f49
 8004f3c:	08004f55 	.word	0x08004f55
 8004f40:	08004f5b 	.word	0x08004f5b
 8004f44:	08004f4f 	.word	0x08004f4f
 8004f48:	2301      	movs	r3, #1
 8004f4a:	77fb      	strb	r3, [r7, #31]
 8004f4c:	e0b2      	b.n	80050b4 <UART_SetConfig+0x210>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	77fb      	strb	r3, [r7, #31]
 8004f52:	e0af      	b.n	80050b4 <UART_SetConfig+0x210>
 8004f54:	2304      	movs	r3, #4
 8004f56:	77fb      	strb	r3, [r7, #31]
 8004f58:	e0ac      	b.n	80050b4 <UART_SetConfig+0x210>
 8004f5a:	2308      	movs	r3, #8
 8004f5c:	77fb      	strb	r3, [r7, #31]
 8004f5e:	e0a9      	b.n	80050b4 <UART_SetConfig+0x210>
 8004f60:	2310      	movs	r3, #16
 8004f62:	77fb      	strb	r3, [r7, #31]
 8004f64:	bf00      	nop
 8004f66:	e0a5      	b.n	80050b4 <UART_SetConfig+0x210>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a88      	ldr	r2, [pc, #544]	; (8005190 <UART_SetConfig+0x2ec>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d123      	bne.n	8004fba <UART_SetConfig+0x116>
 8004f72:	4b86      	ldr	r3, [pc, #536]	; (800518c <UART_SetConfig+0x2e8>)
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7e:	d012      	beq.n	8004fa6 <UART_SetConfig+0x102>
 8004f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f84:	d802      	bhi.n	8004f8c <UART_SetConfig+0xe8>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <UART_SetConfig+0xf6>
 8004f8a:	e012      	b.n	8004fb2 <UART_SetConfig+0x10e>
 8004f8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f90:	d00c      	beq.n	8004fac <UART_SetConfig+0x108>
 8004f92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f96:	d003      	beq.n	8004fa0 <UART_SetConfig+0xfc>
 8004f98:	e00b      	b.n	8004fb2 <UART_SetConfig+0x10e>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	77fb      	strb	r3, [r7, #31]
 8004f9e:	e089      	b.n	80050b4 <UART_SetConfig+0x210>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	77fb      	strb	r3, [r7, #31]
 8004fa4:	e086      	b.n	80050b4 <UART_SetConfig+0x210>
 8004fa6:	2304      	movs	r3, #4
 8004fa8:	77fb      	strb	r3, [r7, #31]
 8004faa:	e083      	b.n	80050b4 <UART_SetConfig+0x210>
 8004fac:	2308      	movs	r3, #8
 8004fae:	77fb      	strb	r3, [r7, #31]
 8004fb0:	e080      	b.n	80050b4 <UART_SetConfig+0x210>
 8004fb2:	2310      	movs	r3, #16
 8004fb4:	77fb      	strb	r3, [r7, #31]
 8004fb6:	bf00      	nop
 8004fb8:	e07c      	b.n	80050b4 <UART_SetConfig+0x210>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a75      	ldr	r2, [pc, #468]	; (8005194 <UART_SetConfig+0x2f0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d123      	bne.n	800500c <UART_SetConfig+0x168>
 8004fc4:	4b71      	ldr	r3, [pc, #452]	; (800518c <UART_SetConfig+0x2e8>)
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004fcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fd0:	d012      	beq.n	8004ff8 <UART_SetConfig+0x154>
 8004fd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fd6:	d802      	bhi.n	8004fde <UART_SetConfig+0x13a>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d007      	beq.n	8004fec <UART_SetConfig+0x148>
 8004fdc:	e012      	b.n	8005004 <UART_SetConfig+0x160>
 8004fde:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fe2:	d00c      	beq.n	8004ffe <UART_SetConfig+0x15a>
 8004fe4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004fe8:	d003      	beq.n	8004ff2 <UART_SetConfig+0x14e>
 8004fea:	e00b      	b.n	8005004 <UART_SetConfig+0x160>
 8004fec:	2300      	movs	r3, #0
 8004fee:	77fb      	strb	r3, [r7, #31]
 8004ff0:	e060      	b.n	80050b4 <UART_SetConfig+0x210>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	77fb      	strb	r3, [r7, #31]
 8004ff6:	e05d      	b.n	80050b4 <UART_SetConfig+0x210>
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	77fb      	strb	r3, [r7, #31]
 8004ffc:	e05a      	b.n	80050b4 <UART_SetConfig+0x210>
 8004ffe:	2308      	movs	r3, #8
 8005000:	77fb      	strb	r3, [r7, #31]
 8005002:	e057      	b.n	80050b4 <UART_SetConfig+0x210>
 8005004:	2310      	movs	r3, #16
 8005006:	77fb      	strb	r3, [r7, #31]
 8005008:	bf00      	nop
 800500a:	e053      	b.n	80050b4 <UART_SetConfig+0x210>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a61      	ldr	r2, [pc, #388]	; (8005198 <UART_SetConfig+0x2f4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d123      	bne.n	800505e <UART_SetConfig+0x1ba>
 8005016:	4b5d      	ldr	r3, [pc, #372]	; (800518c <UART_SetConfig+0x2e8>)
 8005018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800501e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005022:	d012      	beq.n	800504a <UART_SetConfig+0x1a6>
 8005024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005028:	d802      	bhi.n	8005030 <UART_SetConfig+0x18c>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d007      	beq.n	800503e <UART_SetConfig+0x19a>
 800502e:	e012      	b.n	8005056 <UART_SetConfig+0x1b2>
 8005030:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005034:	d00c      	beq.n	8005050 <UART_SetConfig+0x1ac>
 8005036:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800503a:	d003      	beq.n	8005044 <UART_SetConfig+0x1a0>
 800503c:	e00b      	b.n	8005056 <UART_SetConfig+0x1b2>
 800503e:	2300      	movs	r3, #0
 8005040:	77fb      	strb	r3, [r7, #31]
 8005042:	e037      	b.n	80050b4 <UART_SetConfig+0x210>
 8005044:	2302      	movs	r3, #2
 8005046:	77fb      	strb	r3, [r7, #31]
 8005048:	e034      	b.n	80050b4 <UART_SetConfig+0x210>
 800504a:	2304      	movs	r3, #4
 800504c:	77fb      	strb	r3, [r7, #31]
 800504e:	e031      	b.n	80050b4 <UART_SetConfig+0x210>
 8005050:	2308      	movs	r3, #8
 8005052:	77fb      	strb	r3, [r7, #31]
 8005054:	e02e      	b.n	80050b4 <UART_SetConfig+0x210>
 8005056:	2310      	movs	r3, #16
 8005058:	77fb      	strb	r3, [r7, #31]
 800505a:	bf00      	nop
 800505c:	e02a      	b.n	80050b4 <UART_SetConfig+0x210>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a4e      	ldr	r2, [pc, #312]	; (800519c <UART_SetConfig+0x2f8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d123      	bne.n	80050b0 <UART_SetConfig+0x20c>
 8005068:	4b48      	ldr	r3, [pc, #288]	; (800518c <UART_SetConfig+0x2e8>)
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005074:	d012      	beq.n	800509c <UART_SetConfig+0x1f8>
 8005076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800507a:	d802      	bhi.n	8005082 <UART_SetConfig+0x1de>
 800507c:	2b00      	cmp	r3, #0
 800507e:	d007      	beq.n	8005090 <UART_SetConfig+0x1ec>
 8005080:	e012      	b.n	80050a8 <UART_SetConfig+0x204>
 8005082:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005086:	d00c      	beq.n	80050a2 <UART_SetConfig+0x1fe>
 8005088:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800508c:	d003      	beq.n	8005096 <UART_SetConfig+0x1f2>
 800508e:	e00b      	b.n	80050a8 <UART_SetConfig+0x204>
 8005090:	2300      	movs	r3, #0
 8005092:	77fb      	strb	r3, [r7, #31]
 8005094:	e00e      	b.n	80050b4 <UART_SetConfig+0x210>
 8005096:	2302      	movs	r3, #2
 8005098:	77fb      	strb	r3, [r7, #31]
 800509a:	e00b      	b.n	80050b4 <UART_SetConfig+0x210>
 800509c:	2304      	movs	r3, #4
 800509e:	77fb      	strb	r3, [r7, #31]
 80050a0:	e008      	b.n	80050b4 <UART_SetConfig+0x210>
 80050a2:	2308      	movs	r3, #8
 80050a4:	77fb      	strb	r3, [r7, #31]
 80050a6:	e005      	b.n	80050b4 <UART_SetConfig+0x210>
 80050a8:	2310      	movs	r3, #16
 80050aa:	77fb      	strb	r3, [r7, #31]
 80050ac:	bf00      	nop
 80050ae:	e001      	b.n	80050b4 <UART_SetConfig+0x210>
 80050b0:	2310      	movs	r3, #16
 80050b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050bc:	f040 8090 	bne.w	80051e0 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80050c0:	7ffb      	ldrb	r3, [r7, #31]
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d86c      	bhi.n	80051a0 <UART_SetConfig+0x2fc>
 80050c6:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <UART_SetConfig+0x228>)
 80050c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050cc:	080050f1 	.word	0x080050f1
 80050d0:	08005111 	.word	0x08005111
 80050d4:	08005131 	.word	0x08005131
 80050d8:	080051a1 	.word	0x080051a1
 80050dc:	0800514d 	.word	0x0800514d
 80050e0:	080051a1 	.word	0x080051a1
 80050e4:	080051a1 	.word	0x080051a1
 80050e8:	080051a1 	.word	0x080051a1
 80050ec:	0800516d 	.word	0x0800516d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f0:	f7fe facc 	bl	800368c <HAL_RCC_GetPCLK1Freq>
 80050f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	005a      	lsls	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	085b      	lsrs	r3, r3, #1
 8005100:	441a      	add	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	fbb2 f3f3 	udiv	r3, r2, r3
 800510a:	b29b      	uxth	r3, r3
 800510c:	61bb      	str	r3, [r7, #24]
        break;
 800510e:	e04a      	b.n	80051a6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005110:	f7fe fade 	bl	80036d0 <HAL_RCC_GetPCLK2Freq>
 8005114:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	005a      	lsls	r2, r3, #1
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	441a      	add	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	fbb2 f3f3 	udiv	r3, r2, r3
 800512a:	b29b      	uxth	r3, r3
 800512c:	61bb      	str	r3, [r7, #24]
        break;
 800512e:	e03a      	b.n	80051a6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800513a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6852      	ldr	r2, [r2, #4]
 8005142:	fbb3 f3f2 	udiv	r3, r3, r2
 8005146:	b29b      	uxth	r3, r3
 8005148:	61bb      	str	r3, [r7, #24]
        break;
 800514a:	e02c      	b.n	80051a6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800514c:	f7fe fa28 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8005150:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	005a      	lsls	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	085b      	lsrs	r3, r3, #1
 800515c:	441a      	add	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	fbb2 f3f3 	udiv	r3, r2, r3
 8005166:	b29b      	uxth	r3, r3
 8005168:	61bb      	str	r3, [r7, #24]
        break;
 800516a:	e01c      	b.n	80051a6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	085b      	lsrs	r3, r3, #1
 8005172:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	fbb2 f3f3 	udiv	r3, r2, r3
 800517e:	b29b      	uxth	r3, r3
 8005180:	61bb      	str	r3, [r7, #24]
        break;
 8005182:	e010      	b.n	80051a6 <UART_SetConfig+0x302>
 8005184:	efff69f3 	.word	0xefff69f3
 8005188:	40013800 	.word	0x40013800
 800518c:	40021000 	.word	0x40021000
 8005190:	40004400 	.word	0x40004400
 8005194:	40004800 	.word	0x40004800
 8005198:	40004c00 	.word	0x40004c00
 800519c:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	75fb      	strb	r3, [r7, #23]
        break;
 80051a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b0f      	cmp	r3, #15
 80051aa:	d916      	bls.n	80051da <UART_SetConfig+0x336>
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b2:	d212      	bcs.n	80051da <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f023 030f 	bic.w	r3, r3, #15
 80051bc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	085b      	lsrs	r3, r3, #1
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	897b      	ldrh	r3, [r7, #10]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	897a      	ldrh	r2, [r7, #10]
 80051d6:	60da      	str	r2, [r3, #12]
 80051d8:	e072      	b.n	80052c0 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	75fb      	strb	r3, [r7, #23]
 80051de:	e06f      	b.n	80052c0 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 80051e0:	7ffb      	ldrb	r3, [r7, #31]
 80051e2:	2b08      	cmp	r3, #8
 80051e4:	d85b      	bhi.n	800529e <UART_SetConfig+0x3fa>
 80051e6:	a201      	add	r2, pc, #4	; (adr r2, 80051ec <UART_SetConfig+0x348>)
 80051e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ec:	08005211 	.word	0x08005211
 80051f0:	0800522f 	.word	0x0800522f
 80051f4:	0800524d 	.word	0x0800524d
 80051f8:	0800529f 	.word	0x0800529f
 80051fc:	08005269 	.word	0x08005269
 8005200:	0800529f 	.word	0x0800529f
 8005204:	0800529f 	.word	0x0800529f
 8005208:	0800529f 	.word	0x0800529f
 800520c:	08005287 	.word	0x08005287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005210:	f7fe fa3c 	bl	800368c <HAL_RCC_GetPCLK1Freq>
 8005214:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	085a      	lsrs	r2, r3, #1
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	441a      	add	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	fbb2 f3f3 	udiv	r3, r2, r3
 8005228:	b29b      	uxth	r3, r3
 800522a:	61bb      	str	r3, [r7, #24]
        break;
 800522c:	e03a      	b.n	80052a4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800522e:	f7fe fa4f 	bl	80036d0 <HAL_RCC_GetPCLK2Freq>
 8005232:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	085a      	lsrs	r2, r3, #1
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	441a      	add	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	fbb2 f3f3 	udiv	r3, r2, r3
 8005246:	b29b      	uxth	r3, r3
 8005248:	61bb      	str	r3, [r7, #24]
        break;
 800524a:	e02b      	b.n	80052a4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	085b      	lsrs	r3, r3, #1
 8005252:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005256:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6852      	ldr	r2, [r2, #4]
 800525e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005262:	b29b      	uxth	r3, r3
 8005264:	61bb      	str	r3, [r7, #24]
        break;
 8005266:	e01d      	b.n	80052a4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005268:	f7fe f99a 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 800526c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	085a      	lsrs	r2, r3, #1
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	441a      	add	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005280:	b29b      	uxth	r3, r3
 8005282:	61bb      	str	r3, [r7, #24]
        break;
 8005284:	e00e      	b.n	80052a4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	085b      	lsrs	r3, r3, #1
 800528c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	fbb2 f3f3 	udiv	r3, r2, r3
 8005298:	b29b      	uxth	r3, r3
 800529a:	61bb      	str	r3, [r7, #24]
        break;
 800529c:	e002      	b.n	80052a4 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	75fb      	strb	r3, [r7, #23]
        break;
 80052a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	2b0f      	cmp	r3, #15
 80052a8:	d908      	bls.n	80052bc <UART_SetConfig+0x418>
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b0:	d204      	bcs.n	80052bc <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	60da      	str	r2, [r3, #12]
 80052ba:	e001      	b.n	80052c0 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3720      	adds	r7, #32
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop

080052d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	f003 0308 	and.w	r3, r3, #8
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	f003 0310 	and.w	r3, r3, #16
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01a      	beq.n	80053ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053d6:	d10a      	bne.n	80053ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	605a      	str	r2, [r3, #4]
  }
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af02      	add	r7, sp, #8
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800542a:	f7fc fd67 	bl	8001efc <HAL_GetTick>
 800542e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b08      	cmp	r3, #8
 800543c:	d10e      	bne.n	800545c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800543e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f82a 	bl	80054a6 <UART_WaitOnFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e020      	b.n	800549e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b04      	cmp	r3, #4
 8005468:	d10e      	bne.n	8005488 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800546a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f814 	bl	80054a6 <UART_WaitOnFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e00a      	b.n	800549e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2220      	movs	r2, #32
 8005492:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	603b      	str	r3, [r7, #0]
 80054b2:	4613      	mov	r3, r2
 80054b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b6:	e05d      	b.n	8005574 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054be:	d059      	beq.n	8005574 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c0:	f7fc fd1c 	bl	8001efc <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d302      	bcc.n	80054d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d11b      	bne.n	800550e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0201 	bic.w	r2, r2, #1
 80054f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2220      	movs	r2, #32
 80054fa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e042      	b.n	8005594 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d02b      	beq.n	8005574 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800552a:	d123      	bne.n	8005574 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005534:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005544:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0201 	bic.w	r2, r2, #1
 8005554:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2220      	movs	r2, #32
 800555a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e00f      	b.n	8005594 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	69da      	ldr	r2, [r3, #28]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	4013      	ands	r3, r2
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	429a      	cmp	r2, r3
 8005582:	bf0c      	ite	eq
 8005584:	2301      	moveq	r3, #1
 8005586:	2300      	movne	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	461a      	mov	r2, r3
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	429a      	cmp	r2, r3
 8005590:	d092      	beq.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <__errno>:
 800559c:	4b01      	ldr	r3, [pc, #4]	; (80055a4 <__errno+0x8>)
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000024 	.word	0x20000024

080055a8 <__libc_init_array>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	4e0d      	ldr	r6, [pc, #52]	; (80055e0 <__libc_init_array+0x38>)
 80055ac:	4c0d      	ldr	r4, [pc, #52]	; (80055e4 <__libc_init_array+0x3c>)
 80055ae:	1ba4      	subs	r4, r4, r6
 80055b0:	10a4      	asrs	r4, r4, #2
 80055b2:	2500      	movs	r5, #0
 80055b4:	42a5      	cmp	r5, r4
 80055b6:	d109      	bne.n	80055cc <__libc_init_array+0x24>
 80055b8:	4e0b      	ldr	r6, [pc, #44]	; (80055e8 <__libc_init_array+0x40>)
 80055ba:	4c0c      	ldr	r4, [pc, #48]	; (80055ec <__libc_init_array+0x44>)
 80055bc:	f002 f8a6 	bl	800770c <_init>
 80055c0:	1ba4      	subs	r4, r4, r6
 80055c2:	10a4      	asrs	r4, r4, #2
 80055c4:	2500      	movs	r5, #0
 80055c6:	42a5      	cmp	r5, r4
 80055c8:	d105      	bne.n	80055d6 <__libc_init_array+0x2e>
 80055ca:	bd70      	pop	{r4, r5, r6, pc}
 80055cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055d0:	4798      	blx	r3
 80055d2:	3501      	adds	r5, #1
 80055d4:	e7ee      	b.n	80055b4 <__libc_init_array+0xc>
 80055d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055da:	4798      	blx	r3
 80055dc:	3501      	adds	r5, #1
 80055de:	e7f2      	b.n	80055c6 <__libc_init_array+0x1e>
 80055e0:	080079e0 	.word	0x080079e0
 80055e4:	080079e0 	.word	0x080079e0
 80055e8:	080079e0 	.word	0x080079e0
 80055ec:	080079e4 	.word	0x080079e4

080055f0 <memset>:
 80055f0:	4402      	add	r2, r0
 80055f2:	4603      	mov	r3, r0
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d100      	bne.n	80055fa <memset+0xa>
 80055f8:	4770      	bx	lr
 80055fa:	f803 1b01 	strb.w	r1, [r3], #1
 80055fe:	e7f9      	b.n	80055f4 <memset+0x4>

08005600 <__cvt>:
 8005600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005604:	ec55 4b10 	vmov	r4, r5, d0
 8005608:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800560a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800560e:	2d00      	cmp	r5, #0
 8005610:	460e      	mov	r6, r1
 8005612:	4691      	mov	r9, r2
 8005614:	4619      	mov	r1, r3
 8005616:	bfb8      	it	lt
 8005618:	4622      	movlt	r2, r4
 800561a:	462b      	mov	r3, r5
 800561c:	f027 0720 	bic.w	r7, r7, #32
 8005620:	bfbb      	ittet	lt
 8005622:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005626:	461d      	movlt	r5, r3
 8005628:	2300      	movge	r3, #0
 800562a:	232d      	movlt	r3, #45	; 0x2d
 800562c:	bfb8      	it	lt
 800562e:	4614      	movlt	r4, r2
 8005630:	2f46      	cmp	r7, #70	; 0x46
 8005632:	700b      	strb	r3, [r1, #0]
 8005634:	d004      	beq.n	8005640 <__cvt+0x40>
 8005636:	2f45      	cmp	r7, #69	; 0x45
 8005638:	d100      	bne.n	800563c <__cvt+0x3c>
 800563a:	3601      	adds	r6, #1
 800563c:	2102      	movs	r1, #2
 800563e:	e000      	b.n	8005642 <__cvt+0x42>
 8005640:	2103      	movs	r1, #3
 8005642:	ab03      	add	r3, sp, #12
 8005644:	9301      	str	r3, [sp, #4]
 8005646:	ab02      	add	r3, sp, #8
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	4632      	mov	r2, r6
 800564c:	4653      	mov	r3, sl
 800564e:	ec45 4b10 	vmov	d0, r4, r5
 8005652:	f000 fcdd 	bl	8006010 <_dtoa_r>
 8005656:	2f47      	cmp	r7, #71	; 0x47
 8005658:	4680      	mov	r8, r0
 800565a:	d102      	bne.n	8005662 <__cvt+0x62>
 800565c:	f019 0f01 	tst.w	r9, #1
 8005660:	d026      	beq.n	80056b0 <__cvt+0xb0>
 8005662:	2f46      	cmp	r7, #70	; 0x46
 8005664:	eb08 0906 	add.w	r9, r8, r6
 8005668:	d111      	bne.n	800568e <__cvt+0x8e>
 800566a:	f898 3000 	ldrb.w	r3, [r8]
 800566e:	2b30      	cmp	r3, #48	; 0x30
 8005670:	d10a      	bne.n	8005688 <__cvt+0x88>
 8005672:	2200      	movs	r2, #0
 8005674:	2300      	movs	r3, #0
 8005676:	4620      	mov	r0, r4
 8005678:	4629      	mov	r1, r5
 800567a:	f7fb fa2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800567e:	b918      	cbnz	r0, 8005688 <__cvt+0x88>
 8005680:	f1c6 0601 	rsb	r6, r6, #1
 8005684:	f8ca 6000 	str.w	r6, [sl]
 8005688:	f8da 3000 	ldr.w	r3, [sl]
 800568c:	4499      	add	r9, r3
 800568e:	2200      	movs	r2, #0
 8005690:	2300      	movs	r3, #0
 8005692:	4620      	mov	r0, r4
 8005694:	4629      	mov	r1, r5
 8005696:	f7fb fa1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800569a:	b938      	cbnz	r0, 80056ac <__cvt+0xac>
 800569c:	2230      	movs	r2, #48	; 0x30
 800569e:	9b03      	ldr	r3, [sp, #12]
 80056a0:	454b      	cmp	r3, r9
 80056a2:	d205      	bcs.n	80056b0 <__cvt+0xb0>
 80056a4:	1c59      	adds	r1, r3, #1
 80056a6:	9103      	str	r1, [sp, #12]
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	e7f8      	b.n	800569e <__cvt+0x9e>
 80056ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80056b0:	9b03      	ldr	r3, [sp, #12]
 80056b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056b4:	eba3 0308 	sub.w	r3, r3, r8
 80056b8:	4640      	mov	r0, r8
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	b004      	add	sp, #16
 80056be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080056c2 <__exponent>:
 80056c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056c4:	2900      	cmp	r1, #0
 80056c6:	4604      	mov	r4, r0
 80056c8:	bfba      	itte	lt
 80056ca:	4249      	neglt	r1, r1
 80056cc:	232d      	movlt	r3, #45	; 0x2d
 80056ce:	232b      	movge	r3, #43	; 0x2b
 80056d0:	2909      	cmp	r1, #9
 80056d2:	f804 2b02 	strb.w	r2, [r4], #2
 80056d6:	7043      	strb	r3, [r0, #1]
 80056d8:	dd20      	ble.n	800571c <__exponent+0x5a>
 80056da:	f10d 0307 	add.w	r3, sp, #7
 80056de:	461f      	mov	r7, r3
 80056e0:	260a      	movs	r6, #10
 80056e2:	fb91 f5f6 	sdiv	r5, r1, r6
 80056e6:	fb06 1115 	mls	r1, r6, r5, r1
 80056ea:	3130      	adds	r1, #48	; 0x30
 80056ec:	2d09      	cmp	r5, #9
 80056ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80056f2:	f103 32ff 	add.w	r2, r3, #4294967295
 80056f6:	4629      	mov	r1, r5
 80056f8:	dc09      	bgt.n	800570e <__exponent+0x4c>
 80056fa:	3130      	adds	r1, #48	; 0x30
 80056fc:	3b02      	subs	r3, #2
 80056fe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005702:	42bb      	cmp	r3, r7
 8005704:	4622      	mov	r2, r4
 8005706:	d304      	bcc.n	8005712 <__exponent+0x50>
 8005708:	1a10      	subs	r0, r2, r0
 800570a:	b003      	add	sp, #12
 800570c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800570e:	4613      	mov	r3, r2
 8005710:	e7e7      	b.n	80056e2 <__exponent+0x20>
 8005712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005716:	f804 2b01 	strb.w	r2, [r4], #1
 800571a:	e7f2      	b.n	8005702 <__exponent+0x40>
 800571c:	2330      	movs	r3, #48	; 0x30
 800571e:	4419      	add	r1, r3
 8005720:	7083      	strb	r3, [r0, #2]
 8005722:	1d02      	adds	r2, r0, #4
 8005724:	70c1      	strb	r1, [r0, #3]
 8005726:	e7ef      	b.n	8005708 <__exponent+0x46>

08005728 <_printf_float>:
 8005728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572c:	b08d      	sub	sp, #52	; 0x34
 800572e:	460c      	mov	r4, r1
 8005730:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005734:	4616      	mov	r6, r2
 8005736:	461f      	mov	r7, r3
 8005738:	4605      	mov	r5, r0
 800573a:	f001 fa21 	bl	8006b80 <_localeconv_r>
 800573e:	6803      	ldr	r3, [r0, #0]
 8005740:	9304      	str	r3, [sp, #16]
 8005742:	4618      	mov	r0, r3
 8005744:	f7fa fd4c 	bl	80001e0 <strlen>
 8005748:	2300      	movs	r3, #0
 800574a:	930a      	str	r3, [sp, #40]	; 0x28
 800574c:	f8d8 3000 	ldr.w	r3, [r8]
 8005750:	9005      	str	r0, [sp, #20]
 8005752:	3307      	adds	r3, #7
 8005754:	f023 0307 	bic.w	r3, r3, #7
 8005758:	f103 0208 	add.w	r2, r3, #8
 800575c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005760:	f8d4 b000 	ldr.w	fp, [r4]
 8005764:	f8c8 2000 	str.w	r2, [r8]
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005770:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005774:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005778:	9307      	str	r3, [sp, #28]
 800577a:	f8cd 8018 	str.w	r8, [sp, #24]
 800577e:	f04f 32ff 	mov.w	r2, #4294967295
 8005782:	4ba7      	ldr	r3, [pc, #668]	; (8005a20 <_printf_float+0x2f8>)
 8005784:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005788:	f7fb f9d8 	bl	8000b3c <__aeabi_dcmpun>
 800578c:	bb70      	cbnz	r0, 80057ec <_printf_float+0xc4>
 800578e:	f04f 32ff 	mov.w	r2, #4294967295
 8005792:	4ba3      	ldr	r3, [pc, #652]	; (8005a20 <_printf_float+0x2f8>)
 8005794:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005798:	f7fb f9b2 	bl	8000b00 <__aeabi_dcmple>
 800579c:	bb30      	cbnz	r0, 80057ec <_printf_float+0xc4>
 800579e:	2200      	movs	r2, #0
 80057a0:	2300      	movs	r3, #0
 80057a2:	4640      	mov	r0, r8
 80057a4:	4649      	mov	r1, r9
 80057a6:	f7fb f9a1 	bl	8000aec <__aeabi_dcmplt>
 80057aa:	b110      	cbz	r0, 80057b2 <_printf_float+0x8a>
 80057ac:	232d      	movs	r3, #45	; 0x2d
 80057ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057b2:	4a9c      	ldr	r2, [pc, #624]	; (8005a24 <_printf_float+0x2fc>)
 80057b4:	4b9c      	ldr	r3, [pc, #624]	; (8005a28 <_printf_float+0x300>)
 80057b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80057ba:	bf8c      	ite	hi
 80057bc:	4690      	movhi	r8, r2
 80057be:	4698      	movls	r8, r3
 80057c0:	2303      	movs	r3, #3
 80057c2:	f02b 0204 	bic.w	r2, fp, #4
 80057c6:	6123      	str	r3, [r4, #16]
 80057c8:	6022      	str	r2, [r4, #0]
 80057ca:	f04f 0900 	mov.w	r9, #0
 80057ce:	9700      	str	r7, [sp, #0]
 80057d0:	4633      	mov	r3, r6
 80057d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80057d4:	4621      	mov	r1, r4
 80057d6:	4628      	mov	r0, r5
 80057d8:	f000 f9e6 	bl	8005ba8 <_printf_common>
 80057dc:	3001      	adds	r0, #1
 80057de:	f040 808d 	bne.w	80058fc <_printf_float+0x1d4>
 80057e2:	f04f 30ff 	mov.w	r0, #4294967295
 80057e6:	b00d      	add	sp, #52	; 0x34
 80057e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ec:	4642      	mov	r2, r8
 80057ee:	464b      	mov	r3, r9
 80057f0:	4640      	mov	r0, r8
 80057f2:	4649      	mov	r1, r9
 80057f4:	f7fb f9a2 	bl	8000b3c <__aeabi_dcmpun>
 80057f8:	b110      	cbz	r0, 8005800 <_printf_float+0xd8>
 80057fa:	4a8c      	ldr	r2, [pc, #560]	; (8005a2c <_printf_float+0x304>)
 80057fc:	4b8c      	ldr	r3, [pc, #560]	; (8005a30 <_printf_float+0x308>)
 80057fe:	e7da      	b.n	80057b6 <_printf_float+0x8e>
 8005800:	6861      	ldr	r1, [r4, #4]
 8005802:	1c4b      	adds	r3, r1, #1
 8005804:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005808:	a80a      	add	r0, sp, #40	; 0x28
 800580a:	d13e      	bne.n	800588a <_printf_float+0x162>
 800580c:	2306      	movs	r3, #6
 800580e:	6063      	str	r3, [r4, #4]
 8005810:	2300      	movs	r3, #0
 8005812:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005816:	ab09      	add	r3, sp, #36	; 0x24
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	ec49 8b10 	vmov	d0, r8, r9
 800581e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005822:	6022      	str	r2, [r4, #0]
 8005824:	f8cd a004 	str.w	sl, [sp, #4]
 8005828:	6861      	ldr	r1, [r4, #4]
 800582a:	4628      	mov	r0, r5
 800582c:	f7ff fee8 	bl	8005600 <__cvt>
 8005830:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005834:	2b47      	cmp	r3, #71	; 0x47
 8005836:	4680      	mov	r8, r0
 8005838:	d109      	bne.n	800584e <_printf_float+0x126>
 800583a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800583c:	1cd8      	adds	r0, r3, #3
 800583e:	db02      	blt.n	8005846 <_printf_float+0x11e>
 8005840:	6862      	ldr	r2, [r4, #4]
 8005842:	4293      	cmp	r3, r2
 8005844:	dd47      	ble.n	80058d6 <_printf_float+0x1ae>
 8005846:	f1aa 0a02 	sub.w	sl, sl, #2
 800584a:	fa5f fa8a 	uxtb.w	sl, sl
 800584e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005852:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005854:	d824      	bhi.n	80058a0 <_printf_float+0x178>
 8005856:	3901      	subs	r1, #1
 8005858:	4652      	mov	r2, sl
 800585a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800585e:	9109      	str	r1, [sp, #36]	; 0x24
 8005860:	f7ff ff2f 	bl	80056c2 <__exponent>
 8005864:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005866:	1813      	adds	r3, r2, r0
 8005868:	2a01      	cmp	r2, #1
 800586a:	4681      	mov	r9, r0
 800586c:	6123      	str	r3, [r4, #16]
 800586e:	dc02      	bgt.n	8005876 <_printf_float+0x14e>
 8005870:	6822      	ldr	r2, [r4, #0]
 8005872:	07d1      	lsls	r1, r2, #31
 8005874:	d501      	bpl.n	800587a <_printf_float+0x152>
 8005876:	3301      	adds	r3, #1
 8005878:	6123      	str	r3, [r4, #16]
 800587a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0a5      	beq.n	80057ce <_printf_float+0xa6>
 8005882:	232d      	movs	r3, #45	; 0x2d
 8005884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005888:	e7a1      	b.n	80057ce <_printf_float+0xa6>
 800588a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800588e:	f000 8177 	beq.w	8005b80 <_printf_float+0x458>
 8005892:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005896:	d1bb      	bne.n	8005810 <_printf_float+0xe8>
 8005898:	2900      	cmp	r1, #0
 800589a:	d1b9      	bne.n	8005810 <_printf_float+0xe8>
 800589c:	2301      	movs	r3, #1
 800589e:	e7b6      	b.n	800580e <_printf_float+0xe6>
 80058a0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80058a4:	d119      	bne.n	80058da <_printf_float+0x1b2>
 80058a6:	2900      	cmp	r1, #0
 80058a8:	6863      	ldr	r3, [r4, #4]
 80058aa:	dd0c      	ble.n	80058c6 <_printf_float+0x19e>
 80058ac:	6121      	str	r1, [r4, #16]
 80058ae:	b913      	cbnz	r3, 80058b6 <_printf_float+0x18e>
 80058b0:	6822      	ldr	r2, [r4, #0]
 80058b2:	07d2      	lsls	r2, r2, #31
 80058b4:	d502      	bpl.n	80058bc <_printf_float+0x194>
 80058b6:	3301      	adds	r3, #1
 80058b8:	440b      	add	r3, r1
 80058ba:	6123      	str	r3, [r4, #16]
 80058bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058be:	65a3      	str	r3, [r4, #88]	; 0x58
 80058c0:	f04f 0900 	mov.w	r9, #0
 80058c4:	e7d9      	b.n	800587a <_printf_float+0x152>
 80058c6:	b913      	cbnz	r3, 80058ce <_printf_float+0x1a6>
 80058c8:	6822      	ldr	r2, [r4, #0]
 80058ca:	07d0      	lsls	r0, r2, #31
 80058cc:	d501      	bpl.n	80058d2 <_printf_float+0x1aa>
 80058ce:	3302      	adds	r3, #2
 80058d0:	e7f3      	b.n	80058ba <_printf_float+0x192>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e7f1      	b.n	80058ba <_printf_float+0x192>
 80058d6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80058da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80058de:	4293      	cmp	r3, r2
 80058e0:	db05      	blt.n	80058ee <_printf_float+0x1c6>
 80058e2:	6822      	ldr	r2, [r4, #0]
 80058e4:	6123      	str	r3, [r4, #16]
 80058e6:	07d1      	lsls	r1, r2, #31
 80058e8:	d5e8      	bpl.n	80058bc <_printf_float+0x194>
 80058ea:	3301      	adds	r3, #1
 80058ec:	e7e5      	b.n	80058ba <_printf_float+0x192>
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	bfd4      	ite	le
 80058f2:	f1c3 0302 	rsble	r3, r3, #2
 80058f6:	2301      	movgt	r3, #1
 80058f8:	4413      	add	r3, r2
 80058fa:	e7de      	b.n	80058ba <_printf_float+0x192>
 80058fc:	6823      	ldr	r3, [r4, #0]
 80058fe:	055a      	lsls	r2, r3, #21
 8005900:	d407      	bmi.n	8005912 <_printf_float+0x1ea>
 8005902:	6923      	ldr	r3, [r4, #16]
 8005904:	4642      	mov	r2, r8
 8005906:	4631      	mov	r1, r6
 8005908:	4628      	mov	r0, r5
 800590a:	47b8      	blx	r7
 800590c:	3001      	adds	r0, #1
 800590e:	d12b      	bne.n	8005968 <_printf_float+0x240>
 8005910:	e767      	b.n	80057e2 <_printf_float+0xba>
 8005912:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005916:	f240 80dc 	bls.w	8005ad2 <_printf_float+0x3aa>
 800591a:	2200      	movs	r2, #0
 800591c:	2300      	movs	r3, #0
 800591e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005922:	f7fb f8d9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005926:	2800      	cmp	r0, #0
 8005928:	d033      	beq.n	8005992 <_printf_float+0x26a>
 800592a:	2301      	movs	r3, #1
 800592c:	4a41      	ldr	r2, [pc, #260]	; (8005a34 <_printf_float+0x30c>)
 800592e:	4631      	mov	r1, r6
 8005930:	4628      	mov	r0, r5
 8005932:	47b8      	blx	r7
 8005934:	3001      	adds	r0, #1
 8005936:	f43f af54 	beq.w	80057e2 <_printf_float+0xba>
 800593a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800593e:	429a      	cmp	r2, r3
 8005940:	db02      	blt.n	8005948 <_printf_float+0x220>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	07d8      	lsls	r0, r3, #31
 8005946:	d50f      	bpl.n	8005968 <_printf_float+0x240>
 8005948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800594c:	4631      	mov	r1, r6
 800594e:	4628      	mov	r0, r5
 8005950:	47b8      	blx	r7
 8005952:	3001      	adds	r0, #1
 8005954:	f43f af45 	beq.w	80057e2 <_printf_float+0xba>
 8005958:	f04f 0800 	mov.w	r8, #0
 800595c:	f104 091a 	add.w	r9, r4, #26
 8005960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005962:	3b01      	subs	r3, #1
 8005964:	4543      	cmp	r3, r8
 8005966:	dc09      	bgt.n	800597c <_printf_float+0x254>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	079b      	lsls	r3, r3, #30
 800596c:	f100 8103 	bmi.w	8005b76 <_printf_float+0x44e>
 8005970:	68e0      	ldr	r0, [r4, #12]
 8005972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005974:	4298      	cmp	r0, r3
 8005976:	bfb8      	it	lt
 8005978:	4618      	movlt	r0, r3
 800597a:	e734      	b.n	80057e6 <_printf_float+0xbe>
 800597c:	2301      	movs	r3, #1
 800597e:	464a      	mov	r2, r9
 8005980:	4631      	mov	r1, r6
 8005982:	4628      	mov	r0, r5
 8005984:	47b8      	blx	r7
 8005986:	3001      	adds	r0, #1
 8005988:	f43f af2b 	beq.w	80057e2 <_printf_float+0xba>
 800598c:	f108 0801 	add.w	r8, r8, #1
 8005990:	e7e6      	b.n	8005960 <_printf_float+0x238>
 8005992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005994:	2b00      	cmp	r3, #0
 8005996:	dc2b      	bgt.n	80059f0 <_printf_float+0x2c8>
 8005998:	2301      	movs	r3, #1
 800599a:	4a26      	ldr	r2, [pc, #152]	; (8005a34 <_printf_float+0x30c>)
 800599c:	4631      	mov	r1, r6
 800599e:	4628      	mov	r0, r5
 80059a0:	47b8      	blx	r7
 80059a2:	3001      	adds	r0, #1
 80059a4:	f43f af1d 	beq.w	80057e2 <_printf_float+0xba>
 80059a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059aa:	b923      	cbnz	r3, 80059b6 <_printf_float+0x28e>
 80059ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ae:	b913      	cbnz	r3, 80059b6 <_printf_float+0x28e>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	07d9      	lsls	r1, r3, #31
 80059b4:	d5d8      	bpl.n	8005968 <_printf_float+0x240>
 80059b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059ba:	4631      	mov	r1, r6
 80059bc:	4628      	mov	r0, r5
 80059be:	47b8      	blx	r7
 80059c0:	3001      	adds	r0, #1
 80059c2:	f43f af0e 	beq.w	80057e2 <_printf_float+0xba>
 80059c6:	f04f 0900 	mov.w	r9, #0
 80059ca:	f104 0a1a 	add.w	sl, r4, #26
 80059ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059d0:	425b      	negs	r3, r3
 80059d2:	454b      	cmp	r3, r9
 80059d4:	dc01      	bgt.n	80059da <_printf_float+0x2b2>
 80059d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d8:	e794      	b.n	8005904 <_printf_float+0x1dc>
 80059da:	2301      	movs	r3, #1
 80059dc:	4652      	mov	r2, sl
 80059de:	4631      	mov	r1, r6
 80059e0:	4628      	mov	r0, r5
 80059e2:	47b8      	blx	r7
 80059e4:	3001      	adds	r0, #1
 80059e6:	f43f aefc 	beq.w	80057e2 <_printf_float+0xba>
 80059ea:	f109 0901 	add.w	r9, r9, #1
 80059ee:	e7ee      	b.n	80059ce <_printf_float+0x2a6>
 80059f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059f4:	429a      	cmp	r2, r3
 80059f6:	bfa8      	it	ge
 80059f8:	461a      	movge	r2, r3
 80059fa:	2a00      	cmp	r2, #0
 80059fc:	4691      	mov	r9, r2
 80059fe:	dd07      	ble.n	8005a10 <_printf_float+0x2e8>
 8005a00:	4613      	mov	r3, r2
 8005a02:	4631      	mov	r1, r6
 8005a04:	4642      	mov	r2, r8
 8005a06:	4628      	mov	r0, r5
 8005a08:	47b8      	blx	r7
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	f43f aee9 	beq.w	80057e2 <_printf_float+0xba>
 8005a10:	f104 031a 	add.w	r3, r4, #26
 8005a14:	f04f 0b00 	mov.w	fp, #0
 8005a18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a1c:	9306      	str	r3, [sp, #24]
 8005a1e:	e015      	b.n	8005a4c <_printf_float+0x324>
 8005a20:	7fefffff 	.word	0x7fefffff
 8005a24:	08007784 	.word	0x08007784
 8005a28:	08007780 	.word	0x08007780
 8005a2c:	0800778c 	.word	0x0800778c
 8005a30:	08007788 	.word	0x08007788
 8005a34:	08007790 	.word	0x08007790
 8005a38:	2301      	movs	r3, #1
 8005a3a:	9a06      	ldr	r2, [sp, #24]
 8005a3c:	4631      	mov	r1, r6
 8005a3e:	4628      	mov	r0, r5
 8005a40:	47b8      	blx	r7
 8005a42:	3001      	adds	r0, #1
 8005a44:	f43f aecd 	beq.w	80057e2 <_printf_float+0xba>
 8005a48:	f10b 0b01 	add.w	fp, fp, #1
 8005a4c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005a50:	ebaa 0309 	sub.w	r3, sl, r9
 8005a54:	455b      	cmp	r3, fp
 8005a56:	dcef      	bgt.n	8005a38 <_printf_float+0x310>
 8005a58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	44d0      	add	r8, sl
 8005a60:	db15      	blt.n	8005a8e <_printf_float+0x366>
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	07da      	lsls	r2, r3, #31
 8005a66:	d412      	bmi.n	8005a8e <_printf_float+0x366>
 8005a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a6c:	eba3 020a 	sub.w	r2, r3, sl
 8005a70:	eba3 0a01 	sub.w	sl, r3, r1
 8005a74:	4592      	cmp	sl, r2
 8005a76:	bfa8      	it	ge
 8005a78:	4692      	movge	sl, r2
 8005a7a:	f1ba 0f00 	cmp.w	sl, #0
 8005a7e:	dc0e      	bgt.n	8005a9e <_printf_float+0x376>
 8005a80:	f04f 0800 	mov.w	r8, #0
 8005a84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a88:	f104 091a 	add.w	r9, r4, #26
 8005a8c:	e019      	b.n	8005ac2 <_printf_float+0x39a>
 8005a8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a92:	4631      	mov	r1, r6
 8005a94:	4628      	mov	r0, r5
 8005a96:	47b8      	blx	r7
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d1e5      	bne.n	8005a68 <_printf_float+0x340>
 8005a9c:	e6a1      	b.n	80057e2 <_printf_float+0xba>
 8005a9e:	4653      	mov	r3, sl
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	47b8      	blx	r7
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	d1e9      	bne.n	8005a80 <_printf_float+0x358>
 8005aac:	e699      	b.n	80057e2 <_printf_float+0xba>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	464a      	mov	r2, r9
 8005ab2:	4631      	mov	r1, r6
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	47b8      	blx	r7
 8005ab8:	3001      	adds	r0, #1
 8005aba:	f43f ae92 	beq.w	80057e2 <_printf_float+0xba>
 8005abe:	f108 0801 	add.w	r8, r8, #1
 8005ac2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ac6:	1a9b      	subs	r3, r3, r2
 8005ac8:	eba3 030a 	sub.w	r3, r3, sl
 8005acc:	4543      	cmp	r3, r8
 8005ace:	dcee      	bgt.n	8005aae <_printf_float+0x386>
 8005ad0:	e74a      	b.n	8005968 <_printf_float+0x240>
 8005ad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ad4:	2a01      	cmp	r2, #1
 8005ad6:	dc01      	bgt.n	8005adc <_printf_float+0x3b4>
 8005ad8:	07db      	lsls	r3, r3, #31
 8005ada:	d53a      	bpl.n	8005b52 <_printf_float+0x42a>
 8005adc:	2301      	movs	r3, #1
 8005ade:	4642      	mov	r2, r8
 8005ae0:	4631      	mov	r1, r6
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	47b8      	blx	r7
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	f43f ae7b 	beq.w	80057e2 <_printf_float+0xba>
 8005aec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005af0:	4631      	mov	r1, r6
 8005af2:	4628      	mov	r0, r5
 8005af4:	47b8      	blx	r7
 8005af6:	3001      	adds	r0, #1
 8005af8:	f108 0801 	add.w	r8, r8, #1
 8005afc:	f43f ae71 	beq.w	80057e2 <_printf_float+0xba>
 8005b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b02:	2200      	movs	r2, #0
 8005b04:	f103 3aff 	add.w	sl, r3, #4294967295
 8005b08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f7fa ffe3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b12:	b9c8      	cbnz	r0, 8005b48 <_printf_float+0x420>
 8005b14:	4653      	mov	r3, sl
 8005b16:	4642      	mov	r2, r8
 8005b18:	4631      	mov	r1, r6
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	47b8      	blx	r7
 8005b1e:	3001      	adds	r0, #1
 8005b20:	d10e      	bne.n	8005b40 <_printf_float+0x418>
 8005b22:	e65e      	b.n	80057e2 <_printf_float+0xba>
 8005b24:	2301      	movs	r3, #1
 8005b26:	4652      	mov	r2, sl
 8005b28:	4631      	mov	r1, r6
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	47b8      	blx	r7
 8005b2e:	3001      	adds	r0, #1
 8005b30:	f43f ae57 	beq.w	80057e2 <_printf_float+0xba>
 8005b34:	f108 0801 	add.w	r8, r8, #1
 8005b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	4543      	cmp	r3, r8
 8005b3e:	dcf1      	bgt.n	8005b24 <_printf_float+0x3fc>
 8005b40:	464b      	mov	r3, r9
 8005b42:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b46:	e6de      	b.n	8005906 <_printf_float+0x1de>
 8005b48:	f04f 0800 	mov.w	r8, #0
 8005b4c:	f104 0a1a 	add.w	sl, r4, #26
 8005b50:	e7f2      	b.n	8005b38 <_printf_float+0x410>
 8005b52:	2301      	movs	r3, #1
 8005b54:	e7df      	b.n	8005b16 <_printf_float+0x3ee>
 8005b56:	2301      	movs	r3, #1
 8005b58:	464a      	mov	r2, r9
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	47b8      	blx	r7
 8005b60:	3001      	adds	r0, #1
 8005b62:	f43f ae3e 	beq.w	80057e2 <_printf_float+0xba>
 8005b66:	f108 0801 	add.w	r8, r8, #1
 8005b6a:	68e3      	ldr	r3, [r4, #12]
 8005b6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b6e:	1a9b      	subs	r3, r3, r2
 8005b70:	4543      	cmp	r3, r8
 8005b72:	dcf0      	bgt.n	8005b56 <_printf_float+0x42e>
 8005b74:	e6fc      	b.n	8005970 <_printf_float+0x248>
 8005b76:	f04f 0800 	mov.w	r8, #0
 8005b7a:	f104 0919 	add.w	r9, r4, #25
 8005b7e:	e7f4      	b.n	8005b6a <_printf_float+0x442>
 8005b80:	2900      	cmp	r1, #0
 8005b82:	f43f ae8b 	beq.w	800589c <_printf_float+0x174>
 8005b86:	2300      	movs	r3, #0
 8005b88:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005b8c:	ab09      	add	r3, sp, #36	; 0x24
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	ec49 8b10 	vmov	d0, r8, r9
 8005b94:	6022      	str	r2, [r4, #0]
 8005b96:	f8cd a004 	str.w	sl, [sp, #4]
 8005b9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f7ff fd2e 	bl	8005600 <__cvt>
 8005ba4:	4680      	mov	r8, r0
 8005ba6:	e648      	b.n	800583a <_printf_float+0x112>

08005ba8 <_printf_common>:
 8005ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bac:	4691      	mov	r9, r2
 8005bae:	461f      	mov	r7, r3
 8005bb0:	688a      	ldr	r2, [r1, #8]
 8005bb2:	690b      	ldr	r3, [r1, #16]
 8005bb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	bfb8      	it	lt
 8005bbc:	4613      	movlt	r3, r2
 8005bbe:	f8c9 3000 	str.w	r3, [r9]
 8005bc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	460c      	mov	r4, r1
 8005bca:	b112      	cbz	r2, 8005bd2 <_printf_common+0x2a>
 8005bcc:	3301      	adds	r3, #1
 8005bce:	f8c9 3000 	str.w	r3, [r9]
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	0699      	lsls	r1, r3, #26
 8005bd6:	bf42      	ittt	mi
 8005bd8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005bdc:	3302      	addmi	r3, #2
 8005bde:	f8c9 3000 	strmi.w	r3, [r9]
 8005be2:	6825      	ldr	r5, [r4, #0]
 8005be4:	f015 0506 	ands.w	r5, r5, #6
 8005be8:	d107      	bne.n	8005bfa <_printf_common+0x52>
 8005bea:	f104 0a19 	add.w	sl, r4, #25
 8005bee:	68e3      	ldr	r3, [r4, #12]
 8005bf0:	f8d9 2000 	ldr.w	r2, [r9]
 8005bf4:	1a9b      	subs	r3, r3, r2
 8005bf6:	42ab      	cmp	r3, r5
 8005bf8:	dc28      	bgt.n	8005c4c <_printf_common+0xa4>
 8005bfa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005bfe:	6822      	ldr	r2, [r4, #0]
 8005c00:	3300      	adds	r3, #0
 8005c02:	bf18      	it	ne
 8005c04:	2301      	movne	r3, #1
 8005c06:	0692      	lsls	r2, r2, #26
 8005c08:	d42d      	bmi.n	8005c66 <_printf_common+0xbe>
 8005c0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c0e:	4639      	mov	r1, r7
 8005c10:	4630      	mov	r0, r6
 8005c12:	47c0      	blx	r8
 8005c14:	3001      	adds	r0, #1
 8005c16:	d020      	beq.n	8005c5a <_printf_common+0xb2>
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	68e5      	ldr	r5, [r4, #12]
 8005c1c:	f8d9 2000 	ldr.w	r2, [r9]
 8005c20:	f003 0306 	and.w	r3, r3, #6
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	bf08      	it	eq
 8005c28:	1aad      	subeq	r5, r5, r2
 8005c2a:	68a3      	ldr	r3, [r4, #8]
 8005c2c:	6922      	ldr	r2, [r4, #16]
 8005c2e:	bf0c      	ite	eq
 8005c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c34:	2500      	movne	r5, #0
 8005c36:	4293      	cmp	r3, r2
 8005c38:	bfc4      	itt	gt
 8005c3a:	1a9b      	subgt	r3, r3, r2
 8005c3c:	18ed      	addgt	r5, r5, r3
 8005c3e:	f04f 0900 	mov.w	r9, #0
 8005c42:	341a      	adds	r4, #26
 8005c44:	454d      	cmp	r5, r9
 8005c46:	d11a      	bne.n	8005c7e <_printf_common+0xd6>
 8005c48:	2000      	movs	r0, #0
 8005c4a:	e008      	b.n	8005c5e <_printf_common+0xb6>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	4652      	mov	r2, sl
 8005c50:	4639      	mov	r1, r7
 8005c52:	4630      	mov	r0, r6
 8005c54:	47c0      	blx	r8
 8005c56:	3001      	adds	r0, #1
 8005c58:	d103      	bne.n	8005c62 <_printf_common+0xba>
 8005c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c62:	3501      	adds	r5, #1
 8005c64:	e7c3      	b.n	8005bee <_printf_common+0x46>
 8005c66:	18e1      	adds	r1, r4, r3
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	2030      	movs	r0, #48	; 0x30
 8005c6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c70:	4422      	add	r2, r4
 8005c72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c7a:	3302      	adds	r3, #2
 8005c7c:	e7c5      	b.n	8005c0a <_printf_common+0x62>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	4622      	mov	r2, r4
 8005c82:	4639      	mov	r1, r7
 8005c84:	4630      	mov	r0, r6
 8005c86:	47c0      	blx	r8
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d0e6      	beq.n	8005c5a <_printf_common+0xb2>
 8005c8c:	f109 0901 	add.w	r9, r9, #1
 8005c90:	e7d8      	b.n	8005c44 <_printf_common+0x9c>
	...

08005c94 <_printf_i>:
 8005c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	7e09      	ldrb	r1, [r1, #24]
 8005ca0:	b085      	sub	sp, #20
 8005ca2:	296e      	cmp	r1, #110	; 0x6e
 8005ca4:	4617      	mov	r7, r2
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	4698      	mov	r8, r3
 8005caa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cac:	f000 80b3 	beq.w	8005e16 <_printf_i+0x182>
 8005cb0:	d822      	bhi.n	8005cf8 <_printf_i+0x64>
 8005cb2:	2963      	cmp	r1, #99	; 0x63
 8005cb4:	d036      	beq.n	8005d24 <_printf_i+0x90>
 8005cb6:	d80a      	bhi.n	8005cce <_printf_i+0x3a>
 8005cb8:	2900      	cmp	r1, #0
 8005cba:	f000 80b9 	beq.w	8005e30 <_printf_i+0x19c>
 8005cbe:	2958      	cmp	r1, #88	; 0x58
 8005cc0:	f000 8083 	beq.w	8005dca <_printf_i+0x136>
 8005cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cc8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005ccc:	e032      	b.n	8005d34 <_printf_i+0xa0>
 8005cce:	2964      	cmp	r1, #100	; 0x64
 8005cd0:	d001      	beq.n	8005cd6 <_printf_i+0x42>
 8005cd2:	2969      	cmp	r1, #105	; 0x69
 8005cd4:	d1f6      	bne.n	8005cc4 <_printf_i+0x30>
 8005cd6:	6820      	ldr	r0, [r4, #0]
 8005cd8:	6813      	ldr	r3, [r2, #0]
 8005cda:	0605      	lsls	r5, r0, #24
 8005cdc:	f103 0104 	add.w	r1, r3, #4
 8005ce0:	d52a      	bpl.n	8005d38 <_printf_i+0xa4>
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6011      	str	r1, [r2, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	da03      	bge.n	8005cf2 <_printf_i+0x5e>
 8005cea:	222d      	movs	r2, #45	; 0x2d
 8005cec:	425b      	negs	r3, r3
 8005cee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005cf2:	486f      	ldr	r0, [pc, #444]	; (8005eb0 <_printf_i+0x21c>)
 8005cf4:	220a      	movs	r2, #10
 8005cf6:	e039      	b.n	8005d6c <_printf_i+0xd8>
 8005cf8:	2973      	cmp	r1, #115	; 0x73
 8005cfa:	f000 809d 	beq.w	8005e38 <_printf_i+0x1a4>
 8005cfe:	d808      	bhi.n	8005d12 <_printf_i+0x7e>
 8005d00:	296f      	cmp	r1, #111	; 0x6f
 8005d02:	d020      	beq.n	8005d46 <_printf_i+0xb2>
 8005d04:	2970      	cmp	r1, #112	; 0x70
 8005d06:	d1dd      	bne.n	8005cc4 <_printf_i+0x30>
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	f043 0320 	orr.w	r3, r3, #32
 8005d0e:	6023      	str	r3, [r4, #0]
 8005d10:	e003      	b.n	8005d1a <_printf_i+0x86>
 8005d12:	2975      	cmp	r1, #117	; 0x75
 8005d14:	d017      	beq.n	8005d46 <_printf_i+0xb2>
 8005d16:	2978      	cmp	r1, #120	; 0x78
 8005d18:	d1d4      	bne.n	8005cc4 <_printf_i+0x30>
 8005d1a:	2378      	movs	r3, #120	; 0x78
 8005d1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d20:	4864      	ldr	r0, [pc, #400]	; (8005eb4 <_printf_i+0x220>)
 8005d22:	e055      	b.n	8005dd0 <_printf_i+0x13c>
 8005d24:	6813      	ldr	r3, [r2, #0]
 8005d26:	1d19      	adds	r1, r3, #4
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6011      	str	r1, [r2, #0]
 8005d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d34:	2301      	movs	r3, #1
 8005d36:	e08c      	b.n	8005e52 <_printf_i+0x1be>
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6011      	str	r1, [r2, #0]
 8005d3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d40:	bf18      	it	ne
 8005d42:	b21b      	sxthne	r3, r3
 8005d44:	e7cf      	b.n	8005ce6 <_printf_i+0x52>
 8005d46:	6813      	ldr	r3, [r2, #0]
 8005d48:	6825      	ldr	r5, [r4, #0]
 8005d4a:	1d18      	adds	r0, r3, #4
 8005d4c:	6010      	str	r0, [r2, #0]
 8005d4e:	0628      	lsls	r0, r5, #24
 8005d50:	d501      	bpl.n	8005d56 <_printf_i+0xc2>
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	e002      	b.n	8005d5c <_printf_i+0xc8>
 8005d56:	0668      	lsls	r0, r5, #25
 8005d58:	d5fb      	bpl.n	8005d52 <_printf_i+0xbe>
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	4854      	ldr	r0, [pc, #336]	; (8005eb0 <_printf_i+0x21c>)
 8005d5e:	296f      	cmp	r1, #111	; 0x6f
 8005d60:	bf14      	ite	ne
 8005d62:	220a      	movne	r2, #10
 8005d64:	2208      	moveq	r2, #8
 8005d66:	2100      	movs	r1, #0
 8005d68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d6c:	6865      	ldr	r5, [r4, #4]
 8005d6e:	60a5      	str	r5, [r4, #8]
 8005d70:	2d00      	cmp	r5, #0
 8005d72:	f2c0 8095 	blt.w	8005ea0 <_printf_i+0x20c>
 8005d76:	6821      	ldr	r1, [r4, #0]
 8005d78:	f021 0104 	bic.w	r1, r1, #4
 8005d7c:	6021      	str	r1, [r4, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d13d      	bne.n	8005dfe <_printf_i+0x16a>
 8005d82:	2d00      	cmp	r5, #0
 8005d84:	f040 808e 	bne.w	8005ea4 <_printf_i+0x210>
 8005d88:	4665      	mov	r5, ip
 8005d8a:	2a08      	cmp	r2, #8
 8005d8c:	d10b      	bne.n	8005da6 <_printf_i+0x112>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	07db      	lsls	r3, r3, #31
 8005d92:	d508      	bpl.n	8005da6 <_printf_i+0x112>
 8005d94:	6923      	ldr	r3, [r4, #16]
 8005d96:	6862      	ldr	r2, [r4, #4]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	bfde      	ittt	le
 8005d9c:	2330      	movle	r3, #48	; 0x30
 8005d9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005da2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005da6:	ebac 0305 	sub.w	r3, ip, r5
 8005daa:	6123      	str	r3, [r4, #16]
 8005dac:	f8cd 8000 	str.w	r8, [sp]
 8005db0:	463b      	mov	r3, r7
 8005db2:	aa03      	add	r2, sp, #12
 8005db4:	4621      	mov	r1, r4
 8005db6:	4630      	mov	r0, r6
 8005db8:	f7ff fef6 	bl	8005ba8 <_printf_common>
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d14d      	bne.n	8005e5c <_printf_i+0x1c8>
 8005dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc4:	b005      	add	sp, #20
 8005dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dca:	4839      	ldr	r0, [pc, #228]	; (8005eb0 <_printf_i+0x21c>)
 8005dcc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005dd0:	6813      	ldr	r3, [r2, #0]
 8005dd2:	6821      	ldr	r1, [r4, #0]
 8005dd4:	1d1d      	adds	r5, r3, #4
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6015      	str	r5, [r2, #0]
 8005dda:	060a      	lsls	r2, r1, #24
 8005ddc:	d50b      	bpl.n	8005df6 <_printf_i+0x162>
 8005dde:	07ca      	lsls	r2, r1, #31
 8005de0:	bf44      	itt	mi
 8005de2:	f041 0120 	orrmi.w	r1, r1, #32
 8005de6:	6021      	strmi	r1, [r4, #0]
 8005de8:	b91b      	cbnz	r3, 8005df2 <_printf_i+0x15e>
 8005dea:	6822      	ldr	r2, [r4, #0]
 8005dec:	f022 0220 	bic.w	r2, r2, #32
 8005df0:	6022      	str	r2, [r4, #0]
 8005df2:	2210      	movs	r2, #16
 8005df4:	e7b7      	b.n	8005d66 <_printf_i+0xd2>
 8005df6:	064d      	lsls	r5, r1, #25
 8005df8:	bf48      	it	mi
 8005dfa:	b29b      	uxthmi	r3, r3
 8005dfc:	e7ef      	b.n	8005dde <_printf_i+0x14a>
 8005dfe:	4665      	mov	r5, ip
 8005e00:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e04:	fb02 3311 	mls	r3, r2, r1, r3
 8005e08:	5cc3      	ldrb	r3, [r0, r3]
 8005e0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e0e:	460b      	mov	r3, r1
 8005e10:	2900      	cmp	r1, #0
 8005e12:	d1f5      	bne.n	8005e00 <_printf_i+0x16c>
 8005e14:	e7b9      	b.n	8005d8a <_printf_i+0xf6>
 8005e16:	6813      	ldr	r3, [r2, #0]
 8005e18:	6825      	ldr	r5, [r4, #0]
 8005e1a:	6961      	ldr	r1, [r4, #20]
 8005e1c:	1d18      	adds	r0, r3, #4
 8005e1e:	6010      	str	r0, [r2, #0]
 8005e20:	0628      	lsls	r0, r5, #24
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	d501      	bpl.n	8005e2a <_printf_i+0x196>
 8005e26:	6019      	str	r1, [r3, #0]
 8005e28:	e002      	b.n	8005e30 <_printf_i+0x19c>
 8005e2a:	066a      	lsls	r2, r5, #25
 8005e2c:	d5fb      	bpl.n	8005e26 <_printf_i+0x192>
 8005e2e:	8019      	strh	r1, [r3, #0]
 8005e30:	2300      	movs	r3, #0
 8005e32:	6123      	str	r3, [r4, #16]
 8005e34:	4665      	mov	r5, ip
 8005e36:	e7b9      	b.n	8005dac <_printf_i+0x118>
 8005e38:	6813      	ldr	r3, [r2, #0]
 8005e3a:	1d19      	adds	r1, r3, #4
 8005e3c:	6011      	str	r1, [r2, #0]
 8005e3e:	681d      	ldr	r5, [r3, #0]
 8005e40:	6862      	ldr	r2, [r4, #4]
 8005e42:	2100      	movs	r1, #0
 8005e44:	4628      	mov	r0, r5
 8005e46:	f7fa f9d3 	bl	80001f0 <memchr>
 8005e4a:	b108      	cbz	r0, 8005e50 <_printf_i+0x1bc>
 8005e4c:	1b40      	subs	r0, r0, r5
 8005e4e:	6060      	str	r0, [r4, #4]
 8005e50:	6863      	ldr	r3, [r4, #4]
 8005e52:	6123      	str	r3, [r4, #16]
 8005e54:	2300      	movs	r3, #0
 8005e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e5a:	e7a7      	b.n	8005dac <_printf_i+0x118>
 8005e5c:	6923      	ldr	r3, [r4, #16]
 8005e5e:	462a      	mov	r2, r5
 8005e60:	4639      	mov	r1, r7
 8005e62:	4630      	mov	r0, r6
 8005e64:	47c0      	blx	r8
 8005e66:	3001      	adds	r0, #1
 8005e68:	d0aa      	beq.n	8005dc0 <_printf_i+0x12c>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	079b      	lsls	r3, r3, #30
 8005e6e:	d413      	bmi.n	8005e98 <_printf_i+0x204>
 8005e70:	68e0      	ldr	r0, [r4, #12]
 8005e72:	9b03      	ldr	r3, [sp, #12]
 8005e74:	4298      	cmp	r0, r3
 8005e76:	bfb8      	it	lt
 8005e78:	4618      	movlt	r0, r3
 8005e7a:	e7a3      	b.n	8005dc4 <_printf_i+0x130>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	464a      	mov	r2, r9
 8005e80:	4639      	mov	r1, r7
 8005e82:	4630      	mov	r0, r6
 8005e84:	47c0      	blx	r8
 8005e86:	3001      	adds	r0, #1
 8005e88:	d09a      	beq.n	8005dc0 <_printf_i+0x12c>
 8005e8a:	3501      	adds	r5, #1
 8005e8c:	68e3      	ldr	r3, [r4, #12]
 8005e8e:	9a03      	ldr	r2, [sp, #12]
 8005e90:	1a9b      	subs	r3, r3, r2
 8005e92:	42ab      	cmp	r3, r5
 8005e94:	dcf2      	bgt.n	8005e7c <_printf_i+0x1e8>
 8005e96:	e7eb      	b.n	8005e70 <_printf_i+0x1dc>
 8005e98:	2500      	movs	r5, #0
 8005e9a:	f104 0919 	add.w	r9, r4, #25
 8005e9e:	e7f5      	b.n	8005e8c <_printf_i+0x1f8>
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1ac      	bne.n	8005dfe <_printf_i+0x16a>
 8005ea4:	7803      	ldrb	r3, [r0, #0]
 8005ea6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005eaa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eae:	e76c      	b.n	8005d8a <_printf_i+0xf6>
 8005eb0:	08007792 	.word	0x08007792
 8005eb4:	080077a3 	.word	0x080077a3

08005eb8 <siprintf>:
 8005eb8:	b40e      	push	{r1, r2, r3}
 8005eba:	b500      	push	{lr}
 8005ebc:	b09c      	sub	sp, #112	; 0x70
 8005ebe:	ab1d      	add	r3, sp, #116	; 0x74
 8005ec0:	9002      	str	r0, [sp, #8]
 8005ec2:	9006      	str	r0, [sp, #24]
 8005ec4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ec8:	4809      	ldr	r0, [pc, #36]	; (8005ef0 <siprintf+0x38>)
 8005eca:	9107      	str	r1, [sp, #28]
 8005ecc:	9104      	str	r1, [sp, #16]
 8005ece:	4909      	ldr	r1, [pc, #36]	; (8005ef4 <siprintf+0x3c>)
 8005ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ed4:	9105      	str	r1, [sp, #20]
 8005ed6:	6800      	ldr	r0, [r0, #0]
 8005ed8:	9301      	str	r3, [sp, #4]
 8005eda:	a902      	add	r1, sp, #8
 8005edc:	f001 fa5c 	bl	8007398 <_svfiprintf_r>
 8005ee0:	9b02      	ldr	r3, [sp, #8]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	b01c      	add	sp, #112	; 0x70
 8005ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005eec:	b003      	add	sp, #12
 8005eee:	4770      	bx	lr
 8005ef0:	20000024 	.word	0x20000024
 8005ef4:	ffff0208 	.word	0xffff0208

08005ef8 <quorem>:
 8005ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efc:	6903      	ldr	r3, [r0, #16]
 8005efe:	690c      	ldr	r4, [r1, #16]
 8005f00:	42a3      	cmp	r3, r4
 8005f02:	4680      	mov	r8, r0
 8005f04:	f2c0 8082 	blt.w	800600c <quorem+0x114>
 8005f08:	3c01      	subs	r4, #1
 8005f0a:	f101 0714 	add.w	r7, r1, #20
 8005f0e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005f12:	f100 0614 	add.w	r6, r0, #20
 8005f16:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005f1a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005f1e:	eb06 030c 	add.w	r3, r6, ip
 8005f22:	3501      	adds	r5, #1
 8005f24:	eb07 090c 	add.w	r9, r7, ip
 8005f28:	9301      	str	r3, [sp, #4]
 8005f2a:	fbb0 f5f5 	udiv	r5, r0, r5
 8005f2e:	b395      	cbz	r5, 8005f96 <quorem+0x9e>
 8005f30:	f04f 0a00 	mov.w	sl, #0
 8005f34:	4638      	mov	r0, r7
 8005f36:	46b6      	mov	lr, r6
 8005f38:	46d3      	mov	fp, sl
 8005f3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f3e:	b293      	uxth	r3, r2
 8005f40:	fb05 a303 	mla	r3, r5, r3, sl
 8005f44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	ebab 0303 	sub.w	r3, fp, r3
 8005f4e:	0c12      	lsrs	r2, r2, #16
 8005f50:	f8de b000 	ldr.w	fp, [lr]
 8005f54:	fb05 a202 	mla	r2, r5, r2, sl
 8005f58:	fa13 f38b 	uxtah	r3, r3, fp
 8005f5c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005f60:	fa1f fb82 	uxth.w	fp, r2
 8005f64:	f8de 2000 	ldr.w	r2, [lr]
 8005f68:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005f6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f76:	4581      	cmp	r9, r0
 8005f78:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005f7c:	f84e 3b04 	str.w	r3, [lr], #4
 8005f80:	d2db      	bcs.n	8005f3a <quorem+0x42>
 8005f82:	f856 300c 	ldr.w	r3, [r6, ip]
 8005f86:	b933      	cbnz	r3, 8005f96 <quorem+0x9e>
 8005f88:	9b01      	ldr	r3, [sp, #4]
 8005f8a:	3b04      	subs	r3, #4
 8005f8c:	429e      	cmp	r6, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	d330      	bcc.n	8005ff4 <quorem+0xfc>
 8005f92:	f8c8 4010 	str.w	r4, [r8, #16]
 8005f96:	4640      	mov	r0, r8
 8005f98:	f001 f828 	bl	8006fec <__mcmp>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	db25      	blt.n	8005fec <quorem+0xf4>
 8005fa0:	3501      	adds	r5, #1
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f04f 0c00 	mov.w	ip, #0
 8005fa8:	f857 2b04 	ldr.w	r2, [r7], #4
 8005fac:	f8d0 e000 	ldr.w	lr, [r0]
 8005fb0:	b293      	uxth	r3, r2
 8005fb2:	ebac 0303 	sub.w	r3, ip, r3
 8005fb6:	0c12      	lsrs	r2, r2, #16
 8005fb8:	fa13 f38e 	uxtah	r3, r3, lr
 8005fbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005fc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fca:	45b9      	cmp	r9, r7
 8005fcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005fd0:	f840 3b04 	str.w	r3, [r0], #4
 8005fd4:	d2e8      	bcs.n	8005fa8 <quorem+0xb0>
 8005fd6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005fda:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005fde:	b92a      	cbnz	r2, 8005fec <quorem+0xf4>
 8005fe0:	3b04      	subs	r3, #4
 8005fe2:	429e      	cmp	r6, r3
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	d30b      	bcc.n	8006000 <quorem+0x108>
 8005fe8:	f8c8 4010 	str.w	r4, [r8, #16]
 8005fec:	4628      	mov	r0, r5
 8005fee:	b003      	add	sp, #12
 8005ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff4:	6812      	ldr	r2, [r2, #0]
 8005ff6:	3b04      	subs	r3, #4
 8005ff8:	2a00      	cmp	r2, #0
 8005ffa:	d1ca      	bne.n	8005f92 <quorem+0x9a>
 8005ffc:	3c01      	subs	r4, #1
 8005ffe:	e7c5      	b.n	8005f8c <quorem+0x94>
 8006000:	6812      	ldr	r2, [r2, #0]
 8006002:	3b04      	subs	r3, #4
 8006004:	2a00      	cmp	r2, #0
 8006006:	d1ef      	bne.n	8005fe8 <quorem+0xf0>
 8006008:	3c01      	subs	r4, #1
 800600a:	e7ea      	b.n	8005fe2 <quorem+0xea>
 800600c:	2000      	movs	r0, #0
 800600e:	e7ee      	b.n	8005fee <quorem+0xf6>

08006010 <_dtoa_r>:
 8006010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	ec57 6b10 	vmov	r6, r7, d0
 8006018:	b097      	sub	sp, #92	; 0x5c
 800601a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800601c:	9106      	str	r1, [sp, #24]
 800601e:	4604      	mov	r4, r0
 8006020:	920b      	str	r2, [sp, #44]	; 0x2c
 8006022:	9312      	str	r3, [sp, #72]	; 0x48
 8006024:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006028:	e9cd 6700 	strd	r6, r7, [sp]
 800602c:	b93d      	cbnz	r5, 800603e <_dtoa_r+0x2e>
 800602e:	2010      	movs	r0, #16
 8006030:	f000 fdb4 	bl	8006b9c <malloc>
 8006034:	6260      	str	r0, [r4, #36]	; 0x24
 8006036:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800603a:	6005      	str	r5, [r0, #0]
 800603c:	60c5      	str	r5, [r0, #12]
 800603e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006040:	6819      	ldr	r1, [r3, #0]
 8006042:	b151      	cbz	r1, 800605a <_dtoa_r+0x4a>
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	604a      	str	r2, [r1, #4]
 8006048:	2301      	movs	r3, #1
 800604a:	4093      	lsls	r3, r2
 800604c:	608b      	str	r3, [r1, #8]
 800604e:	4620      	mov	r0, r4
 8006050:	f000 fdeb 	bl	8006c2a <_Bfree>
 8006054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006056:	2200      	movs	r2, #0
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	1e3b      	subs	r3, r7, #0
 800605c:	bfbb      	ittet	lt
 800605e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006062:	9301      	strlt	r3, [sp, #4]
 8006064:	2300      	movge	r3, #0
 8006066:	2201      	movlt	r2, #1
 8006068:	bfac      	ite	ge
 800606a:	f8c8 3000 	strge.w	r3, [r8]
 800606e:	f8c8 2000 	strlt.w	r2, [r8]
 8006072:	4baf      	ldr	r3, [pc, #700]	; (8006330 <_dtoa_r+0x320>)
 8006074:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006078:	ea33 0308 	bics.w	r3, r3, r8
 800607c:	d114      	bne.n	80060a8 <_dtoa_r+0x98>
 800607e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006080:	f242 730f 	movw	r3, #9999	; 0x270f
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	9b00      	ldr	r3, [sp, #0]
 8006088:	b923      	cbnz	r3, 8006094 <_dtoa_r+0x84>
 800608a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800608e:	2800      	cmp	r0, #0
 8006090:	f000 8542 	beq.w	8006b18 <_dtoa_r+0xb08>
 8006094:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006096:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006344 <_dtoa_r+0x334>
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 8544 	beq.w	8006b28 <_dtoa_r+0xb18>
 80060a0:	f10b 0303 	add.w	r3, fp, #3
 80060a4:	f000 bd3e 	b.w	8006b24 <_dtoa_r+0xb14>
 80060a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80060ac:	2200      	movs	r2, #0
 80060ae:	2300      	movs	r3, #0
 80060b0:	4630      	mov	r0, r6
 80060b2:	4639      	mov	r1, r7
 80060b4:	f7fa fd10 	bl	8000ad8 <__aeabi_dcmpeq>
 80060b8:	4681      	mov	r9, r0
 80060ba:	b168      	cbz	r0, 80060d8 <_dtoa_r+0xc8>
 80060bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060be:	2301      	movs	r3, #1
 80060c0:	6013      	str	r3, [r2, #0]
 80060c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8524 	beq.w	8006b12 <_dtoa_r+0xb02>
 80060ca:	4b9a      	ldr	r3, [pc, #616]	; (8006334 <_dtoa_r+0x324>)
 80060cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060ce:	f103 3bff 	add.w	fp, r3, #4294967295
 80060d2:	6013      	str	r3, [r2, #0]
 80060d4:	f000 bd28 	b.w	8006b28 <_dtoa_r+0xb18>
 80060d8:	aa14      	add	r2, sp, #80	; 0x50
 80060da:	a915      	add	r1, sp, #84	; 0x54
 80060dc:	ec47 6b10 	vmov	d0, r6, r7
 80060e0:	4620      	mov	r0, r4
 80060e2:	f000 fffa 	bl	80070da <__d2b>
 80060e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80060ea:	9004      	str	r0, [sp, #16]
 80060ec:	2d00      	cmp	r5, #0
 80060ee:	d07c      	beq.n	80061ea <_dtoa_r+0x1da>
 80060f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80060f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80060f8:	46b2      	mov	sl, r6
 80060fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80060fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006102:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006106:	2200      	movs	r2, #0
 8006108:	4b8b      	ldr	r3, [pc, #556]	; (8006338 <_dtoa_r+0x328>)
 800610a:	4650      	mov	r0, sl
 800610c:	4659      	mov	r1, fp
 800610e:	f7fa f8c3 	bl	8000298 <__aeabi_dsub>
 8006112:	a381      	add	r3, pc, #516	; (adr r3, 8006318 <_dtoa_r+0x308>)
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	f7fa fa76 	bl	8000608 <__aeabi_dmul>
 800611c:	a380      	add	r3, pc, #512	; (adr r3, 8006320 <_dtoa_r+0x310>)
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	f7fa f8bb 	bl	800029c <__adddf3>
 8006126:	4606      	mov	r6, r0
 8006128:	4628      	mov	r0, r5
 800612a:	460f      	mov	r7, r1
 800612c:	f7fa fa02 	bl	8000534 <__aeabi_i2d>
 8006130:	a37d      	add	r3, pc, #500	; (adr r3, 8006328 <_dtoa_r+0x318>)
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	f7fa fa67 	bl	8000608 <__aeabi_dmul>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4630      	mov	r0, r6
 8006140:	4639      	mov	r1, r7
 8006142:	f7fa f8ab 	bl	800029c <__adddf3>
 8006146:	4606      	mov	r6, r0
 8006148:	460f      	mov	r7, r1
 800614a:	f7fa fd0d 	bl	8000b68 <__aeabi_d2iz>
 800614e:	2200      	movs	r2, #0
 8006150:	4682      	mov	sl, r0
 8006152:	2300      	movs	r3, #0
 8006154:	4630      	mov	r0, r6
 8006156:	4639      	mov	r1, r7
 8006158:	f7fa fcc8 	bl	8000aec <__aeabi_dcmplt>
 800615c:	b148      	cbz	r0, 8006172 <_dtoa_r+0x162>
 800615e:	4650      	mov	r0, sl
 8006160:	f7fa f9e8 	bl	8000534 <__aeabi_i2d>
 8006164:	4632      	mov	r2, r6
 8006166:	463b      	mov	r3, r7
 8006168:	f7fa fcb6 	bl	8000ad8 <__aeabi_dcmpeq>
 800616c:	b908      	cbnz	r0, 8006172 <_dtoa_r+0x162>
 800616e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006172:	f1ba 0f16 	cmp.w	sl, #22
 8006176:	d859      	bhi.n	800622c <_dtoa_r+0x21c>
 8006178:	4970      	ldr	r1, [pc, #448]	; (800633c <_dtoa_r+0x32c>)
 800617a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800617e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006182:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006186:	f7fa fccf 	bl	8000b28 <__aeabi_dcmpgt>
 800618a:	2800      	cmp	r0, #0
 800618c:	d050      	beq.n	8006230 <_dtoa_r+0x220>
 800618e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006192:	2300      	movs	r3, #0
 8006194:	930f      	str	r3, [sp, #60]	; 0x3c
 8006196:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006198:	1b5d      	subs	r5, r3, r5
 800619a:	f1b5 0801 	subs.w	r8, r5, #1
 800619e:	bf49      	itett	mi
 80061a0:	f1c5 0301 	rsbmi	r3, r5, #1
 80061a4:	2300      	movpl	r3, #0
 80061a6:	9305      	strmi	r3, [sp, #20]
 80061a8:	f04f 0800 	movmi.w	r8, #0
 80061ac:	bf58      	it	pl
 80061ae:	9305      	strpl	r3, [sp, #20]
 80061b0:	f1ba 0f00 	cmp.w	sl, #0
 80061b4:	db3e      	blt.n	8006234 <_dtoa_r+0x224>
 80061b6:	2300      	movs	r3, #0
 80061b8:	44d0      	add	r8, sl
 80061ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80061be:	9307      	str	r3, [sp, #28]
 80061c0:	9b06      	ldr	r3, [sp, #24]
 80061c2:	2b09      	cmp	r3, #9
 80061c4:	f200 8090 	bhi.w	80062e8 <_dtoa_r+0x2d8>
 80061c8:	2b05      	cmp	r3, #5
 80061ca:	bfc4      	itt	gt
 80061cc:	3b04      	subgt	r3, #4
 80061ce:	9306      	strgt	r3, [sp, #24]
 80061d0:	9b06      	ldr	r3, [sp, #24]
 80061d2:	f1a3 0302 	sub.w	r3, r3, #2
 80061d6:	bfcc      	ite	gt
 80061d8:	2500      	movgt	r5, #0
 80061da:	2501      	movle	r5, #1
 80061dc:	2b03      	cmp	r3, #3
 80061de:	f200 808f 	bhi.w	8006300 <_dtoa_r+0x2f0>
 80061e2:	e8df f003 	tbb	[pc, r3]
 80061e6:	7f7d      	.short	0x7f7d
 80061e8:	7131      	.short	0x7131
 80061ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80061ee:	441d      	add	r5, r3
 80061f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80061f4:	2820      	cmp	r0, #32
 80061f6:	dd13      	ble.n	8006220 <_dtoa_r+0x210>
 80061f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80061fc:	9b00      	ldr	r3, [sp, #0]
 80061fe:	fa08 f800 	lsl.w	r8, r8, r0
 8006202:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006206:	fa23 f000 	lsr.w	r0, r3, r0
 800620a:	ea48 0000 	orr.w	r0, r8, r0
 800620e:	f7fa f981 	bl	8000514 <__aeabi_ui2d>
 8006212:	2301      	movs	r3, #1
 8006214:	4682      	mov	sl, r0
 8006216:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800621a:	3d01      	subs	r5, #1
 800621c:	9313      	str	r3, [sp, #76]	; 0x4c
 800621e:	e772      	b.n	8006106 <_dtoa_r+0xf6>
 8006220:	9b00      	ldr	r3, [sp, #0]
 8006222:	f1c0 0020 	rsb	r0, r0, #32
 8006226:	fa03 f000 	lsl.w	r0, r3, r0
 800622a:	e7f0      	b.n	800620e <_dtoa_r+0x1fe>
 800622c:	2301      	movs	r3, #1
 800622e:	e7b1      	b.n	8006194 <_dtoa_r+0x184>
 8006230:	900f      	str	r0, [sp, #60]	; 0x3c
 8006232:	e7b0      	b.n	8006196 <_dtoa_r+0x186>
 8006234:	9b05      	ldr	r3, [sp, #20]
 8006236:	eba3 030a 	sub.w	r3, r3, sl
 800623a:	9305      	str	r3, [sp, #20]
 800623c:	f1ca 0300 	rsb	r3, sl, #0
 8006240:	9307      	str	r3, [sp, #28]
 8006242:	2300      	movs	r3, #0
 8006244:	930e      	str	r3, [sp, #56]	; 0x38
 8006246:	e7bb      	b.n	80061c0 <_dtoa_r+0x1b0>
 8006248:	2301      	movs	r3, #1
 800624a:	930a      	str	r3, [sp, #40]	; 0x28
 800624c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800624e:	2b00      	cmp	r3, #0
 8006250:	dd59      	ble.n	8006306 <_dtoa_r+0x2f6>
 8006252:	9302      	str	r3, [sp, #8]
 8006254:	4699      	mov	r9, r3
 8006256:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006258:	2200      	movs	r2, #0
 800625a:	6072      	str	r2, [r6, #4]
 800625c:	2204      	movs	r2, #4
 800625e:	f102 0014 	add.w	r0, r2, #20
 8006262:	4298      	cmp	r0, r3
 8006264:	6871      	ldr	r1, [r6, #4]
 8006266:	d953      	bls.n	8006310 <_dtoa_r+0x300>
 8006268:	4620      	mov	r0, r4
 800626a:	f000 fcaa 	bl	8006bc2 <_Balloc>
 800626e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006270:	6030      	str	r0, [r6, #0]
 8006272:	f1b9 0f0e 	cmp.w	r9, #14
 8006276:	f8d3 b000 	ldr.w	fp, [r3]
 800627a:	f200 80e6 	bhi.w	800644a <_dtoa_r+0x43a>
 800627e:	2d00      	cmp	r5, #0
 8006280:	f000 80e3 	beq.w	800644a <_dtoa_r+0x43a>
 8006284:	ed9d 7b00 	vldr	d7, [sp]
 8006288:	f1ba 0f00 	cmp.w	sl, #0
 800628c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006290:	dd74      	ble.n	800637c <_dtoa_r+0x36c>
 8006292:	4a2a      	ldr	r2, [pc, #168]	; (800633c <_dtoa_r+0x32c>)
 8006294:	f00a 030f 	and.w	r3, sl, #15
 8006298:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800629c:	ed93 7b00 	vldr	d7, [r3]
 80062a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80062a4:	06f0      	lsls	r0, r6, #27
 80062a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80062aa:	d565      	bpl.n	8006378 <_dtoa_r+0x368>
 80062ac:	4b24      	ldr	r3, [pc, #144]	; (8006340 <_dtoa_r+0x330>)
 80062ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062b6:	f7fa fad1 	bl	800085c <__aeabi_ddiv>
 80062ba:	e9cd 0100 	strd	r0, r1, [sp]
 80062be:	f006 060f 	and.w	r6, r6, #15
 80062c2:	2503      	movs	r5, #3
 80062c4:	4f1e      	ldr	r7, [pc, #120]	; (8006340 <_dtoa_r+0x330>)
 80062c6:	e04c      	b.n	8006362 <_dtoa_r+0x352>
 80062c8:	2301      	movs	r3, #1
 80062ca:	930a      	str	r3, [sp, #40]	; 0x28
 80062cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062ce:	4453      	add	r3, sl
 80062d0:	f103 0901 	add.w	r9, r3, #1
 80062d4:	9302      	str	r3, [sp, #8]
 80062d6:	464b      	mov	r3, r9
 80062d8:	2b01      	cmp	r3, #1
 80062da:	bfb8      	it	lt
 80062dc:	2301      	movlt	r3, #1
 80062de:	e7ba      	b.n	8006256 <_dtoa_r+0x246>
 80062e0:	2300      	movs	r3, #0
 80062e2:	e7b2      	b.n	800624a <_dtoa_r+0x23a>
 80062e4:	2300      	movs	r3, #0
 80062e6:	e7f0      	b.n	80062ca <_dtoa_r+0x2ba>
 80062e8:	2501      	movs	r5, #1
 80062ea:	2300      	movs	r3, #0
 80062ec:	9306      	str	r3, [sp, #24]
 80062ee:	950a      	str	r5, [sp, #40]	; 0x28
 80062f0:	f04f 33ff 	mov.w	r3, #4294967295
 80062f4:	9302      	str	r3, [sp, #8]
 80062f6:	4699      	mov	r9, r3
 80062f8:	2200      	movs	r2, #0
 80062fa:	2312      	movs	r3, #18
 80062fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80062fe:	e7aa      	b.n	8006256 <_dtoa_r+0x246>
 8006300:	2301      	movs	r3, #1
 8006302:	930a      	str	r3, [sp, #40]	; 0x28
 8006304:	e7f4      	b.n	80062f0 <_dtoa_r+0x2e0>
 8006306:	2301      	movs	r3, #1
 8006308:	9302      	str	r3, [sp, #8]
 800630a:	4699      	mov	r9, r3
 800630c:	461a      	mov	r2, r3
 800630e:	e7f5      	b.n	80062fc <_dtoa_r+0x2ec>
 8006310:	3101      	adds	r1, #1
 8006312:	6071      	str	r1, [r6, #4]
 8006314:	0052      	lsls	r2, r2, #1
 8006316:	e7a2      	b.n	800625e <_dtoa_r+0x24e>
 8006318:	636f4361 	.word	0x636f4361
 800631c:	3fd287a7 	.word	0x3fd287a7
 8006320:	8b60c8b3 	.word	0x8b60c8b3
 8006324:	3fc68a28 	.word	0x3fc68a28
 8006328:	509f79fb 	.word	0x509f79fb
 800632c:	3fd34413 	.word	0x3fd34413
 8006330:	7ff00000 	.word	0x7ff00000
 8006334:	08007791 	.word	0x08007791
 8006338:	3ff80000 	.word	0x3ff80000
 800633c:	080077f0 	.word	0x080077f0
 8006340:	080077c8 	.word	0x080077c8
 8006344:	080077bd 	.word	0x080077bd
 8006348:	07f1      	lsls	r1, r6, #31
 800634a:	d508      	bpl.n	800635e <_dtoa_r+0x34e>
 800634c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006354:	f7fa f958 	bl	8000608 <__aeabi_dmul>
 8006358:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800635c:	3501      	adds	r5, #1
 800635e:	1076      	asrs	r6, r6, #1
 8006360:	3708      	adds	r7, #8
 8006362:	2e00      	cmp	r6, #0
 8006364:	d1f0      	bne.n	8006348 <_dtoa_r+0x338>
 8006366:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800636a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800636e:	f7fa fa75 	bl	800085c <__aeabi_ddiv>
 8006372:	e9cd 0100 	strd	r0, r1, [sp]
 8006376:	e01a      	b.n	80063ae <_dtoa_r+0x39e>
 8006378:	2502      	movs	r5, #2
 800637a:	e7a3      	b.n	80062c4 <_dtoa_r+0x2b4>
 800637c:	f000 80a0 	beq.w	80064c0 <_dtoa_r+0x4b0>
 8006380:	f1ca 0600 	rsb	r6, sl, #0
 8006384:	4b9f      	ldr	r3, [pc, #636]	; (8006604 <_dtoa_r+0x5f4>)
 8006386:	4fa0      	ldr	r7, [pc, #640]	; (8006608 <_dtoa_r+0x5f8>)
 8006388:	f006 020f 	and.w	r2, r6, #15
 800638c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006398:	f7fa f936 	bl	8000608 <__aeabi_dmul>
 800639c:	e9cd 0100 	strd	r0, r1, [sp]
 80063a0:	1136      	asrs	r6, r6, #4
 80063a2:	2300      	movs	r3, #0
 80063a4:	2502      	movs	r5, #2
 80063a6:	2e00      	cmp	r6, #0
 80063a8:	d17f      	bne.n	80064aa <_dtoa_r+0x49a>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e1      	bne.n	8006372 <_dtoa_r+0x362>
 80063ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 8087 	beq.w	80064c4 <_dtoa_r+0x4b4>
 80063b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80063ba:	2200      	movs	r2, #0
 80063bc:	4b93      	ldr	r3, [pc, #588]	; (800660c <_dtoa_r+0x5fc>)
 80063be:	4630      	mov	r0, r6
 80063c0:	4639      	mov	r1, r7
 80063c2:	f7fa fb93 	bl	8000aec <__aeabi_dcmplt>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d07c      	beq.n	80064c4 <_dtoa_r+0x4b4>
 80063ca:	f1b9 0f00 	cmp.w	r9, #0
 80063ce:	d079      	beq.n	80064c4 <_dtoa_r+0x4b4>
 80063d0:	9b02      	ldr	r3, [sp, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	dd35      	ble.n	8006442 <_dtoa_r+0x432>
 80063d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80063da:	9308      	str	r3, [sp, #32]
 80063dc:	4639      	mov	r1, r7
 80063de:	2200      	movs	r2, #0
 80063e0:	4b8b      	ldr	r3, [pc, #556]	; (8006610 <_dtoa_r+0x600>)
 80063e2:	4630      	mov	r0, r6
 80063e4:	f7fa f910 	bl	8000608 <__aeabi_dmul>
 80063e8:	e9cd 0100 	strd	r0, r1, [sp]
 80063ec:	9f02      	ldr	r7, [sp, #8]
 80063ee:	3501      	adds	r5, #1
 80063f0:	4628      	mov	r0, r5
 80063f2:	f7fa f89f 	bl	8000534 <__aeabi_i2d>
 80063f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063fa:	f7fa f905 	bl	8000608 <__aeabi_dmul>
 80063fe:	2200      	movs	r2, #0
 8006400:	4b84      	ldr	r3, [pc, #528]	; (8006614 <_dtoa_r+0x604>)
 8006402:	f7f9 ff4b 	bl	800029c <__adddf3>
 8006406:	4605      	mov	r5, r0
 8006408:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800640c:	2f00      	cmp	r7, #0
 800640e:	d15d      	bne.n	80064cc <_dtoa_r+0x4bc>
 8006410:	2200      	movs	r2, #0
 8006412:	4b81      	ldr	r3, [pc, #516]	; (8006618 <_dtoa_r+0x608>)
 8006414:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006418:	f7f9 ff3e 	bl	8000298 <__aeabi_dsub>
 800641c:	462a      	mov	r2, r5
 800641e:	4633      	mov	r3, r6
 8006420:	e9cd 0100 	strd	r0, r1, [sp]
 8006424:	f7fa fb80 	bl	8000b28 <__aeabi_dcmpgt>
 8006428:	2800      	cmp	r0, #0
 800642a:	f040 8288 	bne.w	800693e <_dtoa_r+0x92e>
 800642e:	462a      	mov	r2, r5
 8006430:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006434:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006438:	f7fa fb58 	bl	8000aec <__aeabi_dcmplt>
 800643c:	2800      	cmp	r0, #0
 800643e:	f040 827c 	bne.w	800693a <_dtoa_r+0x92a>
 8006442:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006446:	e9cd 2300 	strd	r2, r3, [sp]
 800644a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800644c:	2b00      	cmp	r3, #0
 800644e:	f2c0 8150 	blt.w	80066f2 <_dtoa_r+0x6e2>
 8006452:	f1ba 0f0e 	cmp.w	sl, #14
 8006456:	f300 814c 	bgt.w	80066f2 <_dtoa_r+0x6e2>
 800645a:	4b6a      	ldr	r3, [pc, #424]	; (8006604 <_dtoa_r+0x5f4>)
 800645c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006460:	ed93 7b00 	vldr	d7, [r3]
 8006464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006466:	2b00      	cmp	r3, #0
 8006468:	ed8d 7b02 	vstr	d7, [sp, #8]
 800646c:	f280 80d8 	bge.w	8006620 <_dtoa_r+0x610>
 8006470:	f1b9 0f00 	cmp.w	r9, #0
 8006474:	f300 80d4 	bgt.w	8006620 <_dtoa_r+0x610>
 8006478:	f040 825e 	bne.w	8006938 <_dtoa_r+0x928>
 800647c:	2200      	movs	r2, #0
 800647e:	4b66      	ldr	r3, [pc, #408]	; (8006618 <_dtoa_r+0x608>)
 8006480:	ec51 0b17 	vmov	r0, r1, d7
 8006484:	f7fa f8c0 	bl	8000608 <__aeabi_dmul>
 8006488:	e9dd 2300 	ldrd	r2, r3, [sp]
 800648c:	f7fa fb42 	bl	8000b14 <__aeabi_dcmpge>
 8006490:	464f      	mov	r7, r9
 8006492:	464e      	mov	r6, r9
 8006494:	2800      	cmp	r0, #0
 8006496:	f040 8234 	bne.w	8006902 <_dtoa_r+0x8f2>
 800649a:	2331      	movs	r3, #49	; 0x31
 800649c:	f10b 0501 	add.w	r5, fp, #1
 80064a0:	f88b 3000 	strb.w	r3, [fp]
 80064a4:	f10a 0a01 	add.w	sl, sl, #1
 80064a8:	e22f      	b.n	800690a <_dtoa_r+0x8fa>
 80064aa:	07f2      	lsls	r2, r6, #31
 80064ac:	d505      	bpl.n	80064ba <_dtoa_r+0x4aa>
 80064ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064b2:	f7fa f8a9 	bl	8000608 <__aeabi_dmul>
 80064b6:	3501      	adds	r5, #1
 80064b8:	2301      	movs	r3, #1
 80064ba:	1076      	asrs	r6, r6, #1
 80064bc:	3708      	adds	r7, #8
 80064be:	e772      	b.n	80063a6 <_dtoa_r+0x396>
 80064c0:	2502      	movs	r5, #2
 80064c2:	e774      	b.n	80063ae <_dtoa_r+0x39e>
 80064c4:	f8cd a020 	str.w	sl, [sp, #32]
 80064c8:	464f      	mov	r7, r9
 80064ca:	e791      	b.n	80063f0 <_dtoa_r+0x3e0>
 80064cc:	4b4d      	ldr	r3, [pc, #308]	; (8006604 <_dtoa_r+0x5f4>)
 80064ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80064d2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80064d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d047      	beq.n	800656c <_dtoa_r+0x55c>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	2000      	movs	r0, #0
 80064e2:	494e      	ldr	r1, [pc, #312]	; (800661c <_dtoa_r+0x60c>)
 80064e4:	f7fa f9ba 	bl	800085c <__aeabi_ddiv>
 80064e8:	462a      	mov	r2, r5
 80064ea:	4633      	mov	r3, r6
 80064ec:	f7f9 fed4 	bl	8000298 <__aeabi_dsub>
 80064f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80064f4:	465d      	mov	r5, fp
 80064f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064fa:	f7fa fb35 	bl	8000b68 <__aeabi_d2iz>
 80064fe:	4606      	mov	r6, r0
 8006500:	f7fa f818 	bl	8000534 <__aeabi_i2d>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	e9dd 0100 	ldrd	r0, r1, [sp]
 800650c:	f7f9 fec4 	bl	8000298 <__aeabi_dsub>
 8006510:	3630      	adds	r6, #48	; 0x30
 8006512:	f805 6b01 	strb.w	r6, [r5], #1
 8006516:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800651a:	e9cd 0100 	strd	r0, r1, [sp]
 800651e:	f7fa fae5 	bl	8000aec <__aeabi_dcmplt>
 8006522:	2800      	cmp	r0, #0
 8006524:	d163      	bne.n	80065ee <_dtoa_r+0x5de>
 8006526:	e9dd 2300 	ldrd	r2, r3, [sp]
 800652a:	2000      	movs	r0, #0
 800652c:	4937      	ldr	r1, [pc, #220]	; (800660c <_dtoa_r+0x5fc>)
 800652e:	f7f9 feb3 	bl	8000298 <__aeabi_dsub>
 8006532:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006536:	f7fa fad9 	bl	8000aec <__aeabi_dcmplt>
 800653a:	2800      	cmp	r0, #0
 800653c:	f040 80b7 	bne.w	80066ae <_dtoa_r+0x69e>
 8006540:	eba5 030b 	sub.w	r3, r5, fp
 8006544:	429f      	cmp	r7, r3
 8006546:	f77f af7c 	ble.w	8006442 <_dtoa_r+0x432>
 800654a:	2200      	movs	r2, #0
 800654c:	4b30      	ldr	r3, [pc, #192]	; (8006610 <_dtoa_r+0x600>)
 800654e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006552:	f7fa f859 	bl	8000608 <__aeabi_dmul>
 8006556:	2200      	movs	r2, #0
 8006558:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800655c:	4b2c      	ldr	r3, [pc, #176]	; (8006610 <_dtoa_r+0x600>)
 800655e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006562:	f7fa f851 	bl	8000608 <__aeabi_dmul>
 8006566:	e9cd 0100 	strd	r0, r1, [sp]
 800656a:	e7c4      	b.n	80064f6 <_dtoa_r+0x4e6>
 800656c:	462a      	mov	r2, r5
 800656e:	4633      	mov	r3, r6
 8006570:	f7fa f84a 	bl	8000608 <__aeabi_dmul>
 8006574:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006578:	eb0b 0507 	add.w	r5, fp, r7
 800657c:	465e      	mov	r6, fp
 800657e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006582:	f7fa faf1 	bl	8000b68 <__aeabi_d2iz>
 8006586:	4607      	mov	r7, r0
 8006588:	f7f9 ffd4 	bl	8000534 <__aeabi_i2d>
 800658c:	3730      	adds	r7, #48	; 0x30
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006596:	f7f9 fe7f 	bl	8000298 <__aeabi_dsub>
 800659a:	f806 7b01 	strb.w	r7, [r6], #1
 800659e:	42ae      	cmp	r6, r5
 80065a0:	e9cd 0100 	strd	r0, r1, [sp]
 80065a4:	f04f 0200 	mov.w	r2, #0
 80065a8:	d126      	bne.n	80065f8 <_dtoa_r+0x5e8>
 80065aa:	4b1c      	ldr	r3, [pc, #112]	; (800661c <_dtoa_r+0x60c>)
 80065ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065b0:	f7f9 fe74 	bl	800029c <__adddf3>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065bc:	f7fa fab4 	bl	8000b28 <__aeabi_dcmpgt>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d174      	bne.n	80066ae <_dtoa_r+0x69e>
 80065c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065c8:	2000      	movs	r0, #0
 80065ca:	4914      	ldr	r1, [pc, #80]	; (800661c <_dtoa_r+0x60c>)
 80065cc:	f7f9 fe64 	bl	8000298 <__aeabi_dsub>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065d8:	f7fa fa88 	bl	8000aec <__aeabi_dcmplt>
 80065dc:	2800      	cmp	r0, #0
 80065de:	f43f af30 	beq.w	8006442 <_dtoa_r+0x432>
 80065e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065e6:	2b30      	cmp	r3, #48	; 0x30
 80065e8:	f105 32ff 	add.w	r2, r5, #4294967295
 80065ec:	d002      	beq.n	80065f4 <_dtoa_r+0x5e4>
 80065ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80065f2:	e04a      	b.n	800668a <_dtoa_r+0x67a>
 80065f4:	4615      	mov	r5, r2
 80065f6:	e7f4      	b.n	80065e2 <_dtoa_r+0x5d2>
 80065f8:	4b05      	ldr	r3, [pc, #20]	; (8006610 <_dtoa_r+0x600>)
 80065fa:	f7fa f805 	bl	8000608 <__aeabi_dmul>
 80065fe:	e9cd 0100 	strd	r0, r1, [sp]
 8006602:	e7bc      	b.n	800657e <_dtoa_r+0x56e>
 8006604:	080077f0 	.word	0x080077f0
 8006608:	080077c8 	.word	0x080077c8
 800660c:	3ff00000 	.word	0x3ff00000
 8006610:	40240000 	.word	0x40240000
 8006614:	401c0000 	.word	0x401c0000
 8006618:	40140000 	.word	0x40140000
 800661c:	3fe00000 	.word	0x3fe00000
 8006620:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006624:	465d      	mov	r5, fp
 8006626:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800662a:	4630      	mov	r0, r6
 800662c:	4639      	mov	r1, r7
 800662e:	f7fa f915 	bl	800085c <__aeabi_ddiv>
 8006632:	f7fa fa99 	bl	8000b68 <__aeabi_d2iz>
 8006636:	4680      	mov	r8, r0
 8006638:	f7f9 ff7c 	bl	8000534 <__aeabi_i2d>
 800663c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006640:	f7f9 ffe2 	bl	8000608 <__aeabi_dmul>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	4630      	mov	r0, r6
 800664a:	4639      	mov	r1, r7
 800664c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006650:	f7f9 fe22 	bl	8000298 <__aeabi_dsub>
 8006654:	f805 6b01 	strb.w	r6, [r5], #1
 8006658:	eba5 060b 	sub.w	r6, r5, fp
 800665c:	45b1      	cmp	r9, r6
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	d139      	bne.n	80066d8 <_dtoa_r+0x6c8>
 8006664:	f7f9 fe1a 	bl	800029c <__adddf3>
 8006668:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800666c:	4606      	mov	r6, r0
 800666e:	460f      	mov	r7, r1
 8006670:	f7fa fa5a 	bl	8000b28 <__aeabi_dcmpgt>
 8006674:	b9c8      	cbnz	r0, 80066aa <_dtoa_r+0x69a>
 8006676:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800667a:	4630      	mov	r0, r6
 800667c:	4639      	mov	r1, r7
 800667e:	f7fa fa2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006682:	b110      	cbz	r0, 800668a <_dtoa_r+0x67a>
 8006684:	f018 0f01 	tst.w	r8, #1
 8006688:	d10f      	bne.n	80066aa <_dtoa_r+0x69a>
 800668a:	9904      	ldr	r1, [sp, #16]
 800668c:	4620      	mov	r0, r4
 800668e:	f000 facc 	bl	8006c2a <_Bfree>
 8006692:	2300      	movs	r3, #0
 8006694:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006696:	702b      	strb	r3, [r5, #0]
 8006698:	f10a 0301 	add.w	r3, sl, #1
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 8241 	beq.w	8006b28 <_dtoa_r+0xb18>
 80066a6:	601d      	str	r5, [r3, #0]
 80066a8:	e23e      	b.n	8006b28 <_dtoa_r+0xb18>
 80066aa:	f8cd a020 	str.w	sl, [sp, #32]
 80066ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80066b2:	2a39      	cmp	r2, #57	; 0x39
 80066b4:	f105 33ff 	add.w	r3, r5, #4294967295
 80066b8:	d108      	bne.n	80066cc <_dtoa_r+0x6bc>
 80066ba:	459b      	cmp	fp, r3
 80066bc:	d10a      	bne.n	80066d4 <_dtoa_r+0x6c4>
 80066be:	9b08      	ldr	r3, [sp, #32]
 80066c0:	3301      	adds	r3, #1
 80066c2:	9308      	str	r3, [sp, #32]
 80066c4:	2330      	movs	r3, #48	; 0x30
 80066c6:	f88b 3000 	strb.w	r3, [fp]
 80066ca:	465b      	mov	r3, fp
 80066cc:	781a      	ldrb	r2, [r3, #0]
 80066ce:	3201      	adds	r2, #1
 80066d0:	701a      	strb	r2, [r3, #0]
 80066d2:	e78c      	b.n	80065ee <_dtoa_r+0x5de>
 80066d4:	461d      	mov	r5, r3
 80066d6:	e7ea      	b.n	80066ae <_dtoa_r+0x69e>
 80066d8:	2200      	movs	r2, #0
 80066da:	4b9b      	ldr	r3, [pc, #620]	; (8006948 <_dtoa_r+0x938>)
 80066dc:	f7f9 ff94 	bl	8000608 <__aeabi_dmul>
 80066e0:	2200      	movs	r2, #0
 80066e2:	2300      	movs	r3, #0
 80066e4:	4606      	mov	r6, r0
 80066e6:	460f      	mov	r7, r1
 80066e8:	f7fa f9f6 	bl	8000ad8 <__aeabi_dcmpeq>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d09a      	beq.n	8006626 <_dtoa_r+0x616>
 80066f0:	e7cb      	b.n	800668a <_dtoa_r+0x67a>
 80066f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066f4:	2a00      	cmp	r2, #0
 80066f6:	f000 808b 	beq.w	8006810 <_dtoa_r+0x800>
 80066fa:	9a06      	ldr	r2, [sp, #24]
 80066fc:	2a01      	cmp	r2, #1
 80066fe:	dc6e      	bgt.n	80067de <_dtoa_r+0x7ce>
 8006700:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006702:	2a00      	cmp	r2, #0
 8006704:	d067      	beq.n	80067d6 <_dtoa_r+0x7c6>
 8006706:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800670a:	9f07      	ldr	r7, [sp, #28]
 800670c:	9d05      	ldr	r5, [sp, #20]
 800670e:	9a05      	ldr	r2, [sp, #20]
 8006710:	2101      	movs	r1, #1
 8006712:	441a      	add	r2, r3
 8006714:	4620      	mov	r0, r4
 8006716:	9205      	str	r2, [sp, #20]
 8006718:	4498      	add	r8, r3
 800671a:	f000 fb26 	bl	8006d6a <__i2b>
 800671e:	4606      	mov	r6, r0
 8006720:	2d00      	cmp	r5, #0
 8006722:	dd0c      	ble.n	800673e <_dtoa_r+0x72e>
 8006724:	f1b8 0f00 	cmp.w	r8, #0
 8006728:	dd09      	ble.n	800673e <_dtoa_r+0x72e>
 800672a:	4545      	cmp	r5, r8
 800672c:	9a05      	ldr	r2, [sp, #20]
 800672e:	462b      	mov	r3, r5
 8006730:	bfa8      	it	ge
 8006732:	4643      	movge	r3, r8
 8006734:	1ad2      	subs	r2, r2, r3
 8006736:	9205      	str	r2, [sp, #20]
 8006738:	1aed      	subs	r5, r5, r3
 800673a:	eba8 0803 	sub.w	r8, r8, r3
 800673e:	9b07      	ldr	r3, [sp, #28]
 8006740:	b1eb      	cbz	r3, 800677e <_dtoa_r+0x76e>
 8006742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006744:	2b00      	cmp	r3, #0
 8006746:	d067      	beq.n	8006818 <_dtoa_r+0x808>
 8006748:	b18f      	cbz	r7, 800676e <_dtoa_r+0x75e>
 800674a:	4631      	mov	r1, r6
 800674c:	463a      	mov	r2, r7
 800674e:	4620      	mov	r0, r4
 8006750:	f000 fbaa 	bl	8006ea8 <__pow5mult>
 8006754:	9a04      	ldr	r2, [sp, #16]
 8006756:	4601      	mov	r1, r0
 8006758:	4606      	mov	r6, r0
 800675a:	4620      	mov	r0, r4
 800675c:	f000 fb0e 	bl	8006d7c <__multiply>
 8006760:	9904      	ldr	r1, [sp, #16]
 8006762:	9008      	str	r0, [sp, #32]
 8006764:	4620      	mov	r0, r4
 8006766:	f000 fa60 	bl	8006c2a <_Bfree>
 800676a:	9b08      	ldr	r3, [sp, #32]
 800676c:	9304      	str	r3, [sp, #16]
 800676e:	9b07      	ldr	r3, [sp, #28]
 8006770:	1bda      	subs	r2, r3, r7
 8006772:	d004      	beq.n	800677e <_dtoa_r+0x76e>
 8006774:	9904      	ldr	r1, [sp, #16]
 8006776:	4620      	mov	r0, r4
 8006778:	f000 fb96 	bl	8006ea8 <__pow5mult>
 800677c:	9004      	str	r0, [sp, #16]
 800677e:	2101      	movs	r1, #1
 8006780:	4620      	mov	r0, r4
 8006782:	f000 faf2 	bl	8006d6a <__i2b>
 8006786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006788:	4607      	mov	r7, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 81d0 	beq.w	8006b30 <_dtoa_r+0xb20>
 8006790:	461a      	mov	r2, r3
 8006792:	4601      	mov	r1, r0
 8006794:	4620      	mov	r0, r4
 8006796:	f000 fb87 	bl	8006ea8 <__pow5mult>
 800679a:	9b06      	ldr	r3, [sp, #24]
 800679c:	2b01      	cmp	r3, #1
 800679e:	4607      	mov	r7, r0
 80067a0:	dc40      	bgt.n	8006824 <_dtoa_r+0x814>
 80067a2:	9b00      	ldr	r3, [sp, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d139      	bne.n	800681c <_dtoa_r+0x80c>
 80067a8:	9b01      	ldr	r3, [sp, #4]
 80067aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d136      	bne.n	8006820 <_dtoa_r+0x810>
 80067b2:	9b01      	ldr	r3, [sp, #4]
 80067b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067b8:	0d1b      	lsrs	r3, r3, #20
 80067ba:	051b      	lsls	r3, r3, #20
 80067bc:	b12b      	cbz	r3, 80067ca <_dtoa_r+0x7ba>
 80067be:	9b05      	ldr	r3, [sp, #20]
 80067c0:	3301      	adds	r3, #1
 80067c2:	9305      	str	r3, [sp, #20]
 80067c4:	f108 0801 	add.w	r8, r8, #1
 80067c8:	2301      	movs	r3, #1
 80067ca:	9307      	str	r3, [sp, #28]
 80067cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d12a      	bne.n	8006828 <_dtoa_r+0x818>
 80067d2:	2001      	movs	r0, #1
 80067d4:	e030      	b.n	8006838 <_dtoa_r+0x828>
 80067d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80067dc:	e795      	b.n	800670a <_dtoa_r+0x6fa>
 80067de:	9b07      	ldr	r3, [sp, #28]
 80067e0:	f109 37ff 	add.w	r7, r9, #4294967295
 80067e4:	42bb      	cmp	r3, r7
 80067e6:	bfbf      	itttt	lt
 80067e8:	9b07      	ldrlt	r3, [sp, #28]
 80067ea:	9707      	strlt	r7, [sp, #28]
 80067ec:	1afa      	sublt	r2, r7, r3
 80067ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80067f0:	bfbb      	ittet	lt
 80067f2:	189b      	addlt	r3, r3, r2
 80067f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80067f6:	1bdf      	subge	r7, r3, r7
 80067f8:	2700      	movlt	r7, #0
 80067fa:	f1b9 0f00 	cmp.w	r9, #0
 80067fe:	bfb5      	itete	lt
 8006800:	9b05      	ldrlt	r3, [sp, #20]
 8006802:	9d05      	ldrge	r5, [sp, #20]
 8006804:	eba3 0509 	sublt.w	r5, r3, r9
 8006808:	464b      	movge	r3, r9
 800680a:	bfb8      	it	lt
 800680c:	2300      	movlt	r3, #0
 800680e:	e77e      	b.n	800670e <_dtoa_r+0x6fe>
 8006810:	9f07      	ldr	r7, [sp, #28]
 8006812:	9d05      	ldr	r5, [sp, #20]
 8006814:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006816:	e783      	b.n	8006720 <_dtoa_r+0x710>
 8006818:	9a07      	ldr	r2, [sp, #28]
 800681a:	e7ab      	b.n	8006774 <_dtoa_r+0x764>
 800681c:	2300      	movs	r3, #0
 800681e:	e7d4      	b.n	80067ca <_dtoa_r+0x7ba>
 8006820:	9b00      	ldr	r3, [sp, #0]
 8006822:	e7d2      	b.n	80067ca <_dtoa_r+0x7ba>
 8006824:	2300      	movs	r3, #0
 8006826:	9307      	str	r3, [sp, #28]
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800682e:	6918      	ldr	r0, [r3, #16]
 8006830:	f000 fa4d 	bl	8006cce <__hi0bits>
 8006834:	f1c0 0020 	rsb	r0, r0, #32
 8006838:	4440      	add	r0, r8
 800683a:	f010 001f 	ands.w	r0, r0, #31
 800683e:	d047      	beq.n	80068d0 <_dtoa_r+0x8c0>
 8006840:	f1c0 0320 	rsb	r3, r0, #32
 8006844:	2b04      	cmp	r3, #4
 8006846:	dd3b      	ble.n	80068c0 <_dtoa_r+0x8b0>
 8006848:	9b05      	ldr	r3, [sp, #20]
 800684a:	f1c0 001c 	rsb	r0, r0, #28
 800684e:	4403      	add	r3, r0
 8006850:	9305      	str	r3, [sp, #20]
 8006852:	4405      	add	r5, r0
 8006854:	4480      	add	r8, r0
 8006856:	9b05      	ldr	r3, [sp, #20]
 8006858:	2b00      	cmp	r3, #0
 800685a:	dd05      	ble.n	8006868 <_dtoa_r+0x858>
 800685c:	461a      	mov	r2, r3
 800685e:	9904      	ldr	r1, [sp, #16]
 8006860:	4620      	mov	r0, r4
 8006862:	f000 fb6f 	bl	8006f44 <__lshift>
 8006866:	9004      	str	r0, [sp, #16]
 8006868:	f1b8 0f00 	cmp.w	r8, #0
 800686c:	dd05      	ble.n	800687a <_dtoa_r+0x86a>
 800686e:	4639      	mov	r1, r7
 8006870:	4642      	mov	r2, r8
 8006872:	4620      	mov	r0, r4
 8006874:	f000 fb66 	bl	8006f44 <__lshift>
 8006878:	4607      	mov	r7, r0
 800687a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800687c:	b353      	cbz	r3, 80068d4 <_dtoa_r+0x8c4>
 800687e:	4639      	mov	r1, r7
 8006880:	9804      	ldr	r0, [sp, #16]
 8006882:	f000 fbb3 	bl	8006fec <__mcmp>
 8006886:	2800      	cmp	r0, #0
 8006888:	da24      	bge.n	80068d4 <_dtoa_r+0x8c4>
 800688a:	2300      	movs	r3, #0
 800688c:	220a      	movs	r2, #10
 800688e:	9904      	ldr	r1, [sp, #16]
 8006890:	4620      	mov	r0, r4
 8006892:	f000 f9e1 	bl	8006c58 <__multadd>
 8006896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006898:	9004      	str	r0, [sp, #16]
 800689a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 814d 	beq.w	8006b3e <_dtoa_r+0xb2e>
 80068a4:	2300      	movs	r3, #0
 80068a6:	4631      	mov	r1, r6
 80068a8:	220a      	movs	r2, #10
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 f9d4 	bl	8006c58 <__multadd>
 80068b0:	9b02      	ldr	r3, [sp, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	4606      	mov	r6, r0
 80068b6:	dc4f      	bgt.n	8006958 <_dtoa_r+0x948>
 80068b8:	9b06      	ldr	r3, [sp, #24]
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	dd4c      	ble.n	8006958 <_dtoa_r+0x948>
 80068be:	e011      	b.n	80068e4 <_dtoa_r+0x8d4>
 80068c0:	d0c9      	beq.n	8006856 <_dtoa_r+0x846>
 80068c2:	9a05      	ldr	r2, [sp, #20]
 80068c4:	331c      	adds	r3, #28
 80068c6:	441a      	add	r2, r3
 80068c8:	9205      	str	r2, [sp, #20]
 80068ca:	441d      	add	r5, r3
 80068cc:	4498      	add	r8, r3
 80068ce:	e7c2      	b.n	8006856 <_dtoa_r+0x846>
 80068d0:	4603      	mov	r3, r0
 80068d2:	e7f6      	b.n	80068c2 <_dtoa_r+0x8b2>
 80068d4:	f1b9 0f00 	cmp.w	r9, #0
 80068d8:	dc38      	bgt.n	800694c <_dtoa_r+0x93c>
 80068da:	9b06      	ldr	r3, [sp, #24]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	dd35      	ble.n	800694c <_dtoa_r+0x93c>
 80068e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80068e4:	9b02      	ldr	r3, [sp, #8]
 80068e6:	b963      	cbnz	r3, 8006902 <_dtoa_r+0x8f2>
 80068e8:	4639      	mov	r1, r7
 80068ea:	2205      	movs	r2, #5
 80068ec:	4620      	mov	r0, r4
 80068ee:	f000 f9b3 	bl	8006c58 <__multadd>
 80068f2:	4601      	mov	r1, r0
 80068f4:	4607      	mov	r7, r0
 80068f6:	9804      	ldr	r0, [sp, #16]
 80068f8:	f000 fb78 	bl	8006fec <__mcmp>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	f73f adcc 	bgt.w	800649a <_dtoa_r+0x48a>
 8006902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006904:	465d      	mov	r5, fp
 8006906:	ea6f 0a03 	mvn.w	sl, r3
 800690a:	f04f 0900 	mov.w	r9, #0
 800690e:	4639      	mov	r1, r7
 8006910:	4620      	mov	r0, r4
 8006912:	f000 f98a 	bl	8006c2a <_Bfree>
 8006916:	2e00      	cmp	r6, #0
 8006918:	f43f aeb7 	beq.w	800668a <_dtoa_r+0x67a>
 800691c:	f1b9 0f00 	cmp.w	r9, #0
 8006920:	d005      	beq.n	800692e <_dtoa_r+0x91e>
 8006922:	45b1      	cmp	r9, r6
 8006924:	d003      	beq.n	800692e <_dtoa_r+0x91e>
 8006926:	4649      	mov	r1, r9
 8006928:	4620      	mov	r0, r4
 800692a:	f000 f97e 	bl	8006c2a <_Bfree>
 800692e:	4631      	mov	r1, r6
 8006930:	4620      	mov	r0, r4
 8006932:	f000 f97a 	bl	8006c2a <_Bfree>
 8006936:	e6a8      	b.n	800668a <_dtoa_r+0x67a>
 8006938:	2700      	movs	r7, #0
 800693a:	463e      	mov	r6, r7
 800693c:	e7e1      	b.n	8006902 <_dtoa_r+0x8f2>
 800693e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006942:	463e      	mov	r6, r7
 8006944:	e5a9      	b.n	800649a <_dtoa_r+0x48a>
 8006946:	bf00      	nop
 8006948:	40240000 	.word	0x40240000
 800694c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800694e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 80fa 	beq.w	8006b4c <_dtoa_r+0xb3c>
 8006958:	2d00      	cmp	r5, #0
 800695a:	dd05      	ble.n	8006968 <_dtoa_r+0x958>
 800695c:	4631      	mov	r1, r6
 800695e:	462a      	mov	r2, r5
 8006960:	4620      	mov	r0, r4
 8006962:	f000 faef 	bl	8006f44 <__lshift>
 8006966:	4606      	mov	r6, r0
 8006968:	9b07      	ldr	r3, [sp, #28]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d04c      	beq.n	8006a08 <_dtoa_r+0x9f8>
 800696e:	6871      	ldr	r1, [r6, #4]
 8006970:	4620      	mov	r0, r4
 8006972:	f000 f926 	bl	8006bc2 <_Balloc>
 8006976:	6932      	ldr	r2, [r6, #16]
 8006978:	3202      	adds	r2, #2
 800697a:	4605      	mov	r5, r0
 800697c:	0092      	lsls	r2, r2, #2
 800697e:	f106 010c 	add.w	r1, r6, #12
 8006982:	300c      	adds	r0, #12
 8006984:	f000 f912 	bl	8006bac <memcpy>
 8006988:	2201      	movs	r2, #1
 800698a:	4629      	mov	r1, r5
 800698c:	4620      	mov	r0, r4
 800698e:	f000 fad9 	bl	8006f44 <__lshift>
 8006992:	9b00      	ldr	r3, [sp, #0]
 8006994:	f8cd b014 	str.w	fp, [sp, #20]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	46b1      	mov	r9, r6
 800699e:	9307      	str	r3, [sp, #28]
 80069a0:	4606      	mov	r6, r0
 80069a2:	4639      	mov	r1, r7
 80069a4:	9804      	ldr	r0, [sp, #16]
 80069a6:	f7ff faa7 	bl	8005ef8 <quorem>
 80069aa:	4649      	mov	r1, r9
 80069ac:	4605      	mov	r5, r0
 80069ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80069b2:	9804      	ldr	r0, [sp, #16]
 80069b4:	f000 fb1a 	bl	8006fec <__mcmp>
 80069b8:	4632      	mov	r2, r6
 80069ba:	9000      	str	r0, [sp, #0]
 80069bc:	4639      	mov	r1, r7
 80069be:	4620      	mov	r0, r4
 80069c0:	f000 fb2e 	bl	8007020 <__mdiff>
 80069c4:	68c3      	ldr	r3, [r0, #12]
 80069c6:	4602      	mov	r2, r0
 80069c8:	bb03      	cbnz	r3, 8006a0c <_dtoa_r+0x9fc>
 80069ca:	4601      	mov	r1, r0
 80069cc:	9008      	str	r0, [sp, #32]
 80069ce:	9804      	ldr	r0, [sp, #16]
 80069d0:	f000 fb0c 	bl	8006fec <__mcmp>
 80069d4:	9a08      	ldr	r2, [sp, #32]
 80069d6:	4603      	mov	r3, r0
 80069d8:	4611      	mov	r1, r2
 80069da:	4620      	mov	r0, r4
 80069dc:	9308      	str	r3, [sp, #32]
 80069de:	f000 f924 	bl	8006c2a <_Bfree>
 80069e2:	9b08      	ldr	r3, [sp, #32]
 80069e4:	b9a3      	cbnz	r3, 8006a10 <_dtoa_r+0xa00>
 80069e6:	9a06      	ldr	r2, [sp, #24]
 80069e8:	b992      	cbnz	r2, 8006a10 <_dtoa_r+0xa00>
 80069ea:	9a07      	ldr	r2, [sp, #28]
 80069ec:	b982      	cbnz	r2, 8006a10 <_dtoa_r+0xa00>
 80069ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80069f2:	d029      	beq.n	8006a48 <_dtoa_r+0xa38>
 80069f4:	9b00      	ldr	r3, [sp, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	dd01      	ble.n	80069fe <_dtoa_r+0x9ee>
 80069fa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80069fe:	9b05      	ldr	r3, [sp, #20]
 8006a00:	1c5d      	adds	r5, r3, #1
 8006a02:	f883 8000 	strb.w	r8, [r3]
 8006a06:	e782      	b.n	800690e <_dtoa_r+0x8fe>
 8006a08:	4630      	mov	r0, r6
 8006a0a:	e7c2      	b.n	8006992 <_dtoa_r+0x982>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e7e3      	b.n	80069d8 <_dtoa_r+0x9c8>
 8006a10:	9a00      	ldr	r2, [sp, #0]
 8006a12:	2a00      	cmp	r2, #0
 8006a14:	db04      	blt.n	8006a20 <_dtoa_r+0xa10>
 8006a16:	d125      	bne.n	8006a64 <_dtoa_r+0xa54>
 8006a18:	9a06      	ldr	r2, [sp, #24]
 8006a1a:	bb1a      	cbnz	r2, 8006a64 <_dtoa_r+0xa54>
 8006a1c:	9a07      	ldr	r2, [sp, #28]
 8006a1e:	bb0a      	cbnz	r2, 8006a64 <_dtoa_r+0xa54>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	ddec      	ble.n	80069fe <_dtoa_r+0x9ee>
 8006a24:	2201      	movs	r2, #1
 8006a26:	9904      	ldr	r1, [sp, #16]
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f000 fa8b 	bl	8006f44 <__lshift>
 8006a2e:	4639      	mov	r1, r7
 8006a30:	9004      	str	r0, [sp, #16]
 8006a32:	f000 fadb 	bl	8006fec <__mcmp>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	dc03      	bgt.n	8006a42 <_dtoa_r+0xa32>
 8006a3a:	d1e0      	bne.n	80069fe <_dtoa_r+0x9ee>
 8006a3c:	f018 0f01 	tst.w	r8, #1
 8006a40:	d0dd      	beq.n	80069fe <_dtoa_r+0x9ee>
 8006a42:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a46:	d1d8      	bne.n	80069fa <_dtoa_r+0x9ea>
 8006a48:	9b05      	ldr	r3, [sp, #20]
 8006a4a:	9a05      	ldr	r2, [sp, #20]
 8006a4c:	1c5d      	adds	r5, r3, #1
 8006a4e:	2339      	movs	r3, #57	; 0x39
 8006a50:	7013      	strb	r3, [r2, #0]
 8006a52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a56:	2b39      	cmp	r3, #57	; 0x39
 8006a58:	f105 32ff 	add.w	r2, r5, #4294967295
 8006a5c:	d04f      	beq.n	8006afe <_dtoa_r+0xaee>
 8006a5e:	3301      	adds	r3, #1
 8006a60:	7013      	strb	r3, [r2, #0]
 8006a62:	e754      	b.n	800690e <_dtoa_r+0x8fe>
 8006a64:	9a05      	ldr	r2, [sp, #20]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f102 0501 	add.w	r5, r2, #1
 8006a6c:	dd06      	ble.n	8006a7c <_dtoa_r+0xa6c>
 8006a6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a72:	d0e9      	beq.n	8006a48 <_dtoa_r+0xa38>
 8006a74:	f108 0801 	add.w	r8, r8, #1
 8006a78:	9b05      	ldr	r3, [sp, #20]
 8006a7a:	e7c2      	b.n	8006a02 <_dtoa_r+0x9f2>
 8006a7c:	9a02      	ldr	r2, [sp, #8]
 8006a7e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006a82:	eba5 030b 	sub.w	r3, r5, fp
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d021      	beq.n	8006ace <_dtoa_r+0xabe>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	220a      	movs	r2, #10
 8006a8e:	9904      	ldr	r1, [sp, #16]
 8006a90:	4620      	mov	r0, r4
 8006a92:	f000 f8e1 	bl	8006c58 <__multadd>
 8006a96:	45b1      	cmp	r9, r6
 8006a98:	9004      	str	r0, [sp, #16]
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	f04f 020a 	mov.w	r2, #10
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	d105      	bne.n	8006ab4 <_dtoa_r+0xaa4>
 8006aa8:	f000 f8d6 	bl	8006c58 <__multadd>
 8006aac:	4681      	mov	r9, r0
 8006aae:	4606      	mov	r6, r0
 8006ab0:	9505      	str	r5, [sp, #20]
 8006ab2:	e776      	b.n	80069a2 <_dtoa_r+0x992>
 8006ab4:	f000 f8d0 	bl	8006c58 <__multadd>
 8006ab8:	4631      	mov	r1, r6
 8006aba:	4681      	mov	r9, r0
 8006abc:	2300      	movs	r3, #0
 8006abe:	220a      	movs	r2, #10
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 f8c9 	bl	8006c58 <__multadd>
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	e7f2      	b.n	8006ab0 <_dtoa_r+0xaa0>
 8006aca:	f04f 0900 	mov.w	r9, #0
 8006ace:	2201      	movs	r2, #1
 8006ad0:	9904      	ldr	r1, [sp, #16]
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f000 fa36 	bl	8006f44 <__lshift>
 8006ad8:	4639      	mov	r1, r7
 8006ada:	9004      	str	r0, [sp, #16]
 8006adc:	f000 fa86 	bl	8006fec <__mcmp>
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	dcb6      	bgt.n	8006a52 <_dtoa_r+0xa42>
 8006ae4:	d102      	bne.n	8006aec <_dtoa_r+0xadc>
 8006ae6:	f018 0f01 	tst.w	r8, #1
 8006aea:	d1b2      	bne.n	8006a52 <_dtoa_r+0xa42>
 8006aec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006af0:	2b30      	cmp	r3, #48	; 0x30
 8006af2:	f105 32ff 	add.w	r2, r5, #4294967295
 8006af6:	f47f af0a 	bne.w	800690e <_dtoa_r+0x8fe>
 8006afa:	4615      	mov	r5, r2
 8006afc:	e7f6      	b.n	8006aec <_dtoa_r+0xadc>
 8006afe:	4593      	cmp	fp, r2
 8006b00:	d105      	bne.n	8006b0e <_dtoa_r+0xafe>
 8006b02:	2331      	movs	r3, #49	; 0x31
 8006b04:	f10a 0a01 	add.w	sl, sl, #1
 8006b08:	f88b 3000 	strb.w	r3, [fp]
 8006b0c:	e6ff      	b.n	800690e <_dtoa_r+0x8fe>
 8006b0e:	4615      	mov	r5, r2
 8006b10:	e79f      	b.n	8006a52 <_dtoa_r+0xa42>
 8006b12:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006b78 <_dtoa_r+0xb68>
 8006b16:	e007      	b.n	8006b28 <_dtoa_r+0xb18>
 8006b18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b1a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006b7c <_dtoa_r+0xb6c>
 8006b1e:	b11b      	cbz	r3, 8006b28 <_dtoa_r+0xb18>
 8006b20:	f10b 0308 	add.w	r3, fp, #8
 8006b24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	4658      	mov	r0, fp
 8006b2a:	b017      	add	sp, #92	; 0x5c
 8006b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b30:	9b06      	ldr	r3, [sp, #24]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	f77f ae35 	ble.w	80067a2 <_dtoa_r+0x792>
 8006b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b3a:	9307      	str	r3, [sp, #28]
 8006b3c:	e649      	b.n	80067d2 <_dtoa_r+0x7c2>
 8006b3e:	9b02      	ldr	r3, [sp, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	dc03      	bgt.n	8006b4c <_dtoa_r+0xb3c>
 8006b44:	9b06      	ldr	r3, [sp, #24]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	f73f aecc 	bgt.w	80068e4 <_dtoa_r+0x8d4>
 8006b4c:	465d      	mov	r5, fp
 8006b4e:	4639      	mov	r1, r7
 8006b50:	9804      	ldr	r0, [sp, #16]
 8006b52:	f7ff f9d1 	bl	8005ef8 <quorem>
 8006b56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006b5a:	f805 8b01 	strb.w	r8, [r5], #1
 8006b5e:	9a02      	ldr	r2, [sp, #8]
 8006b60:	eba5 030b 	sub.w	r3, r5, fp
 8006b64:	429a      	cmp	r2, r3
 8006b66:	ddb0      	ble.n	8006aca <_dtoa_r+0xaba>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	220a      	movs	r2, #10
 8006b6c:	9904      	ldr	r1, [sp, #16]
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f000 f872 	bl	8006c58 <__multadd>
 8006b74:	9004      	str	r0, [sp, #16]
 8006b76:	e7ea      	b.n	8006b4e <_dtoa_r+0xb3e>
 8006b78:	08007790 	.word	0x08007790
 8006b7c:	080077b4 	.word	0x080077b4

08006b80 <_localeconv_r>:
 8006b80:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <_localeconv_r+0x14>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6a18      	ldr	r0, [r3, #32]
 8006b86:	4b04      	ldr	r3, [pc, #16]	; (8006b98 <_localeconv_r+0x18>)
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	bf08      	it	eq
 8006b8c:	4618      	moveq	r0, r3
 8006b8e:	30f0      	adds	r0, #240	; 0xf0
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	20000024 	.word	0x20000024
 8006b98:	20000088 	.word	0x20000088

08006b9c <malloc>:
 8006b9c:	4b02      	ldr	r3, [pc, #8]	; (8006ba8 <malloc+0xc>)
 8006b9e:	4601      	mov	r1, r0
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	f000 bb45 	b.w	8007230 <_malloc_r>
 8006ba6:	bf00      	nop
 8006ba8:	20000024 	.word	0x20000024

08006bac <memcpy>:
 8006bac:	b510      	push	{r4, lr}
 8006bae:	1e43      	subs	r3, r0, #1
 8006bb0:	440a      	add	r2, r1
 8006bb2:	4291      	cmp	r1, r2
 8006bb4:	d100      	bne.n	8006bb8 <memcpy+0xc>
 8006bb6:	bd10      	pop	{r4, pc}
 8006bb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bc0:	e7f7      	b.n	8006bb2 <memcpy+0x6>

08006bc2 <_Balloc>:
 8006bc2:	b570      	push	{r4, r5, r6, lr}
 8006bc4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	460e      	mov	r6, r1
 8006bca:	b93d      	cbnz	r5, 8006bdc <_Balloc+0x1a>
 8006bcc:	2010      	movs	r0, #16
 8006bce:	f7ff ffe5 	bl	8006b9c <malloc>
 8006bd2:	6260      	str	r0, [r4, #36]	; 0x24
 8006bd4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bd8:	6005      	str	r5, [r0, #0]
 8006bda:	60c5      	str	r5, [r0, #12]
 8006bdc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006bde:	68eb      	ldr	r3, [r5, #12]
 8006be0:	b183      	cbz	r3, 8006c04 <_Balloc+0x42>
 8006be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006bea:	b9b8      	cbnz	r0, 8006c1c <_Balloc+0x5a>
 8006bec:	2101      	movs	r1, #1
 8006bee:	fa01 f506 	lsl.w	r5, r1, r6
 8006bf2:	1d6a      	adds	r2, r5, #5
 8006bf4:	0092      	lsls	r2, r2, #2
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f000 fabe 	bl	8007178 <_calloc_r>
 8006bfc:	b160      	cbz	r0, 8006c18 <_Balloc+0x56>
 8006bfe:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006c02:	e00e      	b.n	8006c22 <_Balloc+0x60>
 8006c04:	2221      	movs	r2, #33	; 0x21
 8006c06:	2104      	movs	r1, #4
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f000 fab5 	bl	8007178 <_calloc_r>
 8006c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c10:	60e8      	str	r0, [r5, #12]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1e4      	bne.n	8006be2 <_Balloc+0x20>
 8006c18:	2000      	movs	r0, #0
 8006c1a:	bd70      	pop	{r4, r5, r6, pc}
 8006c1c:	6802      	ldr	r2, [r0, #0]
 8006c1e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006c22:	2300      	movs	r3, #0
 8006c24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c28:	e7f7      	b.n	8006c1a <_Balloc+0x58>

08006c2a <_Bfree>:
 8006c2a:	b570      	push	{r4, r5, r6, lr}
 8006c2c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006c2e:	4606      	mov	r6, r0
 8006c30:	460d      	mov	r5, r1
 8006c32:	b93c      	cbnz	r4, 8006c44 <_Bfree+0x1a>
 8006c34:	2010      	movs	r0, #16
 8006c36:	f7ff ffb1 	bl	8006b9c <malloc>
 8006c3a:	6270      	str	r0, [r6, #36]	; 0x24
 8006c3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c40:	6004      	str	r4, [r0, #0]
 8006c42:	60c4      	str	r4, [r0, #12]
 8006c44:	b13d      	cbz	r5, 8006c56 <_Bfree+0x2c>
 8006c46:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006c48:	686a      	ldr	r2, [r5, #4]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c50:	6029      	str	r1, [r5, #0]
 8006c52:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006c56:	bd70      	pop	{r4, r5, r6, pc}

08006c58 <__multadd>:
 8006c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5c:	690d      	ldr	r5, [r1, #16]
 8006c5e:	461f      	mov	r7, r3
 8006c60:	4606      	mov	r6, r0
 8006c62:	460c      	mov	r4, r1
 8006c64:	f101 0c14 	add.w	ip, r1, #20
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f8dc 0000 	ldr.w	r0, [ip]
 8006c6e:	b281      	uxth	r1, r0
 8006c70:	fb02 7101 	mla	r1, r2, r1, r7
 8006c74:	0c0f      	lsrs	r7, r1, #16
 8006c76:	0c00      	lsrs	r0, r0, #16
 8006c78:	fb02 7000 	mla	r0, r2, r0, r7
 8006c7c:	b289      	uxth	r1, r1
 8006c7e:	3301      	adds	r3, #1
 8006c80:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006c84:	429d      	cmp	r5, r3
 8006c86:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006c8a:	f84c 1b04 	str.w	r1, [ip], #4
 8006c8e:	dcec      	bgt.n	8006c6a <__multadd+0x12>
 8006c90:	b1d7      	cbz	r7, 8006cc8 <__multadd+0x70>
 8006c92:	68a3      	ldr	r3, [r4, #8]
 8006c94:	42ab      	cmp	r3, r5
 8006c96:	dc12      	bgt.n	8006cbe <__multadd+0x66>
 8006c98:	6861      	ldr	r1, [r4, #4]
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	3101      	adds	r1, #1
 8006c9e:	f7ff ff90 	bl	8006bc2 <_Balloc>
 8006ca2:	6922      	ldr	r2, [r4, #16]
 8006ca4:	3202      	adds	r2, #2
 8006ca6:	f104 010c 	add.w	r1, r4, #12
 8006caa:	4680      	mov	r8, r0
 8006cac:	0092      	lsls	r2, r2, #2
 8006cae:	300c      	adds	r0, #12
 8006cb0:	f7ff ff7c 	bl	8006bac <memcpy>
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f7ff ffb7 	bl	8006c2a <_Bfree>
 8006cbc:	4644      	mov	r4, r8
 8006cbe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006cc2:	3501      	adds	r5, #1
 8006cc4:	615f      	str	r7, [r3, #20]
 8006cc6:	6125      	str	r5, [r4, #16]
 8006cc8:	4620      	mov	r0, r4
 8006cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006cce <__hi0bits>:
 8006cce:	0c02      	lsrs	r2, r0, #16
 8006cd0:	0412      	lsls	r2, r2, #16
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	b9b2      	cbnz	r2, 8006d04 <__hi0bits+0x36>
 8006cd6:	0403      	lsls	r3, r0, #16
 8006cd8:	2010      	movs	r0, #16
 8006cda:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006cde:	bf04      	itt	eq
 8006ce0:	021b      	lsleq	r3, r3, #8
 8006ce2:	3008      	addeq	r0, #8
 8006ce4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006ce8:	bf04      	itt	eq
 8006cea:	011b      	lsleq	r3, r3, #4
 8006cec:	3004      	addeq	r0, #4
 8006cee:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006cf2:	bf04      	itt	eq
 8006cf4:	009b      	lsleq	r3, r3, #2
 8006cf6:	3002      	addeq	r0, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	db06      	blt.n	8006d0a <__hi0bits+0x3c>
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	d503      	bpl.n	8006d08 <__hi0bits+0x3a>
 8006d00:	3001      	adds	r0, #1
 8006d02:	4770      	bx	lr
 8006d04:	2000      	movs	r0, #0
 8006d06:	e7e8      	b.n	8006cda <__hi0bits+0xc>
 8006d08:	2020      	movs	r0, #32
 8006d0a:	4770      	bx	lr

08006d0c <__lo0bits>:
 8006d0c:	6803      	ldr	r3, [r0, #0]
 8006d0e:	f013 0207 	ands.w	r2, r3, #7
 8006d12:	4601      	mov	r1, r0
 8006d14:	d00b      	beq.n	8006d2e <__lo0bits+0x22>
 8006d16:	07da      	lsls	r2, r3, #31
 8006d18:	d423      	bmi.n	8006d62 <__lo0bits+0x56>
 8006d1a:	0798      	lsls	r0, r3, #30
 8006d1c:	bf49      	itett	mi
 8006d1e:	085b      	lsrmi	r3, r3, #1
 8006d20:	089b      	lsrpl	r3, r3, #2
 8006d22:	2001      	movmi	r0, #1
 8006d24:	600b      	strmi	r3, [r1, #0]
 8006d26:	bf5c      	itt	pl
 8006d28:	600b      	strpl	r3, [r1, #0]
 8006d2a:	2002      	movpl	r0, #2
 8006d2c:	4770      	bx	lr
 8006d2e:	b298      	uxth	r0, r3
 8006d30:	b9a8      	cbnz	r0, 8006d5e <__lo0bits+0x52>
 8006d32:	0c1b      	lsrs	r3, r3, #16
 8006d34:	2010      	movs	r0, #16
 8006d36:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006d3a:	bf04      	itt	eq
 8006d3c:	0a1b      	lsreq	r3, r3, #8
 8006d3e:	3008      	addeq	r0, #8
 8006d40:	071a      	lsls	r2, r3, #28
 8006d42:	bf04      	itt	eq
 8006d44:	091b      	lsreq	r3, r3, #4
 8006d46:	3004      	addeq	r0, #4
 8006d48:	079a      	lsls	r2, r3, #30
 8006d4a:	bf04      	itt	eq
 8006d4c:	089b      	lsreq	r3, r3, #2
 8006d4e:	3002      	addeq	r0, #2
 8006d50:	07da      	lsls	r2, r3, #31
 8006d52:	d402      	bmi.n	8006d5a <__lo0bits+0x4e>
 8006d54:	085b      	lsrs	r3, r3, #1
 8006d56:	d006      	beq.n	8006d66 <__lo0bits+0x5a>
 8006d58:	3001      	adds	r0, #1
 8006d5a:	600b      	str	r3, [r1, #0]
 8006d5c:	4770      	bx	lr
 8006d5e:	4610      	mov	r0, r2
 8006d60:	e7e9      	b.n	8006d36 <__lo0bits+0x2a>
 8006d62:	2000      	movs	r0, #0
 8006d64:	4770      	bx	lr
 8006d66:	2020      	movs	r0, #32
 8006d68:	4770      	bx	lr

08006d6a <__i2b>:
 8006d6a:	b510      	push	{r4, lr}
 8006d6c:	460c      	mov	r4, r1
 8006d6e:	2101      	movs	r1, #1
 8006d70:	f7ff ff27 	bl	8006bc2 <_Balloc>
 8006d74:	2201      	movs	r2, #1
 8006d76:	6144      	str	r4, [r0, #20]
 8006d78:	6102      	str	r2, [r0, #16]
 8006d7a:	bd10      	pop	{r4, pc}

08006d7c <__multiply>:
 8006d7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d80:	4614      	mov	r4, r2
 8006d82:	690a      	ldr	r2, [r1, #16]
 8006d84:	6923      	ldr	r3, [r4, #16]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	bfb8      	it	lt
 8006d8a:	460b      	movlt	r3, r1
 8006d8c:	4688      	mov	r8, r1
 8006d8e:	bfbc      	itt	lt
 8006d90:	46a0      	movlt	r8, r4
 8006d92:	461c      	movlt	r4, r3
 8006d94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006d98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006d9c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006da0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006da4:	eb07 0609 	add.w	r6, r7, r9
 8006da8:	42b3      	cmp	r3, r6
 8006daa:	bfb8      	it	lt
 8006dac:	3101      	addlt	r1, #1
 8006dae:	f7ff ff08 	bl	8006bc2 <_Balloc>
 8006db2:	f100 0514 	add.w	r5, r0, #20
 8006db6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006dba:	462b      	mov	r3, r5
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	4573      	cmp	r3, lr
 8006dc0:	d316      	bcc.n	8006df0 <__multiply+0x74>
 8006dc2:	f104 0214 	add.w	r2, r4, #20
 8006dc6:	f108 0114 	add.w	r1, r8, #20
 8006dca:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006dce:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	9b00      	ldr	r3, [sp, #0]
 8006dd6:	9201      	str	r2, [sp, #4]
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d80c      	bhi.n	8006df6 <__multiply+0x7a>
 8006ddc:	2e00      	cmp	r6, #0
 8006dde:	dd03      	ble.n	8006de8 <__multiply+0x6c>
 8006de0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d05d      	beq.n	8006ea4 <__multiply+0x128>
 8006de8:	6106      	str	r6, [r0, #16]
 8006dea:	b003      	add	sp, #12
 8006dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df0:	f843 2b04 	str.w	r2, [r3], #4
 8006df4:	e7e3      	b.n	8006dbe <__multiply+0x42>
 8006df6:	f8b2 b000 	ldrh.w	fp, [r2]
 8006dfa:	f1bb 0f00 	cmp.w	fp, #0
 8006dfe:	d023      	beq.n	8006e48 <__multiply+0xcc>
 8006e00:	4689      	mov	r9, r1
 8006e02:	46ac      	mov	ip, r5
 8006e04:	f04f 0800 	mov.w	r8, #0
 8006e08:	f859 4b04 	ldr.w	r4, [r9], #4
 8006e0c:	f8dc a000 	ldr.w	sl, [ip]
 8006e10:	b2a3      	uxth	r3, r4
 8006e12:	fa1f fa8a 	uxth.w	sl, sl
 8006e16:	fb0b a303 	mla	r3, fp, r3, sl
 8006e1a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006e1e:	f8dc 4000 	ldr.w	r4, [ip]
 8006e22:	4443      	add	r3, r8
 8006e24:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006e28:	fb0b 840a 	mla	r4, fp, sl, r8
 8006e2c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006e30:	46e2      	mov	sl, ip
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006e38:	454f      	cmp	r7, r9
 8006e3a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006e3e:	f84a 3b04 	str.w	r3, [sl], #4
 8006e42:	d82b      	bhi.n	8006e9c <__multiply+0x120>
 8006e44:	f8cc 8004 	str.w	r8, [ip, #4]
 8006e48:	9b01      	ldr	r3, [sp, #4]
 8006e4a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006e4e:	3204      	adds	r2, #4
 8006e50:	f1ba 0f00 	cmp.w	sl, #0
 8006e54:	d020      	beq.n	8006e98 <__multiply+0x11c>
 8006e56:	682b      	ldr	r3, [r5, #0]
 8006e58:	4689      	mov	r9, r1
 8006e5a:	46a8      	mov	r8, r5
 8006e5c:	f04f 0b00 	mov.w	fp, #0
 8006e60:	f8b9 c000 	ldrh.w	ip, [r9]
 8006e64:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006e68:	fb0a 440c 	mla	r4, sl, ip, r4
 8006e6c:	445c      	add	r4, fp
 8006e6e:	46c4      	mov	ip, r8
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006e76:	f84c 3b04 	str.w	r3, [ip], #4
 8006e7a:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e7e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006e82:	0c1b      	lsrs	r3, r3, #16
 8006e84:	fb0a b303 	mla	r3, sl, r3, fp
 8006e88:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006e8c:	454f      	cmp	r7, r9
 8006e8e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006e92:	d805      	bhi.n	8006ea0 <__multiply+0x124>
 8006e94:	f8c8 3004 	str.w	r3, [r8, #4]
 8006e98:	3504      	adds	r5, #4
 8006e9a:	e79b      	b.n	8006dd4 <__multiply+0x58>
 8006e9c:	46d4      	mov	ip, sl
 8006e9e:	e7b3      	b.n	8006e08 <__multiply+0x8c>
 8006ea0:	46e0      	mov	r8, ip
 8006ea2:	e7dd      	b.n	8006e60 <__multiply+0xe4>
 8006ea4:	3e01      	subs	r6, #1
 8006ea6:	e799      	b.n	8006ddc <__multiply+0x60>

08006ea8 <__pow5mult>:
 8006ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eac:	4615      	mov	r5, r2
 8006eae:	f012 0203 	ands.w	r2, r2, #3
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460f      	mov	r7, r1
 8006eb6:	d007      	beq.n	8006ec8 <__pow5mult+0x20>
 8006eb8:	3a01      	subs	r2, #1
 8006eba:	4c21      	ldr	r4, [pc, #132]	; (8006f40 <__pow5mult+0x98>)
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ec2:	f7ff fec9 	bl	8006c58 <__multadd>
 8006ec6:	4607      	mov	r7, r0
 8006ec8:	10ad      	asrs	r5, r5, #2
 8006eca:	d035      	beq.n	8006f38 <__pow5mult+0x90>
 8006ecc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006ece:	b93c      	cbnz	r4, 8006ee0 <__pow5mult+0x38>
 8006ed0:	2010      	movs	r0, #16
 8006ed2:	f7ff fe63 	bl	8006b9c <malloc>
 8006ed6:	6270      	str	r0, [r6, #36]	; 0x24
 8006ed8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006edc:	6004      	str	r4, [r0, #0]
 8006ede:	60c4      	str	r4, [r0, #12]
 8006ee0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ee4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ee8:	b94c      	cbnz	r4, 8006efe <__pow5mult+0x56>
 8006eea:	f240 2171 	movw	r1, #625	; 0x271
 8006eee:	4630      	mov	r0, r6
 8006ef0:	f7ff ff3b 	bl	8006d6a <__i2b>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006efa:	4604      	mov	r4, r0
 8006efc:	6003      	str	r3, [r0, #0]
 8006efe:	f04f 0800 	mov.w	r8, #0
 8006f02:	07eb      	lsls	r3, r5, #31
 8006f04:	d50a      	bpl.n	8006f1c <__pow5mult+0x74>
 8006f06:	4639      	mov	r1, r7
 8006f08:	4622      	mov	r2, r4
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f7ff ff36 	bl	8006d7c <__multiply>
 8006f10:	4639      	mov	r1, r7
 8006f12:	4681      	mov	r9, r0
 8006f14:	4630      	mov	r0, r6
 8006f16:	f7ff fe88 	bl	8006c2a <_Bfree>
 8006f1a:	464f      	mov	r7, r9
 8006f1c:	106d      	asrs	r5, r5, #1
 8006f1e:	d00b      	beq.n	8006f38 <__pow5mult+0x90>
 8006f20:	6820      	ldr	r0, [r4, #0]
 8006f22:	b938      	cbnz	r0, 8006f34 <__pow5mult+0x8c>
 8006f24:	4622      	mov	r2, r4
 8006f26:	4621      	mov	r1, r4
 8006f28:	4630      	mov	r0, r6
 8006f2a:	f7ff ff27 	bl	8006d7c <__multiply>
 8006f2e:	6020      	str	r0, [r4, #0]
 8006f30:	f8c0 8000 	str.w	r8, [r0]
 8006f34:	4604      	mov	r4, r0
 8006f36:	e7e4      	b.n	8006f02 <__pow5mult+0x5a>
 8006f38:	4638      	mov	r0, r7
 8006f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f3e:	bf00      	nop
 8006f40:	080078b8 	.word	0x080078b8

08006f44 <__lshift>:
 8006f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f48:	460c      	mov	r4, r1
 8006f4a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	6849      	ldr	r1, [r1, #4]
 8006f52:	eb0a 0903 	add.w	r9, sl, r3
 8006f56:	68a3      	ldr	r3, [r4, #8]
 8006f58:	4607      	mov	r7, r0
 8006f5a:	4616      	mov	r6, r2
 8006f5c:	f109 0501 	add.w	r5, r9, #1
 8006f60:	42ab      	cmp	r3, r5
 8006f62:	db32      	blt.n	8006fca <__lshift+0x86>
 8006f64:	4638      	mov	r0, r7
 8006f66:	f7ff fe2c 	bl	8006bc2 <_Balloc>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	4680      	mov	r8, r0
 8006f6e:	f100 0114 	add.w	r1, r0, #20
 8006f72:	461a      	mov	r2, r3
 8006f74:	4553      	cmp	r3, sl
 8006f76:	db2b      	blt.n	8006fd0 <__lshift+0x8c>
 8006f78:	6920      	ldr	r0, [r4, #16]
 8006f7a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f7e:	f104 0314 	add.w	r3, r4, #20
 8006f82:	f016 021f 	ands.w	r2, r6, #31
 8006f86:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f8a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f8e:	d025      	beq.n	8006fdc <__lshift+0x98>
 8006f90:	f1c2 0e20 	rsb	lr, r2, #32
 8006f94:	2000      	movs	r0, #0
 8006f96:	681e      	ldr	r6, [r3, #0]
 8006f98:	468a      	mov	sl, r1
 8006f9a:	4096      	lsls	r6, r2
 8006f9c:	4330      	orrs	r0, r6
 8006f9e:	f84a 0b04 	str.w	r0, [sl], #4
 8006fa2:	f853 0b04 	ldr.w	r0, [r3], #4
 8006fa6:	459c      	cmp	ip, r3
 8006fa8:	fa20 f00e 	lsr.w	r0, r0, lr
 8006fac:	d814      	bhi.n	8006fd8 <__lshift+0x94>
 8006fae:	6048      	str	r0, [r1, #4]
 8006fb0:	b108      	cbz	r0, 8006fb6 <__lshift+0x72>
 8006fb2:	f109 0502 	add.w	r5, r9, #2
 8006fb6:	3d01      	subs	r5, #1
 8006fb8:	4638      	mov	r0, r7
 8006fba:	f8c8 5010 	str.w	r5, [r8, #16]
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	f7ff fe33 	bl	8006c2a <_Bfree>
 8006fc4:	4640      	mov	r0, r8
 8006fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fca:	3101      	adds	r1, #1
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	e7c7      	b.n	8006f60 <__lshift+0x1c>
 8006fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	e7cd      	b.n	8006f74 <__lshift+0x30>
 8006fd8:	4651      	mov	r1, sl
 8006fda:	e7dc      	b.n	8006f96 <__lshift+0x52>
 8006fdc:	3904      	subs	r1, #4
 8006fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe2:	f841 2f04 	str.w	r2, [r1, #4]!
 8006fe6:	459c      	cmp	ip, r3
 8006fe8:	d8f9      	bhi.n	8006fde <__lshift+0x9a>
 8006fea:	e7e4      	b.n	8006fb6 <__lshift+0x72>

08006fec <__mcmp>:
 8006fec:	6903      	ldr	r3, [r0, #16]
 8006fee:	690a      	ldr	r2, [r1, #16]
 8006ff0:	1a9b      	subs	r3, r3, r2
 8006ff2:	b530      	push	{r4, r5, lr}
 8006ff4:	d10c      	bne.n	8007010 <__mcmp+0x24>
 8006ff6:	0092      	lsls	r2, r2, #2
 8006ff8:	3014      	adds	r0, #20
 8006ffa:	3114      	adds	r1, #20
 8006ffc:	1884      	adds	r4, r0, r2
 8006ffe:	4411      	add	r1, r2
 8007000:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007004:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007008:	4295      	cmp	r5, r2
 800700a:	d003      	beq.n	8007014 <__mcmp+0x28>
 800700c:	d305      	bcc.n	800701a <__mcmp+0x2e>
 800700e:	2301      	movs	r3, #1
 8007010:	4618      	mov	r0, r3
 8007012:	bd30      	pop	{r4, r5, pc}
 8007014:	42a0      	cmp	r0, r4
 8007016:	d3f3      	bcc.n	8007000 <__mcmp+0x14>
 8007018:	e7fa      	b.n	8007010 <__mcmp+0x24>
 800701a:	f04f 33ff 	mov.w	r3, #4294967295
 800701e:	e7f7      	b.n	8007010 <__mcmp+0x24>

08007020 <__mdiff>:
 8007020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007024:	460d      	mov	r5, r1
 8007026:	4607      	mov	r7, r0
 8007028:	4611      	mov	r1, r2
 800702a:	4628      	mov	r0, r5
 800702c:	4614      	mov	r4, r2
 800702e:	f7ff ffdd 	bl	8006fec <__mcmp>
 8007032:	1e06      	subs	r6, r0, #0
 8007034:	d108      	bne.n	8007048 <__mdiff+0x28>
 8007036:	4631      	mov	r1, r6
 8007038:	4638      	mov	r0, r7
 800703a:	f7ff fdc2 	bl	8006bc2 <_Balloc>
 800703e:	2301      	movs	r3, #1
 8007040:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007048:	bfa4      	itt	ge
 800704a:	4623      	movge	r3, r4
 800704c:	462c      	movge	r4, r5
 800704e:	4638      	mov	r0, r7
 8007050:	6861      	ldr	r1, [r4, #4]
 8007052:	bfa6      	itte	ge
 8007054:	461d      	movge	r5, r3
 8007056:	2600      	movge	r6, #0
 8007058:	2601      	movlt	r6, #1
 800705a:	f7ff fdb2 	bl	8006bc2 <_Balloc>
 800705e:	692b      	ldr	r3, [r5, #16]
 8007060:	60c6      	str	r6, [r0, #12]
 8007062:	6926      	ldr	r6, [r4, #16]
 8007064:	f105 0914 	add.w	r9, r5, #20
 8007068:	f104 0214 	add.w	r2, r4, #20
 800706c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007070:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007074:	f100 0514 	add.w	r5, r0, #20
 8007078:	f04f 0e00 	mov.w	lr, #0
 800707c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007080:	f859 4b04 	ldr.w	r4, [r9], #4
 8007084:	fa1e f18a 	uxtah	r1, lr, sl
 8007088:	b2a3      	uxth	r3, r4
 800708a:	1ac9      	subs	r1, r1, r3
 800708c:	0c23      	lsrs	r3, r4, #16
 800708e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007092:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007096:	b289      	uxth	r1, r1
 8007098:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800709c:	45c8      	cmp	r8, r9
 800709e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80070a2:	4694      	mov	ip, r2
 80070a4:	f845 3b04 	str.w	r3, [r5], #4
 80070a8:	d8e8      	bhi.n	800707c <__mdiff+0x5c>
 80070aa:	45bc      	cmp	ip, r7
 80070ac:	d304      	bcc.n	80070b8 <__mdiff+0x98>
 80070ae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80070b2:	b183      	cbz	r3, 80070d6 <__mdiff+0xb6>
 80070b4:	6106      	str	r6, [r0, #16]
 80070b6:	e7c5      	b.n	8007044 <__mdiff+0x24>
 80070b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80070bc:	fa1e f381 	uxtah	r3, lr, r1
 80070c0:	141a      	asrs	r2, r3, #16
 80070c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070cc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80070d0:	f845 3b04 	str.w	r3, [r5], #4
 80070d4:	e7e9      	b.n	80070aa <__mdiff+0x8a>
 80070d6:	3e01      	subs	r6, #1
 80070d8:	e7e9      	b.n	80070ae <__mdiff+0x8e>

080070da <__d2b>:
 80070da:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070de:	460e      	mov	r6, r1
 80070e0:	2101      	movs	r1, #1
 80070e2:	ec59 8b10 	vmov	r8, r9, d0
 80070e6:	4615      	mov	r5, r2
 80070e8:	f7ff fd6b 	bl	8006bc2 <_Balloc>
 80070ec:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80070f0:	4607      	mov	r7, r0
 80070f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070f6:	bb34      	cbnz	r4, 8007146 <__d2b+0x6c>
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	f1b8 0300 	subs.w	r3, r8, #0
 80070fe:	d027      	beq.n	8007150 <__d2b+0x76>
 8007100:	a802      	add	r0, sp, #8
 8007102:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007106:	f7ff fe01 	bl	8006d0c <__lo0bits>
 800710a:	9900      	ldr	r1, [sp, #0]
 800710c:	b1f0      	cbz	r0, 800714c <__d2b+0x72>
 800710e:	9a01      	ldr	r2, [sp, #4]
 8007110:	f1c0 0320 	rsb	r3, r0, #32
 8007114:	fa02 f303 	lsl.w	r3, r2, r3
 8007118:	430b      	orrs	r3, r1
 800711a:	40c2      	lsrs	r2, r0
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	9201      	str	r2, [sp, #4]
 8007120:	9b01      	ldr	r3, [sp, #4]
 8007122:	61bb      	str	r3, [r7, #24]
 8007124:	2b00      	cmp	r3, #0
 8007126:	bf14      	ite	ne
 8007128:	2102      	movne	r1, #2
 800712a:	2101      	moveq	r1, #1
 800712c:	6139      	str	r1, [r7, #16]
 800712e:	b1c4      	cbz	r4, 8007162 <__d2b+0x88>
 8007130:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007134:	4404      	add	r4, r0
 8007136:	6034      	str	r4, [r6, #0]
 8007138:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800713c:	6028      	str	r0, [r5, #0]
 800713e:	4638      	mov	r0, r7
 8007140:	b003      	add	sp, #12
 8007142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800714a:	e7d5      	b.n	80070f8 <__d2b+0x1e>
 800714c:	6179      	str	r1, [r7, #20]
 800714e:	e7e7      	b.n	8007120 <__d2b+0x46>
 8007150:	a801      	add	r0, sp, #4
 8007152:	f7ff fddb 	bl	8006d0c <__lo0bits>
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	617b      	str	r3, [r7, #20]
 800715a:	2101      	movs	r1, #1
 800715c:	6139      	str	r1, [r7, #16]
 800715e:	3020      	adds	r0, #32
 8007160:	e7e5      	b.n	800712e <__d2b+0x54>
 8007162:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007166:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800716a:	6030      	str	r0, [r6, #0]
 800716c:	6918      	ldr	r0, [r3, #16]
 800716e:	f7ff fdae 	bl	8006cce <__hi0bits>
 8007172:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007176:	e7e1      	b.n	800713c <__d2b+0x62>

08007178 <_calloc_r>:
 8007178:	b538      	push	{r3, r4, r5, lr}
 800717a:	fb02 f401 	mul.w	r4, r2, r1
 800717e:	4621      	mov	r1, r4
 8007180:	f000 f856 	bl	8007230 <_malloc_r>
 8007184:	4605      	mov	r5, r0
 8007186:	b118      	cbz	r0, 8007190 <_calloc_r+0x18>
 8007188:	4622      	mov	r2, r4
 800718a:	2100      	movs	r1, #0
 800718c:	f7fe fa30 	bl	80055f0 <memset>
 8007190:	4628      	mov	r0, r5
 8007192:	bd38      	pop	{r3, r4, r5, pc}

08007194 <_free_r>:
 8007194:	b538      	push	{r3, r4, r5, lr}
 8007196:	4605      	mov	r5, r0
 8007198:	2900      	cmp	r1, #0
 800719a:	d045      	beq.n	8007228 <_free_r+0x94>
 800719c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071a0:	1f0c      	subs	r4, r1, #4
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	bfb8      	it	lt
 80071a6:	18e4      	addlt	r4, r4, r3
 80071a8:	f000 fa29 	bl	80075fe <__malloc_lock>
 80071ac:	4a1f      	ldr	r2, [pc, #124]	; (800722c <_free_r+0x98>)
 80071ae:	6813      	ldr	r3, [r2, #0]
 80071b0:	4610      	mov	r0, r2
 80071b2:	b933      	cbnz	r3, 80071c2 <_free_r+0x2e>
 80071b4:	6063      	str	r3, [r4, #4]
 80071b6:	6014      	str	r4, [r2, #0]
 80071b8:	4628      	mov	r0, r5
 80071ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071be:	f000 ba1f 	b.w	8007600 <__malloc_unlock>
 80071c2:	42a3      	cmp	r3, r4
 80071c4:	d90c      	bls.n	80071e0 <_free_r+0x4c>
 80071c6:	6821      	ldr	r1, [r4, #0]
 80071c8:	1862      	adds	r2, r4, r1
 80071ca:	4293      	cmp	r3, r2
 80071cc:	bf04      	itt	eq
 80071ce:	681a      	ldreq	r2, [r3, #0]
 80071d0:	685b      	ldreq	r3, [r3, #4]
 80071d2:	6063      	str	r3, [r4, #4]
 80071d4:	bf04      	itt	eq
 80071d6:	1852      	addeq	r2, r2, r1
 80071d8:	6022      	streq	r2, [r4, #0]
 80071da:	6004      	str	r4, [r0, #0]
 80071dc:	e7ec      	b.n	80071b8 <_free_r+0x24>
 80071de:	4613      	mov	r3, r2
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	b10a      	cbz	r2, 80071e8 <_free_r+0x54>
 80071e4:	42a2      	cmp	r2, r4
 80071e6:	d9fa      	bls.n	80071de <_free_r+0x4a>
 80071e8:	6819      	ldr	r1, [r3, #0]
 80071ea:	1858      	adds	r0, r3, r1
 80071ec:	42a0      	cmp	r0, r4
 80071ee:	d10b      	bne.n	8007208 <_free_r+0x74>
 80071f0:	6820      	ldr	r0, [r4, #0]
 80071f2:	4401      	add	r1, r0
 80071f4:	1858      	adds	r0, r3, r1
 80071f6:	4282      	cmp	r2, r0
 80071f8:	6019      	str	r1, [r3, #0]
 80071fa:	d1dd      	bne.n	80071b8 <_free_r+0x24>
 80071fc:	6810      	ldr	r0, [r2, #0]
 80071fe:	6852      	ldr	r2, [r2, #4]
 8007200:	605a      	str	r2, [r3, #4]
 8007202:	4401      	add	r1, r0
 8007204:	6019      	str	r1, [r3, #0]
 8007206:	e7d7      	b.n	80071b8 <_free_r+0x24>
 8007208:	d902      	bls.n	8007210 <_free_r+0x7c>
 800720a:	230c      	movs	r3, #12
 800720c:	602b      	str	r3, [r5, #0]
 800720e:	e7d3      	b.n	80071b8 <_free_r+0x24>
 8007210:	6820      	ldr	r0, [r4, #0]
 8007212:	1821      	adds	r1, r4, r0
 8007214:	428a      	cmp	r2, r1
 8007216:	bf04      	itt	eq
 8007218:	6811      	ldreq	r1, [r2, #0]
 800721a:	6852      	ldreq	r2, [r2, #4]
 800721c:	6062      	str	r2, [r4, #4]
 800721e:	bf04      	itt	eq
 8007220:	1809      	addeq	r1, r1, r0
 8007222:	6021      	streq	r1, [r4, #0]
 8007224:	605c      	str	r4, [r3, #4]
 8007226:	e7c7      	b.n	80071b8 <_free_r+0x24>
 8007228:	bd38      	pop	{r3, r4, r5, pc}
 800722a:	bf00      	nop
 800722c:	2000027c 	.word	0x2000027c

08007230 <_malloc_r>:
 8007230:	b570      	push	{r4, r5, r6, lr}
 8007232:	1ccd      	adds	r5, r1, #3
 8007234:	f025 0503 	bic.w	r5, r5, #3
 8007238:	3508      	adds	r5, #8
 800723a:	2d0c      	cmp	r5, #12
 800723c:	bf38      	it	cc
 800723e:	250c      	movcc	r5, #12
 8007240:	2d00      	cmp	r5, #0
 8007242:	4606      	mov	r6, r0
 8007244:	db01      	blt.n	800724a <_malloc_r+0x1a>
 8007246:	42a9      	cmp	r1, r5
 8007248:	d903      	bls.n	8007252 <_malloc_r+0x22>
 800724a:	230c      	movs	r3, #12
 800724c:	6033      	str	r3, [r6, #0]
 800724e:	2000      	movs	r0, #0
 8007250:	bd70      	pop	{r4, r5, r6, pc}
 8007252:	f000 f9d4 	bl	80075fe <__malloc_lock>
 8007256:	4a21      	ldr	r2, [pc, #132]	; (80072dc <_malloc_r+0xac>)
 8007258:	6814      	ldr	r4, [r2, #0]
 800725a:	4621      	mov	r1, r4
 800725c:	b991      	cbnz	r1, 8007284 <_malloc_r+0x54>
 800725e:	4c20      	ldr	r4, [pc, #128]	; (80072e0 <_malloc_r+0xb0>)
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	b91b      	cbnz	r3, 800726c <_malloc_r+0x3c>
 8007264:	4630      	mov	r0, r6
 8007266:	f000 f98f 	bl	8007588 <_sbrk_r>
 800726a:	6020      	str	r0, [r4, #0]
 800726c:	4629      	mov	r1, r5
 800726e:	4630      	mov	r0, r6
 8007270:	f000 f98a 	bl	8007588 <_sbrk_r>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	d124      	bne.n	80072c2 <_malloc_r+0x92>
 8007278:	230c      	movs	r3, #12
 800727a:	6033      	str	r3, [r6, #0]
 800727c:	4630      	mov	r0, r6
 800727e:	f000 f9bf 	bl	8007600 <__malloc_unlock>
 8007282:	e7e4      	b.n	800724e <_malloc_r+0x1e>
 8007284:	680b      	ldr	r3, [r1, #0]
 8007286:	1b5b      	subs	r3, r3, r5
 8007288:	d418      	bmi.n	80072bc <_malloc_r+0x8c>
 800728a:	2b0b      	cmp	r3, #11
 800728c:	d90f      	bls.n	80072ae <_malloc_r+0x7e>
 800728e:	600b      	str	r3, [r1, #0]
 8007290:	50cd      	str	r5, [r1, r3]
 8007292:	18cc      	adds	r4, r1, r3
 8007294:	4630      	mov	r0, r6
 8007296:	f000 f9b3 	bl	8007600 <__malloc_unlock>
 800729a:	f104 000b 	add.w	r0, r4, #11
 800729e:	1d23      	adds	r3, r4, #4
 80072a0:	f020 0007 	bic.w	r0, r0, #7
 80072a4:	1ac3      	subs	r3, r0, r3
 80072a6:	d0d3      	beq.n	8007250 <_malloc_r+0x20>
 80072a8:	425a      	negs	r2, r3
 80072aa:	50e2      	str	r2, [r4, r3]
 80072ac:	e7d0      	b.n	8007250 <_malloc_r+0x20>
 80072ae:	428c      	cmp	r4, r1
 80072b0:	684b      	ldr	r3, [r1, #4]
 80072b2:	bf16      	itet	ne
 80072b4:	6063      	strne	r3, [r4, #4]
 80072b6:	6013      	streq	r3, [r2, #0]
 80072b8:	460c      	movne	r4, r1
 80072ba:	e7eb      	b.n	8007294 <_malloc_r+0x64>
 80072bc:	460c      	mov	r4, r1
 80072be:	6849      	ldr	r1, [r1, #4]
 80072c0:	e7cc      	b.n	800725c <_malloc_r+0x2c>
 80072c2:	1cc4      	adds	r4, r0, #3
 80072c4:	f024 0403 	bic.w	r4, r4, #3
 80072c8:	42a0      	cmp	r0, r4
 80072ca:	d005      	beq.n	80072d8 <_malloc_r+0xa8>
 80072cc:	1a21      	subs	r1, r4, r0
 80072ce:	4630      	mov	r0, r6
 80072d0:	f000 f95a 	bl	8007588 <_sbrk_r>
 80072d4:	3001      	adds	r0, #1
 80072d6:	d0cf      	beq.n	8007278 <_malloc_r+0x48>
 80072d8:	6025      	str	r5, [r4, #0]
 80072da:	e7db      	b.n	8007294 <_malloc_r+0x64>
 80072dc:	2000027c 	.word	0x2000027c
 80072e0:	20000280 	.word	0x20000280

080072e4 <__ssputs_r>:
 80072e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e8:	688e      	ldr	r6, [r1, #8]
 80072ea:	429e      	cmp	r6, r3
 80072ec:	4682      	mov	sl, r0
 80072ee:	460c      	mov	r4, r1
 80072f0:	4690      	mov	r8, r2
 80072f2:	4699      	mov	r9, r3
 80072f4:	d837      	bhi.n	8007366 <__ssputs_r+0x82>
 80072f6:	898a      	ldrh	r2, [r1, #12]
 80072f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072fc:	d031      	beq.n	8007362 <__ssputs_r+0x7e>
 80072fe:	6825      	ldr	r5, [r4, #0]
 8007300:	6909      	ldr	r1, [r1, #16]
 8007302:	1a6f      	subs	r7, r5, r1
 8007304:	6965      	ldr	r5, [r4, #20]
 8007306:	2302      	movs	r3, #2
 8007308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800730c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007310:	f109 0301 	add.w	r3, r9, #1
 8007314:	443b      	add	r3, r7
 8007316:	429d      	cmp	r5, r3
 8007318:	bf38      	it	cc
 800731a:	461d      	movcc	r5, r3
 800731c:	0553      	lsls	r3, r2, #21
 800731e:	d530      	bpl.n	8007382 <__ssputs_r+0x9e>
 8007320:	4629      	mov	r1, r5
 8007322:	f7ff ff85 	bl	8007230 <_malloc_r>
 8007326:	4606      	mov	r6, r0
 8007328:	b950      	cbnz	r0, 8007340 <__ssputs_r+0x5c>
 800732a:	230c      	movs	r3, #12
 800732c:	f8ca 3000 	str.w	r3, [sl]
 8007330:	89a3      	ldrh	r3, [r4, #12]
 8007332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007336:	81a3      	strh	r3, [r4, #12]
 8007338:	f04f 30ff 	mov.w	r0, #4294967295
 800733c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007340:	463a      	mov	r2, r7
 8007342:	6921      	ldr	r1, [r4, #16]
 8007344:	f7ff fc32 	bl	8006bac <memcpy>
 8007348:	89a3      	ldrh	r3, [r4, #12]
 800734a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800734e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007352:	81a3      	strh	r3, [r4, #12]
 8007354:	6126      	str	r6, [r4, #16]
 8007356:	6165      	str	r5, [r4, #20]
 8007358:	443e      	add	r6, r7
 800735a:	1bed      	subs	r5, r5, r7
 800735c:	6026      	str	r6, [r4, #0]
 800735e:	60a5      	str	r5, [r4, #8]
 8007360:	464e      	mov	r6, r9
 8007362:	454e      	cmp	r6, r9
 8007364:	d900      	bls.n	8007368 <__ssputs_r+0x84>
 8007366:	464e      	mov	r6, r9
 8007368:	4632      	mov	r2, r6
 800736a:	4641      	mov	r1, r8
 800736c:	6820      	ldr	r0, [r4, #0]
 800736e:	f000 f92d 	bl	80075cc <memmove>
 8007372:	68a3      	ldr	r3, [r4, #8]
 8007374:	1b9b      	subs	r3, r3, r6
 8007376:	60a3      	str	r3, [r4, #8]
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	441e      	add	r6, r3
 800737c:	6026      	str	r6, [r4, #0]
 800737e:	2000      	movs	r0, #0
 8007380:	e7dc      	b.n	800733c <__ssputs_r+0x58>
 8007382:	462a      	mov	r2, r5
 8007384:	f000 f93d 	bl	8007602 <_realloc_r>
 8007388:	4606      	mov	r6, r0
 800738a:	2800      	cmp	r0, #0
 800738c:	d1e2      	bne.n	8007354 <__ssputs_r+0x70>
 800738e:	6921      	ldr	r1, [r4, #16]
 8007390:	4650      	mov	r0, sl
 8007392:	f7ff feff 	bl	8007194 <_free_r>
 8007396:	e7c8      	b.n	800732a <__ssputs_r+0x46>

08007398 <_svfiprintf_r>:
 8007398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739c:	461d      	mov	r5, r3
 800739e:	898b      	ldrh	r3, [r1, #12]
 80073a0:	061f      	lsls	r7, r3, #24
 80073a2:	b09d      	sub	sp, #116	; 0x74
 80073a4:	4680      	mov	r8, r0
 80073a6:	460c      	mov	r4, r1
 80073a8:	4616      	mov	r6, r2
 80073aa:	d50f      	bpl.n	80073cc <_svfiprintf_r+0x34>
 80073ac:	690b      	ldr	r3, [r1, #16]
 80073ae:	b96b      	cbnz	r3, 80073cc <_svfiprintf_r+0x34>
 80073b0:	2140      	movs	r1, #64	; 0x40
 80073b2:	f7ff ff3d 	bl	8007230 <_malloc_r>
 80073b6:	6020      	str	r0, [r4, #0]
 80073b8:	6120      	str	r0, [r4, #16]
 80073ba:	b928      	cbnz	r0, 80073c8 <_svfiprintf_r+0x30>
 80073bc:	230c      	movs	r3, #12
 80073be:	f8c8 3000 	str.w	r3, [r8]
 80073c2:	f04f 30ff 	mov.w	r0, #4294967295
 80073c6:	e0c8      	b.n	800755a <_svfiprintf_r+0x1c2>
 80073c8:	2340      	movs	r3, #64	; 0x40
 80073ca:	6163      	str	r3, [r4, #20]
 80073cc:	2300      	movs	r3, #0
 80073ce:	9309      	str	r3, [sp, #36]	; 0x24
 80073d0:	2320      	movs	r3, #32
 80073d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073d6:	2330      	movs	r3, #48	; 0x30
 80073d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073dc:	9503      	str	r5, [sp, #12]
 80073de:	f04f 0b01 	mov.w	fp, #1
 80073e2:	4637      	mov	r7, r6
 80073e4:	463d      	mov	r5, r7
 80073e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80073ea:	b10b      	cbz	r3, 80073f0 <_svfiprintf_r+0x58>
 80073ec:	2b25      	cmp	r3, #37	; 0x25
 80073ee:	d13e      	bne.n	800746e <_svfiprintf_r+0xd6>
 80073f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80073f4:	d00b      	beq.n	800740e <_svfiprintf_r+0x76>
 80073f6:	4653      	mov	r3, sl
 80073f8:	4632      	mov	r2, r6
 80073fa:	4621      	mov	r1, r4
 80073fc:	4640      	mov	r0, r8
 80073fe:	f7ff ff71 	bl	80072e4 <__ssputs_r>
 8007402:	3001      	adds	r0, #1
 8007404:	f000 80a4 	beq.w	8007550 <_svfiprintf_r+0x1b8>
 8007408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800740a:	4453      	add	r3, sl
 800740c:	9309      	str	r3, [sp, #36]	; 0x24
 800740e:	783b      	ldrb	r3, [r7, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 809d 	beq.w	8007550 <_svfiprintf_r+0x1b8>
 8007416:	2300      	movs	r3, #0
 8007418:	f04f 32ff 	mov.w	r2, #4294967295
 800741c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007420:	9304      	str	r3, [sp, #16]
 8007422:	9307      	str	r3, [sp, #28]
 8007424:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007428:	931a      	str	r3, [sp, #104]	; 0x68
 800742a:	462f      	mov	r7, r5
 800742c:	2205      	movs	r2, #5
 800742e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007432:	4850      	ldr	r0, [pc, #320]	; (8007574 <_svfiprintf_r+0x1dc>)
 8007434:	f7f8 fedc 	bl	80001f0 <memchr>
 8007438:	9b04      	ldr	r3, [sp, #16]
 800743a:	b9d0      	cbnz	r0, 8007472 <_svfiprintf_r+0xda>
 800743c:	06d9      	lsls	r1, r3, #27
 800743e:	bf44      	itt	mi
 8007440:	2220      	movmi	r2, #32
 8007442:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007446:	071a      	lsls	r2, r3, #28
 8007448:	bf44      	itt	mi
 800744a:	222b      	movmi	r2, #43	; 0x2b
 800744c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007450:	782a      	ldrb	r2, [r5, #0]
 8007452:	2a2a      	cmp	r2, #42	; 0x2a
 8007454:	d015      	beq.n	8007482 <_svfiprintf_r+0xea>
 8007456:	9a07      	ldr	r2, [sp, #28]
 8007458:	462f      	mov	r7, r5
 800745a:	2000      	movs	r0, #0
 800745c:	250a      	movs	r5, #10
 800745e:	4639      	mov	r1, r7
 8007460:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007464:	3b30      	subs	r3, #48	; 0x30
 8007466:	2b09      	cmp	r3, #9
 8007468:	d94d      	bls.n	8007506 <_svfiprintf_r+0x16e>
 800746a:	b1b8      	cbz	r0, 800749c <_svfiprintf_r+0x104>
 800746c:	e00f      	b.n	800748e <_svfiprintf_r+0xf6>
 800746e:	462f      	mov	r7, r5
 8007470:	e7b8      	b.n	80073e4 <_svfiprintf_r+0x4c>
 8007472:	4a40      	ldr	r2, [pc, #256]	; (8007574 <_svfiprintf_r+0x1dc>)
 8007474:	1a80      	subs	r0, r0, r2
 8007476:	fa0b f000 	lsl.w	r0, fp, r0
 800747a:	4318      	orrs	r0, r3
 800747c:	9004      	str	r0, [sp, #16]
 800747e:	463d      	mov	r5, r7
 8007480:	e7d3      	b.n	800742a <_svfiprintf_r+0x92>
 8007482:	9a03      	ldr	r2, [sp, #12]
 8007484:	1d11      	adds	r1, r2, #4
 8007486:	6812      	ldr	r2, [r2, #0]
 8007488:	9103      	str	r1, [sp, #12]
 800748a:	2a00      	cmp	r2, #0
 800748c:	db01      	blt.n	8007492 <_svfiprintf_r+0xfa>
 800748e:	9207      	str	r2, [sp, #28]
 8007490:	e004      	b.n	800749c <_svfiprintf_r+0x104>
 8007492:	4252      	negs	r2, r2
 8007494:	f043 0302 	orr.w	r3, r3, #2
 8007498:	9207      	str	r2, [sp, #28]
 800749a:	9304      	str	r3, [sp, #16]
 800749c:	783b      	ldrb	r3, [r7, #0]
 800749e:	2b2e      	cmp	r3, #46	; 0x2e
 80074a0:	d10c      	bne.n	80074bc <_svfiprintf_r+0x124>
 80074a2:	787b      	ldrb	r3, [r7, #1]
 80074a4:	2b2a      	cmp	r3, #42	; 0x2a
 80074a6:	d133      	bne.n	8007510 <_svfiprintf_r+0x178>
 80074a8:	9b03      	ldr	r3, [sp, #12]
 80074aa:	1d1a      	adds	r2, r3, #4
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	9203      	str	r2, [sp, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	bfb8      	it	lt
 80074b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80074b8:	3702      	adds	r7, #2
 80074ba:	9305      	str	r3, [sp, #20]
 80074bc:	4d2e      	ldr	r5, [pc, #184]	; (8007578 <_svfiprintf_r+0x1e0>)
 80074be:	7839      	ldrb	r1, [r7, #0]
 80074c0:	2203      	movs	r2, #3
 80074c2:	4628      	mov	r0, r5
 80074c4:	f7f8 fe94 	bl	80001f0 <memchr>
 80074c8:	b138      	cbz	r0, 80074da <_svfiprintf_r+0x142>
 80074ca:	2340      	movs	r3, #64	; 0x40
 80074cc:	1b40      	subs	r0, r0, r5
 80074ce:	fa03 f000 	lsl.w	r0, r3, r0
 80074d2:	9b04      	ldr	r3, [sp, #16]
 80074d4:	4303      	orrs	r3, r0
 80074d6:	3701      	adds	r7, #1
 80074d8:	9304      	str	r3, [sp, #16]
 80074da:	7839      	ldrb	r1, [r7, #0]
 80074dc:	4827      	ldr	r0, [pc, #156]	; (800757c <_svfiprintf_r+0x1e4>)
 80074de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074e2:	2206      	movs	r2, #6
 80074e4:	1c7e      	adds	r6, r7, #1
 80074e6:	f7f8 fe83 	bl	80001f0 <memchr>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d038      	beq.n	8007560 <_svfiprintf_r+0x1c8>
 80074ee:	4b24      	ldr	r3, [pc, #144]	; (8007580 <_svfiprintf_r+0x1e8>)
 80074f0:	bb13      	cbnz	r3, 8007538 <_svfiprintf_r+0x1a0>
 80074f2:	9b03      	ldr	r3, [sp, #12]
 80074f4:	3307      	adds	r3, #7
 80074f6:	f023 0307 	bic.w	r3, r3, #7
 80074fa:	3308      	adds	r3, #8
 80074fc:	9303      	str	r3, [sp, #12]
 80074fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007500:	444b      	add	r3, r9
 8007502:	9309      	str	r3, [sp, #36]	; 0x24
 8007504:	e76d      	b.n	80073e2 <_svfiprintf_r+0x4a>
 8007506:	fb05 3202 	mla	r2, r5, r2, r3
 800750a:	2001      	movs	r0, #1
 800750c:	460f      	mov	r7, r1
 800750e:	e7a6      	b.n	800745e <_svfiprintf_r+0xc6>
 8007510:	2300      	movs	r3, #0
 8007512:	3701      	adds	r7, #1
 8007514:	9305      	str	r3, [sp, #20]
 8007516:	4619      	mov	r1, r3
 8007518:	250a      	movs	r5, #10
 800751a:	4638      	mov	r0, r7
 800751c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007520:	3a30      	subs	r2, #48	; 0x30
 8007522:	2a09      	cmp	r2, #9
 8007524:	d903      	bls.n	800752e <_svfiprintf_r+0x196>
 8007526:	2b00      	cmp	r3, #0
 8007528:	d0c8      	beq.n	80074bc <_svfiprintf_r+0x124>
 800752a:	9105      	str	r1, [sp, #20]
 800752c:	e7c6      	b.n	80074bc <_svfiprintf_r+0x124>
 800752e:	fb05 2101 	mla	r1, r5, r1, r2
 8007532:	2301      	movs	r3, #1
 8007534:	4607      	mov	r7, r0
 8007536:	e7f0      	b.n	800751a <_svfiprintf_r+0x182>
 8007538:	ab03      	add	r3, sp, #12
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	4622      	mov	r2, r4
 800753e:	4b11      	ldr	r3, [pc, #68]	; (8007584 <_svfiprintf_r+0x1ec>)
 8007540:	a904      	add	r1, sp, #16
 8007542:	4640      	mov	r0, r8
 8007544:	f7fe f8f0 	bl	8005728 <_printf_float>
 8007548:	f1b0 3fff 	cmp.w	r0, #4294967295
 800754c:	4681      	mov	r9, r0
 800754e:	d1d6      	bne.n	80074fe <_svfiprintf_r+0x166>
 8007550:	89a3      	ldrh	r3, [r4, #12]
 8007552:	065b      	lsls	r3, r3, #25
 8007554:	f53f af35 	bmi.w	80073c2 <_svfiprintf_r+0x2a>
 8007558:	9809      	ldr	r0, [sp, #36]	; 0x24
 800755a:	b01d      	add	sp, #116	; 0x74
 800755c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007560:	ab03      	add	r3, sp, #12
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	4622      	mov	r2, r4
 8007566:	4b07      	ldr	r3, [pc, #28]	; (8007584 <_svfiprintf_r+0x1ec>)
 8007568:	a904      	add	r1, sp, #16
 800756a:	4640      	mov	r0, r8
 800756c:	f7fe fb92 	bl	8005c94 <_printf_i>
 8007570:	e7ea      	b.n	8007548 <_svfiprintf_r+0x1b0>
 8007572:	bf00      	nop
 8007574:	080078c4 	.word	0x080078c4
 8007578:	080078ca 	.word	0x080078ca
 800757c:	080078ce 	.word	0x080078ce
 8007580:	08005729 	.word	0x08005729
 8007584:	080072e5 	.word	0x080072e5

08007588 <_sbrk_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4c06      	ldr	r4, [pc, #24]	; (80075a4 <_sbrk_r+0x1c>)
 800758c:	2300      	movs	r3, #0
 800758e:	4605      	mov	r5, r0
 8007590:	4608      	mov	r0, r1
 8007592:	6023      	str	r3, [r4, #0]
 8007594:	f7fa f9be 	bl	8001914 <_sbrk>
 8007598:	1c43      	adds	r3, r0, #1
 800759a:	d102      	bne.n	80075a2 <_sbrk_r+0x1a>
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	b103      	cbz	r3, 80075a2 <_sbrk_r+0x1a>
 80075a0:	602b      	str	r3, [r5, #0]
 80075a2:	bd38      	pop	{r3, r4, r5, pc}
 80075a4:	2000d5a4 	.word	0x2000d5a4

080075a8 <__ascii_mbtowc>:
 80075a8:	b082      	sub	sp, #8
 80075aa:	b901      	cbnz	r1, 80075ae <__ascii_mbtowc+0x6>
 80075ac:	a901      	add	r1, sp, #4
 80075ae:	b142      	cbz	r2, 80075c2 <__ascii_mbtowc+0x1a>
 80075b0:	b14b      	cbz	r3, 80075c6 <__ascii_mbtowc+0x1e>
 80075b2:	7813      	ldrb	r3, [r2, #0]
 80075b4:	600b      	str	r3, [r1, #0]
 80075b6:	7812      	ldrb	r2, [r2, #0]
 80075b8:	1c10      	adds	r0, r2, #0
 80075ba:	bf18      	it	ne
 80075bc:	2001      	movne	r0, #1
 80075be:	b002      	add	sp, #8
 80075c0:	4770      	bx	lr
 80075c2:	4610      	mov	r0, r2
 80075c4:	e7fb      	b.n	80075be <__ascii_mbtowc+0x16>
 80075c6:	f06f 0001 	mvn.w	r0, #1
 80075ca:	e7f8      	b.n	80075be <__ascii_mbtowc+0x16>

080075cc <memmove>:
 80075cc:	4288      	cmp	r0, r1
 80075ce:	b510      	push	{r4, lr}
 80075d0:	eb01 0302 	add.w	r3, r1, r2
 80075d4:	d807      	bhi.n	80075e6 <memmove+0x1a>
 80075d6:	1e42      	subs	r2, r0, #1
 80075d8:	4299      	cmp	r1, r3
 80075da:	d00a      	beq.n	80075f2 <memmove+0x26>
 80075dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075e0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80075e4:	e7f8      	b.n	80075d8 <memmove+0xc>
 80075e6:	4283      	cmp	r3, r0
 80075e8:	d9f5      	bls.n	80075d6 <memmove+0xa>
 80075ea:	1881      	adds	r1, r0, r2
 80075ec:	1ad2      	subs	r2, r2, r3
 80075ee:	42d3      	cmn	r3, r2
 80075f0:	d100      	bne.n	80075f4 <memmove+0x28>
 80075f2:	bd10      	pop	{r4, pc}
 80075f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075f8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80075fc:	e7f7      	b.n	80075ee <memmove+0x22>

080075fe <__malloc_lock>:
 80075fe:	4770      	bx	lr

08007600 <__malloc_unlock>:
 8007600:	4770      	bx	lr

08007602 <_realloc_r>:
 8007602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007604:	4607      	mov	r7, r0
 8007606:	4614      	mov	r4, r2
 8007608:	460e      	mov	r6, r1
 800760a:	b921      	cbnz	r1, 8007616 <_realloc_r+0x14>
 800760c:	4611      	mov	r1, r2
 800760e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007612:	f7ff be0d 	b.w	8007230 <_malloc_r>
 8007616:	b922      	cbnz	r2, 8007622 <_realloc_r+0x20>
 8007618:	f7ff fdbc 	bl	8007194 <_free_r>
 800761c:	4625      	mov	r5, r4
 800761e:	4628      	mov	r0, r5
 8007620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007622:	f000 f821 	bl	8007668 <_malloc_usable_size_r>
 8007626:	42a0      	cmp	r0, r4
 8007628:	d20f      	bcs.n	800764a <_realloc_r+0x48>
 800762a:	4621      	mov	r1, r4
 800762c:	4638      	mov	r0, r7
 800762e:	f7ff fdff 	bl	8007230 <_malloc_r>
 8007632:	4605      	mov	r5, r0
 8007634:	2800      	cmp	r0, #0
 8007636:	d0f2      	beq.n	800761e <_realloc_r+0x1c>
 8007638:	4631      	mov	r1, r6
 800763a:	4622      	mov	r2, r4
 800763c:	f7ff fab6 	bl	8006bac <memcpy>
 8007640:	4631      	mov	r1, r6
 8007642:	4638      	mov	r0, r7
 8007644:	f7ff fda6 	bl	8007194 <_free_r>
 8007648:	e7e9      	b.n	800761e <_realloc_r+0x1c>
 800764a:	4635      	mov	r5, r6
 800764c:	e7e7      	b.n	800761e <_realloc_r+0x1c>

0800764e <__ascii_wctomb>:
 800764e:	b149      	cbz	r1, 8007664 <__ascii_wctomb+0x16>
 8007650:	2aff      	cmp	r2, #255	; 0xff
 8007652:	bf85      	ittet	hi
 8007654:	238a      	movhi	r3, #138	; 0x8a
 8007656:	6003      	strhi	r3, [r0, #0]
 8007658:	700a      	strbls	r2, [r1, #0]
 800765a:	f04f 30ff 	movhi.w	r0, #4294967295
 800765e:	bf98      	it	ls
 8007660:	2001      	movls	r0, #1
 8007662:	4770      	bx	lr
 8007664:	4608      	mov	r0, r1
 8007666:	4770      	bx	lr

08007668 <_malloc_usable_size_r>:
 8007668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800766c:	1f18      	subs	r0, r3, #4
 800766e:	2b00      	cmp	r3, #0
 8007670:	bfbc      	itt	lt
 8007672:	580b      	ldrlt	r3, [r1, r0]
 8007674:	18c0      	addlt	r0, r0, r3
 8007676:	4770      	bx	lr

08007678 <round>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	ec57 6b10 	vmov	r6, r7, d0
 800767e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8007682:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8007686:	2c13      	cmp	r4, #19
 8007688:	463b      	mov	r3, r7
 800768a:	463d      	mov	r5, r7
 800768c:	dc17      	bgt.n	80076be <round+0x46>
 800768e:	2c00      	cmp	r4, #0
 8007690:	da09      	bge.n	80076a6 <round+0x2e>
 8007692:	3401      	adds	r4, #1
 8007694:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8007698:	d103      	bne.n	80076a2 <round+0x2a>
 800769a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800769e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80076a2:	2100      	movs	r1, #0
 80076a4:	e02c      	b.n	8007700 <round+0x88>
 80076a6:	4a18      	ldr	r2, [pc, #96]	; (8007708 <round+0x90>)
 80076a8:	4122      	asrs	r2, r4
 80076aa:	4217      	tst	r7, r2
 80076ac:	d100      	bne.n	80076b0 <round+0x38>
 80076ae:	b19e      	cbz	r6, 80076d8 <round+0x60>
 80076b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80076b4:	4123      	asrs	r3, r4
 80076b6:	442b      	add	r3, r5
 80076b8:	ea23 0302 	bic.w	r3, r3, r2
 80076bc:	e7f1      	b.n	80076a2 <round+0x2a>
 80076be:	2c33      	cmp	r4, #51	; 0x33
 80076c0:	dd0d      	ble.n	80076de <round+0x66>
 80076c2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80076c6:	d107      	bne.n	80076d8 <round+0x60>
 80076c8:	4630      	mov	r0, r6
 80076ca:	4639      	mov	r1, r7
 80076cc:	ee10 2a10 	vmov	r2, s0
 80076d0:	f7f8 fde4 	bl	800029c <__adddf3>
 80076d4:	4606      	mov	r6, r0
 80076d6:	460f      	mov	r7, r1
 80076d8:	ec47 6b10 	vmov	d0, r6, r7
 80076dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076de:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80076e2:	f04f 30ff 	mov.w	r0, #4294967295
 80076e6:	40d0      	lsrs	r0, r2
 80076e8:	4206      	tst	r6, r0
 80076ea:	d0f5      	beq.n	80076d8 <round+0x60>
 80076ec:	2201      	movs	r2, #1
 80076ee:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80076f2:	fa02 f404 	lsl.w	r4, r2, r4
 80076f6:	1931      	adds	r1, r6, r4
 80076f8:	bf28      	it	cs
 80076fa:	189b      	addcs	r3, r3, r2
 80076fc:	ea21 0100 	bic.w	r1, r1, r0
 8007700:	461f      	mov	r7, r3
 8007702:	460e      	mov	r6, r1
 8007704:	e7e8      	b.n	80076d8 <round+0x60>
 8007706:	bf00      	nop
 8007708:	000fffff 	.word	0x000fffff

0800770c <_init>:
 800770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770e:	bf00      	nop
 8007710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007712:	bc08      	pop	{r3}
 8007714:	469e      	mov	lr, r3
 8007716:	4770      	bx	lr

08007718 <_fini>:
 8007718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771a:	bf00      	nop
 800771c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771e:	bc08      	pop	{r3}
 8007720:	469e      	mov	lr, r3
 8007722:	4770      	bx	lr


SECO-P1-F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000766c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08007810  08007810  00017810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac8  08007ac8  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08007ac8  08007ac8  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ac8  08007ac8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ac8  08007ac8  00017ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007acc  08007acc  00017acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08007ad0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d3b0  200001f8  08007cc4  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000d5a8  08007cc4  0002d5a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5c3  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e8e  00000000  00000000  0002d7e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca0  00000000  00000000  0002f678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b98  00000000  00000000  00030318  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dd70  00000000  00000000  00030eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b206  00000000  00000000  0004ec20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b08fa  00000000  00000000  00059e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010a720  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e4c  00000000  00000000  0010a79c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080077f4 	.word	0x080077f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	080077f4 	.word	0x080077f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_GPIO_Init+0x7c>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <MX_GPIO_Init+0x7c>)
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	6153      	str	r3, [r2, #20]
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_GPIO_Init+0x7c>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_GPIO_Init+0x7c>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <MX_GPIO_Init+0x7c>)
 8000c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c30:	6153      	str	r3, [r2, #20]
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <MX_GPIO_Init+0x7c>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c48:	f001 fc74 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	4619      	mov	r1, r3
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c68:	f001 fada 	bl	8002220 <HAL_GPIO_Init>

}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40021000 	.word	0x40021000

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7c:	f001 f958 	bl	8001f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c80:	f000 f82a 	bl	8000cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c84:	f7ff ffb8 	bl	8000bf8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c88:	f001 f8b6 	bl	8001df8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c8c:	f000 fef8 	bl	8001a80 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c90:	f000 ff4a 	bl	8001b28 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000c94:	f000 ffae 	bl	8001bf4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <main+0x58>)
 8000c9c:	f003 f878 	bl	8003d90 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <main+0x58>)
 8000ca4:	f003 f874 	bl	8003d90 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000ca8:	213c      	movs	r1, #60	; 0x3c
 8000caa:	480a      	ldr	r0, [pc, #40]	; (8000cd4 <main+0x5c>)
 8000cac:	f003 f962 	bl	8003f74 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <main+0x5c>)
 8000cb2:	f002 ffed 	bl	8003c90 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

	//reductora();// Uncommenting this line to calculate the reducer value
	//funtion_trasfer(12);// Uncommenting this line to calculate the function transfer

	setref(M_PI,0); // set a first  ref to linear controler
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8000cc8 <main+0x50>
 8000cbc:	f000 fbea 	bl	8001494 <setref>

	while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <main+0x48>
 8000cc2:	bf00      	nop
 8000cc4:	f3af 8000 	nop.w
 8000cc8:	54442d18 	.word	0x54442d18
 8000ccc:	400921fb 	.word	0x400921fb
 8000cd0:	2000d460 	.word	0x2000d460
 8000cd4:	2000d4e0 	.word	0x2000d4e0

08000cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b0a6      	sub	sp, #152	; 0x98
 8000cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cde:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ce2:	2228      	movs	r2, #40	; 0x28
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f004 fcf6 	bl	80056d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2258      	movs	r2, #88	; 0x58
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f004 fce8 	bl	80056d8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d10:	2310      	movs	r3, #16
 8000d12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d16:	2302      	movs	r3, #2
 8000d18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000d24:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8000d28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 fc14 	bl	8002564 <HAL_RCC_OscConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d42:	f000 fde3 	bl	800190c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d46:	230f      	movs	r3, #15
 8000d48:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d56:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d60:	2102      	movs	r1, #2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f002 fb14 	bl	8003390 <HAL_RCC_ClockConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d6e:	f000 fdcd 	bl	800190c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <SystemClock_Config+0xc4>)
 8000d74:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 fd39 	bl	80037fc <HAL_RCCEx_PeriphCLKConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000d90:	f000 fdbc 	bl	800190c <Error_Handler>
  }
}
 8000d94:	bf00      	nop
 8000d96:	3798      	adds	r7, #152	; 0x98
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	00300002 	.word	0x00300002

08000da0 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief  Period elapsed callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

	if (htim->Instance==TIM6) {
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a58      	ldr	r2, [pc, #352]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	f040 8191 	bne.w	80010d6 <HAL_TIM_PeriodElapsedCallback+0x336>

		if (FLAG_PROPORTIONAL_CONTROLER == true||FLAG_DERIVATIVE_CONTROLER == true ||FLAG_INTEGRATOR_CONTROLER == true) {
 8000db4:	4b57      	ldr	r3, [pc, #348]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d108      	bne.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x2e>
 8000dbc:	4b56      	ldr	r3, [pc, #344]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d104      	bne.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x2e>
 8000dc4:	4b55      	ldr	r3, [pc, #340]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f000 811f 	beq.w	800100c <HAL_TIM_PeriodElapsedCallback+0x26c>
			i += 1;
 8000dce:	4b54      	ldr	r3, [pc, #336]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	4a52      	ldr	r2, [pc, #328]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000dd6:	6013      	str	r3, [r2, #0]
			current_value =__HAL_TIM_GET_COUNTER(&htim2);
 8000dd8:	4b52      	ldr	r3, [pc, #328]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fb98 	bl	8000514 <__aeabi_ui2d>
 8000de4:	4603      	mov	r3, r0
 8000de6:	460c      	mov	r4, r1
 8000de8:	4a4f      	ldr	r2, [pc, #316]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000dea:	e9c2 3400 	strd	r3, r4, [r2]
			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8000dee:	4b4d      	ldr	r3, [pc, #308]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0310 	and.w	r3, r3, #16
 8000df8:	2b10      	cmp	r3, #16
 8000dfa:	d157      	bne.n	8000eac <HAL_TIM_PeriodElapsedCallback+0x10c>

				if(FLAG_COUNT_OVERFLOW == true && current_value > last_value ){
 8000dfc:	4b4b      	ldr	r3, [pc, #300]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d026      	beq.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0xb2>
 8000e04:	4b48      	ldr	r3, [pc, #288]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e0a:	4b49      	ldr	r3, [pc, #292]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000e0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4623      	mov	r3, r4
 8000e14:	f7ff fe88 	bl	8000b28 <__aeabi_dcmpgt>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d019      	beq.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0xb2>
					diff = (max_enconder_count-current_value) + last_value;
 8000e1e:	4b42      	ldr	r3, [pc, #264]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4623      	mov	r3, r4
 8000e28:	a137      	add	r1, pc, #220	; (adr r1, 8000f08 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000e2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e2e:	f7ff fa33 	bl	8000298 <__aeabi_dsub>
 8000e32:	4603      	mov	r3, r0
 8000e34:	460c      	mov	r4, r1
 8000e36:	4618      	mov	r0, r3
 8000e38:	4621      	mov	r1, r4
 8000e3a:	4b3d      	ldr	r3, [pc, #244]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000e3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4623      	mov	r3, r4
 8000e44:	f7ff fa2a 	bl	800029c <__adddf3>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	460c      	mov	r4, r1
 8000e4c:	4a39      	ldr	r2, [pc, #228]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000e4e:	e9c2 3400 	strd	r3, r4, [r2]
				}
				if(current_value <= last_value || current_value <= last_value){
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e58:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000e5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4623      	mov	r3, r4
 8000e62:	f7ff fe4d 	bl	8000b00 <__aeabi_dcmple>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d10c      	bne.n	8000e86 <HAL_TIM_PeriodElapsedCallback+0xe6>
 8000e6c:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e72:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000e74:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4623      	mov	r3, r4
 8000e7c:	f7ff fe40 	bl	8000b00 <__aeabi_dcmple>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d06a      	beq.n	8000f5c <HAL_TIM_PeriodElapsedCallback+0x1bc>
					diff = last_value - current_value;
 8000e86:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000e88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e8c:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e92:	461a      	mov	r2, r3
 8000e94:	4623      	mov	r3, r4
 8000e96:	f7ff f9ff 	bl	8000298 <__aeabi_dsub>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	460c      	mov	r4, r1
 8000e9e:	4a25      	ldr	r2, [pc, #148]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000ea0:	e9c2 3400 	strd	r3, r4, [r2]
					FLAG_COUNT_OVERFLOW = false;
 8000ea4:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e057      	b.n	8000f5c <HAL_TIM_PeriodElapsedCallback+0x1bc>


			}
			else {

				if (FLAG_COUNT_OVERFLOW == true && current_value < last_value) {
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d041      	beq.n	8000f38 <HAL_TIM_PeriodElapsedCallback+0x198>
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000eb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000ebc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4623      	mov	r3, r4
 8000ec4:	f7ff fe12 	bl	8000aec <__aeabi_dcmplt>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d034      	beq.n	8000f38 <HAL_TIM_PeriodElapsedCallback+0x198>
					diff = (max_enconder_count - last_value) + current_value;
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000ed0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	a10b      	add	r1, pc, #44	; (adr r1, 8000f08 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000eda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ede:	f7ff f9db 	bl	8000298 <__aeabi_dsub>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	460c      	mov	r4, r1
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	4621      	mov	r1, r4
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000eec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4623      	mov	r3, r4
 8000ef4:	f7ff f9d2 	bl	800029c <__adddf3>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	460c      	mov	r4, r1
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000efe:	e9c2 3400 	strd	r3, r4, [r2]
 8000f02:	e02b      	b.n	8000f5c <HAL_TIM_PeriodElapsedCallback+0x1bc>
 8000f04:	f3af 8000 	nop.w
 8000f08:	00000000 	.word	0x00000000
 8000f0c:	40efffe0 	.word	0x40efffe0
 8000f10:	40001000 	.word	0x40001000
 8000f14:	20000272 	.word	0x20000272
 8000f18:	20000273 	.word	0x20000273
 8000f1c:	20000274 	.word	0x20000274
 8000f20:	20000228 	.word	0x20000228
 8000f24:	2000d4e0 	.word	0x2000d4e0
 8000f28:	20000238 	.word	0x20000238
 8000f2c:	20000275 	.word	0x20000275
 8000f30:	20000248 	.word	0x20000248
 8000f34:	20000240 	.word	0x20000240
				} else {
					diff = current_value - last_value;
 8000f38:	4b6f      	ldr	r3, [pc, #444]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000f3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f3e:	4b6f      	ldr	r3, [pc, #444]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000f40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4623      	mov	r3, r4
 8000f48:	f7ff f9a6 	bl	8000298 <__aeabi_dsub>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	460c      	mov	r4, r1
 8000f50:	4a6b      	ldr	r2, [pc, #428]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000f52:	e9c2 3400 	strd	r3, r4, [r2]
					FLAG_COUNT_OVERFLOW = false;
 8000f56:	4b6b      	ldr	r3, [pc, #428]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]

				}

			}

			last_value = current_value;
 8000f5c:	4b66      	ldr	r3, [pc, #408]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000f5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f62:	4a66      	ldr	r2, [pc, #408]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000f64:	e9c2 3400 	strd	r3, r4, [r2]
			pos_i = pos_i + diff;
 8000f68:	4b67      	ldr	r3, [pc, #412]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000f6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f6e:	4b64      	ldr	r3, [pc, #400]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000f70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4623      	mov	r3, r4
 8000f78:	f7ff f990 	bl	800029c <__adddf3>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	460c      	mov	r4, r1
 8000f80:	4a61      	ldr	r2, [pc, #388]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000f82:	e9c2 3400 	strd	r3, r4, [r2]
			if(i<num_muestras_controlador){
 8000f86:	4b61      	ldr	r3, [pc, #388]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d809      	bhi.n	8000fa6 <HAL_TIM_PeriodElapsedCallback+0x206>
				pos_buffer[i]= pos_i;
 8000f92:	4b5e      	ldr	r3, [pc, #376]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4b5c      	ldr	r3, [pc, #368]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000f98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f9c:	495c      	ldr	r1, [pc, #368]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000f9e:	00d2      	lsls	r2, r2, #3
 8000fa0:	440a      	add	r2, r1
 8000fa2:	e9c2 3400 	strd	r3, r4, [r2]
			}


			if(i == num_muestras_controlador && FLAG_PROPORTIONAL == true){
 8000fa6:	4b59      	ldr	r3, [pc, #356]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d105      	bne.n	8000fbe <HAL_TIM_PeriodElapsedCallback+0x21e>
 8000fb2:	4b58      	ldr	r3, [pc, #352]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_TIM_PeriodElapsedCallback+0x21e>
				enviarcuenta();
 8000fba:	f000 f9ab 	bl	8001314 <enviarcuenta>
			}
			if (FLAG_PROPORTIONAL_CONTROLER == true) {
 8000fbe:	4b56      	ldr	r3, [pc, #344]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d008      	beq.n	8000fd8 <HAL_TIM_PeriodElapsedCallback+0x238>
				controlador_proporcional(pos_i);
 8000fc6:	4b50      	ldr	r3, [pc, #320]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000fc8:	ed93 7b00 	vldr	d7, [r3]
 8000fcc:	eeb0 0a47 	vmov.f32	s0, s14
 8000fd0:	eef0 0a67 	vmov.f32	s1, s15
 8000fd4:	f000 fa98 	bl	8001508 <controlador_proporcional>
			}
			if (FLAG_DERIVATIVE_CONTROLER == true) {
 8000fd8:	4b50      	ldr	r3, [pc, #320]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d008      	beq.n	8000ff2 <HAL_TIM_PeriodElapsedCallback+0x252>
				controlador_derivativo(pos_i);
 8000fe0:	4b49      	ldr	r3, [pc, #292]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000fe2:	ed93 7b00 	vldr	d7, [r3]
 8000fe6:	eeb0 0a47 	vmov.f32	s0, s14
 8000fea:	eef0 0a67 	vmov.f32	s1, s15
 8000fee:	f000 fb13 	bl	8001618 <controlador_derivativo>

			}
			if (FLAG_INTEGRATOR_CONTROLER == true) {
 8000ff2:	4b4b      	ldr	r3, [pc, #300]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d008      	beq.n	800100c <HAL_TIM_PeriodElapsedCallback+0x26c>
				controlador_integrador(pos_i);
 8000ffa:	4b43      	ldr	r3, [pc, #268]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000ffc:	ed93 7b00 	vldr	d7, [r3]
 8001000:	eeb0 0a47 	vmov.f32	s0, s14
 8001004:	eef0 0a67 	vmov.f32	s1, s15
 8001008:	f000 fbc2 	bl	8001790 <controlador_integrador>
			}


		}
		if (FLAG_REDUCER == true) {
 800100c:	4b45      	ldr	r3, [pc, #276]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d027      	beq.n	8001064 <HAL_TIM_PeriodElapsedCallback+0x2c4>
			i += 1;
 8001014:	4b3d      	ldr	r3, [pc, #244]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	4a3c      	ldr	r2, [pc, #240]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800101c:	6013      	str	r3, [r2, #0]
			if(i == 4000){
 800101e:	4b3b      	ldr	r3, [pc, #236]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001026:	d11d      	bne.n	8001064 <HAL_TIM_PeriodElapsedCallback+0x2c4>
				cuenta = __HAL_TIM_GET_COUNTER(&htim2);
 8001028:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fa70 	bl	8000514 <__aeabi_ui2d>
 8001034:	4603      	mov	r3, r0
 8001036:	460c      	mov	r4, r1
 8001038:	4a3c      	ldr	r2, [pc, #240]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800103a:	e9c2 3400 	strd	r3, r4, [r2]
				cuenta2 = TIM2->CNT;
 800103e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fa65 	bl	8000514 <__aeabi_ui2d>
 800104a:	4603      	mov	r3, r0
 800104c:	460c      	mov	r4, r1
 800104e:	4a38      	ldr	r2, [pc, #224]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8001050:	e9c2 3400 	strd	r3, r4, [r2]
				HAL_TIM_Base_Stop_IT(&htim6);
 8001054:	4837      	ldr	r0, [pc, #220]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001056:	f002 fe45 	bl	8003ce4 <HAL_TIM_Base_Stop_IT>
				enviarcuenta();
 800105a:	f000 f95b 	bl	8001314 <enviarcuenta>
				FLAG_REDUCER = false;
 800105e:	4b31      	ldr	r3, [pc, #196]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
			}
		}
		if (FLAG_TRANSFER == true) {
 8001064:	4b34      	ldr	r3, [pc, #208]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d03c      	beq.n	80010e6 <HAL_TIM_PeriodElapsedCallback+0x346>
			medidas[i] = __HAL_TIM_GET_COUNTER(&htim2);
 800106c:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001072:	4b26      	ldr	r3, [pc, #152]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001074:	681d      	ldr	r5, [r3, #0]
 8001076:	4610      	mov	r0, r2
 8001078:	f7ff fa4c 	bl	8000514 <__aeabi_ui2d>
 800107c:	4603      	mov	r3, r0
 800107e:	460c      	mov	r4, r1
 8001080:	492e      	ldr	r1, [pc, #184]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001082:	00ea      	lsls	r2, r5, #3
 8001084:	440a      	add	r2, r1
 8001086:	e9c2 3400 	strd	r3, r4, [r2]
			i += 1;
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	4a1e      	ldr	r2, [pc, #120]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001092:	6013      	str	r3, [r2, #0]
			if(i == 600){
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800109c:	d109      	bne.n	80010b2 <HAL_TIM_PeriodElapsedCallback+0x312>
				selec_voltage(0);
 800109e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80010f0 <HAL_TIM_PeriodElapsedCallback+0x350>
 80010a2:	f000 f8e9 	bl	8001278 <selec_voltage>

				i += 1;
 80010a6:	4b19      	ldr	r3, [pc, #100]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4a17      	ldr	r2, [pc, #92]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80010ae:	6013      	str	r3, [r2, #0]


	}
	else {
	}
}
 80010b0:	e019      	b.n	80010e6 <HAL_TIM_PeriodElapsedCallback+0x346>
			else if(i == 1200){
 80010b2:	4b16      	ldr	r3, [pc, #88]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80010ba:	d114      	bne.n	80010e6 <HAL_TIM_PeriodElapsedCallback+0x346>
				selec_voltage(0);
 80010bc:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80010f0 <HAL_TIM_PeriodElapsedCallback+0x350>
 80010c0:	f000 f8da 	bl	8001278 <selec_voltage>
				HAL_TIM_Base_Stop_IT(&htim6);
 80010c4:	481b      	ldr	r0, [pc, #108]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80010c6:	f002 fe0d 	bl	8003ce4 <HAL_TIM_Base_Stop_IT>
				enviarcuenta();
 80010ca:	f000 f923 	bl	8001314 <enviarcuenta>
				FLAG_TRANSFER = false;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
}
 80010d4:	e007      	b.n	80010e6 <HAL_TIM_PeriodElapsedCallback+0x346>
	else if(htim->Instance==TIM2){
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010de:	d102      	bne.n	80010e6 <HAL_TIM_PeriodElapsedCallback+0x346>
		FLAG_COUNT_OVERFLOW = true;
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bdb0      	pop	{r4, r5, r7, pc}
 80010ee:	bf00      	nop
	...
 80010f8:	20000238 	.word	0x20000238
 80010fc:	20000248 	.word	0x20000248
 8001100:	20000240 	.word	0x20000240
 8001104:	20000275 	.word	0x20000275
 8001108:	20000250 	.word	0x20000250
 800110c:	20000228 	.word	0x20000228
 8001110:	20007698 	.word	0x20007698
 8001114:	20000276 	.word	0x20000276
 8001118:	20000272 	.word	0x20000272
 800111c:	20000273 	.word	0x20000273
 8001120:	20000274 	.word	0x20000274
 8001124:	20000270 	.word	0x20000270
 8001128:	2000d4e0 	.word	0x2000d4e0
 800112c:	20000220 	.word	0x20000220
 8001130:	20000218 	.word	0x20000218
 8001134:	2000d4a0 	.word	0x2000d4a0
 8001138:	20000271 	.word	0x20000271
 800113c:	200002f0 	.word	0x200002f0

08001140 <move>:
 * @brief  Start PWM pins with specific duties cycles
 * @param  v1: Duty cycle of first PWM .
 * @param  v2:  Duty cycle of second PWM.
 * @retval None
 */
void move(double_t v1,double_t v2){
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	ed87 0b02 	vstr	d0, [r7, #8]
 800114a:	ed87 1b00 	vstr	d1, [r7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001158:	f001 f9ec 	bl	8002534 <HAL_GPIO_WritePin>
	v1 = round(v1);
 800115c:	ed97 0b02 	vldr	d0, [r7, #8]
 8001160:	f006 fafe 	bl	8007760 <round>
 8001164:	ed87 0b02 	vstr	d0, [r7, #8]
	v2 = round(v2);
 8001168:	ed97 0b00 	vldr	d0, [r7]
 800116c:	f006 faf8 	bl	8007760 <round>
 8001170:	ed87 0b00 	vstr	d0, [r7]

	if(v1>999){
 8001174:	a33d      	add	r3, pc, #244	; (adr r3, 800126c <move+0x12c>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800117e:	f7ff fcd3 	bl	8000b28 <__aeabi_dcmpgt>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <move+0x54>
		v1 = 999;
 8001188:	a438      	add	r4, pc, #224	; (adr r4, 800126c <move+0x12c>)
 800118a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800118e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8001192:	e010      	b.n	80011b6 <move+0x76>
	}
	else if(v1<0){
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011a0:	f7ff fca4 	bl	8000aec <__aeabi_dcmplt>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d005      	beq.n	80011b6 <move+0x76>
		v1 = 0;
 80011aa:	f04f 0300 	mov.w	r3, #0
 80011ae:	f04f 0400 	mov.w	r4, #0
 80011b2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	}

	if(v2<0){
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011c2:	f7ff fc93 	bl	8000aec <__aeabi_dcmplt>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d006      	beq.n	80011da <move+0x9a>
		v2 = 0;
 80011cc:	f04f 0300 	mov.w	r3, #0
 80011d0:	f04f 0400 	mov.w	r4, #0
 80011d4:	e9c7 3400 	strd	r3, r4, [r7]
 80011d8:	e00e      	b.n	80011f8 <move+0xb8>
	}
	else if(v2>999){
 80011da:	a324      	add	r3, pc, #144	; (adr r3, 800126c <move+0x12c>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011e4:	f7ff fca0 	bl	8000b28 <__aeabi_dcmpgt>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d004      	beq.n	80011f8 <move+0xb8>
		v2 = 999;
 80011ee:	a41f      	add	r4, pc, #124	; (adr r4, 800126c <move+0x12c>)
 80011f0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80011f4:	e9c7 3400 	strd	r3, r4, [r7]
	}

	if(v1 != 0 && v2 !=0){
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001204:	f7ff fc68 	bl	8000ad8 <__aeabi_dcmpeq>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d116      	bne.n	800123c <move+0xfc>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	e9d7 0100 	ldrd	r0, r1, [r7]
 800121a:	f7ff fc5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10b      	bne.n	800123c <move+0xfc>
		v1 = 0;
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	f04f 0400 	mov.w	r4, #0
 800122c:	e9c7 3402 	strd	r3, r4, [r7, #8]
		v2 = 0;
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	f04f 0400 	mov.w	r4, #0
 8001238:	e9c7 3400 	strd	r3, r4, [r7]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,v1);
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <move+0x128>)
 800123e:	681c      	ldr	r4, [r3, #0]
 8001240:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001244:	f7ff fcb8 	bl	8000bb8 <__aeabi_d2uiz>
 8001248:	4603      	mov	r3, r0
 800124a:	6363      	str	r3, [r4, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,v2);
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <move+0x128>)
 800124e:	681c      	ldr	r4, [r3, #0]
 8001250:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001254:	f7ff fcb0 	bl	8000bb8 <__aeabi_d2uiz>
 8001258:	4603      	mov	r3, r0
 800125a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	bd90      	pop	{r4, r7, pc}
 8001264:	f3af 8000 	nop.w
 8001268:	2000d460 	.word	0x2000d460
 800126c:	00000000 	.word	0x00000000
 8001270:	408f3800 	.word	0x408f3800
 8001274:	00000000 	.word	0x00000000

08001278 <selec_voltage>:
/**
 * @brief  Estimate the duty cycle of the PWM, according to the mean voltage selected and call move function with this values.
 * @param  V: the average voltage of the PWM.
 * @retval None
 */
void selec_voltage (double_t V){
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	ed87 0b00 	vstr	d0, [r7]
	double tension_pwm;
	tension_pwm = (V/12)*999;
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b22      	ldr	r3, [pc, #136]	; (8001310 <selec_voltage+0x98>)
 8001288:	e9d7 0100 	ldrd	r0, r1, [r7]
 800128c:	f7ff fae6 	bl	800085c <__aeabi_ddiv>
 8001290:	4603      	mov	r3, r0
 8001292:	460c      	mov	r4, r1
 8001294:	4618      	mov	r0, r3
 8001296:	4621      	mov	r1, r4
 8001298:	a319      	add	r3, pc, #100	; (adr r3, 8001300 <selec_voltage+0x88>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7ff f9b3 	bl	8000608 <__aeabi_dmul>
 80012a2:	4603      	mov	r3, r0
 80012a4:	460c      	mov	r4, r1
 80012a6:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if (V>0) {
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	f04f 0300 	mov.w	r3, #0
 80012b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012b6:	f7ff fc37 	bl	8000b28 <__aeabi_dcmpgt>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d006      	beq.n	80012ce <selec_voltage+0x56>
		move(tension_pwm,0);
 80012c0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8001308 <selec_voltage+0x90>
 80012c4:	ed97 0b02 	vldr	d0, [r7, #8]
 80012c8:	f7ff ff3a 	bl	8001140 <move>
	}else {
		tension_pwm = abs(tension_pwm);
		move(0,tension_pwm);
	}

}
 80012cc:	e014      	b.n	80012f8 <selec_voltage+0x80>
		tension_pwm = abs(tension_pwm);
 80012ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012d2:	f7ff fc49 	bl	8000b68 <__aeabi_d2iz>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bfb8      	it	lt
 80012dc:	425b      	neglt	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f928 	bl	8000534 <__aeabi_i2d>
 80012e4:	4603      	mov	r3, r0
 80012e6:	460c      	mov	r4, r1
 80012e8:	e9c7 3402 	strd	r3, r4, [r7, #8]
		move(0,tension_pwm);
 80012ec:	ed97 1b02 	vldr	d1, [r7, #8]
 80012f0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8001308 <selec_voltage+0x90>
 80012f4:	f7ff ff24 	bl	8001140 <move>
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd90      	pop	{r4, r7, pc}
 8001300:	00000000 	.word	0x00000000
 8001304:	408f3800 	.word	0x408f3800
	...
 8001310:	40280000 	.word	0x40280000

08001314 <enviarcuenta>:
/**
 * @brief  Send measures via ST link USB for UART
 * @retval None
 */
void enviarcuenta(){
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b087      	sub	sp, #28
 8001318:	af02      	add	r7, sp, #8
	if (FLAG_TRANSFER == true) {
 800131a:	4b51      	ldr	r3, [pc, #324]	; (8001460 <enviarcuenta+0x14c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d028      	beq.n	8001374 <enviarcuenta+0x60>
		for(int i = 0; i<num_muestras_controlador; i++){
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	e010      	b.n	800134a <enviarcuenta+0x36>
			sprintf(str_name, "%s%d\t%f\n",str_name , i,medidas[i]);
 8001328:	4a4e      	ldr	r2, [pc, #312]	; (8001464 <enviarcuenta+0x150>)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4413      	add	r3, r2
 8001330:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001334:	e9cd 3400 	strd	r3, r4, [sp]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4a4b      	ldr	r2, [pc, #300]	; (8001468 <enviarcuenta+0x154>)
 800133c:	494b      	ldr	r1, [pc, #300]	; (800146c <enviarcuenta+0x158>)
 800133e:	484a      	ldr	r0, [pc, #296]	; (8001468 <enviarcuenta+0x154>)
 8001340:	f004 fe2e 	bl	8005fa0 <siprintf>
		for(int i = 0; i<num_muestras_controlador; i++){
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3301      	adds	r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001350:	4293      	cmp	r3, r2
 8001352:	dde9      	ble.n	8001328 <enviarcuenta+0x14>
		}
		sprintf(str_name, "%s#",str_name);
 8001354:	4a44      	ldr	r2, [pc, #272]	; (8001468 <enviarcuenta+0x154>)
 8001356:	4946      	ldr	r1, [pc, #280]	; (8001470 <enviarcuenta+0x15c>)
 8001358:	4843      	ldr	r0, [pc, #268]	; (8001468 <enviarcuenta+0x154>)
 800135a:	f004 fe21 	bl	8005fa0 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) str_name, strlen(str_name), HAL_MAX_DELAY);
 800135e:	4842      	ldr	r0, [pc, #264]	; (8001468 <enviarcuenta+0x154>)
 8001360:	f7fe ff3e 	bl	80001e0 <strlen>
 8001364:	4603      	mov	r3, r0
 8001366:	b29a      	uxth	r2, r3
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
 800136c:	493e      	ldr	r1, [pc, #248]	; (8001468 <enviarcuenta+0x154>)
 800136e:	4841      	ldr	r0, [pc, #260]	; (8001474 <enviarcuenta+0x160>)
 8001370:	f003 fd78 	bl	8004e64 <HAL_UART_Transmit>
	}
	if (FLAG_REDUCER == true) {
 8001374:	4b40      	ldr	r3, [pc, #256]	; (8001478 <enviarcuenta+0x164>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d018      	beq.n	80013ae <enviarcuenta+0x9a>
		sprintf(str_name_reducer, "Cuenta = %f\t %f", cuenta,cuenta2);
 800137c:	4b3f      	ldr	r3, [pc, #252]	; (800147c <enviarcuenta+0x168>)
 800137e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001382:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <enviarcuenta+0x16c>)
 8001384:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001388:	e9cd 3400 	strd	r3, r4, [sp]
 800138c:	4613      	mov	r3, r2
 800138e:	460a      	mov	r2, r1
 8001390:	493c      	ldr	r1, [pc, #240]	; (8001484 <enviarcuenta+0x170>)
 8001392:	483d      	ldr	r0, [pc, #244]	; (8001488 <enviarcuenta+0x174>)
 8001394:	f004 fe04 	bl	8005fa0 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) str_name_reducer, strlen(str_name_reducer), HAL_MAX_DELAY);
 8001398:	483b      	ldr	r0, [pc, #236]	; (8001488 <enviarcuenta+0x174>)
 800139a:	f7fe ff21 	bl	80001e0 <strlen>
 800139e:	4603      	mov	r3, r0
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	4938      	ldr	r1, [pc, #224]	; (8001488 <enviarcuenta+0x174>)
 80013a8:	4832      	ldr	r0, [pc, #200]	; (8001474 <enviarcuenta+0x160>)
 80013aa:	f003 fd5b 	bl	8004e64 <HAL_UART_Transmit>
	}
	if (FLAG_PROPORTIONAL == true) {
 80013ae:	4b37      	ldr	r3, [pc, #220]	; (800148c <enviarcuenta+0x178>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d050      	beq.n	8001458 <enviarcuenta+0x144>
		for(int i = 0; i<(int)(num_muestras_controlador/2); i++){
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	e010      	b.n	80013de <enviarcuenta+0xca>
			sprintf(str_name, "%s%d\t%f\n",str_name , i,pos_buffer[i]);
 80013bc:	4a34      	ldr	r2, [pc, #208]	; (8001490 <enviarcuenta+0x17c>)
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	4413      	add	r3, r2
 80013c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013c8:	e9cd 3400 	strd	r3, r4, [sp]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4a26      	ldr	r2, [pc, #152]	; (8001468 <enviarcuenta+0x154>)
 80013d0:	4926      	ldr	r1, [pc, #152]	; (800146c <enviarcuenta+0x158>)
 80013d2:	4825      	ldr	r0, [pc, #148]	; (8001468 <enviarcuenta+0x154>)
 80013d4:	f004 fde4 	bl	8005fa0 <siprintf>
		for(int i = 0; i<(int)(num_muestras_controlador/2); i++){
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	3301      	adds	r3, #1
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f240 52db 	movw	r2, #1499	; 0x5db
 80013e4:	4293      	cmp	r3, r2
 80013e6:	dde9      	ble.n	80013bc <enviarcuenta+0xa8>
		}
		HAL_UART_Transmit(&huart2,(uint8_t*) str_name, strlen(str_name), HAL_MAX_DELAY);
 80013e8:	481f      	ldr	r0, [pc, #124]	; (8001468 <enviarcuenta+0x154>)
 80013ea:	f7fe fef9 	bl	80001e0 <strlen>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	491c      	ldr	r1, [pc, #112]	; (8001468 <enviarcuenta+0x154>)
 80013f8:	481e      	ldr	r0, [pc, #120]	; (8001474 <enviarcuenta+0x160>)
 80013fa:	f003 fd33 	bl	8004e64 <HAL_UART_Transmit>
		strcpy(str_name,"");
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <enviarcuenta+0x154>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
		for(int i = (num_muestras_controlador/2); i<(int)(num_muestras_controlador); i++){
 8001404:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	e010      	b.n	800142e <enviarcuenta+0x11a>
					sprintf(str_name, "%s%d\t%f\n",str_name , i,pos_buffer[i]);
 800140c:	4a20      	ldr	r2, [pc, #128]	; (8001490 <enviarcuenta+0x17c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4413      	add	r3, r2
 8001414:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001418:	e9cd 3400 	strd	r3, r4, [sp]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <enviarcuenta+0x154>)
 8001420:	4912      	ldr	r1, [pc, #72]	; (800146c <enviarcuenta+0x158>)
 8001422:	4811      	ldr	r0, [pc, #68]	; (8001468 <enviarcuenta+0x154>)
 8001424:	f004 fdbc 	bl	8005fa0 <siprintf>
		for(int i = (num_muestras_controlador/2); i<(int)(num_muestras_controlador); i++){
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3301      	adds	r3, #1
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001434:	4293      	cmp	r3, r2
 8001436:	dde9      	ble.n	800140c <enviarcuenta+0xf8>
				}
		sprintf(str_name, "%s#",str_name);
 8001438:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <enviarcuenta+0x154>)
 800143a:	490d      	ldr	r1, [pc, #52]	; (8001470 <enviarcuenta+0x15c>)
 800143c:	480a      	ldr	r0, [pc, #40]	; (8001468 <enviarcuenta+0x154>)
 800143e:	f004 fdaf 	bl	8005fa0 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) str_name, strlen(str_name), HAL_MAX_DELAY);
 8001442:	4809      	ldr	r0, [pc, #36]	; (8001468 <enviarcuenta+0x154>)
 8001444:	f7fe fecc 	bl	80001e0 <strlen>
 8001448:	4603      	mov	r3, r0
 800144a:	b29a      	uxth	r2, r3
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	4905      	ldr	r1, [pc, #20]	; (8001468 <enviarcuenta+0x154>)
 8001452:	4808      	ldr	r0, [pc, #32]	; (8001474 <enviarcuenta+0x160>)
 8001454:	f003 fd06 	bl	8004e64 <HAL_UART_Transmit>
	}

}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	20000271 	.word	0x20000271
 8001464:	200002f0 	.word	0x200002f0
 8001468:	20002870 	.word	0x20002870
 800146c:	08007810 	.word	0x08007810
 8001470:	0800781c 	.word	0x0800781c
 8001474:	2000d520 	.word	0x2000d520
 8001478:	20000270 	.word	0x20000270
 800147c:	20000220 	.word	0x20000220
 8001480:	20000218 	.word	0x20000218
 8001484:	08007820 	.word	0x08007820
 8001488:	20000288 	.word	0x20000288
 800148c:	20000276 	.word	0x20000276
 8001490:	20007698 	.word	0x20007698

08001494 <setref>:
/**
 * @brief Set reference for controller
 * @param ref: reference
 * @retval None
 */
void setref(double ref, enum Controlador controlador){
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	ed87 0b02 	vstr	d0, [r7, #8]
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
	referencia = ref;
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <setref+0x58>)
 80014a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80014a8:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <setref+0x5c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
	if (controlador == Lineal) {
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d105      	bne.n	80014c6 <setref+0x32>
		FLAG_PROPORTIONAL_CONTROLER = true;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <setref+0x60>)
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
		FLAG_PROPORTIONAL = true;
 80014c0:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <setref+0x64>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
	}
	if (controlador == Derivativo) {
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d102      	bne.n	80014d2 <setref+0x3e>
		FLAG_DERIVATIVE_CONTROLER = true;
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <setref+0x68>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]

	}
	if (controlador == Integrador) {
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d102      	bne.n	80014de <setref+0x4a>
		FLAG_INTEGRATOR_CONTROLER = true;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <setref+0x6c>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
	}

	HAL_TIM_Base_Start_IT(&htim6);
 80014de:	4809      	ldr	r0, [pc, #36]	; (8001504 <setref+0x70>)
 80014e0:	f002 fbd6 	bl	8003c90 <HAL_TIM_Base_Start_IT>
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd90      	pop	{r4, r7, pc}
 80014ec:	20000230 	.word	0x20000230
 80014f0:	2000d4e0 	.word	0x2000d4e0
 80014f4:	20000272 	.word	0x20000272
 80014f8:	20000276 	.word	0x20000276
 80014fc:	20000273 	.word	0x20000273
 8001500:	20000274 	.word	0x20000274
 8001504:	2000d4a0 	.word	0x2000d4a0

08001508 <controlador_proporcional>:

/**
 * @brief	Linear Controller
 * @retval None
 */
void controlador_proporcional(double pos_i){
 8001508:	b5b0      	push	{r4, r5, r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	ed87 0b00 	vstr	d0, [r7]
	if (referencia <0) {
 8001512:	4b3d      	ldr	r3, [pc, #244]	; (8001608 <controlador_proporcional+0x100>)
 8001514:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	f7ff fae4 	bl	8000aec <__aeabi_dcmplt>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d028      	beq.n	800157c <controlador_proporcional+0x74>
		e = referencia + (pos_i * 2 * M_PI / pulse_per_revolution);
 800152a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	f7fe feb3 	bl	800029c <__adddf3>
 8001536:	4603      	mov	r3, r0
 8001538:	460c      	mov	r4, r1
 800153a:	4618      	mov	r0, r3
 800153c:	4621      	mov	r1, r4
 800153e:	a32e      	add	r3, pc, #184	; (adr r3, 80015f8 <controlador_proporcional+0xf0>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7ff f860 	bl	8000608 <__aeabi_dmul>
 8001548:	4603      	mov	r3, r0
 800154a:	460c      	mov	r4, r1
 800154c:	4618      	mov	r0, r3
 800154e:	4621      	mov	r1, r4
 8001550:	a32b      	add	r3, pc, #172	; (adr r3, 8001600 <controlador_proporcional+0xf8>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	f7ff f981 	bl	800085c <__aeabi_ddiv>
 800155a:	4603      	mov	r3, r0
 800155c:	460c      	mov	r4, r1
 800155e:	4618      	mov	r0, r3
 8001560:	4621      	mov	r1, r4
 8001562:	4b29      	ldr	r3, [pc, #164]	; (8001608 <controlador_proporcional+0x100>)
 8001564:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001568:	461a      	mov	r2, r3
 800156a:	4623      	mov	r3, r4
 800156c:	f7fe fe96 	bl	800029c <__adddf3>
 8001570:	4603      	mov	r3, r0
 8001572:	460c      	mov	r4, r1
 8001574:	4a25      	ldr	r2, [pc, #148]	; (800160c <controlador_proporcional+0x104>)
 8001576:	e9c2 3400 	strd	r3, r4, [r2]
 800157a:	e025      	b.n	80015c8 <controlador_proporcional+0xc0>
	}else {
		e = referencia - (pos_i * 2 * M_PI / pulse_per_revolution);
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <controlador_proporcional+0x100>)
 800157e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001582:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	f7fe fe87 	bl	800029c <__adddf3>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	a318      	add	r3, pc, #96	; (adr r3, 80015f8 <controlador_proporcional+0xf0>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7ff f834 	bl	8000608 <__aeabi_dmul>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	a315      	add	r3, pc, #84	; (adr r3, 8001600 <controlador_proporcional+0xf8>)
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7ff f955 	bl	800085c <__aeabi_ddiv>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4620      	mov	r0, r4
 80015b8:	4629      	mov	r1, r5
 80015ba:	f7fe fe6d 	bl	8000298 <__aeabi_dsub>
 80015be:	4603      	mov	r3, r0
 80015c0:	460c      	mov	r4, r1
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <controlador_proporcional+0x104>)
 80015c4:	e9c2 3400 	strd	r3, r4, [r2]
	}

	selec_voltage((double)kp * e);
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <controlador_proporcional+0x108>)
 80015ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <controlador_proporcional+0x104>)
 80015d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4623      	mov	r3, r4
 80015d8:	f7ff f816 	bl	8000608 <__aeabi_dmul>
 80015dc:	4603      	mov	r3, r0
 80015de:	460c      	mov	r4, r1
 80015e0:	ec44 3b17 	vmov	d7, r3, r4
 80015e4:	eeb0 0a47 	vmov.f32	s0, s14
 80015e8:	eef0 0a67 	vmov.f32	s1, s15
 80015ec:	f7ff fe44 	bl	8001278 <selec_voltage>

}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bdb0      	pop	{r4, r5, r7, pc}
 80015f8:	54442d18 	.word	0x54442d18
 80015fc:	400921fb 	.word	0x400921fb
 8001600:	00000000 	.word	0x00000000
 8001604:	40aba000 	.word	0x40aba000
 8001608:	20000230 	.word	0x20000230
 800160c:	20000258 	.word	0x20000258
 8001610:	20000000 	.word	0x20000000
 8001614:	00000000 	.word	0x00000000

08001618 <controlador_derivativo>:
void controlador_derivativo(double pos_i){
 8001618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	ed87 0b00 	vstr	d0, [r7]
	if (referencia <0) {
 8001622:	4b55      	ldr	r3, [pc, #340]	; (8001778 <controlador_derivativo+0x160>)
 8001624:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	f7ff fa5c 	bl	8000aec <__aeabi_dcmplt>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d02e      	beq.n	8001698 <controlador_derivativo+0x80>
		e_last = e;
 800163a:	4b50      	ldr	r3, [pc, #320]	; (800177c <controlador_derivativo+0x164>)
 800163c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001640:	4a4f      	ldr	r2, [pc, #316]	; (8001780 <controlador_derivativo+0x168>)
 8001642:	e9c2 3400 	strd	r3, r4, [r2]
		e = referencia + (pos_i * 2 * M_PI / pulse_per_revolution);
 8001646:	e9d7 0100 	ldrd	r0, r1, [r7]
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	f7fe fe25 	bl	800029c <__adddf3>
 8001652:	4603      	mov	r3, r0
 8001654:	460c      	mov	r4, r1
 8001656:	4618      	mov	r0, r3
 8001658:	4621      	mov	r1, r4
 800165a:	a343      	add	r3, pc, #268	; (adr r3, 8001768 <controlador_derivativo+0x150>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7fe ffd2 	bl	8000608 <__aeabi_dmul>
 8001664:	4603      	mov	r3, r0
 8001666:	460c      	mov	r4, r1
 8001668:	4618      	mov	r0, r3
 800166a:	4621      	mov	r1, r4
 800166c:	a340      	add	r3, pc, #256	; (adr r3, 8001770 <controlador_derivativo+0x158>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7ff f8f3 	bl	800085c <__aeabi_ddiv>
 8001676:	4603      	mov	r3, r0
 8001678:	460c      	mov	r4, r1
 800167a:	4618      	mov	r0, r3
 800167c:	4621      	mov	r1, r4
 800167e:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <controlador_derivativo+0x160>)
 8001680:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001684:	461a      	mov	r2, r3
 8001686:	4623      	mov	r3, r4
 8001688:	f7fe fe08 	bl	800029c <__adddf3>
 800168c:	4603      	mov	r3, r0
 800168e:	460c      	mov	r4, r1
 8001690:	4a3a      	ldr	r2, [pc, #232]	; (800177c <controlador_derivativo+0x164>)
 8001692:	e9c2 3400 	strd	r3, r4, [r2]
 8001696:	e02b      	b.n	80016f0 <controlador_derivativo+0xd8>
	}else {
		e_last = e;
 8001698:	4b38      	ldr	r3, [pc, #224]	; (800177c <controlador_derivativo+0x164>)
 800169a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800169e:	4a38      	ldr	r2, [pc, #224]	; (8001780 <controlador_derivativo+0x168>)
 80016a0:	e9c2 3400 	strd	r3, r4, [r2]
		e = referencia - (pos_i * 2 * M_PI / pulse_per_revolution);
 80016a4:	4b34      	ldr	r3, [pc, #208]	; (8001778 <controlador_derivativo+0x160>)
 80016a6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80016aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	f7fe fdf3 	bl	800029c <__adddf3>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	a32a      	add	r3, pc, #168	; (adr r3, 8001768 <controlador_derivativo+0x150>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ffa0 	bl	8000608 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	a327      	add	r3, pc, #156	; (adr r3, 8001770 <controlador_derivativo+0x158>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	f7ff f8c1 	bl	800085c <__aeabi_ddiv>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4620      	mov	r0, r4
 80016e0:	4629      	mov	r1, r5
 80016e2:	f7fe fdd9 	bl	8000298 <__aeabi_dsub>
 80016e6:	4603      	mov	r3, r0
 80016e8:	460c      	mov	r4, r1
 80016ea:	4a24      	ldr	r2, [pc, #144]	; (800177c <controlador_derivativo+0x164>)
 80016ec:	e9c2 3400 	strd	r3, r4, [r2]
	}


	selec_voltage((double)(kp * e +kd * (e-e_last)));
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <controlador_derivativo+0x16c>)
 80016f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016f6:	4b21      	ldr	r3, [pc, #132]	; (800177c <controlador_derivativo+0x164>)
 80016f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016fc:	461a      	mov	r2, r3
 80016fe:	4623      	mov	r3, r4
 8001700:	f7fe ff82 	bl	8000608 <__aeabi_dmul>
 8001704:	4603      	mov	r3, r0
 8001706:	460c      	mov	r4, r1
 8001708:	461d      	mov	r5, r3
 800170a:	4626      	mov	r6, r4
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <controlador_derivativo+0x164>)
 800170e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <controlador_derivativo+0x168>)
 8001714:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001718:	461a      	mov	r2, r3
 800171a:	4623      	mov	r3, r4
 800171c:	f7fe fdbc 	bl	8000298 <__aeabi_dsub>
 8001720:	4603      	mov	r3, r0
 8001722:	460c      	mov	r4, r1
 8001724:	4618      	mov	r0, r3
 8001726:	4621      	mov	r1, r4
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <controlador_derivativo+0x170>)
 800172a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800172e:	461a      	mov	r2, r3
 8001730:	4623      	mov	r3, r4
 8001732:	f7fe ff69 	bl	8000608 <__aeabi_dmul>
 8001736:	4603      	mov	r3, r0
 8001738:	460c      	mov	r4, r1
 800173a:	461a      	mov	r2, r3
 800173c:	4623      	mov	r3, r4
 800173e:	4628      	mov	r0, r5
 8001740:	4631      	mov	r1, r6
 8001742:	f7fe fdab 	bl	800029c <__adddf3>
 8001746:	4603      	mov	r3, r0
 8001748:	460c      	mov	r4, r1
 800174a:	ec44 3b17 	vmov	d7, r3, r4
 800174e:	eeb0 0a47 	vmov.f32	s0, s14
 8001752:	eef0 0a67 	vmov.f32	s1, s15
 8001756:	f7ff fd8f 	bl	8001278 <selec_voltage>
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001762:	bf00      	nop
 8001764:	f3af 8000 	nop.w
 8001768:	54442d18 	.word	0x54442d18
 800176c:	400921fb 	.word	0x400921fb
 8001770:	00000000 	.word	0x00000000
 8001774:	40aba000 	.word	0x40aba000
 8001778:	20000230 	.word	0x20000230
 800177c:	20000258 	.word	0x20000258
 8001780:	20000260 	.word	0x20000260
 8001784:	20000000 	.word	0x20000000
 8001788:	20000008 	.word	0x20000008
 800178c:	00000000 	.word	0x00000000

08001790 <controlador_integrador>:
void controlador_integrador(double pos_i){
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	ed87 0b00 	vstr	d0, [r7]
	if (referencia <0) {
 800179a:	4b57      	ldr	r3, [pc, #348]	; (80018f8 <controlador_integrador+0x168>)
 800179c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	f7ff f9a0 	bl	8000aec <__aeabi_dcmplt>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d037      	beq.n	8001822 <controlador_integrador+0x92>

		e = referencia + (pos_i * 2 * M_PI / pulse_per_revolution);
 80017b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	f7fe fd6f 	bl	800029c <__adddf3>
 80017be:	4603      	mov	r3, r0
 80017c0:	460c      	mov	r4, r1
 80017c2:	4618      	mov	r0, r3
 80017c4:	4621      	mov	r1, r4
 80017c6:	a348      	add	r3, pc, #288	; (adr r3, 80018e8 <controlador_integrador+0x158>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe ff1c 	bl	8000608 <__aeabi_dmul>
 80017d0:	4603      	mov	r3, r0
 80017d2:	460c      	mov	r4, r1
 80017d4:	4618      	mov	r0, r3
 80017d6:	4621      	mov	r1, r4
 80017d8:	a345      	add	r3, pc, #276	; (adr r3, 80018f0 <controlador_integrador+0x160>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7ff f83d 	bl	800085c <__aeabi_ddiv>
 80017e2:	4603      	mov	r3, r0
 80017e4:	460c      	mov	r4, r1
 80017e6:	4618      	mov	r0, r3
 80017e8:	4621      	mov	r1, r4
 80017ea:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <controlador_integrador+0x168>)
 80017ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4623      	mov	r3, r4
 80017f4:	f7fe fd52 	bl	800029c <__adddf3>
 80017f8:	4603      	mov	r3, r0
 80017fa:	460c      	mov	r4, r1
 80017fc:	4a3f      	ldr	r2, [pc, #252]	; (80018fc <controlador_integrador+0x16c>)
 80017fe:	e9c2 3400 	strd	r3, r4, [r2]
		e_sum= e_sum + e;
 8001802:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <controlador_integrador+0x170>)
 8001804:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001808:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <controlador_integrador+0x16c>)
 800180a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800180e:	461a      	mov	r2, r3
 8001810:	4623      	mov	r3, r4
 8001812:	f7fe fd43 	bl	800029c <__adddf3>
 8001816:	4603      	mov	r3, r0
 8001818:	460c      	mov	r4, r1
 800181a:	4a39      	ldr	r2, [pc, #228]	; (8001900 <controlador_integrador+0x170>)
 800181c:	e9c2 3400 	strd	r3, r4, [r2]
 8001820:	e034      	b.n	800188c <controlador_integrador+0xfc>
	}else {

		e = referencia - (pos_i * 2 * M_PI / pulse_per_revolution);
 8001822:	4b35      	ldr	r3, [pc, #212]	; (80018f8 <controlador_integrador+0x168>)
 8001824:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001828:	e9d7 0100 	ldrd	r0, r1, [r7]
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	f7fe fd34 	bl	800029c <__adddf3>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	a32a      	add	r3, pc, #168	; (adr r3, 80018e8 <controlador_integrador+0x158>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	f7fe fee1 	bl	8000608 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	a328      	add	r3, pc, #160	; (adr r3, 80018f0 <controlador_integrador+0x160>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7ff f802 	bl	800085c <__aeabi_ddiv>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4620      	mov	r0, r4
 800185e:	4629      	mov	r1, r5
 8001860:	f7fe fd1a 	bl	8000298 <__aeabi_dsub>
 8001864:	4603      	mov	r3, r0
 8001866:	460c      	mov	r4, r1
 8001868:	4a24      	ldr	r2, [pc, #144]	; (80018fc <controlador_integrador+0x16c>)
 800186a:	e9c2 3400 	strd	r3, r4, [r2]
		e_sum = e_sum + e;
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <controlador_integrador+0x170>)
 8001870:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <controlador_integrador+0x16c>)
 8001876:	e9d3 3400 	ldrd	r3, r4, [r3]
 800187a:	461a      	mov	r2, r3
 800187c:	4623      	mov	r3, r4
 800187e:	f7fe fd0d 	bl	800029c <__adddf3>
 8001882:	4603      	mov	r3, r0
 8001884:	460c      	mov	r4, r1
 8001886:	4a1e      	ldr	r2, [pc, #120]	; (8001900 <controlador_integrador+0x170>)
 8001888:	e9c2 3400 	strd	r3, r4, [r2]
	}

	selec_voltage((double)(kp * e +ki * e_sum));
 800188c:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <controlador_integrador+0x174>)
 800188e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <controlador_integrador+0x16c>)
 8001894:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001898:	461a      	mov	r2, r3
 800189a:	4623      	mov	r3, r4
 800189c:	f7fe feb4 	bl	8000608 <__aeabi_dmul>
 80018a0:	4603      	mov	r3, r0
 80018a2:	460c      	mov	r4, r1
 80018a4:	461d      	mov	r5, r3
 80018a6:	4626      	mov	r6, r4
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <controlador_integrador+0x178>)
 80018aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <controlador_integrador+0x170>)
 80018b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4623      	mov	r3, r4
 80018b8:	f7fe fea6 	bl	8000608 <__aeabi_dmul>
 80018bc:	4603      	mov	r3, r0
 80018be:	460c      	mov	r4, r1
 80018c0:	461a      	mov	r2, r3
 80018c2:	4623      	mov	r3, r4
 80018c4:	4628      	mov	r0, r5
 80018c6:	4631      	mov	r1, r6
 80018c8:	f7fe fce8 	bl	800029c <__adddf3>
 80018cc:	4603      	mov	r3, r0
 80018ce:	460c      	mov	r4, r1
 80018d0:	ec44 3b17 	vmov	d7, r3, r4
 80018d4:	eeb0 0a47 	vmov.f32	s0, s14
 80018d8:	eef0 0a67 	vmov.f32	s1, s15
 80018dc:	f7ff fccc 	bl	8001278 <selec_voltage>

}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e8:	54442d18 	.word	0x54442d18
 80018ec:	400921fb 	.word	0x400921fb
 80018f0:	00000000 	.word	0x00000000
 80018f4:	40aba000 	.word	0x40aba000
 80018f8:	20000230 	.word	0x20000230
 80018fc:	20000258 	.word	0x20000258
 8001900:	20000268 	.word	0x20000268
 8001904:	20000000 	.word	0x20000000
 8001908:	20000010 	.word	0x20000010

0800190c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_MspInit+0x44>)
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_MspInit+0x44>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6193      	str	r3, [r2, #24]
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_MspInit+0x44>)
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_MspInit+0x44>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_MspInit+0x44>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	61d3      	str	r3, [r2, #28]
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_MspInit+0x44>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <HardFault_Handler+0x4>

08001978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <MemManage_Handler+0x4>

0800197e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <UsageFault_Handler+0x4>

0800198a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b8:	f000 fb00 	bl	8001fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}

080019c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <TIM2_IRQHandler+0x10>)
 80019c6:	f002 fb2c 	bl	8004022 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000d4e0 	.word	0x2000d4e0

080019d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <TIM3_IRQHandler+0x10>)
 80019da:	f002 fb22 	bl	8004022 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000d460 	.word	0x2000d460

080019e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <TIM6_DAC_IRQHandler+0x10>)
 80019ee:	f002 fb18 	bl	8004022 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000d4a0 	.word	0x2000d4a0

080019fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <_sbrk+0x50>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <_sbrk+0x16>
		heap_end = &end;
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <_sbrk+0x50>)
 8001a0e:	4a10      	ldr	r2, [pc, #64]	; (8001a50 <_sbrk+0x54>)
 8001a10:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <_sbrk+0x50>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <_sbrk+0x50>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	466a      	mov	r2, sp
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d907      	bls.n	8001a36 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a26:	f003 fe2d 	bl	8005684 <__errno>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	230c      	movs	r3, #12
 8001a2e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
 8001a34:	e006      	b.n	8001a44 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <_sbrk+0x50>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	4a03      	ldr	r2, [pc, #12]	; (8001a4c <_sbrk+0x50>)
 8001a40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000278 	.word	0x20000278
 8001a50:	2000d5a8 	.word	0x2000d5a8

08001a54 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <SystemInit+0x28>)
 8001a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5e:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <SystemInit+0x28>)
 8001a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <SystemInit+0x28>)
 8001a6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a6e:	609a      	str	r2, [r3, #8]
#endif
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	; 0x30
 8001a84:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	2224      	movs	r2, #36	; 0x24
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fe22 	bl	80056d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a94:	463b      	mov	r3, r7
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001a9e:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <MX_TIM2_Init+0xa4>)
 8001aa0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aa4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001aa6:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <MX_TIM2_Init+0xa4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <MX_TIM2_Init+0xa4>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <MX_TIM2_Init+0xa4>)
 8001ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aba:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <MX_TIM2_Init+0xa4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <MX_TIM2_Init+0xa4>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	4619      	mov	r1, r3
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <MX_TIM2_Init+0xa4>)
 8001af2:	f002 f9ad 	bl	8003e50 <HAL_TIM_Encoder_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001afc:	f7ff ff06 	bl	800190c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b00:	2300      	movs	r3, #0
 8001b02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b08:	463b      	mov	r3, r7
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_TIM2_Init+0xa4>)
 8001b0e:	f003 f8b1 	bl	8004c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001b18:	f7ff fef8 	bl	800190c <Error_Handler>
  }

}
 8001b1c:	bf00      	nop
 8001b1e:	3730      	adds	r7, #48	; 0x30
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	2000d4e0 	.word	0x2000d4e0

08001b28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
 8001b48:	615a      	str	r2, [r3, #20]
 8001b4a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001b4c:	4b27      	ldr	r3, [pc, #156]	; (8001bec <MX_TIM3_Init+0xc4>)
 8001b4e:	4a28      	ldr	r2, [pc, #160]	; (8001bf0 <MX_TIM3_Init+0xc8>)
 8001b50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <MX_TIM3_Init+0xc4>)
 8001b54:	2202      	movs	r2, #2
 8001b56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b58:	4b24      	ldr	r3, [pc, #144]	; (8001bec <MX_TIM3_Init+0xc4>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001b5e:	4b23      	ldr	r3, [pc, #140]	; (8001bec <MX_TIM3_Init+0xc4>)
 8001b60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <MX_TIM3_Init+0xc4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <MX_TIM3_Init+0xc4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b72:	481e      	ldr	r0, [pc, #120]	; (8001bec <MX_TIM3_Init+0xc4>)
 8001b74:	f002 f8e1 	bl	8003d3a <HAL_TIM_PWM_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001b7e:	f7ff fec5 	bl	800190c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4816      	ldr	r0, [pc, #88]	; (8001bec <MX_TIM3_Init+0xc4>)
 8001b92:	f003 f86f 	bl	8004c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001b9c:	f7ff feb6 	bl	800190c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba0:	2360      	movs	r3, #96	; 0x60
 8001ba2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480d      	ldr	r0, [pc, #52]	; (8001bec <MX_TIM3_Init+0xc4>)
 8001bb8:	f002 fb52 	bl	8004260 <HAL_TIM_PWM_ConfigChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001bc2:	f7ff fea3 	bl	800190c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2204      	movs	r2, #4
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4807      	ldr	r0, [pc, #28]	; (8001bec <MX_TIM3_Init+0xc4>)
 8001bce:	f002 fb47 	bl	8004260 <HAL_TIM_PWM_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001bd8:	f7ff fe98 	bl	800190c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001bdc:	4803      	ldr	r0, [pc, #12]	; (8001bec <MX_TIM3_Init+0xc4>)
 8001bde:	f000 f8d3 	bl	8001d88 <HAL_TIM_MspPostInit>

}
 8001be2:	bf00      	nop
 8001be4:	3728      	adds	r7, #40	; 0x28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000d460 	.word	0x2000d460
 8001bf0:	40000400 	.word	0x40000400

08001bf4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <MX_TIM6_Init+0x64>)
 8001c06:	4a15      	ldr	r2, [pc, #84]	; (8001c5c <MX_TIM6_Init+0x68>)
 8001c08:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 199;
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <MX_TIM6_Init+0x64>)
 8001c0c:	22c7      	movs	r2, #199	; 0xc7
 8001c0e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_TIM6_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 299;
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <MX_TIM6_Init+0x64>)
 8001c18:	f240 122b 	movw	r2, #299	; 0x12b
 8001c1c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <MX_TIM6_Init+0x64>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c24:	480c      	ldr	r0, [pc, #48]	; (8001c58 <MX_TIM6_Init+0x64>)
 8001c26:	f002 f807 	bl	8003c38 <HAL_TIM_Base_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c30:	f7ff fe6c 	bl	800190c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_TIM6_Init+0x64>)
 8001c42:	f003 f817 	bl	8004c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c4c:	f7ff fe5e 	bl	800190c <Error_Handler>
  }

}
 8001c50:	bf00      	nop
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	2000d4a0 	.word	0x2000d4a0
 8001c5c:	40001000 	.word	0x40001000

08001c60 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c80:	d130      	bne.n	8001ce4 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	4a19      	ldr	r2, [pc, #100]	; (8001cec <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	61d3      	str	r3, [r2, #28]
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	4a13      	ldr	r2, [pc, #76]	; (8001cec <HAL_TIM_Encoder_MspInit+0x8c>)
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca4:	6153      	str	r3, [r2, #20]
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_TIM_Encoder_MspInit+0x8c>)
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd0:	f000 faa6 	bl	8002220 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	201c      	movs	r0, #28
 8001cda:	f000 fa6a 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cde:	201c      	movs	r0, #28
 8001ce0:	f000 fa83 	bl	80021ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3728      	adds	r7, #40	; 0x28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000

08001cf0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	; (8001d34 <HAL_TIM_PWM_MspInit+0x44>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d113      	bne.n	8001d2a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_TIM_PWM_MspInit+0x48>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4a0c      	ldr	r2, [pc, #48]	; (8001d38 <HAL_TIM_PWM_MspInit+0x48>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	61d3      	str	r3, [r2, #28]
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_TIM_PWM_MspInit+0x48>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	201d      	movs	r0, #29
 8001d20:	f000 fa47 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d24:	201d      	movs	r0, #29
 8001d26:	f000 fa60 	bl	80021ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40000400 	.word	0x40000400
 8001d38:	40021000 	.word	0x40021000

08001d3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0d      	ldr	r2, [pc, #52]	; (8001d80 <HAL_TIM_Base_MspInit+0x44>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d113      	bne.n	8001d76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <HAL_TIM_Base_MspInit+0x48>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <HAL_TIM_Base_MspInit+0x48>)
 8001d54:	f043 0310 	orr.w	r3, r3, #16
 8001d58:	61d3      	str	r3, [r2, #28]
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_TIM_Base_MspInit+0x48>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2036      	movs	r0, #54	; 0x36
 8001d6c:	f000 fa21 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d70:	2036      	movs	r0, #54	; 0x36
 8001d72:	f000 fa3a 	bl	80021ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40001000 	.word	0x40001000
 8001d84:	40021000 	.word	0x40021000

08001d88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a11      	ldr	r2, [pc, #68]	; (8001dec <HAL_TIM_MspPostInit+0x64>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d11b      	bne.n	8001de2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_TIM_MspPostInit+0x68>)
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <HAL_TIM_MspPostInit+0x68>)
 8001db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db4:	6153      	str	r3, [r2, #20]
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_TIM_MspPostInit+0x68>)
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001dc2:	2330      	movs	r3, #48	; 0x30
 8001dc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4805      	ldr	r0, [pc, #20]	; (8001df4 <HAL_TIM_MspPostInit+0x6c>)
 8001dde:	f000 fa1f 	bl	8002220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001de2:	bf00      	nop
 8001de4:	3720      	adds	r7, #32
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40021000 	.word	0x40021000
 8001df4:	48000400 	.word	0x48000400

08001df8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001dfe:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <MX_USART2_UART_Init+0x5c>)
 8001e00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001e02:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e04:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001e08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e1e:	220c      	movs	r2, #12
 8001e20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e3a:	4805      	ldr	r0, [pc, #20]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e3c:	f002 ffc4 	bl	8004dc8 <HAL_UART_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e46:	f7ff fd61 	bl	800190c <Error_Handler>
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	2000d520 	.word	0x2000d520
 8001e54:	40004400 	.word	0x40004400

08001e58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <HAL_UART_MspInit+0x7c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d128      	bne.n	8001ecc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e7a:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <HAL_UART_MspInit+0x80>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4a16      	ldr	r2, [pc, #88]	; (8001ed8 <HAL_UART_MspInit+0x80>)
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	61d3      	str	r3, [r2, #28]
 8001e86:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_UART_MspInit+0x80>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_UART_MspInit+0x80>)
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	4a10      	ldr	r2, [pc, #64]	; (8001ed8 <HAL_UART_MspInit+0x80>)
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	6153      	str	r3, [r2, #20]
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <HAL_UART_MspInit+0x80>)
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001eaa:	230c      	movs	r3, #12
 8001eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eba:	2307      	movs	r3, #7
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec8:	f000 f9aa 	bl	8002220 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ecc:	bf00      	nop
 8001ece:	3728      	adds	r7, #40	; 0x28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40004400 	.word	0x40004400
 8001ed8:	40021000 	.word	0x40021000

08001edc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f14 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ee0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ee2:	e003      	b.n	8001eec <LoopCopyDataInit>

08001ee4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ee6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ee8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001eea:	3104      	adds	r1, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001eec:	480b      	ldr	r0, [pc, #44]	; (8001f1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ef0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ef2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ef4:	d3f6      	bcc.n	8001ee4 <CopyDataInit>
	ldr	r2, =_sbss
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ef8:	e002      	b.n	8001f00 <LoopFillZerobss>

08001efa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001efa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001efc:	f842 3b04 	str.w	r3, [r2], #4

08001f00 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <LoopForever+0x16>)
	cmp	r2, r3
 8001f02:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f04:	d3f9      	bcc.n	8001efa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f06:	f7ff fda5 	bl	8001a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f0a:	f003 fbc1 	bl	8005690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f0e:	f7fe feb3 	bl	8000c78 <main>

08001f12 <LoopForever>:

LoopForever:
    b LoopForever
 8001f12:	e7fe      	b.n	8001f12 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f14:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001f18:	08007ad0 	.word	0x08007ad0
	ldr	r0, =_sdata
 8001f1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f20:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8001f24:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8001f28:	2000d5a8 	.word	0x2000d5a8

08001f2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC1_2_IRQHandler>
	...

08001f30 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <HAL_Init+0x28>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <HAL_Init+0x28>)
 8001f3a:	f043 0310 	orr.w	r3, r3, #16
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f40:	2003      	movs	r0, #3
 8001f42:	f000 f92b 	bl	800219c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f46:	2000      	movs	r0, #0
 8001f48:	f000 f808 	bl	8001f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f4c:	f7ff fce6 	bl	800191c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40022000 	.word	0x40022000

08001f5c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_InitTick+0x54>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_InitTick+0x58>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 f943 	bl	8002206 <HAL_SYSTICK_Config>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00e      	b.n	8001fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b0f      	cmp	r3, #15
 8001f8e:	d80a      	bhi.n	8001fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f90:	2200      	movs	r2, #0
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295
 8001f98:	f000 f90b 	bl	80021b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f9c:	4a06      	ldr	r2, [pc, #24]	; (8001fb8 <HAL_InitTick+0x5c>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e000      	b.n	8001fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000018 	.word	0x20000018
 8001fb4:	20000020 	.word	0x20000020
 8001fb8:	2000001c 	.word	0x2000001c

08001fbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_IncTick+0x20>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_IncTick+0x24>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <HAL_IncTick+0x24>)
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000020 	.word	0x20000020
 8001fe0:	2000d5a0 	.word	0x2000d5a0

08001fe4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <HAL_GetTick+0x14>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	2000d5a0 	.word	0x2000d5a0

08001ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002018:	4013      	ands	r3, r2
 800201a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202e:	4a04      	ldr	r2, [pc, #16]	; (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	60d3      	str	r3, [r2, #12]
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <__NVIC_GetPriorityGrouping+0x18>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	f003 0307 	and.w	r3, r3, #7
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	2b00      	cmp	r3, #0
 8002070:	db0b      	blt.n	800208a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	f003 021f 	and.w	r2, r3, #31
 8002078:	4907      	ldr	r1, [pc, #28]	; (8002098 <__NVIC_EnableIRQ+0x38>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	2001      	movs	r0, #1
 8002082:	fa00 f202 	lsl.w	r2, r0, r2
 8002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000e100 	.word	0xe000e100

0800209c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	6039      	str	r1, [r7, #0]
 80020a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	db0a      	blt.n	80020c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	490c      	ldr	r1, [pc, #48]	; (80020e8 <__NVIC_SetPriority+0x4c>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	0112      	lsls	r2, r2, #4
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	440b      	add	r3, r1
 80020c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c4:	e00a      	b.n	80020dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4908      	ldr	r1, [pc, #32]	; (80020ec <__NVIC_SetPriority+0x50>)
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	3b04      	subs	r3, #4
 80020d4:	0112      	lsls	r2, r2, #4
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	440b      	add	r3, r1
 80020da:	761a      	strb	r2, [r3, #24]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000e100 	.word	0xe000e100
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f1c3 0307 	rsb	r3, r3, #7
 800210a:	2b04      	cmp	r3, #4
 800210c:	bf28      	it	cs
 800210e:	2304      	movcs	r3, #4
 8002110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3304      	adds	r3, #4
 8002116:	2b06      	cmp	r3, #6
 8002118:	d902      	bls.n	8002120 <NVIC_EncodePriority+0x30>
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3b03      	subs	r3, #3
 800211e:	e000      	b.n	8002122 <NVIC_EncodePriority+0x32>
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	f04f 32ff 	mov.w	r2, #4294967295
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43da      	mvns	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	401a      	ands	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002138:	f04f 31ff 	mov.w	r1, #4294967295
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	43d9      	mvns	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	4313      	orrs	r3, r2
         );
}
 800214a:	4618      	mov	r0, r3
 800214c:	3724      	adds	r7, #36	; 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002168:	d301      	bcc.n	800216e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216a:	2301      	movs	r3, #1
 800216c:	e00f      	b.n	800218e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <SysTick_Config+0x40>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002176:	210f      	movs	r1, #15
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	f7ff ff8e 	bl	800209c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <SysTick_Config+0x40>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002186:	4b04      	ldr	r3, [pc, #16]	; (8002198 <SysTick_Config+0x40>)
 8002188:	2207      	movs	r2, #7
 800218a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	e000e010 	.word	0xe000e010

0800219c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ff29 	bl	8001ffc <__NVIC_SetPriorityGrouping>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c4:	f7ff ff3e 	bl	8002044 <__NVIC_GetPriorityGrouping>
 80021c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	6978      	ldr	r0, [r7, #20]
 80021d0:	f7ff ff8e 	bl	80020f0 <NVIC_EncodePriority>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff5d 	bl	800209c <__NVIC_SetPriority>
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff31 	bl	8002060 <__NVIC_EnableIRQ>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ffa2 	bl	8002158 <SysTick_Config>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222e:	e160      	b.n	80024f2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	2101      	movs	r1, #1
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	4013      	ands	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8152 	beq.w	80024ec <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x38>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b12      	cmp	r3, #18
 8002256:	d123      	bne.n	80022a0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	220f      	movs	r2, #15
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	08da      	lsrs	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3208      	adds	r2, #8
 800229a:	6939      	ldr	r1, [r7, #16]
 800229c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0203 	and.w	r2, r3, #3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d00b      	beq.n	80022f4 <HAL_GPIO_Init+0xd4>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d007      	beq.n	80022f4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022e8:	2b11      	cmp	r3, #17
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b12      	cmp	r3, #18
 80022f2:	d130      	bne.n	8002356 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800232a:	2201      	movs	r2, #1
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 0201 	and.w	r2, r3, #1
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	2203      	movs	r2, #3
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 80ac 	beq.w	80024ec <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002394:	4b5e      	ldr	r3, [pc, #376]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	4a5d      	ldr	r2, [pc, #372]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6193      	str	r3, [r2, #24]
 80023a0:	4b5b      	ldr	r3, [pc, #364]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023ac:	4a59      	ldr	r2, [pc, #356]	; (8002514 <HAL_GPIO_Init+0x2f4>)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	3302      	adds	r3, #2
 80023b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	220f      	movs	r2, #15
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023d6:	d025      	beq.n	8002424 <HAL_GPIO_Init+0x204>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a4f      	ldr	r2, [pc, #316]	; (8002518 <HAL_GPIO_Init+0x2f8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d01f      	beq.n	8002420 <HAL_GPIO_Init+0x200>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a4e      	ldr	r2, [pc, #312]	; (800251c <HAL_GPIO_Init+0x2fc>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d019      	beq.n	800241c <HAL_GPIO_Init+0x1fc>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a4d      	ldr	r2, [pc, #308]	; (8002520 <HAL_GPIO_Init+0x300>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d013      	beq.n	8002418 <HAL_GPIO_Init+0x1f8>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a4c      	ldr	r2, [pc, #304]	; (8002524 <HAL_GPIO_Init+0x304>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00d      	beq.n	8002414 <HAL_GPIO_Init+0x1f4>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a4b      	ldr	r2, [pc, #300]	; (8002528 <HAL_GPIO_Init+0x308>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d007      	beq.n	8002410 <HAL_GPIO_Init+0x1f0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a4a      	ldr	r2, [pc, #296]	; (800252c <HAL_GPIO_Init+0x30c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d101      	bne.n	800240c <HAL_GPIO_Init+0x1ec>
 8002408:	2306      	movs	r3, #6
 800240a:	e00c      	b.n	8002426 <HAL_GPIO_Init+0x206>
 800240c:	2307      	movs	r3, #7
 800240e:	e00a      	b.n	8002426 <HAL_GPIO_Init+0x206>
 8002410:	2305      	movs	r3, #5
 8002412:	e008      	b.n	8002426 <HAL_GPIO_Init+0x206>
 8002414:	2304      	movs	r3, #4
 8002416:	e006      	b.n	8002426 <HAL_GPIO_Init+0x206>
 8002418:	2303      	movs	r3, #3
 800241a:	e004      	b.n	8002426 <HAL_GPIO_Init+0x206>
 800241c:	2302      	movs	r3, #2
 800241e:	e002      	b.n	8002426 <HAL_GPIO_Init+0x206>
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <HAL_GPIO_Init+0x206>
 8002424:	2300      	movs	r3, #0
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	f002 0203 	and.w	r2, r2, #3
 800242c:	0092      	lsls	r2, r2, #2
 800242e:	4093      	lsls	r3, r2
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002436:	4937      	ldr	r1, [pc, #220]	; (8002514 <HAL_GPIO_Init+0x2f4>)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	3302      	adds	r3, #2
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002444:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <HAL_GPIO_Init+0x310>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002468:	4a31      	ldr	r2, [pc, #196]	; (8002530 <HAL_GPIO_Init+0x310>)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800246e:	4b30      	ldr	r3, [pc, #192]	; (8002530 <HAL_GPIO_Init+0x310>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002492:	4a27      	ldr	r2, [pc, #156]	; (8002530 <HAL_GPIO_Init+0x310>)
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002498:	4b25      	ldr	r3, [pc, #148]	; (8002530 <HAL_GPIO_Init+0x310>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024bc:	4a1c      	ldr	r2, [pc, #112]	; (8002530 <HAL_GPIO_Init+0x310>)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024c2:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_GPIO_Init+0x310>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <HAL_GPIO_Init+0x310>)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	3301      	adds	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f47f ae97 	bne.w	8002230 <HAL_GPIO_Init+0x10>
  }
}
 8002502:	bf00      	nop
 8002504:	371c      	adds	r7, #28
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000
 8002514:	40010000 	.word	0x40010000
 8002518:	48000400 	.word	0x48000400
 800251c:	48000800 	.word	0x48000800
 8002520:	48000c00 	.word	0x48000c00
 8002524:	48001000 	.word	0x48001000
 8002528:	48001400 	.word	0x48001400
 800252c:	48001800 	.word	0x48001800
 8002530:	40010400 	.word	0x40010400

08002534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002544:	787b      	ldrb	r3, [r7, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002550:	e002      	b.n	8002558 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800256a:	af00      	add	r7, sp, #0
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d102      	bne.n	800257e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	f000 bf01 	b.w	8003380 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8160 	beq.w	800284e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800258e:	4bae      	ldr	r3, [pc, #696]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b04      	cmp	r3, #4
 8002598:	d00c      	beq.n	80025b4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800259a:	4bab      	ldr	r3, [pc, #684]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d159      	bne.n	800265a <HAL_RCC_OscConfig+0xf6>
 80025a6:	4ba8      	ldr	r3, [pc, #672]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80025ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b2:	d152      	bne.n	800265a <HAL_RCC_OscConfig+0xf6>
 80025b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025c8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d102      	bne.n	80025e6 <HAL_RCC_OscConfig+0x82>
 80025e0:	4b99      	ldr	r3, [pc, #612]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0xae>
 80025e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80025fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025fe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002602:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800260e:	4b8e      	ldr	r3, [pc, #568]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002616:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800261a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800261e:	fa92 f2a2 	rbit	r2, r2
 8002622:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002626:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800262a:	fab2 f282 	clz	r2, r2
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	f042 0220 	orr.w	r2, r2, #32
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	f002 021f 	and.w	r2, r2, #31
 800263a:	2101      	movs	r1, #1
 800263c:	fa01 f202 	lsl.w	r2, r1, r2
 8002640:	4013      	ands	r3, r2
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8102 	beq.w	800284c <HAL_RCC_OscConfig+0x2e8>
 8002648:	1d3b      	adds	r3, r7, #4
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f040 80fc 	bne.w	800284c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	f000 be93 	b.w	8003380 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002664:	d106      	bne.n	8002674 <HAL_RCC_OscConfig+0x110>
 8002666:	4b78      	ldr	r3, [pc, #480]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a77      	ldr	r2, [pc, #476]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e030      	b.n	80026d6 <HAL_RCC_OscConfig+0x172>
 8002674:	1d3b      	adds	r3, r7, #4
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0x134>
 800267e:	4b72      	ldr	r3, [pc, #456]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a71      	ldr	r2, [pc, #452]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 8002684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b6f      	ldr	r3, [pc, #444]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6e      	ldr	r2, [pc, #440]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 8002690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e01e      	b.n	80026d6 <HAL_RCC_OscConfig+0x172>
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a2:	d10c      	bne.n	80026be <HAL_RCC_OscConfig+0x15a>
 80026a4:	4b68      	ldr	r3, [pc, #416]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a67      	ldr	r2, [pc, #412]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 80026aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b65      	ldr	r3, [pc, #404]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a64      	ldr	r2, [pc, #400]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 80026b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	e00b      	b.n	80026d6 <HAL_RCC_OscConfig+0x172>
 80026be:	4b62      	ldr	r3, [pc, #392]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a61      	ldr	r2, [pc, #388]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 80026c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b5f      	ldr	r3, [pc, #380]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a5e      	ldr	r2, [pc, #376]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 80026d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d059      	beq.n	8002794 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7ff fc80 	bl	8001fe4 <HAL_GetTick>
 80026e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ea:	f7ff fc7b 	bl	8001fe4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	; 0x64
 80026f8:	d902      	bls.n	8002700 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	f000 be40 	b.w	8003380 <HAL_RCC_OscConfig+0xe1c>
 8002700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002704:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002714:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	b2db      	uxtb	r3, r3
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b01      	cmp	r3, #1
 800272a:	d102      	bne.n	8002732 <HAL_RCC_OscConfig+0x1ce>
 800272c:	4b46      	ldr	r3, [pc, #280]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	e015      	b.n	800275e <HAL_RCC_OscConfig+0x1fa>
 8002732:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002736:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002746:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800274a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800274e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800275a:	4b3b      	ldr	r3, [pc, #236]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002762:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002766:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800276a:	fa92 f2a2 	rbit	r2, r2
 800276e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002772:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002776:	fab2 f282 	clz	r2, r2
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	f042 0220 	orr.w	r2, r2, #32
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	f002 021f 	and.w	r2, r2, #31
 8002786:	2101      	movs	r1, #1
 8002788:	fa01 f202 	lsl.w	r2, r1, r2
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0ab      	beq.n	80026ea <HAL_RCC_OscConfig+0x186>
 8002792:	e05c      	b.n	800284e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7ff fc26 	bl	8001fe4 <HAL_GetTick>
 8002798:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279e:	f7ff fc21 	bl	8001fe4 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	; 0x64
 80027ac:	d902      	bls.n	80027b4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	f000 bde6 	b.w	8003380 <HAL_RCC_OscConfig+0xe1c>
 80027b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027b8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80027c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d102      	bne.n	80027e6 <HAL_RCC_OscConfig+0x282>
 80027e0:	4b19      	ldr	r3, [pc, #100]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	e015      	b.n	8002812 <HAL_RCC_OscConfig+0x2ae>
 80027e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80027fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002802:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <HAL_RCC_OscConfig+0x2e4>)
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002816:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800281a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800281e:	fa92 f2a2 	rbit	r2, r2
 8002822:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002826:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800282a:	fab2 f282 	clz	r2, r2
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	f042 0220 	orr.w	r2, r2, #32
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f002 021f 	and.w	r2, r2, #31
 800283a:	2101      	movs	r1, #1
 800283c:	fa01 f202 	lsl.w	r2, r1, r2
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1ab      	bne.n	800279e <HAL_RCC_OscConfig+0x23a>
 8002846:	e002      	b.n	800284e <HAL_RCC_OscConfig+0x2ea>
 8002848:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284e:	1d3b      	adds	r3, r7, #4
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8170 	beq.w	8002b3e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800285e:	4bd0      	ldr	r3, [pc, #832]	; (8002ba0 <HAL_RCC_OscConfig+0x63c>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00c      	beq.n	8002884 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800286a:	4bcd      	ldr	r3, [pc, #820]	; (8002ba0 <HAL_RCC_OscConfig+0x63c>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b08      	cmp	r3, #8
 8002874:	d16d      	bne.n	8002952 <HAL_RCC_OscConfig+0x3ee>
 8002876:	4bca      	ldr	r3, [pc, #808]	; (8002ba0 <HAL_RCC_OscConfig+0x63c>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800287e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002882:	d166      	bne.n	8002952 <HAL_RCC_OscConfig+0x3ee>
 8002884:	2302      	movs	r3, #2
 8002886:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002896:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d102      	bne.n	80028b4 <HAL_RCC_OscConfig+0x350>
 80028ae:	4bbc      	ldr	r3, [pc, #752]	; (8002ba0 <HAL_RCC_OscConfig+0x63c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	e013      	b.n	80028dc <HAL_RCC_OscConfig+0x378>
 80028b4:	2302      	movs	r3, #2
 80028b6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80028c6:	2302      	movs	r3, #2
 80028c8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80028cc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80028d8:	4bb1      	ldr	r3, [pc, #708]	; (8002ba0 <HAL_RCC_OscConfig+0x63c>)
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	2202      	movs	r2, #2
 80028de:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80028e2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80028e6:	fa92 f2a2 	rbit	r2, r2
 80028ea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80028ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80028f2:	fab2 f282 	clz	r2, r2
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	f042 0220 	orr.w	r2, r2, #32
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	f002 021f 	and.w	r2, r2, #31
 8002902:	2101      	movs	r1, #1
 8002904:	fa01 f202 	lsl.w	r2, r1, r2
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <HAL_RCC_OscConfig+0x3ba>
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d002      	beq.n	800291e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	f000 bd31 	b.w	8003380 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291e:	4ba0      	ldr	r3, [pc, #640]	; (8002ba0 <HAL_RCC_OscConfig+0x63c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002926:	1d3b      	adds	r3, r7, #4
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	21f8      	movs	r1, #248	; 0xf8
 800292e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002936:	fa91 f1a1 	rbit	r1, r1
 800293a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800293e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002942:	fab1 f181 	clz	r1, r1
 8002946:	b2c9      	uxtb	r1, r1
 8002948:	408b      	lsls	r3, r1
 800294a:	4995      	ldr	r1, [pc, #596]	; (8002ba0 <HAL_RCC_OscConfig+0x63c>)
 800294c:	4313      	orrs	r3, r2
 800294e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002950:	e0f5      	b.n	8002b3e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002952:	1d3b      	adds	r3, r7, #4
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8085 	beq.w	8002a68 <HAL_RCC_OscConfig+0x504>
 800295e:	2301      	movs	r3, #1
 8002960:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002970:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002974:	fab3 f383 	clz	r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800297e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	461a      	mov	r2, r3
 8002986:	2301      	movs	r3, #1
 8002988:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298a:	f7ff fb2b 	bl	8001fe4 <HAL_GetTick>
 800298e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	e00a      	b.n	80029aa <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002994:	f7ff fb26 	bl	8001fe4 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d902      	bls.n	80029aa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	f000 bceb 	b.w	8003380 <HAL_RCC_OscConfig+0xe1c>
 80029aa:	2302      	movs	r3, #2
 80029ac:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80029bc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c0:	fab3 f383 	clz	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d102      	bne.n	80029da <HAL_RCC_OscConfig+0x476>
 80029d4:	4b72      	ldr	r3, [pc, #456]	; (8002ba0 <HAL_RCC_OscConfig+0x63c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	e013      	b.n	8002a02 <HAL_RCC_OscConfig+0x49e>
 80029da:	2302      	movs	r3, #2
 80029dc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80029ec:	2302      	movs	r3, #2
 80029ee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80029f2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80029fe:	4b68      	ldr	r3, [pc, #416]	; (8002ba0 <HAL_RCC_OscConfig+0x63c>)
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	2202      	movs	r2, #2
 8002a04:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002a08:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002a0c:	fa92 f2a2 	rbit	r2, r2
 8002a10:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002a14:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a18:	fab2 f282 	clz	r2, r2
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	f042 0220 	orr.w	r2, r2, #32
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	f002 021f 	and.w	r2, r2, #31
 8002a28:	2101      	movs	r1, #1
 8002a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0af      	beq.n	8002994 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a34:	4b5a      	ldr	r3, [pc, #360]	; (8002ba0 <HAL_RCC_OscConfig+0x63c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	21f8      	movs	r1, #248	; 0xf8
 8002a44:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002a4c:	fa91 f1a1 	rbit	r1, r1
 8002a50:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002a54:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a58:	fab1 f181 	clz	r1, r1
 8002a5c:	b2c9      	uxtb	r1, r1
 8002a5e:	408b      	lsls	r3, r1
 8002a60:	494f      	ldr	r1, [pc, #316]	; (8002ba0 <HAL_RCC_OscConfig+0x63c>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
 8002a66:	e06a      	b.n	8002b3e <HAL_RCC_OscConfig+0x5da>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002a7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2300      	movs	r3, #0
 8002a92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7ff faa6 	bl	8001fe4 <HAL_GetTick>
 8002a98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a9e:	f7ff faa1 	bl	8001fe4 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d902      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	f000 bc66 	b.w	8003380 <HAL_RCC_OscConfig+0xe1c>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002ac6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d102      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x580>
 8002ade:	4b30      	ldr	r3, [pc, #192]	; (8002ba0 <HAL_RCC_OscConfig+0x63c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	e013      	b.n	8002b0c <HAL_RCC_OscConfig+0x5a8>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002af6:	2302      	movs	r3, #2
 8002af8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002afc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002b00:	fa93 f3a3 	rbit	r3, r3
 8002b04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b08:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <HAL_RCC_OscConfig+0x63c>)
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002b12:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002b16:	fa92 f2a2 	rbit	r2, r2
 8002b1a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002b1e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b22:	fab2 f282 	clz	r2, r2
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	f042 0220 	orr.w	r2, r2, #32
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	f002 021f 	and.w	r2, r2, #31
 8002b32:	2101      	movs	r1, #1
 8002b34:	fa01 f202 	lsl.w	r2, r1, r2
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1af      	bne.n	8002a9e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80da 	beq.w	8002d02 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d069      	beq.n	8002c2c <HAL_RCC_OscConfig+0x6c8>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002b6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCC_OscConfig+0x640>)
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2301      	movs	r3, #1
 8002b80:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b82:	f7ff fa2f 	bl	8001fe4 <HAL_GetTick>
 8002b86:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	e00d      	b.n	8002ba8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b8c:	f7ff fa2a 	bl	8001fe4 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d905      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e3ef      	b.n	8003380 <HAL_RCC_OscConfig+0xe1c>
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	10908120 	.word	0x10908120
 8002ba8:	2302      	movs	r3, #2
 8002baa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bb2:	fa93 f2a3 	rbit	r2, r3
 8002bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	fa93 f2a3 	rbit	r2, r3
 8002bce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002bd8:	2202      	movs	r2, #2
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	fa93 f2a3 	rbit	r2, r3
 8002be6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002bea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bec:	4ba4      	ldr	r3, [pc, #656]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	6019      	str	r1, [r3, #0]
 8002bf8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	fa93 f1a3 	rbit	r1, r3
 8002c02:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c06:	6019      	str	r1, [r3, #0]
  return result;
 8002c08:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	2101      	movs	r1, #1
 8002c20:	fa01 f303 	lsl.w	r3, r1, r3
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0b0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x628>
 8002c2a:	e06a      	b.n	8002d02 <HAL_RCC_OscConfig+0x79e>
 8002c2c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c30:	2201      	movs	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	fa93 f2a3 	rbit	r2, r3
 8002c3e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c42:	601a      	str	r2, [r3, #0]
  return result;
 8002c44:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c48:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b8c      	ldr	r3, [pc, #560]	; (8002e84 <HAL_RCC_OscConfig+0x920>)
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	461a      	mov	r2, r3
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5e:	f7ff f9c1 	bl	8001fe4 <HAL_GetTick>
 8002c62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c66:	e009      	b.n	8002c7c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c68:	f7ff f9bc 	bl	8001fe4 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e381      	b.n	8003380 <HAL_RCC_OscConfig+0xe1c>
 8002c7c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c80:	2202      	movs	r2, #2
 8002c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	fa93 f2a3 	rbit	r2, r3
 8002c8e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c98:	2202      	movs	r2, #2
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	fa93 f2a3 	rbit	r2, r3
 8002ca6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	fa93 f2a3 	rbit	r2, r3
 8002cbe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002cc2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc4:	4b6e      	ldr	r3, [pc, #440]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ccc:	2102      	movs	r1, #2
 8002cce:	6019      	str	r1, [r3, #0]
 8002cd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	fa93 f1a3 	rbit	r1, r3
 8002cda:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002cde:	6019      	str	r1, [r3, #0]
  return result;
 8002ce0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f003 031f 	and.w	r3, r3, #31
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1b2      	bne.n	8002c68 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d02:	1d3b      	adds	r3, r7, #4
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8157 	beq.w	8002fc0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d18:	4b59      	ldr	r3, [pc, #356]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d112      	bne.n	8002d4a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d24:	4b56      	ldr	r3, [pc, #344]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	4a55      	ldr	r2, [pc, #340]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	61d3      	str	r3, [r2, #28]
 8002d30:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002d38:	f107 030c 	add.w	r3, r7, #12
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	f107 030c 	add.w	r3, r7, #12
 8002d42:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4a:	4b4f      	ldr	r3, [pc, #316]	; (8002e88 <HAL_RCC_OscConfig+0x924>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d11a      	bne.n	8002d8c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d56:	4b4c      	ldr	r3, [pc, #304]	; (8002e88 <HAL_RCC_OscConfig+0x924>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a4b      	ldr	r2, [pc, #300]	; (8002e88 <HAL_RCC_OscConfig+0x924>)
 8002d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d62:	f7ff f93f 	bl	8001fe4 <HAL_GetTick>
 8002d66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6a:	e009      	b.n	8002d80 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6c:	f7ff f93a 	bl	8001fe4 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b64      	cmp	r3, #100	; 0x64
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e2ff      	b.n	8003380 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d80:	4b41      	ldr	r3, [pc, #260]	; (8002e88 <HAL_RCC_OscConfig+0x924>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0ef      	beq.n	8002d6c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d106      	bne.n	8002da4 <HAL_RCC_OscConfig+0x840>
 8002d96:	4b3a      	ldr	r3, [pc, #232]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4a39      	ldr	r2, [pc, #228]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6213      	str	r3, [r2, #32]
 8002da2:	e02f      	b.n	8002e04 <HAL_RCC_OscConfig+0x8a0>
 8002da4:	1d3b      	adds	r3, r7, #4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x864>
 8002dae:	4b34      	ldr	r3, [pc, #208]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	4a33      	ldr	r2, [pc, #204]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	6213      	str	r3, [r2, #32]
 8002dba:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4a30      	ldr	r2, [pc, #192]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002dc0:	f023 0304 	bic.w	r3, r3, #4
 8002dc4:	6213      	str	r3, [r2, #32]
 8002dc6:	e01d      	b.n	8002e04 <HAL_RCC_OscConfig+0x8a0>
 8002dc8:	1d3b      	adds	r3, r7, #4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b05      	cmp	r3, #5
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCC_OscConfig+0x888>
 8002dd2:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4a2a      	ldr	r2, [pc, #168]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002dd8:	f043 0304 	orr.w	r3, r3, #4
 8002ddc:	6213      	str	r3, [r2, #32]
 8002dde:	4b28      	ldr	r3, [pc, #160]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4a27      	ldr	r2, [pc, #156]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6213      	str	r3, [r2, #32]
 8002dea:	e00b      	b.n	8002e04 <HAL_RCC_OscConfig+0x8a0>
 8002dec:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4a23      	ldr	r2, [pc, #140]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002df2:	f023 0301 	bic.w	r3, r3, #1
 8002df6:	6213      	str	r3, [r2, #32]
 8002df8:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	4a20      	ldr	r2, [pc, #128]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002dfe:	f023 0304 	bic.w	r3, r3, #4
 8002e02:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e04:	1d3b      	adds	r3, r7, #4
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d06a      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7ff f8e9 	bl	8001fe4 <HAL_GetTick>
 8002e12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e16:	e00b      	b.n	8002e30 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e18:	f7ff f8e4 	bl	8001fe4 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e2a7      	b.n	8003380 <HAL_RCC_OscConfig+0xe1c>
 8002e30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e34:	2202      	movs	r2, #2
 8002e36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	fa93 f2a3 	rbit	r2, r3
 8002e42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	fa93 f2a3 	rbit	r2, r3
 8002e5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e5e:	601a      	str	r2, [r3, #0]
  return result;
 8002e60:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e64:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d108      	bne.n	8002e8c <HAL_RCC_OscConfig+0x928>
 8002e7a:	4b01      	ldr	r3, [pc, #4]	; (8002e80 <HAL_RCC_OscConfig+0x91c>)
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	e013      	b.n	8002ea8 <HAL_RCC_OscConfig+0x944>
 8002e80:	40021000 	.word	0x40021000
 8002e84:	10908120 	.word	0x10908120
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e90:	2202      	movs	r2, #2
 8002e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	fa93 f2a3 	rbit	r2, r3
 8002e9e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	4bc0      	ldr	r3, [pc, #768]	; (80031a8 <HAL_RCC_OscConfig+0xc44>)
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002eac:	2102      	movs	r1, #2
 8002eae:	6011      	str	r1, [r2, #0]
 8002eb0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	fa92 f1a2 	rbit	r1, r2
 8002eba:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002ebe:	6011      	str	r1, [r2, #0]
  return result;
 8002ec0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	fab2 f282 	clz	r2, r2
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	f002 021f 	and.w	r2, r2, #31
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d09a      	beq.n	8002e18 <HAL_RCC_OscConfig+0x8b4>
 8002ee2:	e063      	b.n	8002fac <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee4:	f7ff f87e 	bl	8001fe4 <HAL_GetTick>
 8002ee8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eec:	e00b      	b.n	8002f06 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7ff f879 	bl	8001fe4 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e23c      	b.n	8003380 <HAL_RCC_OscConfig+0xe1c>
 8002f06:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	fa93 f2a3 	rbit	r2, r3
 8002f18:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f22:	2202      	movs	r2, #2
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	fa93 f2a3 	rbit	r2, r3
 8002f30:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f34:	601a      	str	r2, [r3, #0]
  return result;
 8002f36:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f043 0302 	orr.w	r3, r3, #2
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d102      	bne.n	8002f56 <HAL_RCC_OscConfig+0x9f2>
 8002f50:	4b95      	ldr	r3, [pc, #596]	; (80031a8 <HAL_RCC_OscConfig+0xc44>)
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	e00d      	b.n	8002f72 <HAL_RCC_OscConfig+0xa0e>
 8002f56:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	fa93 f2a3 	rbit	r2, r3
 8002f68:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	4b8e      	ldr	r3, [pc, #568]	; (80031a8 <HAL_RCC_OscConfig+0xc44>)
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002f76:	2102      	movs	r1, #2
 8002f78:	6011      	str	r1, [r2, #0]
 8002f7a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	fa92 f1a2 	rbit	r1, r2
 8002f84:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f88:	6011      	str	r1, [r2, #0]
  return result;
 8002f8a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	fab2 f282 	clz	r2, r2
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	f002 021f 	and.w	r2, r2, #31
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1a0      	bne.n	8002eee <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fac:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d105      	bne.n	8002fc0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb4:	4b7c      	ldr	r3, [pc, #496]	; (80031a8 <HAL_RCC_OscConfig+0xc44>)
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	4a7b      	ldr	r2, [pc, #492]	; (80031a8 <HAL_RCC_OscConfig+0xc44>)
 8002fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc0:	1d3b      	adds	r3, r7, #4
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 81d9 	beq.w	800337e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fcc:	4b76      	ldr	r3, [pc, #472]	; (80031a8 <HAL_RCC_OscConfig+0xc44>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	f000 81a6 	beq.w	8003326 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	f040 811e 	bne.w	8003222 <HAL_RCC_OscConfig+0xcbe>
 8002fe6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002fea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	fa93 f2a3 	rbit	r2, r3
 8002ffa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ffe:	601a      	str	r2, [r3, #0]
  return result;
 8003000:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003004:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003006:	fab3 f383 	clz	r3, r3
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003010:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	461a      	mov	r2, r3
 8003018:	2300      	movs	r3, #0
 800301a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fe ffe2 	bl	8001fe4 <HAL_GetTick>
 8003020:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003024:	e009      	b.n	800303a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003026:	f7fe ffdd 	bl	8001fe4 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e1a2      	b.n	8003380 <HAL_RCC_OscConfig+0xe1c>
 800303a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800303e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f2a3 	rbit	r2, r3
 800304e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003052:	601a      	str	r2, [r3, #0]
  return result;
 8003054:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003058:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d102      	bne.n	8003074 <HAL_RCC_OscConfig+0xb10>
 800306e:	4b4e      	ldr	r3, [pc, #312]	; (80031a8 <HAL_RCC_OscConfig+0xc44>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	e01b      	b.n	80030ac <HAL_RCC_OscConfig+0xb48>
 8003074:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003078:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800307c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	fa93 f2a3 	rbit	r2, r3
 8003088:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003092:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	fa93 f2a3 	rbit	r2, r3
 80030a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	4b3f      	ldr	r3, [pc, #252]	; (80031a8 <HAL_RCC_OscConfig+0xc44>)
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80030b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030b4:	6011      	str	r1, [r2, #0]
 80030b6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	fa92 f1a2 	rbit	r1, r2
 80030c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80030c4:	6011      	str	r1, [r2, #0]
  return result;
 80030c6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	fab2 f282 	clz	r2, r2
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	f042 0220 	orr.w	r2, r2, #32
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	f002 021f 	and.w	r2, r2, #31
 80030dc:	2101      	movs	r1, #1
 80030de:	fa01 f202 	lsl.w	r2, r1, r2
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d19e      	bne.n	8003026 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e8:	4b2f      	ldr	r3, [pc, #188]	; (80031a8 <HAL_RCC_OscConfig+0xc44>)
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	f023 020f 	bic.w	r2, r3, #15
 80030f0:	1d3b      	adds	r3, r7, #4
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	492c      	ldr	r1, [pc, #176]	; (80031a8 <HAL_RCC_OscConfig+0xc44>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 80030fc:	4b2a      	ldr	r3, [pc, #168]	; (80031a8 <HAL_RCC_OscConfig+0xc44>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003104:	1d3b      	adds	r3, r7, #4
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6a19      	ldr	r1, [r3, #32]
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	430b      	orrs	r3, r1
 8003112:	4925      	ldr	r1, [pc, #148]	; (80031a8 <HAL_RCC_OscConfig+0xc44>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
 8003118:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800311c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003120:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	fa93 f2a3 	rbit	r2, r3
 800312c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003130:	601a      	str	r2, [r3, #0]
  return result;
 8003132:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003136:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003138:	fab3 f383 	clz	r3, r3
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003142:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	461a      	mov	r2, r3
 800314a:	2301      	movs	r3, #1
 800314c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7fe ff49 	bl	8001fe4 <HAL_GetTick>
 8003152:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003156:	e009      	b.n	800316c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003158:	f7fe ff44 	bl	8001fe4 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e109      	b.n	8003380 <HAL_RCC_OscConfig+0xe1c>
 800316c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003170:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003174:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	fa93 f2a3 	rbit	r2, r3
 8003180:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003184:	601a      	str	r2, [r3, #0]
  return result;
 8003186:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800318a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800318c:	fab3 f383 	clz	r3, r3
 8003190:	b2db      	uxtb	r3, r3
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	b2db      	uxtb	r3, r3
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	d105      	bne.n	80031ac <HAL_RCC_OscConfig+0xc48>
 80031a0:	4b01      	ldr	r3, [pc, #4]	; (80031a8 <HAL_RCC_OscConfig+0xc44>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	e01e      	b.n	80031e4 <HAL_RCC_OscConfig+0xc80>
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	fa93 f2a3 	rbit	r2, r3
 80031c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80031ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	fa93 f2a3 	rbit	r2, r3
 80031da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	4b6a      	ldr	r3, [pc, #424]	; (800338c <HAL_RCC_OscConfig+0xe28>)
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80031e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031ec:	6011      	str	r1, [r2, #0]
 80031ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	fa92 f1a2 	rbit	r1, r2
 80031f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031fc:	6011      	str	r1, [r2, #0]
  return result;
 80031fe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	fab2 f282 	clz	r2, r2
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	f042 0220 	orr.w	r2, r2, #32
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	f002 021f 	and.w	r2, r2, #31
 8003214:	2101      	movs	r1, #1
 8003216:	fa01 f202 	lsl.w	r2, r1, r2
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d09b      	beq.n	8003158 <HAL_RCC_OscConfig+0xbf4>
 8003220:	e0ad      	b.n	800337e <HAL_RCC_OscConfig+0xe1a>
 8003222:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003226:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800322a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	fa93 f2a3 	rbit	r2, r3
 8003236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800323a:	601a      	str	r2, [r3, #0]
  return result;
 800323c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003240:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800324c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	461a      	mov	r2, r3
 8003254:	2300      	movs	r3, #0
 8003256:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe fec4 	bl	8001fe4 <HAL_GetTick>
 800325c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003260:	e009      	b.n	8003276 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003262:	f7fe febf 	bl	8001fe4 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e084      	b.n	8003380 <HAL_RCC_OscConfig+0xe1c>
 8003276:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800327a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800327e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	fa93 f2a3 	rbit	r2, r3
 800328a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800328e:	601a      	str	r2, [r3, #0]
  return result;
 8003290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003294:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d102      	bne.n	80032b0 <HAL_RCC_OscConfig+0xd4c>
 80032aa:	4b38      	ldr	r3, [pc, #224]	; (800338c <HAL_RCC_OscConfig+0xe28>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	e01b      	b.n	80032e8 <HAL_RCC_OscConfig+0xd84>
 80032b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	fa93 f2a3 	rbit	r2, r3
 80032c4:	f107 0320 	add.w	r3, r7, #32
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	f107 031c 	add.w	r3, r7, #28
 80032ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	f107 031c 	add.w	r3, r7, #28
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	fa93 f2a3 	rbit	r2, r3
 80032de:	f107 0318 	add.w	r3, r7, #24
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	4b29      	ldr	r3, [pc, #164]	; (800338c <HAL_RCC_OscConfig+0xe28>)
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	f107 0214 	add.w	r2, r7, #20
 80032ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032f0:	6011      	str	r1, [r2, #0]
 80032f2:	f107 0214 	add.w	r2, r7, #20
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	fa92 f1a2 	rbit	r1, r2
 80032fc:	f107 0210 	add.w	r2, r7, #16
 8003300:	6011      	str	r1, [r2, #0]
  return result;
 8003302:	f107 0210 	add.w	r2, r7, #16
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	fab2 f282 	clz	r2, r2
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	f042 0220 	orr.w	r2, r2, #32
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	f002 021f 	and.w	r2, r2, #31
 8003318:	2101      	movs	r1, #1
 800331a:	fa01 f202 	lsl.w	r2, r1, r2
 800331e:	4013      	ands	r3, r2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d19e      	bne.n	8003262 <HAL_RCC_OscConfig+0xcfe>
 8003324:	e02b      	b.n	800337e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003326:	1d3b      	adds	r3, r7, #4
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e025      	b.n	8003380 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003334:	4b15      	ldr	r3, [pc, #84]	; (800338c <HAL_RCC_OscConfig+0xe28>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800333c:	4b13      	ldr	r3, [pc, #76]	; (800338c <HAL_RCC_OscConfig+0xe28>)
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003344:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003348:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800334c:	1d3b      	adds	r3, r7, #4
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	429a      	cmp	r2, r3
 8003354:	d111      	bne.n	800337a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003356:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800335a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800335e:	1d3b      	adds	r3, r7, #4
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003364:	429a      	cmp	r2, r3
 8003366:	d108      	bne.n	800337a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003368:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800336c:	f003 020f 	and.w	r2, r3, #15
 8003370:	1d3b      	adds	r3, r7, #4
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003376:	429a      	cmp	r2, r3
 8003378:	d001      	beq.n	800337e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000

08003390 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b09e      	sub	sp, #120	; 0x78
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e162      	b.n	800366e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a8:	4b90      	ldr	r3, [pc, #576]	; (80035ec <HAL_RCC_ClockConfig+0x25c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d910      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b8d      	ldr	r3, [pc, #564]	; (80035ec <HAL_RCC_ClockConfig+0x25c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 0207 	bic.w	r2, r3, #7
 80033be:	498b      	ldr	r1, [pc, #556]	; (80035ec <HAL_RCC_ClockConfig+0x25c>)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b89      	ldr	r3, [pc, #548]	; (80035ec <HAL_RCC_ClockConfig+0x25c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e14a      	b.n	800366e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e4:	4b82      	ldr	r3, [pc, #520]	; (80035f0 <HAL_RCC_ClockConfig+0x260>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	497f      	ldr	r1, [pc, #508]	; (80035f0 <HAL_RCC_ClockConfig+0x260>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 80dc 	beq.w	80035bc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d13c      	bne.n	8003486 <HAL_RCC_ClockConfig+0xf6>
 800340c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003410:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003414:	fa93 f3a3 	rbit	r3, r3
 8003418:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800341a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341c:	fab3 f383 	clz	r3, r3
 8003420:	b2db      	uxtb	r3, r3
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	d102      	bne.n	8003436 <HAL_RCC_ClockConfig+0xa6>
 8003430:	4b6f      	ldr	r3, [pc, #444]	; (80035f0 <HAL_RCC_ClockConfig+0x260>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	e00f      	b.n	8003456 <HAL_RCC_ClockConfig+0xc6>
 8003436:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800343a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	667b      	str	r3, [r7, #100]	; 0x64
 8003444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003448:	663b      	str	r3, [r7, #96]	; 0x60
 800344a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800344c:	fa93 f3a3 	rbit	r3, r3
 8003450:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003452:	4b67      	ldr	r3, [pc, #412]	; (80035f0 <HAL_RCC_ClockConfig+0x260>)
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800345a:	65ba      	str	r2, [r7, #88]	; 0x58
 800345c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800345e:	fa92 f2a2 	rbit	r2, r2
 8003462:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003464:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003466:	fab2 f282 	clz	r2, r2
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	f042 0220 	orr.w	r2, r2, #32
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	f002 021f 	and.w	r2, r2, #31
 8003476:	2101      	movs	r1, #1
 8003478:	fa01 f202 	lsl.w	r2, r1, r2
 800347c:	4013      	ands	r3, r2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d17b      	bne.n	800357a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e0f3      	b.n	800366e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d13c      	bne.n	8003508 <HAL_RCC_ClockConfig+0x178>
 800348e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003492:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003496:	fa93 f3a3 	rbit	r3, r3
 800349a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800349c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d102      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x128>
 80034b2:	4b4f      	ldr	r3, [pc, #316]	; (80035f0 <HAL_RCC_ClockConfig+0x260>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	e00f      	b.n	80034d8 <HAL_RCC_ClockConfig+0x148>
 80034b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c0:	fa93 f3a3 	rbit	r3, r3
 80034c4:	647b      	str	r3, [r7, #68]	; 0x44
 80034c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ca:	643b      	str	r3, [r7, #64]	; 0x40
 80034cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ce:	fa93 f3a3 	rbit	r3, r3
 80034d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034d4:	4b46      	ldr	r3, [pc, #280]	; (80035f0 <HAL_RCC_ClockConfig+0x260>)
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034dc:	63ba      	str	r2, [r7, #56]	; 0x38
 80034de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034e0:	fa92 f2a2 	rbit	r2, r2
 80034e4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80034e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034e8:	fab2 f282 	clz	r2, r2
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	f042 0220 	orr.w	r2, r2, #32
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	f002 021f 	and.w	r2, r2, #31
 80034f8:	2101      	movs	r1, #1
 80034fa:	fa01 f202 	lsl.w	r2, r1, r2
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d13a      	bne.n	800357a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0b2      	b.n	800366e <HAL_RCC_ClockConfig+0x2de>
 8003508:	2302      	movs	r3, #2
 800350a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b01      	cmp	r3, #1
 8003528:	d102      	bne.n	8003530 <HAL_RCC_ClockConfig+0x1a0>
 800352a:	4b31      	ldr	r3, [pc, #196]	; (80035f0 <HAL_RCC_ClockConfig+0x260>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	e00d      	b.n	800354c <HAL_RCC_ClockConfig+0x1bc>
 8003530:	2302      	movs	r3, #2
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
 800353c:	2302      	movs	r3, #2
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <HAL_RCC_ClockConfig+0x260>)
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	2202      	movs	r2, #2
 800354e:	61ba      	str	r2, [r7, #24]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	fa92 f2a2 	rbit	r2, r2
 8003556:	617a      	str	r2, [r7, #20]
  return result;
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	fab2 f282 	clz	r2, r2
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	f042 0220 	orr.w	r2, r2, #32
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	f002 021f 	and.w	r2, r2, #31
 800356a:	2101      	movs	r1, #1
 800356c:	fa01 f202 	lsl.w	r2, r1, r2
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e079      	b.n	800366e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357a:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <HAL_RCC_ClockConfig+0x260>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f023 0203 	bic.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	491a      	ldr	r1, [pc, #104]	; (80035f0 <HAL_RCC_ClockConfig+0x260>)
 8003588:	4313      	orrs	r3, r2
 800358a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800358c:	f7fe fd2a 	bl	8001fe4 <HAL_GetTick>
 8003590:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	e00a      	b.n	80035aa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7fe fd26 	bl	8001fe4 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e061      	b.n	800366e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <HAL_RCC_ClockConfig+0x260>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 020c 	and.w	r2, r3, #12
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d1eb      	bne.n	8003594 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCC_ClockConfig+0x25c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d214      	bcs.n	80035f4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b08      	ldr	r3, [pc, #32]	; (80035ec <HAL_RCC_ClockConfig+0x25c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 0207 	bic.w	r2, r3, #7
 80035d2:	4906      	ldr	r1, [pc, #24]	; (80035ec <HAL_RCC_ClockConfig+0x25c>)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035da:	4b04      	ldr	r3, [pc, #16]	; (80035ec <HAL_RCC_ClockConfig+0x25c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d005      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e040      	b.n	800366e <HAL_RCC_ClockConfig+0x2de>
 80035ec:	40022000 	.word	0x40022000
 80035f0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003600:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <HAL_RCC_ClockConfig+0x2e8>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	491a      	ldr	r1, [pc, #104]	; (8003678 <HAL_RCC_ClockConfig+0x2e8>)
 800360e:	4313      	orrs	r3, r2
 8003610:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800361e:	4b16      	ldr	r3, [pc, #88]	; (8003678 <HAL_RCC_ClockConfig+0x2e8>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4912      	ldr	r1, [pc, #72]	; (8003678 <HAL_RCC_ClockConfig+0x2e8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003632:	f000 f829 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 8003636:	4601      	mov	r1, r0
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <HAL_RCC_ClockConfig+0x2e8>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003640:	22f0      	movs	r2, #240	; 0xf0
 8003642:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	fa92 f2a2 	rbit	r2, r2
 800364a:	60fa      	str	r2, [r7, #12]
  return result;
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	fab2 f282 	clz	r2, r2
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	40d3      	lsrs	r3, r2
 8003656:	4a09      	ldr	r2, [pc, #36]	; (800367c <HAL_RCC_ClockConfig+0x2ec>)
 8003658:	5cd3      	ldrb	r3, [r2, r3]
 800365a:	fa21 f303 	lsr.w	r3, r1, r3
 800365e:	4a08      	ldr	r2, [pc, #32]	; (8003680 <HAL_RCC_ClockConfig+0x2f0>)
 8003660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003662:	4b08      	ldr	r3, [pc, #32]	; (8003684 <HAL_RCC_ClockConfig+0x2f4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe fc78 	bl	8001f5c <HAL_InitTick>
  
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3778      	adds	r7, #120	; 0x78
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40021000 	.word	0x40021000
 800367c:	08007830 	.word	0x08007830
 8003680:	20000018 	.word	0x20000018
 8003684:	2000001c 	.word	0x2000001c

08003688 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003688:	b480      	push	{r7}
 800368a:	b08b      	sub	sp, #44	; 0x2c
 800368c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	2300      	movs	r3, #0
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	2300      	movs	r3, #0
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80036a2:	4b2a      	ldr	r3, [pc, #168]	; (800374c <HAL_RCC_GetSysClockFreq+0xc4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d002      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x30>
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d003      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x36>
 80036b6:	e03f      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036b8:	4b25      	ldr	r3, [pc, #148]	; (8003750 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036ba:	623b      	str	r3, [r7, #32]
      break;
 80036bc:	e03f      	b.n	800373e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80036c4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80036c8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	fa92 f2a2 	rbit	r2, r2
 80036d0:	607a      	str	r2, [r7, #4]
  return result;
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	fab2 f282 	clz	r2, r2
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	40d3      	lsrs	r3, r2
 80036dc:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <HAL_RCC_GetSysClockFreq+0xcc>)
 80036de:	5cd3      	ldrb	r3, [r2, r3]
 80036e0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80036e2:	4b1a      	ldr	r3, [pc, #104]	; (800374c <HAL_RCC_GetSysClockFreq+0xc4>)
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	220f      	movs	r2, #15
 80036ec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	fa92 f2a2 	rbit	r2, r2
 80036f4:	60fa      	str	r2, [r7, #12]
  return result;
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	fab2 f282 	clz	r2, r2
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	40d3      	lsrs	r3, r2
 8003700:	4a15      	ldr	r2, [pc, #84]	; (8003758 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003702:	5cd3      	ldrb	r3, [r2, r3]
 8003704:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003710:	4a0f      	ldr	r2, [pc, #60]	; (8003750 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	fbb2 f2f3 	udiv	r2, r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
 8003720:	e007      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003722:	4a0b      	ldr	r2, [pc, #44]	; (8003750 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	fbb2 f2f3 	udiv	r2, r2, r3
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	fb02 f303 	mul.w	r3, r2, r3
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	623b      	str	r3, [r7, #32]
      break;
 8003736:	e002      	b.n	800373e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_RCC_GetSysClockFreq+0xc8>)
 800373a:	623b      	str	r3, [r7, #32]
      break;
 800373c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800373e:	6a3b      	ldr	r3, [r7, #32]
}
 8003740:	4618      	mov	r0, r3
 8003742:	372c      	adds	r7, #44	; 0x2c
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	40021000 	.word	0x40021000
 8003750:	007a1200 	.word	0x007a1200
 8003754:	08007848 	.word	0x08007848
 8003758:	08007858 	.word	0x08007858

0800375c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003760:	4b03      	ldr	r3, [pc, #12]	; (8003770 <HAL_RCC_GetHCLKFreq+0x14>)
 8003762:	681b      	ldr	r3, [r3, #0]
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000018 	.word	0x20000018

08003774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800377a:	f7ff ffef 	bl	800375c <HAL_RCC_GetHCLKFreq>
 800377e:	4601      	mov	r1, r0
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003788:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800378c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	fa92 f2a2 	rbit	r2, r2
 8003794:	603a      	str	r2, [r7, #0]
  return result;
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	fab2 f282 	clz	r2, r2
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	40d3      	lsrs	r3, r2
 80037a0:	4a04      	ldr	r2, [pc, #16]	; (80037b4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80037a2:	5cd3      	ldrb	r3, [r2, r3]
 80037a4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037a8:	4618      	mov	r0, r3
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000
 80037b4:	08007840 	.word	0x08007840

080037b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80037be:	f7ff ffcd 	bl	800375c <HAL_RCC_GetHCLKFreq>
 80037c2:	4601      	mov	r1, r0
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80037cc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80037d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	fa92 f2a2 	rbit	r2, r2
 80037d8:	603a      	str	r2, [r7, #0]
  return result;
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	fab2 f282 	clz	r2, r2
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	40d3      	lsrs	r3, r2
 80037e4:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80037e6:	5cd3      	ldrb	r3, [r2, r3]
 80037e8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40021000 	.word	0x40021000
 80037f8:	08007840 	.word	0x08007840

080037fc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b092      	sub	sp, #72	; 0x48
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80d7 	beq.w	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003820:	4b4e      	ldr	r3, [pc, #312]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10e      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800382c:	4b4b      	ldr	r3, [pc, #300]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	4a4a      	ldr	r2, [pc, #296]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003836:	61d3      	str	r3, [r2, #28]
 8003838:	4b48      	ldr	r3, [pc, #288]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003844:	2301      	movs	r3, #1
 8003846:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384a:	4b45      	ldr	r3, [pc, #276]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d118      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003856:	4b42      	ldr	r3, [pc, #264]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a41      	ldr	r2, [pc, #260]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800385c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003860:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003862:	f7fe fbbf 	bl	8001fe4 <HAL_GetTick>
 8003866:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003868:	e008      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386a:	f7fe fbbb 	bl	8001fe4 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b64      	cmp	r3, #100	; 0x64
 8003876:	d901      	bls.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e1d6      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387c:	4b38      	ldr	r3, [pc, #224]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0f0      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003888:	4b34      	ldr	r3, [pc, #208]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003890:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8084 	beq.w	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d07c      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038a8:	4b2c      	ldr	r3, [pc, #176]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038c2:	fab3 f383 	clz	r3, r3
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	4b26      	ldr	r3, [pc, #152]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	461a      	mov	r2, r3
 80038d2:	2301      	movs	r3, #1
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	461a      	mov	r2, r3
 80038f6:	2300      	movs	r3, #0
 80038f8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038fa:	4a18      	ldr	r2, [pc, #96]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d04b      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390a:	f7fe fb6b 	bl	8001fe4 <HAL_GetTick>
 800390e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003910:	e00a      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003912:	f7fe fb67 	bl	8001fe4 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003920:	4293      	cmp	r3, r2
 8003922:	d901      	bls.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e180      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003928:	2302      	movs	r3, #2
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	fa93 f3a3 	rbit	r3, r3
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
 8003934:	2302      	movs	r3, #2
 8003936:	623b      	str	r3, [r7, #32]
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	fa93 f3a3 	rbit	r3, r3
 800393e:	61fb      	str	r3, [r7, #28]
  return result;
 8003940:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003942:	fab3 f383 	clz	r3, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f043 0302 	orr.w	r3, r3, #2
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d108      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003956:	4b01      	ldr	r3, [pc, #4]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	e00d      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800395c:	40021000 	.word	0x40021000
 8003960:	40007000 	.word	0x40007000
 8003964:	10908100 	.word	0x10908100
 8003968:	2302      	movs	r3, #2
 800396a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	4ba0      	ldr	r3, [pc, #640]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	2202      	movs	r2, #2
 800397a:	613a      	str	r2, [r7, #16]
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	fa92 f2a2 	rbit	r2, r2
 8003982:	60fa      	str	r2, [r7, #12]
  return result;
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	fab2 f282 	clz	r2, r2
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	f002 021f 	and.w	r2, r2, #31
 8003996:	2101      	movs	r1, #1
 8003998:	fa01 f202 	lsl.w	r2, r1, r2
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0b7      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039a2:	4b95      	ldr	r3, [pc, #596]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4992      	ldr	r1, [pc, #584]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d105      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039bc:	4b8e      	ldr	r3, [pc, #568]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	4a8d      	ldr	r2, [pc, #564]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039d4:	4b88      	ldr	r3, [pc, #544]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	f023 0203 	bic.w	r2, r3, #3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4985      	ldr	r1, [pc, #532]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039f2:	4b81      	ldr	r3, [pc, #516]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	497e      	ldr	r1, [pc, #504]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a10:	4b79      	ldr	r3, [pc, #484]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	4976      	ldr	r1, [pc, #472]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a2e:	4b72      	ldr	r3, [pc, #456]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f023 0210 	bic.w	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	496f      	ldr	r1, [pc, #444]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a4c:	4b6a      	ldr	r3, [pc, #424]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	4967      	ldr	r1, [pc, #412]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a6a:	4b63      	ldr	r3, [pc, #396]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f023 0220 	bic.w	r2, r3, #32
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	4960      	ldr	r1, [pc, #384]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a88:	4b5b      	ldr	r3, [pc, #364]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	4958      	ldr	r1, [pc, #352]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003aa6:	4b54      	ldr	r3, [pc, #336]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	4951      	ldr	r1, [pc, #324]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ac4:	4b4c      	ldr	r3, [pc, #304]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	4949      	ldr	r1, [pc, #292]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ae2:	4b45      	ldr	r3, [pc, #276]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	4942      	ldr	r1, [pc, #264]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b00:	4b3d      	ldr	r3, [pc, #244]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	493a      	ldr	r1, [pc, #232]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003b1e:	4b36      	ldr	r3, [pc, #216]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	4933      	ldr	r1, [pc, #204]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b3c:	4b2e      	ldr	r3, [pc, #184]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b48:	492b      	ldr	r1, [pc, #172]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d008      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003b5a:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	4924      	ldr	r1, [pc, #144]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d008      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003b78:	4b1f      	ldr	r3, [pc, #124]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	491c      	ldr	r1, [pc, #112]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d008      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003b96:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba2:	4915      	ldr	r1, [pc, #84]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003bb4:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc0:	490d      	ldr	r1, [pc, #52]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003bd2:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bde:	4906      	ldr	r1, [pc, #24]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00c      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003bf0:	4b01      	ldr	r3, [pc, #4]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	e002      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003bf6:	bf00      	nop
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c04:	490b      	ldr	r1, [pc, #44]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d008      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003c16:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c22:	4904      	ldr	r1, [pc, #16]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3748      	adds	r7, #72	; 0x48
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000

08003c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e01d      	b.n	8003c86 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fe f86c 	bl	8001d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f000 fc32 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <HAL_TIM_Base_Start_IT+0x50>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_TIM_Base_Start_IT+0x42>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc0:	d007      	beq.n	8003cd2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0201 	orr.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	00010007 	.word	0x00010007

08003ce4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0201 	bic.w	r2, r2, #1
 8003cfa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6a1a      	ldr	r2, [r3, #32]
 8003d02:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d06:	4013      	ands	r3, r2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10f      	bne.n	8003d2c <HAL_TIM_Base_Stop_IT+0x48>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6a1a      	ldr	r2, [r3, #32]
 8003d12:	f240 4344 	movw	r3, #1092	; 0x444
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d107      	bne.n	8003d2c <HAL_TIM_Base_Stop_IT+0x48>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0201 	bic.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e01d      	b.n	8003d88 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d106      	bne.n	8003d66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7fd ffc5 	bl	8001cf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3304      	adds	r3, #4
 8003d76:	4619      	mov	r1, r3
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f000 fbb1 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	6839      	ldr	r1, [r7, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 ff40 	bl	8004c28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a21      	ldr	r2, [pc, #132]	; (8003e34 <HAL_TIM_PWM_Start+0xa4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d018      	beq.n	8003de4 <HAL_TIM_PWM_Start+0x54>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a20      	ldr	r2, [pc, #128]	; (8003e38 <HAL_TIM_PWM_Start+0xa8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d013      	beq.n	8003de4 <HAL_TIM_PWM_Start+0x54>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <HAL_TIM_PWM_Start+0xac>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00e      	beq.n	8003de4 <HAL_TIM_PWM_Start+0x54>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1d      	ldr	r2, [pc, #116]	; (8003e40 <HAL_TIM_PWM_Start+0xb0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d009      	beq.n	8003de4 <HAL_TIM_PWM_Start+0x54>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1b      	ldr	r2, [pc, #108]	; (8003e44 <HAL_TIM_PWM_Start+0xb4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_TIM_PWM_Start+0x54>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1a      	ldr	r2, [pc, #104]	; (8003e48 <HAL_TIM_PWM_Start+0xb8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d101      	bne.n	8003de8 <HAL_TIM_PWM_Start+0x58>
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <HAL_TIM_PWM_Start+0x5a>
 8003de8:	2300      	movs	r3, #0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d007      	beq.n	8003dfe <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <HAL_TIM_PWM_Start+0xbc>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b06      	cmp	r3, #6
 8003e0e:	d00b      	beq.n	8003e28 <HAL_TIM_PWM_Start+0x98>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e16:	d007      	beq.n	8003e28 <HAL_TIM_PWM_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40012c00 	.word	0x40012c00
 8003e38:	40013400 	.word	0x40013400
 8003e3c:	40014000 	.word	0x40014000
 8003e40:	40014400 	.word	0x40014400
 8003e44:	40014800 	.word	0x40014800
 8003e48:	40015000 	.word	0x40015000
 8003e4c:	00010007 	.word	0x00010007

08003e50 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e083      	b.n	8003f6c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d106      	bne.n	8003e7e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7fd fef1 	bl	8001c60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003e94:	f023 0307 	bic.w	r3, r3, #7
 8003e98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f000 fb1b 	bl	80044e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed2:	f023 0303 	bic.w	r3, r3, #3
 8003ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003ef0:	f023 030c 	bic.w	r3, r3, #12
 8003ef4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003efc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	011a      	lsls	r2, r3, #4
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	031b      	lsls	r3, r3, #12
 8003f20:	4313      	orrs	r3, r2
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003f2e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003f36:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	4313      	orrs	r3, r2
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <HAL_TIM_Encoder_Start_IT+0x16>
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d010      	beq.n	8003faa <HAL_TIM_Encoder_Start_IT+0x36>
 8003f88:	e01f      	b.n	8003fca <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fe48 	bl	8004c28 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0202 	orr.w	r2, r2, #2
 8003fa6:	60da      	str	r2, [r3, #12]
      break;
 8003fa8:	e02e      	b.n	8004008 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	2104      	movs	r1, #4
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fe38 	bl	8004c28 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0204 	orr.w	r2, r2, #4
 8003fc6:	60da      	str	r2, [r3, #12]
      break;
 8003fc8:	e01e      	b.n	8004008 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fe28 	bl	8004c28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	2104      	movs	r1, #4
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 fe21 	bl	8004c28 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0202 	orr.w	r2, r2, #2
 8003ff4:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0204 	orr.w	r2, r2, #4
 8004004:	60da      	str	r2, [r3, #12]
      break;
 8004006:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b02      	cmp	r3, #2
 8004036:	d122      	bne.n	800407e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b02      	cmp	r3, #2
 8004044:	d11b      	bne.n	800407e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f06f 0202 	mvn.w	r2, #2
 800404e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fa1d 	bl	80044a4 <HAL_TIM_IC_CaptureCallback>
 800406a:	e005      	b.n	8004078 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fa0f 	bl	8004490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fa20 	bl	80044b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b04      	cmp	r3, #4
 800408a:	d122      	bne.n	80040d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b04      	cmp	r3, #4
 8004098:	d11b      	bne.n	80040d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f06f 0204 	mvn.w	r2, #4
 80040a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f9f3 	bl	80044a4 <HAL_TIM_IC_CaptureCallback>
 80040be:	e005      	b.n	80040cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f9e5 	bl	8004490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f9f6 	bl	80044b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d122      	bne.n	8004126 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d11b      	bne.n	8004126 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f06f 0208 	mvn.w	r2, #8
 80040f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2204      	movs	r2, #4
 80040fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f9c9 	bl	80044a4 <HAL_TIM_IC_CaptureCallback>
 8004112:	e005      	b.n	8004120 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f9bb 	bl	8004490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f9cc 	bl	80044b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	2b10      	cmp	r3, #16
 8004132:	d122      	bne.n	800417a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f003 0310 	and.w	r3, r3, #16
 800413e:	2b10      	cmp	r3, #16
 8004140:	d11b      	bne.n	800417a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f06f 0210 	mvn.w	r2, #16
 800414a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2208      	movs	r2, #8
 8004150:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f99f 	bl	80044a4 <HAL_TIM_IC_CaptureCallback>
 8004166:	e005      	b.n	8004174 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f991 	bl	8004490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f9a2 	bl	80044b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b01      	cmp	r3, #1
 8004186:	d10e      	bne.n	80041a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d107      	bne.n	80041a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f06f 0201 	mvn.w	r2, #1
 800419e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7fc fdfd 	bl	8000da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b0:	2b80      	cmp	r3, #128	; 0x80
 80041b2:	d10e      	bne.n	80041d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041be:	2b80      	cmp	r3, #128	; 0x80
 80041c0:	d107      	bne.n	80041d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fde7 	bl	8004da0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e0:	d10e      	bne.n	8004200 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ec:	2b80      	cmp	r3, #128	; 0x80
 80041ee:	d107      	bne.n	8004200 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fdda 	bl	8004db4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420a:	2b40      	cmp	r3, #64	; 0x40
 800420c:	d10e      	bne.n	800422c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004218:	2b40      	cmp	r3, #64	; 0x40
 800421a:	d107      	bne.n	800422c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f950 	bl	80044cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b20      	cmp	r3, #32
 8004238:	d10e      	bne.n	8004258 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b20      	cmp	r3, #32
 8004246:	d107      	bne.n	8004258 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0220 	mvn.w	r2, #32
 8004250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fd9a 	bl	8004d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004258:	bf00      	nop
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004276:	2302      	movs	r3, #2
 8004278:	e105      	b.n	8004486 <HAL_TIM_PWM_ConfigChannel+0x226>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2202      	movs	r2, #2
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b14      	cmp	r3, #20
 800428e:	f200 80f0 	bhi.w	8004472 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042ed 	.word	0x080042ed
 800429c:	08004473 	.word	0x08004473
 80042a0:	08004473 	.word	0x08004473
 80042a4:	08004473 	.word	0x08004473
 80042a8:	0800432d 	.word	0x0800432d
 80042ac:	08004473 	.word	0x08004473
 80042b0:	08004473 	.word	0x08004473
 80042b4:	08004473 	.word	0x08004473
 80042b8:	0800436f 	.word	0x0800436f
 80042bc:	08004473 	.word	0x08004473
 80042c0:	08004473 	.word	0x08004473
 80042c4:	08004473 	.word	0x08004473
 80042c8:	080043af 	.word	0x080043af
 80042cc:	08004473 	.word	0x08004473
 80042d0:	08004473 	.word	0x08004473
 80042d4:	08004473 	.word	0x08004473
 80042d8:	080043f1 	.word	0x080043f1
 80042dc:	08004473 	.word	0x08004473
 80042e0:	08004473 	.word	0x08004473
 80042e4:	08004473 	.word	0x08004473
 80042e8:	08004431 	.word	0x08004431
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f992 	bl	800461c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699a      	ldr	r2, [r3, #24]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0208 	orr.w	r2, r2, #8
 8004306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0204 	bic.w	r2, r2, #4
 8004316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6999      	ldr	r1, [r3, #24]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	619a      	str	r2, [r3, #24]
      break;
 800432a:	e0a3      	b.n	8004474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68b9      	ldr	r1, [r7, #8]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fa0c 	bl	8004750 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699a      	ldr	r2, [r3, #24]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6999      	ldr	r1, [r3, #24]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	021a      	lsls	r2, r3, #8
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	619a      	str	r2, [r3, #24]
      break;
 800436c:	e082      	b.n	8004474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68b9      	ldr	r1, [r7, #8]
 8004374:	4618      	mov	r0, r3
 8004376:	f000 fa7f 	bl	8004878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69da      	ldr	r2, [r3, #28]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0208 	orr.w	r2, r2, #8
 8004388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0204 	bic.w	r2, r2, #4
 8004398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69d9      	ldr	r1, [r3, #28]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	61da      	str	r2, [r3, #28]
      break;
 80043ac:	e062      	b.n	8004474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68b9      	ldr	r1, [r7, #8]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 faf1 	bl	800499c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69da      	ldr	r2, [r3, #28]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69da      	ldr	r2, [r3, #28]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69d9      	ldr	r1, [r3, #28]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	021a      	lsls	r2, r3, #8
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	61da      	str	r2, [r3, #28]
      break;
 80043ee:	e041      	b.n	8004474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68b9      	ldr	r1, [r7, #8]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fb40 	bl	8004a7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0208 	orr.w	r2, r2, #8
 800440a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0204 	bic.w	r2, r2, #4
 800441a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	691a      	ldr	r2, [r3, #16]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800442e:	e021      	b.n	8004474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fb8a 	bl	8004b50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800444a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	021a      	lsls	r2, r3, #8
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004470:	e000      	b.n	8004474 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004472:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop

08004490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a42      	ldr	r2, [pc, #264]	; (80045fc <TIM_Base_SetConfig+0x11c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d013      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fe:	d00f      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a3f      	ldr	r2, [pc, #252]	; (8004600 <TIM_Base_SetConfig+0x120>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00b      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a3e      	ldr	r2, [pc, #248]	; (8004604 <TIM_Base_SetConfig+0x124>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d007      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a3d      	ldr	r2, [pc, #244]	; (8004608 <TIM_Base_SetConfig+0x128>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d003      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a3c      	ldr	r2, [pc, #240]	; (800460c <TIM_Base_SetConfig+0x12c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d108      	bne.n	8004532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a31      	ldr	r2, [pc, #196]	; (80045fc <TIM_Base_SetConfig+0x11c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d01f      	beq.n	800457a <TIM_Base_SetConfig+0x9a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004540:	d01b      	beq.n	800457a <TIM_Base_SetConfig+0x9a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a2e      	ldr	r2, [pc, #184]	; (8004600 <TIM_Base_SetConfig+0x120>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d017      	beq.n	800457a <TIM_Base_SetConfig+0x9a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a2d      	ldr	r2, [pc, #180]	; (8004604 <TIM_Base_SetConfig+0x124>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <TIM_Base_SetConfig+0x9a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a2c      	ldr	r2, [pc, #176]	; (8004608 <TIM_Base_SetConfig+0x128>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00f      	beq.n	800457a <TIM_Base_SetConfig+0x9a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a2c      	ldr	r2, [pc, #176]	; (8004610 <TIM_Base_SetConfig+0x130>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00b      	beq.n	800457a <TIM_Base_SetConfig+0x9a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a2b      	ldr	r2, [pc, #172]	; (8004614 <TIM_Base_SetConfig+0x134>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d007      	beq.n	800457a <TIM_Base_SetConfig+0x9a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a2a      	ldr	r2, [pc, #168]	; (8004618 <TIM_Base_SetConfig+0x138>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d003      	beq.n	800457a <TIM_Base_SetConfig+0x9a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a25      	ldr	r2, [pc, #148]	; (800460c <TIM_Base_SetConfig+0x12c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d108      	bne.n	800458c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a12      	ldr	r2, [pc, #72]	; (80045fc <TIM_Base_SetConfig+0x11c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d013      	beq.n	80045e0 <TIM_Base_SetConfig+0x100>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a13      	ldr	r2, [pc, #76]	; (8004608 <TIM_Base_SetConfig+0x128>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00f      	beq.n	80045e0 <TIM_Base_SetConfig+0x100>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a13      	ldr	r2, [pc, #76]	; (8004610 <TIM_Base_SetConfig+0x130>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00b      	beq.n	80045e0 <TIM_Base_SetConfig+0x100>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a12      	ldr	r2, [pc, #72]	; (8004614 <TIM_Base_SetConfig+0x134>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d007      	beq.n	80045e0 <TIM_Base_SetConfig+0x100>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a11      	ldr	r2, [pc, #68]	; (8004618 <TIM_Base_SetConfig+0x138>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <TIM_Base_SetConfig+0x100>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a0c      	ldr	r2, [pc, #48]	; (800460c <TIM_Base_SetConfig+0x12c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d103      	bne.n	80045e8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	615a      	str	r2, [r3, #20]
}
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40000400 	.word	0x40000400
 8004604:	40000800 	.word	0x40000800
 8004608:	40013400 	.word	0x40013400
 800460c:	40015000 	.word	0x40015000
 8004610:	40014000 	.word	0x40014000
 8004614:	40014400 	.word	0x40014400
 8004618:	40014800 	.word	0x40014800

0800461c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	f023 0201 	bic.w	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800464a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f023 0302 	bic.w	r3, r3, #2
 8004668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a30      	ldr	r2, [pc, #192]	; (8004738 <TIM_OC1_SetConfig+0x11c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d013      	beq.n	80046a4 <TIM_OC1_SetConfig+0x88>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a2f      	ldr	r2, [pc, #188]	; (800473c <TIM_OC1_SetConfig+0x120>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00f      	beq.n	80046a4 <TIM_OC1_SetConfig+0x88>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a2e      	ldr	r2, [pc, #184]	; (8004740 <TIM_OC1_SetConfig+0x124>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00b      	beq.n	80046a4 <TIM_OC1_SetConfig+0x88>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a2d      	ldr	r2, [pc, #180]	; (8004744 <TIM_OC1_SetConfig+0x128>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d007      	beq.n	80046a4 <TIM_OC1_SetConfig+0x88>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a2c      	ldr	r2, [pc, #176]	; (8004748 <TIM_OC1_SetConfig+0x12c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d003      	beq.n	80046a4 <TIM_OC1_SetConfig+0x88>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a2b      	ldr	r2, [pc, #172]	; (800474c <TIM_OC1_SetConfig+0x130>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d10c      	bne.n	80046be <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f023 0308 	bic.w	r3, r3, #8
 80046aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f023 0304 	bic.w	r3, r3, #4
 80046bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1d      	ldr	r2, [pc, #116]	; (8004738 <TIM_OC1_SetConfig+0x11c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d013      	beq.n	80046ee <TIM_OC1_SetConfig+0xd2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a1c      	ldr	r2, [pc, #112]	; (800473c <TIM_OC1_SetConfig+0x120>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00f      	beq.n	80046ee <TIM_OC1_SetConfig+0xd2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a1b      	ldr	r2, [pc, #108]	; (8004740 <TIM_OC1_SetConfig+0x124>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00b      	beq.n	80046ee <TIM_OC1_SetConfig+0xd2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a1a      	ldr	r2, [pc, #104]	; (8004744 <TIM_OC1_SetConfig+0x128>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d007      	beq.n	80046ee <TIM_OC1_SetConfig+0xd2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a19      	ldr	r2, [pc, #100]	; (8004748 <TIM_OC1_SetConfig+0x12c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d003      	beq.n	80046ee <TIM_OC1_SetConfig+0xd2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a18      	ldr	r2, [pc, #96]	; (800474c <TIM_OC1_SetConfig+0x130>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d111      	bne.n	8004712 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	621a      	str	r2, [r3, #32]
}
 800472c:	bf00      	nop
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	40012c00 	.word	0x40012c00
 800473c:	40013400 	.word	0x40013400
 8004740:	40014000 	.word	0x40014000
 8004744:	40014400 	.word	0x40014400
 8004748:	40014800 	.word	0x40014800
 800474c:	40015000 	.word	0x40015000

08004750 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	f023 0210 	bic.w	r2, r3, #16
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800477e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f023 0320 	bic.w	r3, r3, #32
 800479e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a2c      	ldr	r2, [pc, #176]	; (8004860 <TIM_OC2_SetConfig+0x110>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d007      	beq.n	80047c4 <TIM_OC2_SetConfig+0x74>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a2b      	ldr	r2, [pc, #172]	; (8004864 <TIM_OC2_SetConfig+0x114>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d003      	beq.n	80047c4 <TIM_OC2_SetConfig+0x74>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a2a      	ldr	r2, [pc, #168]	; (8004868 <TIM_OC2_SetConfig+0x118>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d10d      	bne.n	80047e0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a1f      	ldr	r2, [pc, #124]	; (8004860 <TIM_OC2_SetConfig+0x110>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <TIM_OC2_SetConfig+0xc0>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a1e      	ldr	r2, [pc, #120]	; (8004864 <TIM_OC2_SetConfig+0x114>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00f      	beq.n	8004810 <TIM_OC2_SetConfig+0xc0>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a1e      	ldr	r2, [pc, #120]	; (800486c <TIM_OC2_SetConfig+0x11c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00b      	beq.n	8004810 <TIM_OC2_SetConfig+0xc0>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a1d      	ldr	r2, [pc, #116]	; (8004870 <TIM_OC2_SetConfig+0x120>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d007      	beq.n	8004810 <TIM_OC2_SetConfig+0xc0>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a1c      	ldr	r2, [pc, #112]	; (8004874 <TIM_OC2_SetConfig+0x124>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d003      	beq.n	8004810 <TIM_OC2_SetConfig+0xc0>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a17      	ldr	r2, [pc, #92]	; (8004868 <TIM_OC2_SetConfig+0x118>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d113      	bne.n	8004838 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004816:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800481e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	621a      	str	r2, [r3, #32]
}
 8004852:	bf00      	nop
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40012c00 	.word	0x40012c00
 8004864:	40013400 	.word	0x40013400
 8004868:	40015000 	.word	0x40015000
 800486c:	40014000 	.word	0x40014000
 8004870:	40014400 	.word	0x40014400
 8004874:	40014800 	.word	0x40014800

08004878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0303 	bic.w	r3, r3, #3
 80048b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a2b      	ldr	r2, [pc, #172]	; (8004984 <TIM_OC3_SetConfig+0x10c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d007      	beq.n	80048ea <TIM_OC3_SetConfig+0x72>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a2a      	ldr	r2, [pc, #168]	; (8004988 <TIM_OC3_SetConfig+0x110>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d003      	beq.n	80048ea <TIM_OC3_SetConfig+0x72>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a29      	ldr	r2, [pc, #164]	; (800498c <TIM_OC3_SetConfig+0x114>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d10d      	bne.n	8004906 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	021b      	lsls	r3, r3, #8
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004904:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a1e      	ldr	r2, [pc, #120]	; (8004984 <TIM_OC3_SetConfig+0x10c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <TIM_OC3_SetConfig+0xbe>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a1d      	ldr	r2, [pc, #116]	; (8004988 <TIM_OC3_SetConfig+0x110>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00f      	beq.n	8004936 <TIM_OC3_SetConfig+0xbe>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a1d      	ldr	r2, [pc, #116]	; (8004990 <TIM_OC3_SetConfig+0x118>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00b      	beq.n	8004936 <TIM_OC3_SetConfig+0xbe>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a1c      	ldr	r2, [pc, #112]	; (8004994 <TIM_OC3_SetConfig+0x11c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d007      	beq.n	8004936 <TIM_OC3_SetConfig+0xbe>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a1b      	ldr	r2, [pc, #108]	; (8004998 <TIM_OC3_SetConfig+0x120>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d003      	beq.n	8004936 <TIM_OC3_SetConfig+0xbe>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a16      	ldr	r2, [pc, #88]	; (800498c <TIM_OC3_SetConfig+0x114>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d113      	bne.n	800495e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800493c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	621a      	str	r2, [r3, #32]
}
 8004978:	bf00      	nop
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	40012c00 	.word	0x40012c00
 8004988:	40013400 	.word	0x40013400
 800498c:	40015000 	.word	0x40015000
 8004990:	40014000 	.word	0x40014000
 8004994:	40014400 	.word	0x40014400
 8004998:	40014800 	.word	0x40014800

0800499c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	021b      	lsls	r3, r3, #8
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	031b      	lsls	r3, r3, #12
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a1a      	ldr	r2, [pc, #104]	; (8004a64 <TIM_OC4_SetConfig+0xc8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d013      	beq.n	8004a28 <TIM_OC4_SetConfig+0x8c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a19      	ldr	r2, [pc, #100]	; (8004a68 <TIM_OC4_SetConfig+0xcc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00f      	beq.n	8004a28 <TIM_OC4_SetConfig+0x8c>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a18      	ldr	r2, [pc, #96]	; (8004a6c <TIM_OC4_SetConfig+0xd0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00b      	beq.n	8004a28 <TIM_OC4_SetConfig+0x8c>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a17      	ldr	r2, [pc, #92]	; (8004a70 <TIM_OC4_SetConfig+0xd4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d007      	beq.n	8004a28 <TIM_OC4_SetConfig+0x8c>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a16      	ldr	r2, [pc, #88]	; (8004a74 <TIM_OC4_SetConfig+0xd8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_OC4_SetConfig+0x8c>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a15      	ldr	r2, [pc, #84]	; (8004a78 <TIM_OC4_SetConfig+0xdc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d109      	bne.n	8004a3c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	019b      	lsls	r3, r3, #6
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	621a      	str	r2, [r3, #32]
}
 8004a56:	bf00      	nop
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40012c00 	.word	0x40012c00
 8004a68:	40013400 	.word	0x40013400
 8004a6c:	40014000 	.word	0x40014000
 8004a70:	40014400 	.word	0x40014400
 8004a74:	40014800 	.word	0x40014800
 8004a78:	40015000 	.word	0x40015000

08004a7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ac0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	041b      	lsls	r3, r3, #16
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a19      	ldr	r2, [pc, #100]	; (8004b38 <TIM_OC5_SetConfig+0xbc>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d013      	beq.n	8004afe <TIM_OC5_SetConfig+0x82>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a18      	ldr	r2, [pc, #96]	; (8004b3c <TIM_OC5_SetConfig+0xc0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00f      	beq.n	8004afe <TIM_OC5_SetConfig+0x82>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a17      	ldr	r2, [pc, #92]	; (8004b40 <TIM_OC5_SetConfig+0xc4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00b      	beq.n	8004afe <TIM_OC5_SetConfig+0x82>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a16      	ldr	r2, [pc, #88]	; (8004b44 <TIM_OC5_SetConfig+0xc8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d007      	beq.n	8004afe <TIM_OC5_SetConfig+0x82>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a15      	ldr	r2, [pc, #84]	; (8004b48 <TIM_OC5_SetConfig+0xcc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d003      	beq.n	8004afe <TIM_OC5_SetConfig+0x82>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a14      	ldr	r2, [pc, #80]	; (8004b4c <TIM_OC5_SetConfig+0xd0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d109      	bne.n	8004b12 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	621a      	str	r2, [r3, #32]
}
 8004b2c:	bf00      	nop
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	40013400 	.word	0x40013400
 8004b40:	40014000 	.word	0x40014000
 8004b44:	40014400 	.word	0x40014400
 8004b48:	40014800 	.word	0x40014800
 8004b4c:	40015000 	.word	0x40015000

08004b50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	051b      	lsls	r3, r3, #20
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a1a      	ldr	r2, [pc, #104]	; (8004c10 <TIM_OC6_SetConfig+0xc0>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d013      	beq.n	8004bd4 <TIM_OC6_SetConfig+0x84>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a19      	ldr	r2, [pc, #100]	; (8004c14 <TIM_OC6_SetConfig+0xc4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00f      	beq.n	8004bd4 <TIM_OC6_SetConfig+0x84>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <TIM_OC6_SetConfig+0xc8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00b      	beq.n	8004bd4 <TIM_OC6_SetConfig+0x84>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a17      	ldr	r2, [pc, #92]	; (8004c1c <TIM_OC6_SetConfig+0xcc>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d007      	beq.n	8004bd4 <TIM_OC6_SetConfig+0x84>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a16      	ldr	r2, [pc, #88]	; (8004c20 <TIM_OC6_SetConfig+0xd0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d003      	beq.n	8004bd4 <TIM_OC6_SetConfig+0x84>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a15      	ldr	r2, [pc, #84]	; (8004c24 <TIM_OC6_SetConfig+0xd4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d109      	bne.n	8004be8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	029b      	lsls	r3, r3, #10
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	621a      	str	r2, [r3, #32]
}
 8004c02:	bf00      	nop
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	40012c00 	.word	0x40012c00
 8004c14:	40013400 	.word	0x40013400
 8004c18:	40014000 	.word	0x40014000
 8004c1c:	40014400 	.word	0x40014400
 8004c20:	40014800 	.word	0x40014800
 8004c24:	40015000 	.word	0x40015000

08004c28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a1a      	ldr	r2, [r3, #32]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	401a      	ands	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1a      	ldr	r2, [r3, #32]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 031f 	and.w	r3, r3, #31
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c60:	431a      	orrs	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	621a      	str	r2, [r3, #32]
}
 8004c66:	bf00      	nop
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
	...

08004c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e06d      	b.n	8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a30      	ldr	r2, [pc, #192]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d009      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a2f      	ldr	r2, [pc, #188]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d004      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a2d      	ldr	r2, [pc, #180]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d108      	bne.n	8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004cd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1e      	ldr	r2, [pc, #120]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d01d      	beq.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d08:	d018      	beq.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1c      	ldr	r2, [pc, #112]	; (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d013      	beq.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a1a      	ldr	r2, [pc, #104]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00e      	beq.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a15      	ldr	r2, [pc, #84]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d009      	beq.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a16      	ldr	r2, [pc, #88]	; (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d004      	beq.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a11      	ldr	r2, [pc, #68]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d10c      	bne.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	40013400 	.word	0x40013400
 8004d7c:	40015000 	.word	0x40015000
 8004d80:	40000400 	.word	0x40000400
 8004d84:	40000800 	.word	0x40000800
 8004d88:	40014000 	.word	0x40014000

08004d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e040      	b.n	8004e5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fd f834 	bl	8001e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2224      	movs	r2, #36	; 0x24
 8004df4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0201 	bic.w	r2, r2, #1
 8004e04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f8c0 	bl	8004f8c <UART_SetConfig>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e022      	b.n	8004e5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 face 	bl	80053c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0201 	orr.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fb55 	bl	8005504 <UART_CheckIdleState>
 8004e5a:	4603      	mov	r3, r0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	; 0x28
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	4613      	mov	r3, r2
 8004e72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	f040 8081 	bne.w	8004f80 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <HAL_UART_Transmit+0x26>
 8004e84:	88fb      	ldrh	r3, [r7, #6]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e079      	b.n	8004f82 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_UART_Transmit+0x38>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e072      	b.n	8004f82 <HAL_UART_Transmit+0x11e>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2221      	movs	r2, #33	; 0x21
 8004eae:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004eb0:	f7fd f898 	bl	8001fe4 <HAL_GetTick>
 8004eb4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	88fa      	ldrh	r2, [r7, #6]
 8004eba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	88fa      	ldrh	r2, [r7, #6]
 8004ec2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ece:	d108      	bne.n	8004ee2 <HAL_UART_Transmit+0x7e>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d104      	bne.n	8004ee2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	61bb      	str	r3, [r7, #24]
 8004ee0:	e003      	b.n	8004eea <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004eea:	e02d      	b.n	8004f48 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2180      	movs	r1, #128	; 0x80
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 fb49 	bl	800558e <UART_WaitOnFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e03d      	b.n	8004f82 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10b      	bne.n	8004f24 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	881a      	ldrh	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f18:	b292      	uxth	r2, r2
 8004f1a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	3302      	adds	r3, #2
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	e008      	b.n	8004f36 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	781a      	ldrb	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	b292      	uxth	r2, r2
 8004f2e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	3301      	adds	r3, #1
 8004f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1cb      	bne.n	8004eec <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2140      	movs	r1, #64	; 0x40
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fb15 	bl	800558e <UART_WaitOnFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e009      	b.n	8004f82 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e000      	b.n	8004f82 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004f80:	2302      	movs	r3, #2
  }
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3720      	adds	r7, #32
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4bac      	ldr	r3, [pc, #688]	; (800526c <UART_SetConfig+0x2e0>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	6939      	ldr	r1, [r7, #16]
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a9a      	ldr	r2, [pc, #616]	; (8005270 <UART_SetConfig+0x2e4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d121      	bne.n	8005050 <UART_SetConfig+0xc4>
 800500c:	4b99      	ldr	r3, [pc, #612]	; (8005274 <UART_SetConfig+0x2e8>)
 800500e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	2b03      	cmp	r3, #3
 8005016:	d817      	bhi.n	8005048 <UART_SetConfig+0xbc>
 8005018:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <UART_SetConfig+0x94>)
 800501a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501e:	bf00      	nop
 8005020:	08005031 	.word	0x08005031
 8005024:	0800503d 	.word	0x0800503d
 8005028:	08005043 	.word	0x08005043
 800502c:	08005037 	.word	0x08005037
 8005030:	2301      	movs	r3, #1
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	e0b2      	b.n	800519c <UART_SetConfig+0x210>
 8005036:	2302      	movs	r3, #2
 8005038:	77fb      	strb	r3, [r7, #31]
 800503a:	e0af      	b.n	800519c <UART_SetConfig+0x210>
 800503c:	2304      	movs	r3, #4
 800503e:	77fb      	strb	r3, [r7, #31]
 8005040:	e0ac      	b.n	800519c <UART_SetConfig+0x210>
 8005042:	2308      	movs	r3, #8
 8005044:	77fb      	strb	r3, [r7, #31]
 8005046:	e0a9      	b.n	800519c <UART_SetConfig+0x210>
 8005048:	2310      	movs	r3, #16
 800504a:	77fb      	strb	r3, [r7, #31]
 800504c:	bf00      	nop
 800504e:	e0a5      	b.n	800519c <UART_SetConfig+0x210>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a88      	ldr	r2, [pc, #544]	; (8005278 <UART_SetConfig+0x2ec>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d123      	bne.n	80050a2 <UART_SetConfig+0x116>
 800505a:	4b86      	ldr	r3, [pc, #536]	; (8005274 <UART_SetConfig+0x2e8>)
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005066:	d012      	beq.n	800508e <UART_SetConfig+0x102>
 8005068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800506c:	d802      	bhi.n	8005074 <UART_SetConfig+0xe8>
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <UART_SetConfig+0xf6>
 8005072:	e012      	b.n	800509a <UART_SetConfig+0x10e>
 8005074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005078:	d00c      	beq.n	8005094 <UART_SetConfig+0x108>
 800507a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800507e:	d003      	beq.n	8005088 <UART_SetConfig+0xfc>
 8005080:	e00b      	b.n	800509a <UART_SetConfig+0x10e>
 8005082:	2300      	movs	r3, #0
 8005084:	77fb      	strb	r3, [r7, #31]
 8005086:	e089      	b.n	800519c <UART_SetConfig+0x210>
 8005088:	2302      	movs	r3, #2
 800508a:	77fb      	strb	r3, [r7, #31]
 800508c:	e086      	b.n	800519c <UART_SetConfig+0x210>
 800508e:	2304      	movs	r3, #4
 8005090:	77fb      	strb	r3, [r7, #31]
 8005092:	e083      	b.n	800519c <UART_SetConfig+0x210>
 8005094:	2308      	movs	r3, #8
 8005096:	77fb      	strb	r3, [r7, #31]
 8005098:	e080      	b.n	800519c <UART_SetConfig+0x210>
 800509a:	2310      	movs	r3, #16
 800509c:	77fb      	strb	r3, [r7, #31]
 800509e:	bf00      	nop
 80050a0:	e07c      	b.n	800519c <UART_SetConfig+0x210>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a75      	ldr	r2, [pc, #468]	; (800527c <UART_SetConfig+0x2f0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d123      	bne.n	80050f4 <UART_SetConfig+0x168>
 80050ac:	4b71      	ldr	r3, [pc, #452]	; (8005274 <UART_SetConfig+0x2e8>)
 80050ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80050b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050b8:	d012      	beq.n	80050e0 <UART_SetConfig+0x154>
 80050ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050be:	d802      	bhi.n	80050c6 <UART_SetConfig+0x13a>
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d007      	beq.n	80050d4 <UART_SetConfig+0x148>
 80050c4:	e012      	b.n	80050ec <UART_SetConfig+0x160>
 80050c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050ca:	d00c      	beq.n	80050e6 <UART_SetConfig+0x15a>
 80050cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80050d0:	d003      	beq.n	80050da <UART_SetConfig+0x14e>
 80050d2:	e00b      	b.n	80050ec <UART_SetConfig+0x160>
 80050d4:	2300      	movs	r3, #0
 80050d6:	77fb      	strb	r3, [r7, #31]
 80050d8:	e060      	b.n	800519c <UART_SetConfig+0x210>
 80050da:	2302      	movs	r3, #2
 80050dc:	77fb      	strb	r3, [r7, #31]
 80050de:	e05d      	b.n	800519c <UART_SetConfig+0x210>
 80050e0:	2304      	movs	r3, #4
 80050e2:	77fb      	strb	r3, [r7, #31]
 80050e4:	e05a      	b.n	800519c <UART_SetConfig+0x210>
 80050e6:	2308      	movs	r3, #8
 80050e8:	77fb      	strb	r3, [r7, #31]
 80050ea:	e057      	b.n	800519c <UART_SetConfig+0x210>
 80050ec:	2310      	movs	r3, #16
 80050ee:	77fb      	strb	r3, [r7, #31]
 80050f0:	bf00      	nop
 80050f2:	e053      	b.n	800519c <UART_SetConfig+0x210>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a61      	ldr	r2, [pc, #388]	; (8005280 <UART_SetConfig+0x2f4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d123      	bne.n	8005146 <UART_SetConfig+0x1ba>
 80050fe:	4b5d      	ldr	r3, [pc, #372]	; (8005274 <UART_SetConfig+0x2e8>)
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800510a:	d012      	beq.n	8005132 <UART_SetConfig+0x1a6>
 800510c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005110:	d802      	bhi.n	8005118 <UART_SetConfig+0x18c>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <UART_SetConfig+0x19a>
 8005116:	e012      	b.n	800513e <UART_SetConfig+0x1b2>
 8005118:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800511c:	d00c      	beq.n	8005138 <UART_SetConfig+0x1ac>
 800511e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005122:	d003      	beq.n	800512c <UART_SetConfig+0x1a0>
 8005124:	e00b      	b.n	800513e <UART_SetConfig+0x1b2>
 8005126:	2300      	movs	r3, #0
 8005128:	77fb      	strb	r3, [r7, #31]
 800512a:	e037      	b.n	800519c <UART_SetConfig+0x210>
 800512c:	2302      	movs	r3, #2
 800512e:	77fb      	strb	r3, [r7, #31]
 8005130:	e034      	b.n	800519c <UART_SetConfig+0x210>
 8005132:	2304      	movs	r3, #4
 8005134:	77fb      	strb	r3, [r7, #31]
 8005136:	e031      	b.n	800519c <UART_SetConfig+0x210>
 8005138:	2308      	movs	r3, #8
 800513a:	77fb      	strb	r3, [r7, #31]
 800513c:	e02e      	b.n	800519c <UART_SetConfig+0x210>
 800513e:	2310      	movs	r3, #16
 8005140:	77fb      	strb	r3, [r7, #31]
 8005142:	bf00      	nop
 8005144:	e02a      	b.n	800519c <UART_SetConfig+0x210>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a4e      	ldr	r2, [pc, #312]	; (8005284 <UART_SetConfig+0x2f8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d123      	bne.n	8005198 <UART_SetConfig+0x20c>
 8005150:	4b48      	ldr	r3, [pc, #288]	; (8005274 <UART_SetConfig+0x2e8>)
 8005152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005154:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800515c:	d012      	beq.n	8005184 <UART_SetConfig+0x1f8>
 800515e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005162:	d802      	bhi.n	800516a <UART_SetConfig+0x1de>
 8005164:	2b00      	cmp	r3, #0
 8005166:	d007      	beq.n	8005178 <UART_SetConfig+0x1ec>
 8005168:	e012      	b.n	8005190 <UART_SetConfig+0x204>
 800516a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800516e:	d00c      	beq.n	800518a <UART_SetConfig+0x1fe>
 8005170:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005174:	d003      	beq.n	800517e <UART_SetConfig+0x1f2>
 8005176:	e00b      	b.n	8005190 <UART_SetConfig+0x204>
 8005178:	2300      	movs	r3, #0
 800517a:	77fb      	strb	r3, [r7, #31]
 800517c:	e00e      	b.n	800519c <UART_SetConfig+0x210>
 800517e:	2302      	movs	r3, #2
 8005180:	77fb      	strb	r3, [r7, #31]
 8005182:	e00b      	b.n	800519c <UART_SetConfig+0x210>
 8005184:	2304      	movs	r3, #4
 8005186:	77fb      	strb	r3, [r7, #31]
 8005188:	e008      	b.n	800519c <UART_SetConfig+0x210>
 800518a:	2308      	movs	r3, #8
 800518c:	77fb      	strb	r3, [r7, #31]
 800518e:	e005      	b.n	800519c <UART_SetConfig+0x210>
 8005190:	2310      	movs	r3, #16
 8005192:	77fb      	strb	r3, [r7, #31]
 8005194:	bf00      	nop
 8005196:	e001      	b.n	800519c <UART_SetConfig+0x210>
 8005198:	2310      	movs	r3, #16
 800519a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a4:	f040 8090 	bne.w	80052c8 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80051a8:	7ffb      	ldrb	r3, [r7, #31]
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d86c      	bhi.n	8005288 <UART_SetConfig+0x2fc>
 80051ae:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <UART_SetConfig+0x228>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	080051d9 	.word	0x080051d9
 80051b8:	080051f9 	.word	0x080051f9
 80051bc:	08005219 	.word	0x08005219
 80051c0:	08005289 	.word	0x08005289
 80051c4:	08005235 	.word	0x08005235
 80051c8:	08005289 	.word	0x08005289
 80051cc:	08005289 	.word	0x08005289
 80051d0:	08005289 	.word	0x08005289
 80051d4:	08005255 	.word	0x08005255
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d8:	f7fe facc 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 80051dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	005a      	lsls	r2, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	085b      	lsrs	r3, r3, #1
 80051e8:	441a      	add	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	61bb      	str	r3, [r7, #24]
        break;
 80051f6:	e04a      	b.n	800528e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051f8:	f7fe fade 	bl	80037b8 <HAL_RCC_GetPCLK2Freq>
 80051fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	005a      	lsls	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	085b      	lsrs	r3, r3, #1
 8005208:	441a      	add	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005212:	b29b      	uxth	r3, r3
 8005214:	61bb      	str	r3, [r7, #24]
        break;
 8005216:	e03a      	b.n	800528e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	085b      	lsrs	r3, r3, #1
 800521e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005222:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6852      	ldr	r2, [r2, #4]
 800522a:	fbb3 f3f2 	udiv	r3, r3, r2
 800522e:	b29b      	uxth	r3, r3
 8005230:	61bb      	str	r3, [r7, #24]
        break;
 8005232:	e02c      	b.n	800528e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005234:	f7fe fa28 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 8005238:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	005a      	lsls	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	085b      	lsrs	r3, r3, #1
 8005244:	441a      	add	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	fbb2 f3f3 	udiv	r3, r2, r3
 800524e:	b29b      	uxth	r3, r3
 8005250:	61bb      	str	r3, [r7, #24]
        break;
 8005252:	e01c      	b.n	800528e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	085b      	lsrs	r3, r3, #1
 800525a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	fbb2 f3f3 	udiv	r3, r2, r3
 8005266:	b29b      	uxth	r3, r3
 8005268:	61bb      	str	r3, [r7, #24]
        break;
 800526a:	e010      	b.n	800528e <UART_SetConfig+0x302>
 800526c:	efff69f3 	.word	0xefff69f3
 8005270:	40013800 	.word	0x40013800
 8005274:	40021000 	.word	0x40021000
 8005278:	40004400 	.word	0x40004400
 800527c:	40004800 	.word	0x40004800
 8005280:	40004c00 	.word	0x40004c00
 8005284:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	75fb      	strb	r3, [r7, #23]
        break;
 800528c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b0f      	cmp	r3, #15
 8005292:	d916      	bls.n	80052c2 <UART_SetConfig+0x336>
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529a:	d212      	bcs.n	80052c2 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f023 030f 	bic.w	r3, r3, #15
 80052a4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	085b      	lsrs	r3, r3, #1
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	897b      	ldrh	r3, [r7, #10]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	897a      	ldrh	r2, [r7, #10]
 80052be:	60da      	str	r2, [r3, #12]
 80052c0:	e072      	b.n	80053a8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	75fb      	strb	r3, [r7, #23]
 80052c6:	e06f      	b.n	80053a8 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 80052c8:	7ffb      	ldrb	r3, [r7, #31]
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d85b      	bhi.n	8005386 <UART_SetConfig+0x3fa>
 80052ce:	a201      	add	r2, pc, #4	; (adr r2, 80052d4 <UART_SetConfig+0x348>)
 80052d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d4:	080052f9 	.word	0x080052f9
 80052d8:	08005317 	.word	0x08005317
 80052dc:	08005335 	.word	0x08005335
 80052e0:	08005387 	.word	0x08005387
 80052e4:	08005351 	.word	0x08005351
 80052e8:	08005387 	.word	0x08005387
 80052ec:	08005387 	.word	0x08005387
 80052f0:	08005387 	.word	0x08005387
 80052f4:	0800536f 	.word	0x0800536f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f8:	f7fe fa3c 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 80052fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	085a      	lsrs	r2, r3, #1
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	441a      	add	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005310:	b29b      	uxth	r3, r3
 8005312:	61bb      	str	r3, [r7, #24]
        break;
 8005314:	e03a      	b.n	800538c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005316:	f7fe fa4f 	bl	80037b8 <HAL_RCC_GetPCLK2Freq>
 800531a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	085a      	lsrs	r2, r3, #1
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	441a      	add	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	fbb2 f3f3 	udiv	r3, r2, r3
 800532e:	b29b      	uxth	r3, r3
 8005330:	61bb      	str	r3, [r7, #24]
        break;
 8005332:	e02b      	b.n	800538c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	085b      	lsrs	r3, r3, #1
 800533a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800533e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6852      	ldr	r2, [r2, #4]
 8005346:	fbb3 f3f2 	udiv	r3, r3, r2
 800534a:	b29b      	uxth	r3, r3
 800534c:	61bb      	str	r3, [r7, #24]
        break;
 800534e:	e01d      	b.n	800538c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005350:	f7fe f99a 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 8005354:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	085a      	lsrs	r2, r3, #1
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	441a      	add	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	fbb2 f3f3 	udiv	r3, r2, r3
 8005368:	b29b      	uxth	r3, r3
 800536a:	61bb      	str	r3, [r7, #24]
        break;
 800536c:	e00e      	b.n	800538c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	085b      	lsrs	r3, r3, #1
 8005374:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005380:	b29b      	uxth	r3, r3
 8005382:	61bb      	str	r3, [r7, #24]
        break;
 8005384:	e002      	b.n	800538c <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	75fb      	strb	r3, [r7, #23]
        break;
 800538a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	2b0f      	cmp	r3, #15
 8005390:	d908      	bls.n	80053a4 <UART_SetConfig+0x418>
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005398:	d204      	bcs.n	80053a4 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	60da      	str	r2, [r3, #12]
 80053a2:	e001      	b.n	80053a8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3720      	adds	r7, #32
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop

080053c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549c:	2b00      	cmp	r3, #0
 800549e:	d01a      	beq.n	80054d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054be:	d10a      	bne.n	80054d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	605a      	str	r2, [r3, #4]
  }
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af02      	add	r7, sp, #8
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005512:	f7fc fd67 	bl	8001fe4 <HAL_GetTick>
 8005516:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b08      	cmp	r3, #8
 8005524:	d10e      	bne.n	8005544 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005526:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f82a 	bl	800558e <UART_WaitOnFlagUntilTimeout>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e020      	b.n	8005586 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b04      	cmp	r3, #4
 8005550:	d10e      	bne.n	8005570 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005552:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f814 	bl	800558e <UART_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e00a      	b.n	8005586 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	603b      	str	r3, [r7, #0]
 800559a:	4613      	mov	r3, r2
 800559c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800559e:	e05d      	b.n	800565c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a6:	d059      	beq.n	800565c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a8:	f7fc fd1c 	bl	8001fe4 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d302      	bcc.n	80055be <UART_WaitOnFlagUntilTimeout+0x30>
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d11b      	bne.n	80055f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0201 	bic.w	r2, r2, #1
 80055dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e042      	b.n	800567c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d02b      	beq.n	800565c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800560e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005612:	d123      	bne.n	800565c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800561c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800562c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2220      	movs	r2, #32
 8005642:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2220      	movs	r2, #32
 8005648:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e00f      	b.n	800567c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69da      	ldr	r2, [r3, #28]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	4013      	ands	r3, r2
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	429a      	cmp	r2, r3
 800566a:	bf0c      	ite	eq
 800566c:	2301      	moveq	r3, #1
 800566e:	2300      	movne	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	461a      	mov	r2, r3
 8005674:	79fb      	ldrb	r3, [r7, #7]
 8005676:	429a      	cmp	r2, r3
 8005678:	d092      	beq.n	80055a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <__errno>:
 8005684:	4b01      	ldr	r3, [pc, #4]	; (800568c <__errno+0x8>)
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	20000024 	.word	0x20000024

08005690 <__libc_init_array>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	4e0d      	ldr	r6, [pc, #52]	; (80056c8 <__libc_init_array+0x38>)
 8005694:	4c0d      	ldr	r4, [pc, #52]	; (80056cc <__libc_init_array+0x3c>)
 8005696:	1ba4      	subs	r4, r4, r6
 8005698:	10a4      	asrs	r4, r4, #2
 800569a:	2500      	movs	r5, #0
 800569c:	42a5      	cmp	r5, r4
 800569e:	d109      	bne.n	80056b4 <__libc_init_array+0x24>
 80056a0:	4e0b      	ldr	r6, [pc, #44]	; (80056d0 <__libc_init_array+0x40>)
 80056a2:	4c0c      	ldr	r4, [pc, #48]	; (80056d4 <__libc_init_array+0x44>)
 80056a4:	f002 f8a6 	bl	80077f4 <_init>
 80056a8:	1ba4      	subs	r4, r4, r6
 80056aa:	10a4      	asrs	r4, r4, #2
 80056ac:	2500      	movs	r5, #0
 80056ae:	42a5      	cmp	r5, r4
 80056b0:	d105      	bne.n	80056be <__libc_init_array+0x2e>
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056b8:	4798      	blx	r3
 80056ba:	3501      	adds	r5, #1
 80056bc:	e7ee      	b.n	800569c <__libc_init_array+0xc>
 80056be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056c2:	4798      	blx	r3
 80056c4:	3501      	adds	r5, #1
 80056c6:	e7f2      	b.n	80056ae <__libc_init_array+0x1e>
 80056c8:	08007ac8 	.word	0x08007ac8
 80056cc:	08007ac8 	.word	0x08007ac8
 80056d0:	08007ac8 	.word	0x08007ac8
 80056d4:	08007acc 	.word	0x08007acc

080056d8 <memset>:
 80056d8:	4402      	add	r2, r0
 80056da:	4603      	mov	r3, r0
 80056dc:	4293      	cmp	r3, r2
 80056de:	d100      	bne.n	80056e2 <memset+0xa>
 80056e0:	4770      	bx	lr
 80056e2:	f803 1b01 	strb.w	r1, [r3], #1
 80056e6:	e7f9      	b.n	80056dc <memset+0x4>

080056e8 <__cvt>:
 80056e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056ec:	ec55 4b10 	vmov	r4, r5, d0
 80056f0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80056f2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056f6:	2d00      	cmp	r5, #0
 80056f8:	460e      	mov	r6, r1
 80056fa:	4691      	mov	r9, r2
 80056fc:	4619      	mov	r1, r3
 80056fe:	bfb8      	it	lt
 8005700:	4622      	movlt	r2, r4
 8005702:	462b      	mov	r3, r5
 8005704:	f027 0720 	bic.w	r7, r7, #32
 8005708:	bfbb      	ittet	lt
 800570a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800570e:	461d      	movlt	r5, r3
 8005710:	2300      	movge	r3, #0
 8005712:	232d      	movlt	r3, #45	; 0x2d
 8005714:	bfb8      	it	lt
 8005716:	4614      	movlt	r4, r2
 8005718:	2f46      	cmp	r7, #70	; 0x46
 800571a:	700b      	strb	r3, [r1, #0]
 800571c:	d004      	beq.n	8005728 <__cvt+0x40>
 800571e:	2f45      	cmp	r7, #69	; 0x45
 8005720:	d100      	bne.n	8005724 <__cvt+0x3c>
 8005722:	3601      	adds	r6, #1
 8005724:	2102      	movs	r1, #2
 8005726:	e000      	b.n	800572a <__cvt+0x42>
 8005728:	2103      	movs	r1, #3
 800572a:	ab03      	add	r3, sp, #12
 800572c:	9301      	str	r3, [sp, #4]
 800572e:	ab02      	add	r3, sp, #8
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	4632      	mov	r2, r6
 8005734:	4653      	mov	r3, sl
 8005736:	ec45 4b10 	vmov	d0, r4, r5
 800573a:	f000 fcdd 	bl	80060f8 <_dtoa_r>
 800573e:	2f47      	cmp	r7, #71	; 0x47
 8005740:	4680      	mov	r8, r0
 8005742:	d102      	bne.n	800574a <__cvt+0x62>
 8005744:	f019 0f01 	tst.w	r9, #1
 8005748:	d026      	beq.n	8005798 <__cvt+0xb0>
 800574a:	2f46      	cmp	r7, #70	; 0x46
 800574c:	eb08 0906 	add.w	r9, r8, r6
 8005750:	d111      	bne.n	8005776 <__cvt+0x8e>
 8005752:	f898 3000 	ldrb.w	r3, [r8]
 8005756:	2b30      	cmp	r3, #48	; 0x30
 8005758:	d10a      	bne.n	8005770 <__cvt+0x88>
 800575a:	2200      	movs	r2, #0
 800575c:	2300      	movs	r3, #0
 800575e:	4620      	mov	r0, r4
 8005760:	4629      	mov	r1, r5
 8005762:	f7fb f9b9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005766:	b918      	cbnz	r0, 8005770 <__cvt+0x88>
 8005768:	f1c6 0601 	rsb	r6, r6, #1
 800576c:	f8ca 6000 	str.w	r6, [sl]
 8005770:	f8da 3000 	ldr.w	r3, [sl]
 8005774:	4499      	add	r9, r3
 8005776:	2200      	movs	r2, #0
 8005778:	2300      	movs	r3, #0
 800577a:	4620      	mov	r0, r4
 800577c:	4629      	mov	r1, r5
 800577e:	f7fb f9ab 	bl	8000ad8 <__aeabi_dcmpeq>
 8005782:	b938      	cbnz	r0, 8005794 <__cvt+0xac>
 8005784:	2230      	movs	r2, #48	; 0x30
 8005786:	9b03      	ldr	r3, [sp, #12]
 8005788:	454b      	cmp	r3, r9
 800578a:	d205      	bcs.n	8005798 <__cvt+0xb0>
 800578c:	1c59      	adds	r1, r3, #1
 800578e:	9103      	str	r1, [sp, #12]
 8005790:	701a      	strb	r2, [r3, #0]
 8005792:	e7f8      	b.n	8005786 <__cvt+0x9e>
 8005794:	f8cd 900c 	str.w	r9, [sp, #12]
 8005798:	9b03      	ldr	r3, [sp, #12]
 800579a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800579c:	eba3 0308 	sub.w	r3, r3, r8
 80057a0:	4640      	mov	r0, r8
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	b004      	add	sp, #16
 80057a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080057aa <__exponent>:
 80057aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ac:	2900      	cmp	r1, #0
 80057ae:	4604      	mov	r4, r0
 80057b0:	bfba      	itte	lt
 80057b2:	4249      	neglt	r1, r1
 80057b4:	232d      	movlt	r3, #45	; 0x2d
 80057b6:	232b      	movge	r3, #43	; 0x2b
 80057b8:	2909      	cmp	r1, #9
 80057ba:	f804 2b02 	strb.w	r2, [r4], #2
 80057be:	7043      	strb	r3, [r0, #1]
 80057c0:	dd20      	ble.n	8005804 <__exponent+0x5a>
 80057c2:	f10d 0307 	add.w	r3, sp, #7
 80057c6:	461f      	mov	r7, r3
 80057c8:	260a      	movs	r6, #10
 80057ca:	fb91 f5f6 	sdiv	r5, r1, r6
 80057ce:	fb06 1115 	mls	r1, r6, r5, r1
 80057d2:	3130      	adds	r1, #48	; 0x30
 80057d4:	2d09      	cmp	r5, #9
 80057d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80057da:	f103 32ff 	add.w	r2, r3, #4294967295
 80057de:	4629      	mov	r1, r5
 80057e0:	dc09      	bgt.n	80057f6 <__exponent+0x4c>
 80057e2:	3130      	adds	r1, #48	; 0x30
 80057e4:	3b02      	subs	r3, #2
 80057e6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80057ea:	42bb      	cmp	r3, r7
 80057ec:	4622      	mov	r2, r4
 80057ee:	d304      	bcc.n	80057fa <__exponent+0x50>
 80057f0:	1a10      	subs	r0, r2, r0
 80057f2:	b003      	add	sp, #12
 80057f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057f6:	4613      	mov	r3, r2
 80057f8:	e7e7      	b.n	80057ca <__exponent+0x20>
 80057fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057fe:	f804 2b01 	strb.w	r2, [r4], #1
 8005802:	e7f2      	b.n	80057ea <__exponent+0x40>
 8005804:	2330      	movs	r3, #48	; 0x30
 8005806:	4419      	add	r1, r3
 8005808:	7083      	strb	r3, [r0, #2]
 800580a:	1d02      	adds	r2, r0, #4
 800580c:	70c1      	strb	r1, [r0, #3]
 800580e:	e7ef      	b.n	80057f0 <__exponent+0x46>

08005810 <_printf_float>:
 8005810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005814:	b08d      	sub	sp, #52	; 0x34
 8005816:	460c      	mov	r4, r1
 8005818:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800581c:	4616      	mov	r6, r2
 800581e:	461f      	mov	r7, r3
 8005820:	4605      	mov	r5, r0
 8005822:	f001 fa21 	bl	8006c68 <_localeconv_r>
 8005826:	6803      	ldr	r3, [r0, #0]
 8005828:	9304      	str	r3, [sp, #16]
 800582a:	4618      	mov	r0, r3
 800582c:	f7fa fcd8 	bl	80001e0 <strlen>
 8005830:	2300      	movs	r3, #0
 8005832:	930a      	str	r3, [sp, #40]	; 0x28
 8005834:	f8d8 3000 	ldr.w	r3, [r8]
 8005838:	9005      	str	r0, [sp, #20]
 800583a:	3307      	adds	r3, #7
 800583c:	f023 0307 	bic.w	r3, r3, #7
 8005840:	f103 0208 	add.w	r2, r3, #8
 8005844:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005848:	f8d4 b000 	ldr.w	fp, [r4]
 800584c:	f8c8 2000 	str.w	r2, [r8]
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005858:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800585c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005860:	9307      	str	r3, [sp, #28]
 8005862:	f8cd 8018 	str.w	r8, [sp, #24]
 8005866:	f04f 32ff 	mov.w	r2, #4294967295
 800586a:	4ba7      	ldr	r3, [pc, #668]	; (8005b08 <_printf_float+0x2f8>)
 800586c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005870:	f7fb f964 	bl	8000b3c <__aeabi_dcmpun>
 8005874:	bb70      	cbnz	r0, 80058d4 <_printf_float+0xc4>
 8005876:	f04f 32ff 	mov.w	r2, #4294967295
 800587a:	4ba3      	ldr	r3, [pc, #652]	; (8005b08 <_printf_float+0x2f8>)
 800587c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005880:	f7fb f93e 	bl	8000b00 <__aeabi_dcmple>
 8005884:	bb30      	cbnz	r0, 80058d4 <_printf_float+0xc4>
 8005886:	2200      	movs	r2, #0
 8005888:	2300      	movs	r3, #0
 800588a:	4640      	mov	r0, r8
 800588c:	4649      	mov	r1, r9
 800588e:	f7fb f92d 	bl	8000aec <__aeabi_dcmplt>
 8005892:	b110      	cbz	r0, 800589a <_printf_float+0x8a>
 8005894:	232d      	movs	r3, #45	; 0x2d
 8005896:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800589a:	4a9c      	ldr	r2, [pc, #624]	; (8005b0c <_printf_float+0x2fc>)
 800589c:	4b9c      	ldr	r3, [pc, #624]	; (8005b10 <_printf_float+0x300>)
 800589e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80058a2:	bf8c      	ite	hi
 80058a4:	4690      	movhi	r8, r2
 80058a6:	4698      	movls	r8, r3
 80058a8:	2303      	movs	r3, #3
 80058aa:	f02b 0204 	bic.w	r2, fp, #4
 80058ae:	6123      	str	r3, [r4, #16]
 80058b0:	6022      	str	r2, [r4, #0]
 80058b2:	f04f 0900 	mov.w	r9, #0
 80058b6:	9700      	str	r7, [sp, #0]
 80058b8:	4633      	mov	r3, r6
 80058ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80058bc:	4621      	mov	r1, r4
 80058be:	4628      	mov	r0, r5
 80058c0:	f000 f9e6 	bl	8005c90 <_printf_common>
 80058c4:	3001      	adds	r0, #1
 80058c6:	f040 808d 	bne.w	80059e4 <_printf_float+0x1d4>
 80058ca:	f04f 30ff 	mov.w	r0, #4294967295
 80058ce:	b00d      	add	sp, #52	; 0x34
 80058d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d4:	4642      	mov	r2, r8
 80058d6:	464b      	mov	r3, r9
 80058d8:	4640      	mov	r0, r8
 80058da:	4649      	mov	r1, r9
 80058dc:	f7fb f92e 	bl	8000b3c <__aeabi_dcmpun>
 80058e0:	b110      	cbz	r0, 80058e8 <_printf_float+0xd8>
 80058e2:	4a8c      	ldr	r2, [pc, #560]	; (8005b14 <_printf_float+0x304>)
 80058e4:	4b8c      	ldr	r3, [pc, #560]	; (8005b18 <_printf_float+0x308>)
 80058e6:	e7da      	b.n	800589e <_printf_float+0x8e>
 80058e8:	6861      	ldr	r1, [r4, #4]
 80058ea:	1c4b      	adds	r3, r1, #1
 80058ec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80058f0:	a80a      	add	r0, sp, #40	; 0x28
 80058f2:	d13e      	bne.n	8005972 <_printf_float+0x162>
 80058f4:	2306      	movs	r3, #6
 80058f6:	6063      	str	r3, [r4, #4]
 80058f8:	2300      	movs	r3, #0
 80058fa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80058fe:	ab09      	add	r3, sp, #36	; 0x24
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	ec49 8b10 	vmov	d0, r8, r9
 8005906:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800590a:	6022      	str	r2, [r4, #0]
 800590c:	f8cd a004 	str.w	sl, [sp, #4]
 8005910:	6861      	ldr	r1, [r4, #4]
 8005912:	4628      	mov	r0, r5
 8005914:	f7ff fee8 	bl	80056e8 <__cvt>
 8005918:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800591c:	2b47      	cmp	r3, #71	; 0x47
 800591e:	4680      	mov	r8, r0
 8005920:	d109      	bne.n	8005936 <_printf_float+0x126>
 8005922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005924:	1cd8      	adds	r0, r3, #3
 8005926:	db02      	blt.n	800592e <_printf_float+0x11e>
 8005928:	6862      	ldr	r2, [r4, #4]
 800592a:	4293      	cmp	r3, r2
 800592c:	dd47      	ble.n	80059be <_printf_float+0x1ae>
 800592e:	f1aa 0a02 	sub.w	sl, sl, #2
 8005932:	fa5f fa8a 	uxtb.w	sl, sl
 8005936:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800593a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800593c:	d824      	bhi.n	8005988 <_printf_float+0x178>
 800593e:	3901      	subs	r1, #1
 8005940:	4652      	mov	r2, sl
 8005942:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005946:	9109      	str	r1, [sp, #36]	; 0x24
 8005948:	f7ff ff2f 	bl	80057aa <__exponent>
 800594c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800594e:	1813      	adds	r3, r2, r0
 8005950:	2a01      	cmp	r2, #1
 8005952:	4681      	mov	r9, r0
 8005954:	6123      	str	r3, [r4, #16]
 8005956:	dc02      	bgt.n	800595e <_printf_float+0x14e>
 8005958:	6822      	ldr	r2, [r4, #0]
 800595a:	07d1      	lsls	r1, r2, #31
 800595c:	d501      	bpl.n	8005962 <_printf_float+0x152>
 800595e:	3301      	adds	r3, #1
 8005960:	6123      	str	r3, [r4, #16]
 8005962:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005966:	2b00      	cmp	r3, #0
 8005968:	d0a5      	beq.n	80058b6 <_printf_float+0xa6>
 800596a:	232d      	movs	r3, #45	; 0x2d
 800596c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005970:	e7a1      	b.n	80058b6 <_printf_float+0xa6>
 8005972:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005976:	f000 8177 	beq.w	8005c68 <_printf_float+0x458>
 800597a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800597e:	d1bb      	bne.n	80058f8 <_printf_float+0xe8>
 8005980:	2900      	cmp	r1, #0
 8005982:	d1b9      	bne.n	80058f8 <_printf_float+0xe8>
 8005984:	2301      	movs	r3, #1
 8005986:	e7b6      	b.n	80058f6 <_printf_float+0xe6>
 8005988:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800598c:	d119      	bne.n	80059c2 <_printf_float+0x1b2>
 800598e:	2900      	cmp	r1, #0
 8005990:	6863      	ldr	r3, [r4, #4]
 8005992:	dd0c      	ble.n	80059ae <_printf_float+0x19e>
 8005994:	6121      	str	r1, [r4, #16]
 8005996:	b913      	cbnz	r3, 800599e <_printf_float+0x18e>
 8005998:	6822      	ldr	r2, [r4, #0]
 800599a:	07d2      	lsls	r2, r2, #31
 800599c:	d502      	bpl.n	80059a4 <_printf_float+0x194>
 800599e:	3301      	adds	r3, #1
 80059a0:	440b      	add	r3, r1
 80059a2:	6123      	str	r3, [r4, #16]
 80059a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a6:	65a3      	str	r3, [r4, #88]	; 0x58
 80059a8:	f04f 0900 	mov.w	r9, #0
 80059ac:	e7d9      	b.n	8005962 <_printf_float+0x152>
 80059ae:	b913      	cbnz	r3, 80059b6 <_printf_float+0x1a6>
 80059b0:	6822      	ldr	r2, [r4, #0]
 80059b2:	07d0      	lsls	r0, r2, #31
 80059b4:	d501      	bpl.n	80059ba <_printf_float+0x1aa>
 80059b6:	3302      	adds	r3, #2
 80059b8:	e7f3      	b.n	80059a2 <_printf_float+0x192>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e7f1      	b.n	80059a2 <_printf_float+0x192>
 80059be:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80059c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80059c6:	4293      	cmp	r3, r2
 80059c8:	db05      	blt.n	80059d6 <_printf_float+0x1c6>
 80059ca:	6822      	ldr	r2, [r4, #0]
 80059cc:	6123      	str	r3, [r4, #16]
 80059ce:	07d1      	lsls	r1, r2, #31
 80059d0:	d5e8      	bpl.n	80059a4 <_printf_float+0x194>
 80059d2:	3301      	adds	r3, #1
 80059d4:	e7e5      	b.n	80059a2 <_printf_float+0x192>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	bfd4      	ite	le
 80059da:	f1c3 0302 	rsble	r3, r3, #2
 80059de:	2301      	movgt	r3, #1
 80059e0:	4413      	add	r3, r2
 80059e2:	e7de      	b.n	80059a2 <_printf_float+0x192>
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	055a      	lsls	r2, r3, #21
 80059e8:	d407      	bmi.n	80059fa <_printf_float+0x1ea>
 80059ea:	6923      	ldr	r3, [r4, #16]
 80059ec:	4642      	mov	r2, r8
 80059ee:	4631      	mov	r1, r6
 80059f0:	4628      	mov	r0, r5
 80059f2:	47b8      	blx	r7
 80059f4:	3001      	adds	r0, #1
 80059f6:	d12b      	bne.n	8005a50 <_printf_float+0x240>
 80059f8:	e767      	b.n	80058ca <_printf_float+0xba>
 80059fa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80059fe:	f240 80dc 	bls.w	8005bba <_printf_float+0x3aa>
 8005a02:	2200      	movs	r2, #0
 8005a04:	2300      	movs	r3, #0
 8005a06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a0a:	f7fb f865 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	d033      	beq.n	8005a7a <_printf_float+0x26a>
 8005a12:	2301      	movs	r3, #1
 8005a14:	4a41      	ldr	r2, [pc, #260]	; (8005b1c <_printf_float+0x30c>)
 8005a16:	4631      	mov	r1, r6
 8005a18:	4628      	mov	r0, r5
 8005a1a:	47b8      	blx	r7
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	f43f af54 	beq.w	80058ca <_printf_float+0xba>
 8005a22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a26:	429a      	cmp	r2, r3
 8005a28:	db02      	blt.n	8005a30 <_printf_float+0x220>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	07d8      	lsls	r0, r3, #31
 8005a2e:	d50f      	bpl.n	8005a50 <_printf_float+0x240>
 8005a30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a34:	4631      	mov	r1, r6
 8005a36:	4628      	mov	r0, r5
 8005a38:	47b8      	blx	r7
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	f43f af45 	beq.w	80058ca <_printf_float+0xba>
 8005a40:	f04f 0800 	mov.w	r8, #0
 8005a44:	f104 091a 	add.w	r9, r4, #26
 8005a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	4543      	cmp	r3, r8
 8005a4e:	dc09      	bgt.n	8005a64 <_printf_float+0x254>
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	079b      	lsls	r3, r3, #30
 8005a54:	f100 8103 	bmi.w	8005c5e <_printf_float+0x44e>
 8005a58:	68e0      	ldr	r0, [r4, #12]
 8005a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a5c:	4298      	cmp	r0, r3
 8005a5e:	bfb8      	it	lt
 8005a60:	4618      	movlt	r0, r3
 8005a62:	e734      	b.n	80058ce <_printf_float+0xbe>
 8005a64:	2301      	movs	r3, #1
 8005a66:	464a      	mov	r2, r9
 8005a68:	4631      	mov	r1, r6
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	47b8      	blx	r7
 8005a6e:	3001      	adds	r0, #1
 8005a70:	f43f af2b 	beq.w	80058ca <_printf_float+0xba>
 8005a74:	f108 0801 	add.w	r8, r8, #1
 8005a78:	e7e6      	b.n	8005a48 <_printf_float+0x238>
 8005a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	dc2b      	bgt.n	8005ad8 <_printf_float+0x2c8>
 8005a80:	2301      	movs	r3, #1
 8005a82:	4a26      	ldr	r2, [pc, #152]	; (8005b1c <_printf_float+0x30c>)
 8005a84:	4631      	mov	r1, r6
 8005a86:	4628      	mov	r0, r5
 8005a88:	47b8      	blx	r7
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	f43f af1d 	beq.w	80058ca <_printf_float+0xba>
 8005a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a92:	b923      	cbnz	r3, 8005a9e <_printf_float+0x28e>
 8005a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a96:	b913      	cbnz	r3, 8005a9e <_printf_float+0x28e>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	07d9      	lsls	r1, r3, #31
 8005a9c:	d5d8      	bpl.n	8005a50 <_printf_float+0x240>
 8005a9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	47b8      	blx	r7
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	f43f af0e 	beq.w	80058ca <_printf_float+0xba>
 8005aae:	f04f 0900 	mov.w	r9, #0
 8005ab2:	f104 0a1a 	add.w	sl, r4, #26
 8005ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab8:	425b      	negs	r3, r3
 8005aba:	454b      	cmp	r3, r9
 8005abc:	dc01      	bgt.n	8005ac2 <_printf_float+0x2b2>
 8005abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac0:	e794      	b.n	80059ec <_printf_float+0x1dc>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4652      	mov	r2, sl
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	4628      	mov	r0, r5
 8005aca:	47b8      	blx	r7
 8005acc:	3001      	adds	r0, #1
 8005ace:	f43f aefc 	beq.w	80058ca <_printf_float+0xba>
 8005ad2:	f109 0901 	add.w	r9, r9, #1
 8005ad6:	e7ee      	b.n	8005ab6 <_printf_float+0x2a6>
 8005ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ada:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005adc:	429a      	cmp	r2, r3
 8005ade:	bfa8      	it	ge
 8005ae0:	461a      	movge	r2, r3
 8005ae2:	2a00      	cmp	r2, #0
 8005ae4:	4691      	mov	r9, r2
 8005ae6:	dd07      	ble.n	8005af8 <_printf_float+0x2e8>
 8005ae8:	4613      	mov	r3, r2
 8005aea:	4631      	mov	r1, r6
 8005aec:	4642      	mov	r2, r8
 8005aee:	4628      	mov	r0, r5
 8005af0:	47b8      	blx	r7
 8005af2:	3001      	adds	r0, #1
 8005af4:	f43f aee9 	beq.w	80058ca <_printf_float+0xba>
 8005af8:	f104 031a 	add.w	r3, r4, #26
 8005afc:	f04f 0b00 	mov.w	fp, #0
 8005b00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b04:	9306      	str	r3, [sp, #24]
 8005b06:	e015      	b.n	8005b34 <_printf_float+0x324>
 8005b08:	7fefffff 	.word	0x7fefffff
 8005b0c:	0800786c 	.word	0x0800786c
 8005b10:	08007868 	.word	0x08007868
 8005b14:	08007874 	.word	0x08007874
 8005b18:	08007870 	.word	0x08007870
 8005b1c:	08007878 	.word	0x08007878
 8005b20:	2301      	movs	r3, #1
 8005b22:	9a06      	ldr	r2, [sp, #24]
 8005b24:	4631      	mov	r1, r6
 8005b26:	4628      	mov	r0, r5
 8005b28:	47b8      	blx	r7
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	f43f aecd 	beq.w	80058ca <_printf_float+0xba>
 8005b30:	f10b 0b01 	add.w	fp, fp, #1
 8005b34:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005b38:	ebaa 0309 	sub.w	r3, sl, r9
 8005b3c:	455b      	cmp	r3, fp
 8005b3e:	dcef      	bgt.n	8005b20 <_printf_float+0x310>
 8005b40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b44:	429a      	cmp	r2, r3
 8005b46:	44d0      	add	r8, sl
 8005b48:	db15      	blt.n	8005b76 <_printf_float+0x366>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	07da      	lsls	r2, r3, #31
 8005b4e:	d412      	bmi.n	8005b76 <_printf_float+0x366>
 8005b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b54:	eba3 020a 	sub.w	r2, r3, sl
 8005b58:	eba3 0a01 	sub.w	sl, r3, r1
 8005b5c:	4592      	cmp	sl, r2
 8005b5e:	bfa8      	it	ge
 8005b60:	4692      	movge	sl, r2
 8005b62:	f1ba 0f00 	cmp.w	sl, #0
 8005b66:	dc0e      	bgt.n	8005b86 <_printf_float+0x376>
 8005b68:	f04f 0800 	mov.w	r8, #0
 8005b6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b70:	f104 091a 	add.w	r9, r4, #26
 8005b74:	e019      	b.n	8005baa <_printf_float+0x39a>
 8005b76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	47b8      	blx	r7
 8005b80:	3001      	adds	r0, #1
 8005b82:	d1e5      	bne.n	8005b50 <_printf_float+0x340>
 8005b84:	e6a1      	b.n	80058ca <_printf_float+0xba>
 8005b86:	4653      	mov	r3, sl
 8005b88:	4642      	mov	r2, r8
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	47b8      	blx	r7
 8005b90:	3001      	adds	r0, #1
 8005b92:	d1e9      	bne.n	8005b68 <_printf_float+0x358>
 8005b94:	e699      	b.n	80058ca <_printf_float+0xba>
 8005b96:	2301      	movs	r3, #1
 8005b98:	464a      	mov	r2, r9
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	47b8      	blx	r7
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	f43f ae92 	beq.w	80058ca <_printf_float+0xba>
 8005ba6:	f108 0801 	add.w	r8, r8, #1
 8005baa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bae:	1a9b      	subs	r3, r3, r2
 8005bb0:	eba3 030a 	sub.w	r3, r3, sl
 8005bb4:	4543      	cmp	r3, r8
 8005bb6:	dcee      	bgt.n	8005b96 <_printf_float+0x386>
 8005bb8:	e74a      	b.n	8005a50 <_printf_float+0x240>
 8005bba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bbc:	2a01      	cmp	r2, #1
 8005bbe:	dc01      	bgt.n	8005bc4 <_printf_float+0x3b4>
 8005bc0:	07db      	lsls	r3, r3, #31
 8005bc2:	d53a      	bpl.n	8005c3a <_printf_float+0x42a>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	4631      	mov	r1, r6
 8005bca:	4628      	mov	r0, r5
 8005bcc:	47b8      	blx	r7
 8005bce:	3001      	adds	r0, #1
 8005bd0:	f43f ae7b 	beq.w	80058ca <_printf_float+0xba>
 8005bd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4628      	mov	r0, r5
 8005bdc:	47b8      	blx	r7
 8005bde:	3001      	adds	r0, #1
 8005be0:	f108 0801 	add.w	r8, r8, #1
 8005be4:	f43f ae71 	beq.w	80058ca <_printf_float+0xba>
 8005be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bea:	2200      	movs	r2, #0
 8005bec:	f103 3aff 	add.w	sl, r3, #4294967295
 8005bf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f7fa ff6f 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bfa:	b9c8      	cbnz	r0, 8005c30 <_printf_float+0x420>
 8005bfc:	4653      	mov	r3, sl
 8005bfe:	4642      	mov	r2, r8
 8005c00:	4631      	mov	r1, r6
 8005c02:	4628      	mov	r0, r5
 8005c04:	47b8      	blx	r7
 8005c06:	3001      	adds	r0, #1
 8005c08:	d10e      	bne.n	8005c28 <_printf_float+0x418>
 8005c0a:	e65e      	b.n	80058ca <_printf_float+0xba>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	4652      	mov	r2, sl
 8005c10:	4631      	mov	r1, r6
 8005c12:	4628      	mov	r0, r5
 8005c14:	47b8      	blx	r7
 8005c16:	3001      	adds	r0, #1
 8005c18:	f43f ae57 	beq.w	80058ca <_printf_float+0xba>
 8005c1c:	f108 0801 	add.w	r8, r8, #1
 8005c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c22:	3b01      	subs	r3, #1
 8005c24:	4543      	cmp	r3, r8
 8005c26:	dcf1      	bgt.n	8005c0c <_printf_float+0x3fc>
 8005c28:	464b      	mov	r3, r9
 8005c2a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c2e:	e6de      	b.n	80059ee <_printf_float+0x1de>
 8005c30:	f04f 0800 	mov.w	r8, #0
 8005c34:	f104 0a1a 	add.w	sl, r4, #26
 8005c38:	e7f2      	b.n	8005c20 <_printf_float+0x410>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e7df      	b.n	8005bfe <_printf_float+0x3ee>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	464a      	mov	r2, r9
 8005c42:	4631      	mov	r1, r6
 8005c44:	4628      	mov	r0, r5
 8005c46:	47b8      	blx	r7
 8005c48:	3001      	adds	r0, #1
 8005c4a:	f43f ae3e 	beq.w	80058ca <_printf_float+0xba>
 8005c4e:	f108 0801 	add.w	r8, r8, #1
 8005c52:	68e3      	ldr	r3, [r4, #12]
 8005c54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c56:	1a9b      	subs	r3, r3, r2
 8005c58:	4543      	cmp	r3, r8
 8005c5a:	dcf0      	bgt.n	8005c3e <_printf_float+0x42e>
 8005c5c:	e6fc      	b.n	8005a58 <_printf_float+0x248>
 8005c5e:	f04f 0800 	mov.w	r8, #0
 8005c62:	f104 0919 	add.w	r9, r4, #25
 8005c66:	e7f4      	b.n	8005c52 <_printf_float+0x442>
 8005c68:	2900      	cmp	r1, #0
 8005c6a:	f43f ae8b 	beq.w	8005984 <_printf_float+0x174>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005c74:	ab09      	add	r3, sp, #36	; 0x24
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	ec49 8b10 	vmov	d0, r8, r9
 8005c7c:	6022      	str	r2, [r4, #0]
 8005c7e:	f8cd a004 	str.w	sl, [sp, #4]
 8005c82:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c86:	4628      	mov	r0, r5
 8005c88:	f7ff fd2e 	bl	80056e8 <__cvt>
 8005c8c:	4680      	mov	r8, r0
 8005c8e:	e648      	b.n	8005922 <_printf_float+0x112>

08005c90 <_printf_common>:
 8005c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c94:	4691      	mov	r9, r2
 8005c96:	461f      	mov	r7, r3
 8005c98:	688a      	ldr	r2, [r1, #8]
 8005c9a:	690b      	ldr	r3, [r1, #16]
 8005c9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	bfb8      	it	lt
 8005ca4:	4613      	movlt	r3, r2
 8005ca6:	f8c9 3000 	str.w	r3, [r9]
 8005caa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cae:	4606      	mov	r6, r0
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	b112      	cbz	r2, 8005cba <_printf_common+0x2a>
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	f8c9 3000 	str.w	r3, [r9]
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	0699      	lsls	r1, r3, #26
 8005cbe:	bf42      	ittt	mi
 8005cc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005cc4:	3302      	addmi	r3, #2
 8005cc6:	f8c9 3000 	strmi.w	r3, [r9]
 8005cca:	6825      	ldr	r5, [r4, #0]
 8005ccc:	f015 0506 	ands.w	r5, r5, #6
 8005cd0:	d107      	bne.n	8005ce2 <_printf_common+0x52>
 8005cd2:	f104 0a19 	add.w	sl, r4, #25
 8005cd6:	68e3      	ldr	r3, [r4, #12]
 8005cd8:	f8d9 2000 	ldr.w	r2, [r9]
 8005cdc:	1a9b      	subs	r3, r3, r2
 8005cde:	42ab      	cmp	r3, r5
 8005ce0:	dc28      	bgt.n	8005d34 <_printf_common+0xa4>
 8005ce2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ce6:	6822      	ldr	r2, [r4, #0]
 8005ce8:	3300      	adds	r3, #0
 8005cea:	bf18      	it	ne
 8005cec:	2301      	movne	r3, #1
 8005cee:	0692      	lsls	r2, r2, #26
 8005cf0:	d42d      	bmi.n	8005d4e <_printf_common+0xbe>
 8005cf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cf6:	4639      	mov	r1, r7
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	47c0      	blx	r8
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d020      	beq.n	8005d42 <_printf_common+0xb2>
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	68e5      	ldr	r5, [r4, #12]
 8005d04:	f8d9 2000 	ldr.w	r2, [r9]
 8005d08:	f003 0306 	and.w	r3, r3, #6
 8005d0c:	2b04      	cmp	r3, #4
 8005d0e:	bf08      	it	eq
 8005d10:	1aad      	subeq	r5, r5, r2
 8005d12:	68a3      	ldr	r3, [r4, #8]
 8005d14:	6922      	ldr	r2, [r4, #16]
 8005d16:	bf0c      	ite	eq
 8005d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d1c:	2500      	movne	r5, #0
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	bfc4      	itt	gt
 8005d22:	1a9b      	subgt	r3, r3, r2
 8005d24:	18ed      	addgt	r5, r5, r3
 8005d26:	f04f 0900 	mov.w	r9, #0
 8005d2a:	341a      	adds	r4, #26
 8005d2c:	454d      	cmp	r5, r9
 8005d2e:	d11a      	bne.n	8005d66 <_printf_common+0xd6>
 8005d30:	2000      	movs	r0, #0
 8005d32:	e008      	b.n	8005d46 <_printf_common+0xb6>
 8005d34:	2301      	movs	r3, #1
 8005d36:	4652      	mov	r2, sl
 8005d38:	4639      	mov	r1, r7
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	47c0      	blx	r8
 8005d3e:	3001      	adds	r0, #1
 8005d40:	d103      	bne.n	8005d4a <_printf_common+0xba>
 8005d42:	f04f 30ff 	mov.w	r0, #4294967295
 8005d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d4a:	3501      	adds	r5, #1
 8005d4c:	e7c3      	b.n	8005cd6 <_printf_common+0x46>
 8005d4e:	18e1      	adds	r1, r4, r3
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	2030      	movs	r0, #48	; 0x30
 8005d54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d58:	4422      	add	r2, r4
 8005d5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d62:	3302      	adds	r3, #2
 8005d64:	e7c5      	b.n	8005cf2 <_printf_common+0x62>
 8005d66:	2301      	movs	r3, #1
 8005d68:	4622      	mov	r2, r4
 8005d6a:	4639      	mov	r1, r7
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	47c0      	blx	r8
 8005d70:	3001      	adds	r0, #1
 8005d72:	d0e6      	beq.n	8005d42 <_printf_common+0xb2>
 8005d74:	f109 0901 	add.w	r9, r9, #1
 8005d78:	e7d8      	b.n	8005d2c <_printf_common+0x9c>
	...

08005d7c <_printf_i>:
 8005d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005d84:	460c      	mov	r4, r1
 8005d86:	7e09      	ldrb	r1, [r1, #24]
 8005d88:	b085      	sub	sp, #20
 8005d8a:	296e      	cmp	r1, #110	; 0x6e
 8005d8c:	4617      	mov	r7, r2
 8005d8e:	4606      	mov	r6, r0
 8005d90:	4698      	mov	r8, r3
 8005d92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d94:	f000 80b3 	beq.w	8005efe <_printf_i+0x182>
 8005d98:	d822      	bhi.n	8005de0 <_printf_i+0x64>
 8005d9a:	2963      	cmp	r1, #99	; 0x63
 8005d9c:	d036      	beq.n	8005e0c <_printf_i+0x90>
 8005d9e:	d80a      	bhi.n	8005db6 <_printf_i+0x3a>
 8005da0:	2900      	cmp	r1, #0
 8005da2:	f000 80b9 	beq.w	8005f18 <_printf_i+0x19c>
 8005da6:	2958      	cmp	r1, #88	; 0x58
 8005da8:	f000 8083 	beq.w	8005eb2 <_printf_i+0x136>
 8005dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005db0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005db4:	e032      	b.n	8005e1c <_printf_i+0xa0>
 8005db6:	2964      	cmp	r1, #100	; 0x64
 8005db8:	d001      	beq.n	8005dbe <_printf_i+0x42>
 8005dba:	2969      	cmp	r1, #105	; 0x69
 8005dbc:	d1f6      	bne.n	8005dac <_printf_i+0x30>
 8005dbe:	6820      	ldr	r0, [r4, #0]
 8005dc0:	6813      	ldr	r3, [r2, #0]
 8005dc2:	0605      	lsls	r5, r0, #24
 8005dc4:	f103 0104 	add.w	r1, r3, #4
 8005dc8:	d52a      	bpl.n	8005e20 <_printf_i+0xa4>
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6011      	str	r1, [r2, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	da03      	bge.n	8005dda <_printf_i+0x5e>
 8005dd2:	222d      	movs	r2, #45	; 0x2d
 8005dd4:	425b      	negs	r3, r3
 8005dd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005dda:	486f      	ldr	r0, [pc, #444]	; (8005f98 <_printf_i+0x21c>)
 8005ddc:	220a      	movs	r2, #10
 8005dde:	e039      	b.n	8005e54 <_printf_i+0xd8>
 8005de0:	2973      	cmp	r1, #115	; 0x73
 8005de2:	f000 809d 	beq.w	8005f20 <_printf_i+0x1a4>
 8005de6:	d808      	bhi.n	8005dfa <_printf_i+0x7e>
 8005de8:	296f      	cmp	r1, #111	; 0x6f
 8005dea:	d020      	beq.n	8005e2e <_printf_i+0xb2>
 8005dec:	2970      	cmp	r1, #112	; 0x70
 8005dee:	d1dd      	bne.n	8005dac <_printf_i+0x30>
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	f043 0320 	orr.w	r3, r3, #32
 8005df6:	6023      	str	r3, [r4, #0]
 8005df8:	e003      	b.n	8005e02 <_printf_i+0x86>
 8005dfa:	2975      	cmp	r1, #117	; 0x75
 8005dfc:	d017      	beq.n	8005e2e <_printf_i+0xb2>
 8005dfe:	2978      	cmp	r1, #120	; 0x78
 8005e00:	d1d4      	bne.n	8005dac <_printf_i+0x30>
 8005e02:	2378      	movs	r3, #120	; 0x78
 8005e04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e08:	4864      	ldr	r0, [pc, #400]	; (8005f9c <_printf_i+0x220>)
 8005e0a:	e055      	b.n	8005eb8 <_printf_i+0x13c>
 8005e0c:	6813      	ldr	r3, [r2, #0]
 8005e0e:	1d19      	adds	r1, r3, #4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6011      	str	r1, [r2, #0]
 8005e14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e08c      	b.n	8005f3a <_printf_i+0x1be>
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6011      	str	r1, [r2, #0]
 8005e24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e28:	bf18      	it	ne
 8005e2a:	b21b      	sxthne	r3, r3
 8005e2c:	e7cf      	b.n	8005dce <_printf_i+0x52>
 8005e2e:	6813      	ldr	r3, [r2, #0]
 8005e30:	6825      	ldr	r5, [r4, #0]
 8005e32:	1d18      	adds	r0, r3, #4
 8005e34:	6010      	str	r0, [r2, #0]
 8005e36:	0628      	lsls	r0, r5, #24
 8005e38:	d501      	bpl.n	8005e3e <_printf_i+0xc2>
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	e002      	b.n	8005e44 <_printf_i+0xc8>
 8005e3e:	0668      	lsls	r0, r5, #25
 8005e40:	d5fb      	bpl.n	8005e3a <_printf_i+0xbe>
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	4854      	ldr	r0, [pc, #336]	; (8005f98 <_printf_i+0x21c>)
 8005e46:	296f      	cmp	r1, #111	; 0x6f
 8005e48:	bf14      	ite	ne
 8005e4a:	220a      	movne	r2, #10
 8005e4c:	2208      	moveq	r2, #8
 8005e4e:	2100      	movs	r1, #0
 8005e50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e54:	6865      	ldr	r5, [r4, #4]
 8005e56:	60a5      	str	r5, [r4, #8]
 8005e58:	2d00      	cmp	r5, #0
 8005e5a:	f2c0 8095 	blt.w	8005f88 <_printf_i+0x20c>
 8005e5e:	6821      	ldr	r1, [r4, #0]
 8005e60:	f021 0104 	bic.w	r1, r1, #4
 8005e64:	6021      	str	r1, [r4, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d13d      	bne.n	8005ee6 <_printf_i+0x16a>
 8005e6a:	2d00      	cmp	r5, #0
 8005e6c:	f040 808e 	bne.w	8005f8c <_printf_i+0x210>
 8005e70:	4665      	mov	r5, ip
 8005e72:	2a08      	cmp	r2, #8
 8005e74:	d10b      	bne.n	8005e8e <_printf_i+0x112>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	07db      	lsls	r3, r3, #31
 8005e7a:	d508      	bpl.n	8005e8e <_printf_i+0x112>
 8005e7c:	6923      	ldr	r3, [r4, #16]
 8005e7e:	6862      	ldr	r2, [r4, #4]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	bfde      	ittt	le
 8005e84:	2330      	movle	r3, #48	; 0x30
 8005e86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e8e:	ebac 0305 	sub.w	r3, ip, r5
 8005e92:	6123      	str	r3, [r4, #16]
 8005e94:	f8cd 8000 	str.w	r8, [sp]
 8005e98:	463b      	mov	r3, r7
 8005e9a:	aa03      	add	r2, sp, #12
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	f7ff fef6 	bl	8005c90 <_printf_common>
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d14d      	bne.n	8005f44 <_printf_i+0x1c8>
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	b005      	add	sp, #20
 8005eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005eb2:	4839      	ldr	r0, [pc, #228]	; (8005f98 <_printf_i+0x21c>)
 8005eb4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005eb8:	6813      	ldr	r3, [r2, #0]
 8005eba:	6821      	ldr	r1, [r4, #0]
 8005ebc:	1d1d      	adds	r5, r3, #4
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6015      	str	r5, [r2, #0]
 8005ec2:	060a      	lsls	r2, r1, #24
 8005ec4:	d50b      	bpl.n	8005ede <_printf_i+0x162>
 8005ec6:	07ca      	lsls	r2, r1, #31
 8005ec8:	bf44      	itt	mi
 8005eca:	f041 0120 	orrmi.w	r1, r1, #32
 8005ece:	6021      	strmi	r1, [r4, #0]
 8005ed0:	b91b      	cbnz	r3, 8005eda <_printf_i+0x15e>
 8005ed2:	6822      	ldr	r2, [r4, #0]
 8005ed4:	f022 0220 	bic.w	r2, r2, #32
 8005ed8:	6022      	str	r2, [r4, #0]
 8005eda:	2210      	movs	r2, #16
 8005edc:	e7b7      	b.n	8005e4e <_printf_i+0xd2>
 8005ede:	064d      	lsls	r5, r1, #25
 8005ee0:	bf48      	it	mi
 8005ee2:	b29b      	uxthmi	r3, r3
 8005ee4:	e7ef      	b.n	8005ec6 <_printf_i+0x14a>
 8005ee6:	4665      	mov	r5, ip
 8005ee8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005eec:	fb02 3311 	mls	r3, r2, r1, r3
 8005ef0:	5cc3      	ldrb	r3, [r0, r3]
 8005ef2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	2900      	cmp	r1, #0
 8005efa:	d1f5      	bne.n	8005ee8 <_printf_i+0x16c>
 8005efc:	e7b9      	b.n	8005e72 <_printf_i+0xf6>
 8005efe:	6813      	ldr	r3, [r2, #0]
 8005f00:	6825      	ldr	r5, [r4, #0]
 8005f02:	6961      	ldr	r1, [r4, #20]
 8005f04:	1d18      	adds	r0, r3, #4
 8005f06:	6010      	str	r0, [r2, #0]
 8005f08:	0628      	lsls	r0, r5, #24
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	d501      	bpl.n	8005f12 <_printf_i+0x196>
 8005f0e:	6019      	str	r1, [r3, #0]
 8005f10:	e002      	b.n	8005f18 <_printf_i+0x19c>
 8005f12:	066a      	lsls	r2, r5, #25
 8005f14:	d5fb      	bpl.n	8005f0e <_printf_i+0x192>
 8005f16:	8019      	strh	r1, [r3, #0]
 8005f18:	2300      	movs	r3, #0
 8005f1a:	6123      	str	r3, [r4, #16]
 8005f1c:	4665      	mov	r5, ip
 8005f1e:	e7b9      	b.n	8005e94 <_printf_i+0x118>
 8005f20:	6813      	ldr	r3, [r2, #0]
 8005f22:	1d19      	adds	r1, r3, #4
 8005f24:	6011      	str	r1, [r2, #0]
 8005f26:	681d      	ldr	r5, [r3, #0]
 8005f28:	6862      	ldr	r2, [r4, #4]
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	f7fa f95f 	bl	80001f0 <memchr>
 8005f32:	b108      	cbz	r0, 8005f38 <_printf_i+0x1bc>
 8005f34:	1b40      	subs	r0, r0, r5
 8005f36:	6060      	str	r0, [r4, #4]
 8005f38:	6863      	ldr	r3, [r4, #4]
 8005f3a:	6123      	str	r3, [r4, #16]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f42:	e7a7      	b.n	8005e94 <_printf_i+0x118>
 8005f44:	6923      	ldr	r3, [r4, #16]
 8005f46:	462a      	mov	r2, r5
 8005f48:	4639      	mov	r1, r7
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	47c0      	blx	r8
 8005f4e:	3001      	adds	r0, #1
 8005f50:	d0aa      	beq.n	8005ea8 <_printf_i+0x12c>
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	079b      	lsls	r3, r3, #30
 8005f56:	d413      	bmi.n	8005f80 <_printf_i+0x204>
 8005f58:	68e0      	ldr	r0, [r4, #12]
 8005f5a:	9b03      	ldr	r3, [sp, #12]
 8005f5c:	4298      	cmp	r0, r3
 8005f5e:	bfb8      	it	lt
 8005f60:	4618      	movlt	r0, r3
 8005f62:	e7a3      	b.n	8005eac <_printf_i+0x130>
 8005f64:	2301      	movs	r3, #1
 8005f66:	464a      	mov	r2, r9
 8005f68:	4639      	mov	r1, r7
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	47c0      	blx	r8
 8005f6e:	3001      	adds	r0, #1
 8005f70:	d09a      	beq.n	8005ea8 <_printf_i+0x12c>
 8005f72:	3501      	adds	r5, #1
 8005f74:	68e3      	ldr	r3, [r4, #12]
 8005f76:	9a03      	ldr	r2, [sp, #12]
 8005f78:	1a9b      	subs	r3, r3, r2
 8005f7a:	42ab      	cmp	r3, r5
 8005f7c:	dcf2      	bgt.n	8005f64 <_printf_i+0x1e8>
 8005f7e:	e7eb      	b.n	8005f58 <_printf_i+0x1dc>
 8005f80:	2500      	movs	r5, #0
 8005f82:	f104 0919 	add.w	r9, r4, #25
 8005f86:	e7f5      	b.n	8005f74 <_printf_i+0x1f8>
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1ac      	bne.n	8005ee6 <_printf_i+0x16a>
 8005f8c:	7803      	ldrb	r3, [r0, #0]
 8005f8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f96:	e76c      	b.n	8005e72 <_printf_i+0xf6>
 8005f98:	0800787a 	.word	0x0800787a
 8005f9c:	0800788b 	.word	0x0800788b

08005fa0 <siprintf>:
 8005fa0:	b40e      	push	{r1, r2, r3}
 8005fa2:	b500      	push	{lr}
 8005fa4:	b09c      	sub	sp, #112	; 0x70
 8005fa6:	ab1d      	add	r3, sp, #116	; 0x74
 8005fa8:	9002      	str	r0, [sp, #8]
 8005faa:	9006      	str	r0, [sp, #24]
 8005fac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fb0:	4809      	ldr	r0, [pc, #36]	; (8005fd8 <siprintf+0x38>)
 8005fb2:	9107      	str	r1, [sp, #28]
 8005fb4:	9104      	str	r1, [sp, #16]
 8005fb6:	4909      	ldr	r1, [pc, #36]	; (8005fdc <siprintf+0x3c>)
 8005fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fbc:	9105      	str	r1, [sp, #20]
 8005fbe:	6800      	ldr	r0, [r0, #0]
 8005fc0:	9301      	str	r3, [sp, #4]
 8005fc2:	a902      	add	r1, sp, #8
 8005fc4:	f001 fa5c 	bl	8007480 <_svfiprintf_r>
 8005fc8:	9b02      	ldr	r3, [sp, #8]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	701a      	strb	r2, [r3, #0]
 8005fce:	b01c      	add	sp, #112	; 0x70
 8005fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fd4:	b003      	add	sp, #12
 8005fd6:	4770      	bx	lr
 8005fd8:	20000024 	.word	0x20000024
 8005fdc:	ffff0208 	.word	0xffff0208

08005fe0 <quorem>:
 8005fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	6903      	ldr	r3, [r0, #16]
 8005fe6:	690c      	ldr	r4, [r1, #16]
 8005fe8:	42a3      	cmp	r3, r4
 8005fea:	4680      	mov	r8, r0
 8005fec:	f2c0 8082 	blt.w	80060f4 <quorem+0x114>
 8005ff0:	3c01      	subs	r4, #1
 8005ff2:	f101 0714 	add.w	r7, r1, #20
 8005ff6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005ffa:	f100 0614 	add.w	r6, r0, #20
 8005ffe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006002:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006006:	eb06 030c 	add.w	r3, r6, ip
 800600a:	3501      	adds	r5, #1
 800600c:	eb07 090c 	add.w	r9, r7, ip
 8006010:	9301      	str	r3, [sp, #4]
 8006012:	fbb0 f5f5 	udiv	r5, r0, r5
 8006016:	b395      	cbz	r5, 800607e <quorem+0x9e>
 8006018:	f04f 0a00 	mov.w	sl, #0
 800601c:	4638      	mov	r0, r7
 800601e:	46b6      	mov	lr, r6
 8006020:	46d3      	mov	fp, sl
 8006022:	f850 2b04 	ldr.w	r2, [r0], #4
 8006026:	b293      	uxth	r3, r2
 8006028:	fb05 a303 	mla	r3, r5, r3, sl
 800602c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006030:	b29b      	uxth	r3, r3
 8006032:	ebab 0303 	sub.w	r3, fp, r3
 8006036:	0c12      	lsrs	r2, r2, #16
 8006038:	f8de b000 	ldr.w	fp, [lr]
 800603c:	fb05 a202 	mla	r2, r5, r2, sl
 8006040:	fa13 f38b 	uxtah	r3, r3, fp
 8006044:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006048:	fa1f fb82 	uxth.w	fp, r2
 800604c:	f8de 2000 	ldr.w	r2, [lr]
 8006050:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006054:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006058:	b29b      	uxth	r3, r3
 800605a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800605e:	4581      	cmp	r9, r0
 8006060:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006064:	f84e 3b04 	str.w	r3, [lr], #4
 8006068:	d2db      	bcs.n	8006022 <quorem+0x42>
 800606a:	f856 300c 	ldr.w	r3, [r6, ip]
 800606e:	b933      	cbnz	r3, 800607e <quorem+0x9e>
 8006070:	9b01      	ldr	r3, [sp, #4]
 8006072:	3b04      	subs	r3, #4
 8006074:	429e      	cmp	r6, r3
 8006076:	461a      	mov	r2, r3
 8006078:	d330      	bcc.n	80060dc <quorem+0xfc>
 800607a:	f8c8 4010 	str.w	r4, [r8, #16]
 800607e:	4640      	mov	r0, r8
 8006080:	f001 f828 	bl	80070d4 <__mcmp>
 8006084:	2800      	cmp	r0, #0
 8006086:	db25      	blt.n	80060d4 <quorem+0xf4>
 8006088:	3501      	adds	r5, #1
 800608a:	4630      	mov	r0, r6
 800608c:	f04f 0c00 	mov.w	ip, #0
 8006090:	f857 2b04 	ldr.w	r2, [r7], #4
 8006094:	f8d0 e000 	ldr.w	lr, [r0]
 8006098:	b293      	uxth	r3, r2
 800609a:	ebac 0303 	sub.w	r3, ip, r3
 800609e:	0c12      	lsrs	r2, r2, #16
 80060a0:	fa13 f38e 	uxtah	r3, r3, lr
 80060a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060b2:	45b9      	cmp	r9, r7
 80060b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060b8:	f840 3b04 	str.w	r3, [r0], #4
 80060bc:	d2e8      	bcs.n	8006090 <quorem+0xb0>
 80060be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80060c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80060c6:	b92a      	cbnz	r2, 80060d4 <quorem+0xf4>
 80060c8:	3b04      	subs	r3, #4
 80060ca:	429e      	cmp	r6, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	d30b      	bcc.n	80060e8 <quorem+0x108>
 80060d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80060d4:	4628      	mov	r0, r5
 80060d6:	b003      	add	sp, #12
 80060d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060dc:	6812      	ldr	r2, [r2, #0]
 80060de:	3b04      	subs	r3, #4
 80060e0:	2a00      	cmp	r2, #0
 80060e2:	d1ca      	bne.n	800607a <quorem+0x9a>
 80060e4:	3c01      	subs	r4, #1
 80060e6:	e7c5      	b.n	8006074 <quorem+0x94>
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	3b04      	subs	r3, #4
 80060ec:	2a00      	cmp	r2, #0
 80060ee:	d1ef      	bne.n	80060d0 <quorem+0xf0>
 80060f0:	3c01      	subs	r4, #1
 80060f2:	e7ea      	b.n	80060ca <quorem+0xea>
 80060f4:	2000      	movs	r0, #0
 80060f6:	e7ee      	b.n	80060d6 <quorem+0xf6>

080060f8 <_dtoa_r>:
 80060f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	ec57 6b10 	vmov	r6, r7, d0
 8006100:	b097      	sub	sp, #92	; 0x5c
 8006102:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006104:	9106      	str	r1, [sp, #24]
 8006106:	4604      	mov	r4, r0
 8006108:	920b      	str	r2, [sp, #44]	; 0x2c
 800610a:	9312      	str	r3, [sp, #72]	; 0x48
 800610c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006110:	e9cd 6700 	strd	r6, r7, [sp]
 8006114:	b93d      	cbnz	r5, 8006126 <_dtoa_r+0x2e>
 8006116:	2010      	movs	r0, #16
 8006118:	f000 fdb4 	bl	8006c84 <malloc>
 800611c:	6260      	str	r0, [r4, #36]	; 0x24
 800611e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006122:	6005      	str	r5, [r0, #0]
 8006124:	60c5      	str	r5, [r0, #12]
 8006126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006128:	6819      	ldr	r1, [r3, #0]
 800612a:	b151      	cbz	r1, 8006142 <_dtoa_r+0x4a>
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	604a      	str	r2, [r1, #4]
 8006130:	2301      	movs	r3, #1
 8006132:	4093      	lsls	r3, r2
 8006134:	608b      	str	r3, [r1, #8]
 8006136:	4620      	mov	r0, r4
 8006138:	f000 fdeb 	bl	8006d12 <_Bfree>
 800613c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	1e3b      	subs	r3, r7, #0
 8006144:	bfbb      	ittet	lt
 8006146:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800614a:	9301      	strlt	r3, [sp, #4]
 800614c:	2300      	movge	r3, #0
 800614e:	2201      	movlt	r2, #1
 8006150:	bfac      	ite	ge
 8006152:	f8c8 3000 	strge.w	r3, [r8]
 8006156:	f8c8 2000 	strlt.w	r2, [r8]
 800615a:	4baf      	ldr	r3, [pc, #700]	; (8006418 <_dtoa_r+0x320>)
 800615c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006160:	ea33 0308 	bics.w	r3, r3, r8
 8006164:	d114      	bne.n	8006190 <_dtoa_r+0x98>
 8006166:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006168:	f242 730f 	movw	r3, #9999	; 0x270f
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	9b00      	ldr	r3, [sp, #0]
 8006170:	b923      	cbnz	r3, 800617c <_dtoa_r+0x84>
 8006172:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006176:	2800      	cmp	r0, #0
 8006178:	f000 8542 	beq.w	8006c00 <_dtoa_r+0xb08>
 800617c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800617e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800642c <_dtoa_r+0x334>
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 8544 	beq.w	8006c10 <_dtoa_r+0xb18>
 8006188:	f10b 0303 	add.w	r3, fp, #3
 800618c:	f000 bd3e 	b.w	8006c0c <_dtoa_r+0xb14>
 8006190:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006194:	2200      	movs	r2, #0
 8006196:	2300      	movs	r3, #0
 8006198:	4630      	mov	r0, r6
 800619a:	4639      	mov	r1, r7
 800619c:	f7fa fc9c 	bl	8000ad8 <__aeabi_dcmpeq>
 80061a0:	4681      	mov	r9, r0
 80061a2:	b168      	cbz	r0, 80061c0 <_dtoa_r+0xc8>
 80061a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061a6:	2301      	movs	r3, #1
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 8524 	beq.w	8006bfa <_dtoa_r+0xb02>
 80061b2:	4b9a      	ldr	r3, [pc, #616]	; (800641c <_dtoa_r+0x324>)
 80061b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061b6:	f103 3bff 	add.w	fp, r3, #4294967295
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	f000 bd28 	b.w	8006c10 <_dtoa_r+0xb18>
 80061c0:	aa14      	add	r2, sp, #80	; 0x50
 80061c2:	a915      	add	r1, sp, #84	; 0x54
 80061c4:	ec47 6b10 	vmov	d0, r6, r7
 80061c8:	4620      	mov	r0, r4
 80061ca:	f000 fffa 	bl	80071c2 <__d2b>
 80061ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80061d2:	9004      	str	r0, [sp, #16]
 80061d4:	2d00      	cmp	r5, #0
 80061d6:	d07c      	beq.n	80062d2 <_dtoa_r+0x1da>
 80061d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80061dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80061e0:	46b2      	mov	sl, r6
 80061e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80061e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80061ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80061ee:	2200      	movs	r2, #0
 80061f0:	4b8b      	ldr	r3, [pc, #556]	; (8006420 <_dtoa_r+0x328>)
 80061f2:	4650      	mov	r0, sl
 80061f4:	4659      	mov	r1, fp
 80061f6:	f7fa f84f 	bl	8000298 <__aeabi_dsub>
 80061fa:	a381      	add	r3, pc, #516	; (adr r3, 8006400 <_dtoa_r+0x308>)
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	f7fa fa02 	bl	8000608 <__aeabi_dmul>
 8006204:	a380      	add	r3, pc, #512	; (adr r3, 8006408 <_dtoa_r+0x310>)
 8006206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620a:	f7fa f847 	bl	800029c <__adddf3>
 800620e:	4606      	mov	r6, r0
 8006210:	4628      	mov	r0, r5
 8006212:	460f      	mov	r7, r1
 8006214:	f7fa f98e 	bl	8000534 <__aeabi_i2d>
 8006218:	a37d      	add	r3, pc, #500	; (adr r3, 8006410 <_dtoa_r+0x318>)
 800621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621e:	f7fa f9f3 	bl	8000608 <__aeabi_dmul>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	4630      	mov	r0, r6
 8006228:	4639      	mov	r1, r7
 800622a:	f7fa f837 	bl	800029c <__adddf3>
 800622e:	4606      	mov	r6, r0
 8006230:	460f      	mov	r7, r1
 8006232:	f7fa fc99 	bl	8000b68 <__aeabi_d2iz>
 8006236:	2200      	movs	r2, #0
 8006238:	4682      	mov	sl, r0
 800623a:	2300      	movs	r3, #0
 800623c:	4630      	mov	r0, r6
 800623e:	4639      	mov	r1, r7
 8006240:	f7fa fc54 	bl	8000aec <__aeabi_dcmplt>
 8006244:	b148      	cbz	r0, 800625a <_dtoa_r+0x162>
 8006246:	4650      	mov	r0, sl
 8006248:	f7fa f974 	bl	8000534 <__aeabi_i2d>
 800624c:	4632      	mov	r2, r6
 800624e:	463b      	mov	r3, r7
 8006250:	f7fa fc42 	bl	8000ad8 <__aeabi_dcmpeq>
 8006254:	b908      	cbnz	r0, 800625a <_dtoa_r+0x162>
 8006256:	f10a 3aff 	add.w	sl, sl, #4294967295
 800625a:	f1ba 0f16 	cmp.w	sl, #22
 800625e:	d859      	bhi.n	8006314 <_dtoa_r+0x21c>
 8006260:	4970      	ldr	r1, [pc, #448]	; (8006424 <_dtoa_r+0x32c>)
 8006262:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006266:	e9dd 2300 	ldrd	r2, r3, [sp]
 800626a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800626e:	f7fa fc5b 	bl	8000b28 <__aeabi_dcmpgt>
 8006272:	2800      	cmp	r0, #0
 8006274:	d050      	beq.n	8006318 <_dtoa_r+0x220>
 8006276:	f10a 3aff 	add.w	sl, sl, #4294967295
 800627a:	2300      	movs	r3, #0
 800627c:	930f      	str	r3, [sp, #60]	; 0x3c
 800627e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006280:	1b5d      	subs	r5, r3, r5
 8006282:	f1b5 0801 	subs.w	r8, r5, #1
 8006286:	bf49      	itett	mi
 8006288:	f1c5 0301 	rsbmi	r3, r5, #1
 800628c:	2300      	movpl	r3, #0
 800628e:	9305      	strmi	r3, [sp, #20]
 8006290:	f04f 0800 	movmi.w	r8, #0
 8006294:	bf58      	it	pl
 8006296:	9305      	strpl	r3, [sp, #20]
 8006298:	f1ba 0f00 	cmp.w	sl, #0
 800629c:	db3e      	blt.n	800631c <_dtoa_r+0x224>
 800629e:	2300      	movs	r3, #0
 80062a0:	44d0      	add	r8, sl
 80062a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80062a6:	9307      	str	r3, [sp, #28]
 80062a8:	9b06      	ldr	r3, [sp, #24]
 80062aa:	2b09      	cmp	r3, #9
 80062ac:	f200 8090 	bhi.w	80063d0 <_dtoa_r+0x2d8>
 80062b0:	2b05      	cmp	r3, #5
 80062b2:	bfc4      	itt	gt
 80062b4:	3b04      	subgt	r3, #4
 80062b6:	9306      	strgt	r3, [sp, #24]
 80062b8:	9b06      	ldr	r3, [sp, #24]
 80062ba:	f1a3 0302 	sub.w	r3, r3, #2
 80062be:	bfcc      	ite	gt
 80062c0:	2500      	movgt	r5, #0
 80062c2:	2501      	movle	r5, #1
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	f200 808f 	bhi.w	80063e8 <_dtoa_r+0x2f0>
 80062ca:	e8df f003 	tbb	[pc, r3]
 80062ce:	7f7d      	.short	0x7f7d
 80062d0:	7131      	.short	0x7131
 80062d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80062d6:	441d      	add	r5, r3
 80062d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80062dc:	2820      	cmp	r0, #32
 80062de:	dd13      	ble.n	8006308 <_dtoa_r+0x210>
 80062e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80062e4:	9b00      	ldr	r3, [sp, #0]
 80062e6:	fa08 f800 	lsl.w	r8, r8, r0
 80062ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80062ee:	fa23 f000 	lsr.w	r0, r3, r0
 80062f2:	ea48 0000 	orr.w	r0, r8, r0
 80062f6:	f7fa f90d 	bl	8000514 <__aeabi_ui2d>
 80062fa:	2301      	movs	r3, #1
 80062fc:	4682      	mov	sl, r0
 80062fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006302:	3d01      	subs	r5, #1
 8006304:	9313      	str	r3, [sp, #76]	; 0x4c
 8006306:	e772      	b.n	80061ee <_dtoa_r+0xf6>
 8006308:	9b00      	ldr	r3, [sp, #0]
 800630a:	f1c0 0020 	rsb	r0, r0, #32
 800630e:	fa03 f000 	lsl.w	r0, r3, r0
 8006312:	e7f0      	b.n	80062f6 <_dtoa_r+0x1fe>
 8006314:	2301      	movs	r3, #1
 8006316:	e7b1      	b.n	800627c <_dtoa_r+0x184>
 8006318:	900f      	str	r0, [sp, #60]	; 0x3c
 800631a:	e7b0      	b.n	800627e <_dtoa_r+0x186>
 800631c:	9b05      	ldr	r3, [sp, #20]
 800631e:	eba3 030a 	sub.w	r3, r3, sl
 8006322:	9305      	str	r3, [sp, #20]
 8006324:	f1ca 0300 	rsb	r3, sl, #0
 8006328:	9307      	str	r3, [sp, #28]
 800632a:	2300      	movs	r3, #0
 800632c:	930e      	str	r3, [sp, #56]	; 0x38
 800632e:	e7bb      	b.n	80062a8 <_dtoa_r+0x1b0>
 8006330:	2301      	movs	r3, #1
 8006332:	930a      	str	r3, [sp, #40]	; 0x28
 8006334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006336:	2b00      	cmp	r3, #0
 8006338:	dd59      	ble.n	80063ee <_dtoa_r+0x2f6>
 800633a:	9302      	str	r3, [sp, #8]
 800633c:	4699      	mov	r9, r3
 800633e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006340:	2200      	movs	r2, #0
 8006342:	6072      	str	r2, [r6, #4]
 8006344:	2204      	movs	r2, #4
 8006346:	f102 0014 	add.w	r0, r2, #20
 800634a:	4298      	cmp	r0, r3
 800634c:	6871      	ldr	r1, [r6, #4]
 800634e:	d953      	bls.n	80063f8 <_dtoa_r+0x300>
 8006350:	4620      	mov	r0, r4
 8006352:	f000 fcaa 	bl	8006caa <_Balloc>
 8006356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006358:	6030      	str	r0, [r6, #0]
 800635a:	f1b9 0f0e 	cmp.w	r9, #14
 800635e:	f8d3 b000 	ldr.w	fp, [r3]
 8006362:	f200 80e6 	bhi.w	8006532 <_dtoa_r+0x43a>
 8006366:	2d00      	cmp	r5, #0
 8006368:	f000 80e3 	beq.w	8006532 <_dtoa_r+0x43a>
 800636c:	ed9d 7b00 	vldr	d7, [sp]
 8006370:	f1ba 0f00 	cmp.w	sl, #0
 8006374:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006378:	dd74      	ble.n	8006464 <_dtoa_r+0x36c>
 800637a:	4a2a      	ldr	r2, [pc, #168]	; (8006424 <_dtoa_r+0x32c>)
 800637c:	f00a 030f 	and.w	r3, sl, #15
 8006380:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006384:	ed93 7b00 	vldr	d7, [r3]
 8006388:	ea4f 162a 	mov.w	r6, sl, asr #4
 800638c:	06f0      	lsls	r0, r6, #27
 800638e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006392:	d565      	bpl.n	8006460 <_dtoa_r+0x368>
 8006394:	4b24      	ldr	r3, [pc, #144]	; (8006428 <_dtoa_r+0x330>)
 8006396:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800639a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800639e:	f7fa fa5d 	bl	800085c <__aeabi_ddiv>
 80063a2:	e9cd 0100 	strd	r0, r1, [sp]
 80063a6:	f006 060f 	and.w	r6, r6, #15
 80063aa:	2503      	movs	r5, #3
 80063ac:	4f1e      	ldr	r7, [pc, #120]	; (8006428 <_dtoa_r+0x330>)
 80063ae:	e04c      	b.n	800644a <_dtoa_r+0x352>
 80063b0:	2301      	movs	r3, #1
 80063b2:	930a      	str	r3, [sp, #40]	; 0x28
 80063b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063b6:	4453      	add	r3, sl
 80063b8:	f103 0901 	add.w	r9, r3, #1
 80063bc:	9302      	str	r3, [sp, #8]
 80063be:	464b      	mov	r3, r9
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	bfb8      	it	lt
 80063c4:	2301      	movlt	r3, #1
 80063c6:	e7ba      	b.n	800633e <_dtoa_r+0x246>
 80063c8:	2300      	movs	r3, #0
 80063ca:	e7b2      	b.n	8006332 <_dtoa_r+0x23a>
 80063cc:	2300      	movs	r3, #0
 80063ce:	e7f0      	b.n	80063b2 <_dtoa_r+0x2ba>
 80063d0:	2501      	movs	r5, #1
 80063d2:	2300      	movs	r3, #0
 80063d4:	9306      	str	r3, [sp, #24]
 80063d6:	950a      	str	r5, [sp, #40]	; 0x28
 80063d8:	f04f 33ff 	mov.w	r3, #4294967295
 80063dc:	9302      	str	r3, [sp, #8]
 80063de:	4699      	mov	r9, r3
 80063e0:	2200      	movs	r2, #0
 80063e2:	2312      	movs	r3, #18
 80063e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80063e6:	e7aa      	b.n	800633e <_dtoa_r+0x246>
 80063e8:	2301      	movs	r3, #1
 80063ea:	930a      	str	r3, [sp, #40]	; 0x28
 80063ec:	e7f4      	b.n	80063d8 <_dtoa_r+0x2e0>
 80063ee:	2301      	movs	r3, #1
 80063f0:	9302      	str	r3, [sp, #8]
 80063f2:	4699      	mov	r9, r3
 80063f4:	461a      	mov	r2, r3
 80063f6:	e7f5      	b.n	80063e4 <_dtoa_r+0x2ec>
 80063f8:	3101      	adds	r1, #1
 80063fa:	6071      	str	r1, [r6, #4]
 80063fc:	0052      	lsls	r2, r2, #1
 80063fe:	e7a2      	b.n	8006346 <_dtoa_r+0x24e>
 8006400:	636f4361 	.word	0x636f4361
 8006404:	3fd287a7 	.word	0x3fd287a7
 8006408:	8b60c8b3 	.word	0x8b60c8b3
 800640c:	3fc68a28 	.word	0x3fc68a28
 8006410:	509f79fb 	.word	0x509f79fb
 8006414:	3fd34413 	.word	0x3fd34413
 8006418:	7ff00000 	.word	0x7ff00000
 800641c:	08007879 	.word	0x08007879
 8006420:	3ff80000 	.word	0x3ff80000
 8006424:	080078d8 	.word	0x080078d8
 8006428:	080078b0 	.word	0x080078b0
 800642c:	080078a5 	.word	0x080078a5
 8006430:	07f1      	lsls	r1, r6, #31
 8006432:	d508      	bpl.n	8006446 <_dtoa_r+0x34e>
 8006434:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800643c:	f7fa f8e4 	bl	8000608 <__aeabi_dmul>
 8006440:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006444:	3501      	adds	r5, #1
 8006446:	1076      	asrs	r6, r6, #1
 8006448:	3708      	adds	r7, #8
 800644a:	2e00      	cmp	r6, #0
 800644c:	d1f0      	bne.n	8006430 <_dtoa_r+0x338>
 800644e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006452:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006456:	f7fa fa01 	bl	800085c <__aeabi_ddiv>
 800645a:	e9cd 0100 	strd	r0, r1, [sp]
 800645e:	e01a      	b.n	8006496 <_dtoa_r+0x39e>
 8006460:	2502      	movs	r5, #2
 8006462:	e7a3      	b.n	80063ac <_dtoa_r+0x2b4>
 8006464:	f000 80a0 	beq.w	80065a8 <_dtoa_r+0x4b0>
 8006468:	f1ca 0600 	rsb	r6, sl, #0
 800646c:	4b9f      	ldr	r3, [pc, #636]	; (80066ec <_dtoa_r+0x5f4>)
 800646e:	4fa0      	ldr	r7, [pc, #640]	; (80066f0 <_dtoa_r+0x5f8>)
 8006470:	f006 020f 	and.w	r2, r6, #15
 8006474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006480:	f7fa f8c2 	bl	8000608 <__aeabi_dmul>
 8006484:	e9cd 0100 	strd	r0, r1, [sp]
 8006488:	1136      	asrs	r6, r6, #4
 800648a:	2300      	movs	r3, #0
 800648c:	2502      	movs	r5, #2
 800648e:	2e00      	cmp	r6, #0
 8006490:	d17f      	bne.n	8006592 <_dtoa_r+0x49a>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e1      	bne.n	800645a <_dtoa_r+0x362>
 8006496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 8087 	beq.w	80065ac <_dtoa_r+0x4b4>
 800649e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80064a2:	2200      	movs	r2, #0
 80064a4:	4b93      	ldr	r3, [pc, #588]	; (80066f4 <_dtoa_r+0x5fc>)
 80064a6:	4630      	mov	r0, r6
 80064a8:	4639      	mov	r1, r7
 80064aa:	f7fa fb1f 	bl	8000aec <__aeabi_dcmplt>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d07c      	beq.n	80065ac <_dtoa_r+0x4b4>
 80064b2:	f1b9 0f00 	cmp.w	r9, #0
 80064b6:	d079      	beq.n	80065ac <_dtoa_r+0x4b4>
 80064b8:	9b02      	ldr	r3, [sp, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	dd35      	ble.n	800652a <_dtoa_r+0x432>
 80064be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80064c2:	9308      	str	r3, [sp, #32]
 80064c4:	4639      	mov	r1, r7
 80064c6:	2200      	movs	r2, #0
 80064c8:	4b8b      	ldr	r3, [pc, #556]	; (80066f8 <_dtoa_r+0x600>)
 80064ca:	4630      	mov	r0, r6
 80064cc:	f7fa f89c 	bl	8000608 <__aeabi_dmul>
 80064d0:	e9cd 0100 	strd	r0, r1, [sp]
 80064d4:	9f02      	ldr	r7, [sp, #8]
 80064d6:	3501      	adds	r5, #1
 80064d8:	4628      	mov	r0, r5
 80064da:	f7fa f82b 	bl	8000534 <__aeabi_i2d>
 80064de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064e2:	f7fa f891 	bl	8000608 <__aeabi_dmul>
 80064e6:	2200      	movs	r2, #0
 80064e8:	4b84      	ldr	r3, [pc, #528]	; (80066fc <_dtoa_r+0x604>)
 80064ea:	f7f9 fed7 	bl	800029c <__adddf3>
 80064ee:	4605      	mov	r5, r0
 80064f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80064f4:	2f00      	cmp	r7, #0
 80064f6:	d15d      	bne.n	80065b4 <_dtoa_r+0x4bc>
 80064f8:	2200      	movs	r2, #0
 80064fa:	4b81      	ldr	r3, [pc, #516]	; (8006700 <_dtoa_r+0x608>)
 80064fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006500:	f7f9 feca 	bl	8000298 <__aeabi_dsub>
 8006504:	462a      	mov	r2, r5
 8006506:	4633      	mov	r3, r6
 8006508:	e9cd 0100 	strd	r0, r1, [sp]
 800650c:	f7fa fb0c 	bl	8000b28 <__aeabi_dcmpgt>
 8006510:	2800      	cmp	r0, #0
 8006512:	f040 8288 	bne.w	8006a26 <_dtoa_r+0x92e>
 8006516:	462a      	mov	r2, r5
 8006518:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800651c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006520:	f7fa fae4 	bl	8000aec <__aeabi_dcmplt>
 8006524:	2800      	cmp	r0, #0
 8006526:	f040 827c 	bne.w	8006a22 <_dtoa_r+0x92a>
 800652a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800652e:	e9cd 2300 	strd	r2, r3, [sp]
 8006532:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006534:	2b00      	cmp	r3, #0
 8006536:	f2c0 8150 	blt.w	80067da <_dtoa_r+0x6e2>
 800653a:	f1ba 0f0e 	cmp.w	sl, #14
 800653e:	f300 814c 	bgt.w	80067da <_dtoa_r+0x6e2>
 8006542:	4b6a      	ldr	r3, [pc, #424]	; (80066ec <_dtoa_r+0x5f4>)
 8006544:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006548:	ed93 7b00 	vldr	d7, [r3]
 800654c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800654e:	2b00      	cmp	r3, #0
 8006550:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006554:	f280 80d8 	bge.w	8006708 <_dtoa_r+0x610>
 8006558:	f1b9 0f00 	cmp.w	r9, #0
 800655c:	f300 80d4 	bgt.w	8006708 <_dtoa_r+0x610>
 8006560:	f040 825e 	bne.w	8006a20 <_dtoa_r+0x928>
 8006564:	2200      	movs	r2, #0
 8006566:	4b66      	ldr	r3, [pc, #408]	; (8006700 <_dtoa_r+0x608>)
 8006568:	ec51 0b17 	vmov	r0, r1, d7
 800656c:	f7fa f84c 	bl	8000608 <__aeabi_dmul>
 8006570:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006574:	f7fa face 	bl	8000b14 <__aeabi_dcmpge>
 8006578:	464f      	mov	r7, r9
 800657a:	464e      	mov	r6, r9
 800657c:	2800      	cmp	r0, #0
 800657e:	f040 8234 	bne.w	80069ea <_dtoa_r+0x8f2>
 8006582:	2331      	movs	r3, #49	; 0x31
 8006584:	f10b 0501 	add.w	r5, fp, #1
 8006588:	f88b 3000 	strb.w	r3, [fp]
 800658c:	f10a 0a01 	add.w	sl, sl, #1
 8006590:	e22f      	b.n	80069f2 <_dtoa_r+0x8fa>
 8006592:	07f2      	lsls	r2, r6, #31
 8006594:	d505      	bpl.n	80065a2 <_dtoa_r+0x4aa>
 8006596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800659a:	f7fa f835 	bl	8000608 <__aeabi_dmul>
 800659e:	3501      	adds	r5, #1
 80065a0:	2301      	movs	r3, #1
 80065a2:	1076      	asrs	r6, r6, #1
 80065a4:	3708      	adds	r7, #8
 80065a6:	e772      	b.n	800648e <_dtoa_r+0x396>
 80065a8:	2502      	movs	r5, #2
 80065aa:	e774      	b.n	8006496 <_dtoa_r+0x39e>
 80065ac:	f8cd a020 	str.w	sl, [sp, #32]
 80065b0:	464f      	mov	r7, r9
 80065b2:	e791      	b.n	80064d8 <_dtoa_r+0x3e0>
 80065b4:	4b4d      	ldr	r3, [pc, #308]	; (80066ec <_dtoa_r+0x5f4>)
 80065b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80065be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d047      	beq.n	8006654 <_dtoa_r+0x55c>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	2000      	movs	r0, #0
 80065ca:	494e      	ldr	r1, [pc, #312]	; (8006704 <_dtoa_r+0x60c>)
 80065cc:	f7fa f946 	bl	800085c <__aeabi_ddiv>
 80065d0:	462a      	mov	r2, r5
 80065d2:	4633      	mov	r3, r6
 80065d4:	f7f9 fe60 	bl	8000298 <__aeabi_dsub>
 80065d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80065dc:	465d      	mov	r5, fp
 80065de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065e2:	f7fa fac1 	bl	8000b68 <__aeabi_d2iz>
 80065e6:	4606      	mov	r6, r0
 80065e8:	f7f9 ffa4 	bl	8000534 <__aeabi_i2d>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065f4:	f7f9 fe50 	bl	8000298 <__aeabi_dsub>
 80065f8:	3630      	adds	r6, #48	; 0x30
 80065fa:	f805 6b01 	strb.w	r6, [r5], #1
 80065fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006602:	e9cd 0100 	strd	r0, r1, [sp]
 8006606:	f7fa fa71 	bl	8000aec <__aeabi_dcmplt>
 800660a:	2800      	cmp	r0, #0
 800660c:	d163      	bne.n	80066d6 <_dtoa_r+0x5de>
 800660e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006612:	2000      	movs	r0, #0
 8006614:	4937      	ldr	r1, [pc, #220]	; (80066f4 <_dtoa_r+0x5fc>)
 8006616:	f7f9 fe3f 	bl	8000298 <__aeabi_dsub>
 800661a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800661e:	f7fa fa65 	bl	8000aec <__aeabi_dcmplt>
 8006622:	2800      	cmp	r0, #0
 8006624:	f040 80b7 	bne.w	8006796 <_dtoa_r+0x69e>
 8006628:	eba5 030b 	sub.w	r3, r5, fp
 800662c:	429f      	cmp	r7, r3
 800662e:	f77f af7c 	ble.w	800652a <_dtoa_r+0x432>
 8006632:	2200      	movs	r2, #0
 8006634:	4b30      	ldr	r3, [pc, #192]	; (80066f8 <_dtoa_r+0x600>)
 8006636:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800663a:	f7f9 ffe5 	bl	8000608 <__aeabi_dmul>
 800663e:	2200      	movs	r2, #0
 8006640:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006644:	4b2c      	ldr	r3, [pc, #176]	; (80066f8 <_dtoa_r+0x600>)
 8006646:	e9dd 0100 	ldrd	r0, r1, [sp]
 800664a:	f7f9 ffdd 	bl	8000608 <__aeabi_dmul>
 800664e:	e9cd 0100 	strd	r0, r1, [sp]
 8006652:	e7c4      	b.n	80065de <_dtoa_r+0x4e6>
 8006654:	462a      	mov	r2, r5
 8006656:	4633      	mov	r3, r6
 8006658:	f7f9 ffd6 	bl	8000608 <__aeabi_dmul>
 800665c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006660:	eb0b 0507 	add.w	r5, fp, r7
 8006664:	465e      	mov	r6, fp
 8006666:	e9dd 0100 	ldrd	r0, r1, [sp]
 800666a:	f7fa fa7d 	bl	8000b68 <__aeabi_d2iz>
 800666e:	4607      	mov	r7, r0
 8006670:	f7f9 ff60 	bl	8000534 <__aeabi_i2d>
 8006674:	3730      	adds	r7, #48	; 0x30
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800667e:	f7f9 fe0b 	bl	8000298 <__aeabi_dsub>
 8006682:	f806 7b01 	strb.w	r7, [r6], #1
 8006686:	42ae      	cmp	r6, r5
 8006688:	e9cd 0100 	strd	r0, r1, [sp]
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	d126      	bne.n	80066e0 <_dtoa_r+0x5e8>
 8006692:	4b1c      	ldr	r3, [pc, #112]	; (8006704 <_dtoa_r+0x60c>)
 8006694:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006698:	f7f9 fe00 	bl	800029c <__adddf3>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066a4:	f7fa fa40 	bl	8000b28 <__aeabi_dcmpgt>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d174      	bne.n	8006796 <_dtoa_r+0x69e>
 80066ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80066b0:	2000      	movs	r0, #0
 80066b2:	4914      	ldr	r1, [pc, #80]	; (8006704 <_dtoa_r+0x60c>)
 80066b4:	f7f9 fdf0 	bl	8000298 <__aeabi_dsub>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066c0:	f7fa fa14 	bl	8000aec <__aeabi_dcmplt>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	f43f af30 	beq.w	800652a <_dtoa_r+0x432>
 80066ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066ce:	2b30      	cmp	r3, #48	; 0x30
 80066d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80066d4:	d002      	beq.n	80066dc <_dtoa_r+0x5e4>
 80066d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80066da:	e04a      	b.n	8006772 <_dtoa_r+0x67a>
 80066dc:	4615      	mov	r5, r2
 80066de:	e7f4      	b.n	80066ca <_dtoa_r+0x5d2>
 80066e0:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <_dtoa_r+0x600>)
 80066e2:	f7f9 ff91 	bl	8000608 <__aeabi_dmul>
 80066e6:	e9cd 0100 	strd	r0, r1, [sp]
 80066ea:	e7bc      	b.n	8006666 <_dtoa_r+0x56e>
 80066ec:	080078d8 	.word	0x080078d8
 80066f0:	080078b0 	.word	0x080078b0
 80066f4:	3ff00000 	.word	0x3ff00000
 80066f8:	40240000 	.word	0x40240000
 80066fc:	401c0000 	.word	0x401c0000
 8006700:	40140000 	.word	0x40140000
 8006704:	3fe00000 	.word	0x3fe00000
 8006708:	e9dd 6700 	ldrd	r6, r7, [sp]
 800670c:	465d      	mov	r5, fp
 800670e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006712:	4630      	mov	r0, r6
 8006714:	4639      	mov	r1, r7
 8006716:	f7fa f8a1 	bl	800085c <__aeabi_ddiv>
 800671a:	f7fa fa25 	bl	8000b68 <__aeabi_d2iz>
 800671e:	4680      	mov	r8, r0
 8006720:	f7f9 ff08 	bl	8000534 <__aeabi_i2d>
 8006724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006728:	f7f9 ff6e 	bl	8000608 <__aeabi_dmul>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	4630      	mov	r0, r6
 8006732:	4639      	mov	r1, r7
 8006734:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006738:	f7f9 fdae 	bl	8000298 <__aeabi_dsub>
 800673c:	f805 6b01 	strb.w	r6, [r5], #1
 8006740:	eba5 060b 	sub.w	r6, r5, fp
 8006744:	45b1      	cmp	r9, r6
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	d139      	bne.n	80067c0 <_dtoa_r+0x6c8>
 800674c:	f7f9 fda6 	bl	800029c <__adddf3>
 8006750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006754:	4606      	mov	r6, r0
 8006756:	460f      	mov	r7, r1
 8006758:	f7fa f9e6 	bl	8000b28 <__aeabi_dcmpgt>
 800675c:	b9c8      	cbnz	r0, 8006792 <_dtoa_r+0x69a>
 800675e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006762:	4630      	mov	r0, r6
 8006764:	4639      	mov	r1, r7
 8006766:	f7fa f9b7 	bl	8000ad8 <__aeabi_dcmpeq>
 800676a:	b110      	cbz	r0, 8006772 <_dtoa_r+0x67a>
 800676c:	f018 0f01 	tst.w	r8, #1
 8006770:	d10f      	bne.n	8006792 <_dtoa_r+0x69a>
 8006772:	9904      	ldr	r1, [sp, #16]
 8006774:	4620      	mov	r0, r4
 8006776:	f000 facc 	bl	8006d12 <_Bfree>
 800677a:	2300      	movs	r3, #0
 800677c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800677e:	702b      	strb	r3, [r5, #0]
 8006780:	f10a 0301 	add.w	r3, sl, #1
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 8241 	beq.w	8006c10 <_dtoa_r+0xb18>
 800678e:	601d      	str	r5, [r3, #0]
 8006790:	e23e      	b.n	8006c10 <_dtoa_r+0xb18>
 8006792:	f8cd a020 	str.w	sl, [sp, #32]
 8006796:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800679a:	2a39      	cmp	r2, #57	; 0x39
 800679c:	f105 33ff 	add.w	r3, r5, #4294967295
 80067a0:	d108      	bne.n	80067b4 <_dtoa_r+0x6bc>
 80067a2:	459b      	cmp	fp, r3
 80067a4:	d10a      	bne.n	80067bc <_dtoa_r+0x6c4>
 80067a6:	9b08      	ldr	r3, [sp, #32]
 80067a8:	3301      	adds	r3, #1
 80067aa:	9308      	str	r3, [sp, #32]
 80067ac:	2330      	movs	r3, #48	; 0x30
 80067ae:	f88b 3000 	strb.w	r3, [fp]
 80067b2:	465b      	mov	r3, fp
 80067b4:	781a      	ldrb	r2, [r3, #0]
 80067b6:	3201      	adds	r2, #1
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	e78c      	b.n	80066d6 <_dtoa_r+0x5de>
 80067bc:	461d      	mov	r5, r3
 80067be:	e7ea      	b.n	8006796 <_dtoa_r+0x69e>
 80067c0:	2200      	movs	r2, #0
 80067c2:	4b9b      	ldr	r3, [pc, #620]	; (8006a30 <_dtoa_r+0x938>)
 80067c4:	f7f9 ff20 	bl	8000608 <__aeabi_dmul>
 80067c8:	2200      	movs	r2, #0
 80067ca:	2300      	movs	r3, #0
 80067cc:	4606      	mov	r6, r0
 80067ce:	460f      	mov	r7, r1
 80067d0:	f7fa f982 	bl	8000ad8 <__aeabi_dcmpeq>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d09a      	beq.n	800670e <_dtoa_r+0x616>
 80067d8:	e7cb      	b.n	8006772 <_dtoa_r+0x67a>
 80067da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067dc:	2a00      	cmp	r2, #0
 80067de:	f000 808b 	beq.w	80068f8 <_dtoa_r+0x800>
 80067e2:	9a06      	ldr	r2, [sp, #24]
 80067e4:	2a01      	cmp	r2, #1
 80067e6:	dc6e      	bgt.n	80068c6 <_dtoa_r+0x7ce>
 80067e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067ea:	2a00      	cmp	r2, #0
 80067ec:	d067      	beq.n	80068be <_dtoa_r+0x7c6>
 80067ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80067f2:	9f07      	ldr	r7, [sp, #28]
 80067f4:	9d05      	ldr	r5, [sp, #20]
 80067f6:	9a05      	ldr	r2, [sp, #20]
 80067f8:	2101      	movs	r1, #1
 80067fa:	441a      	add	r2, r3
 80067fc:	4620      	mov	r0, r4
 80067fe:	9205      	str	r2, [sp, #20]
 8006800:	4498      	add	r8, r3
 8006802:	f000 fb26 	bl	8006e52 <__i2b>
 8006806:	4606      	mov	r6, r0
 8006808:	2d00      	cmp	r5, #0
 800680a:	dd0c      	ble.n	8006826 <_dtoa_r+0x72e>
 800680c:	f1b8 0f00 	cmp.w	r8, #0
 8006810:	dd09      	ble.n	8006826 <_dtoa_r+0x72e>
 8006812:	4545      	cmp	r5, r8
 8006814:	9a05      	ldr	r2, [sp, #20]
 8006816:	462b      	mov	r3, r5
 8006818:	bfa8      	it	ge
 800681a:	4643      	movge	r3, r8
 800681c:	1ad2      	subs	r2, r2, r3
 800681e:	9205      	str	r2, [sp, #20]
 8006820:	1aed      	subs	r5, r5, r3
 8006822:	eba8 0803 	sub.w	r8, r8, r3
 8006826:	9b07      	ldr	r3, [sp, #28]
 8006828:	b1eb      	cbz	r3, 8006866 <_dtoa_r+0x76e>
 800682a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800682c:	2b00      	cmp	r3, #0
 800682e:	d067      	beq.n	8006900 <_dtoa_r+0x808>
 8006830:	b18f      	cbz	r7, 8006856 <_dtoa_r+0x75e>
 8006832:	4631      	mov	r1, r6
 8006834:	463a      	mov	r2, r7
 8006836:	4620      	mov	r0, r4
 8006838:	f000 fbaa 	bl	8006f90 <__pow5mult>
 800683c:	9a04      	ldr	r2, [sp, #16]
 800683e:	4601      	mov	r1, r0
 8006840:	4606      	mov	r6, r0
 8006842:	4620      	mov	r0, r4
 8006844:	f000 fb0e 	bl	8006e64 <__multiply>
 8006848:	9904      	ldr	r1, [sp, #16]
 800684a:	9008      	str	r0, [sp, #32]
 800684c:	4620      	mov	r0, r4
 800684e:	f000 fa60 	bl	8006d12 <_Bfree>
 8006852:	9b08      	ldr	r3, [sp, #32]
 8006854:	9304      	str	r3, [sp, #16]
 8006856:	9b07      	ldr	r3, [sp, #28]
 8006858:	1bda      	subs	r2, r3, r7
 800685a:	d004      	beq.n	8006866 <_dtoa_r+0x76e>
 800685c:	9904      	ldr	r1, [sp, #16]
 800685e:	4620      	mov	r0, r4
 8006860:	f000 fb96 	bl	8006f90 <__pow5mult>
 8006864:	9004      	str	r0, [sp, #16]
 8006866:	2101      	movs	r1, #1
 8006868:	4620      	mov	r0, r4
 800686a:	f000 faf2 	bl	8006e52 <__i2b>
 800686e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006870:	4607      	mov	r7, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 81d0 	beq.w	8006c18 <_dtoa_r+0xb20>
 8006878:	461a      	mov	r2, r3
 800687a:	4601      	mov	r1, r0
 800687c:	4620      	mov	r0, r4
 800687e:	f000 fb87 	bl	8006f90 <__pow5mult>
 8006882:	9b06      	ldr	r3, [sp, #24]
 8006884:	2b01      	cmp	r3, #1
 8006886:	4607      	mov	r7, r0
 8006888:	dc40      	bgt.n	800690c <_dtoa_r+0x814>
 800688a:	9b00      	ldr	r3, [sp, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d139      	bne.n	8006904 <_dtoa_r+0x80c>
 8006890:	9b01      	ldr	r3, [sp, #4]
 8006892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006896:	2b00      	cmp	r3, #0
 8006898:	d136      	bne.n	8006908 <_dtoa_r+0x810>
 800689a:	9b01      	ldr	r3, [sp, #4]
 800689c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068a0:	0d1b      	lsrs	r3, r3, #20
 80068a2:	051b      	lsls	r3, r3, #20
 80068a4:	b12b      	cbz	r3, 80068b2 <_dtoa_r+0x7ba>
 80068a6:	9b05      	ldr	r3, [sp, #20]
 80068a8:	3301      	adds	r3, #1
 80068aa:	9305      	str	r3, [sp, #20]
 80068ac:	f108 0801 	add.w	r8, r8, #1
 80068b0:	2301      	movs	r3, #1
 80068b2:	9307      	str	r3, [sp, #28]
 80068b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d12a      	bne.n	8006910 <_dtoa_r+0x818>
 80068ba:	2001      	movs	r0, #1
 80068bc:	e030      	b.n	8006920 <_dtoa_r+0x828>
 80068be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068c4:	e795      	b.n	80067f2 <_dtoa_r+0x6fa>
 80068c6:	9b07      	ldr	r3, [sp, #28]
 80068c8:	f109 37ff 	add.w	r7, r9, #4294967295
 80068cc:	42bb      	cmp	r3, r7
 80068ce:	bfbf      	itttt	lt
 80068d0:	9b07      	ldrlt	r3, [sp, #28]
 80068d2:	9707      	strlt	r7, [sp, #28]
 80068d4:	1afa      	sublt	r2, r7, r3
 80068d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80068d8:	bfbb      	ittet	lt
 80068da:	189b      	addlt	r3, r3, r2
 80068dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80068de:	1bdf      	subge	r7, r3, r7
 80068e0:	2700      	movlt	r7, #0
 80068e2:	f1b9 0f00 	cmp.w	r9, #0
 80068e6:	bfb5      	itete	lt
 80068e8:	9b05      	ldrlt	r3, [sp, #20]
 80068ea:	9d05      	ldrge	r5, [sp, #20]
 80068ec:	eba3 0509 	sublt.w	r5, r3, r9
 80068f0:	464b      	movge	r3, r9
 80068f2:	bfb8      	it	lt
 80068f4:	2300      	movlt	r3, #0
 80068f6:	e77e      	b.n	80067f6 <_dtoa_r+0x6fe>
 80068f8:	9f07      	ldr	r7, [sp, #28]
 80068fa:	9d05      	ldr	r5, [sp, #20]
 80068fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80068fe:	e783      	b.n	8006808 <_dtoa_r+0x710>
 8006900:	9a07      	ldr	r2, [sp, #28]
 8006902:	e7ab      	b.n	800685c <_dtoa_r+0x764>
 8006904:	2300      	movs	r3, #0
 8006906:	e7d4      	b.n	80068b2 <_dtoa_r+0x7ba>
 8006908:	9b00      	ldr	r3, [sp, #0]
 800690a:	e7d2      	b.n	80068b2 <_dtoa_r+0x7ba>
 800690c:	2300      	movs	r3, #0
 800690e:	9307      	str	r3, [sp, #28]
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006916:	6918      	ldr	r0, [r3, #16]
 8006918:	f000 fa4d 	bl	8006db6 <__hi0bits>
 800691c:	f1c0 0020 	rsb	r0, r0, #32
 8006920:	4440      	add	r0, r8
 8006922:	f010 001f 	ands.w	r0, r0, #31
 8006926:	d047      	beq.n	80069b8 <_dtoa_r+0x8c0>
 8006928:	f1c0 0320 	rsb	r3, r0, #32
 800692c:	2b04      	cmp	r3, #4
 800692e:	dd3b      	ble.n	80069a8 <_dtoa_r+0x8b0>
 8006930:	9b05      	ldr	r3, [sp, #20]
 8006932:	f1c0 001c 	rsb	r0, r0, #28
 8006936:	4403      	add	r3, r0
 8006938:	9305      	str	r3, [sp, #20]
 800693a:	4405      	add	r5, r0
 800693c:	4480      	add	r8, r0
 800693e:	9b05      	ldr	r3, [sp, #20]
 8006940:	2b00      	cmp	r3, #0
 8006942:	dd05      	ble.n	8006950 <_dtoa_r+0x858>
 8006944:	461a      	mov	r2, r3
 8006946:	9904      	ldr	r1, [sp, #16]
 8006948:	4620      	mov	r0, r4
 800694a:	f000 fb6f 	bl	800702c <__lshift>
 800694e:	9004      	str	r0, [sp, #16]
 8006950:	f1b8 0f00 	cmp.w	r8, #0
 8006954:	dd05      	ble.n	8006962 <_dtoa_r+0x86a>
 8006956:	4639      	mov	r1, r7
 8006958:	4642      	mov	r2, r8
 800695a:	4620      	mov	r0, r4
 800695c:	f000 fb66 	bl	800702c <__lshift>
 8006960:	4607      	mov	r7, r0
 8006962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006964:	b353      	cbz	r3, 80069bc <_dtoa_r+0x8c4>
 8006966:	4639      	mov	r1, r7
 8006968:	9804      	ldr	r0, [sp, #16]
 800696a:	f000 fbb3 	bl	80070d4 <__mcmp>
 800696e:	2800      	cmp	r0, #0
 8006970:	da24      	bge.n	80069bc <_dtoa_r+0x8c4>
 8006972:	2300      	movs	r3, #0
 8006974:	220a      	movs	r2, #10
 8006976:	9904      	ldr	r1, [sp, #16]
 8006978:	4620      	mov	r0, r4
 800697a:	f000 f9e1 	bl	8006d40 <__multadd>
 800697e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006980:	9004      	str	r0, [sp, #16]
 8006982:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 814d 	beq.w	8006c26 <_dtoa_r+0xb2e>
 800698c:	2300      	movs	r3, #0
 800698e:	4631      	mov	r1, r6
 8006990:	220a      	movs	r2, #10
 8006992:	4620      	mov	r0, r4
 8006994:	f000 f9d4 	bl	8006d40 <__multadd>
 8006998:	9b02      	ldr	r3, [sp, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	4606      	mov	r6, r0
 800699e:	dc4f      	bgt.n	8006a40 <_dtoa_r+0x948>
 80069a0:	9b06      	ldr	r3, [sp, #24]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	dd4c      	ble.n	8006a40 <_dtoa_r+0x948>
 80069a6:	e011      	b.n	80069cc <_dtoa_r+0x8d4>
 80069a8:	d0c9      	beq.n	800693e <_dtoa_r+0x846>
 80069aa:	9a05      	ldr	r2, [sp, #20]
 80069ac:	331c      	adds	r3, #28
 80069ae:	441a      	add	r2, r3
 80069b0:	9205      	str	r2, [sp, #20]
 80069b2:	441d      	add	r5, r3
 80069b4:	4498      	add	r8, r3
 80069b6:	e7c2      	b.n	800693e <_dtoa_r+0x846>
 80069b8:	4603      	mov	r3, r0
 80069ba:	e7f6      	b.n	80069aa <_dtoa_r+0x8b2>
 80069bc:	f1b9 0f00 	cmp.w	r9, #0
 80069c0:	dc38      	bgt.n	8006a34 <_dtoa_r+0x93c>
 80069c2:	9b06      	ldr	r3, [sp, #24]
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	dd35      	ble.n	8006a34 <_dtoa_r+0x93c>
 80069c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80069cc:	9b02      	ldr	r3, [sp, #8]
 80069ce:	b963      	cbnz	r3, 80069ea <_dtoa_r+0x8f2>
 80069d0:	4639      	mov	r1, r7
 80069d2:	2205      	movs	r2, #5
 80069d4:	4620      	mov	r0, r4
 80069d6:	f000 f9b3 	bl	8006d40 <__multadd>
 80069da:	4601      	mov	r1, r0
 80069dc:	4607      	mov	r7, r0
 80069de:	9804      	ldr	r0, [sp, #16]
 80069e0:	f000 fb78 	bl	80070d4 <__mcmp>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	f73f adcc 	bgt.w	8006582 <_dtoa_r+0x48a>
 80069ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ec:	465d      	mov	r5, fp
 80069ee:	ea6f 0a03 	mvn.w	sl, r3
 80069f2:	f04f 0900 	mov.w	r9, #0
 80069f6:	4639      	mov	r1, r7
 80069f8:	4620      	mov	r0, r4
 80069fa:	f000 f98a 	bl	8006d12 <_Bfree>
 80069fe:	2e00      	cmp	r6, #0
 8006a00:	f43f aeb7 	beq.w	8006772 <_dtoa_r+0x67a>
 8006a04:	f1b9 0f00 	cmp.w	r9, #0
 8006a08:	d005      	beq.n	8006a16 <_dtoa_r+0x91e>
 8006a0a:	45b1      	cmp	r9, r6
 8006a0c:	d003      	beq.n	8006a16 <_dtoa_r+0x91e>
 8006a0e:	4649      	mov	r1, r9
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 f97e 	bl	8006d12 <_Bfree>
 8006a16:	4631      	mov	r1, r6
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f000 f97a 	bl	8006d12 <_Bfree>
 8006a1e:	e6a8      	b.n	8006772 <_dtoa_r+0x67a>
 8006a20:	2700      	movs	r7, #0
 8006a22:	463e      	mov	r6, r7
 8006a24:	e7e1      	b.n	80069ea <_dtoa_r+0x8f2>
 8006a26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006a2a:	463e      	mov	r6, r7
 8006a2c:	e5a9      	b.n	8006582 <_dtoa_r+0x48a>
 8006a2e:	bf00      	nop
 8006a30:	40240000 	.word	0x40240000
 8006a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a36:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 80fa 	beq.w	8006c34 <_dtoa_r+0xb3c>
 8006a40:	2d00      	cmp	r5, #0
 8006a42:	dd05      	ble.n	8006a50 <_dtoa_r+0x958>
 8006a44:	4631      	mov	r1, r6
 8006a46:	462a      	mov	r2, r5
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f000 faef 	bl	800702c <__lshift>
 8006a4e:	4606      	mov	r6, r0
 8006a50:	9b07      	ldr	r3, [sp, #28]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d04c      	beq.n	8006af0 <_dtoa_r+0x9f8>
 8006a56:	6871      	ldr	r1, [r6, #4]
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f000 f926 	bl	8006caa <_Balloc>
 8006a5e:	6932      	ldr	r2, [r6, #16]
 8006a60:	3202      	adds	r2, #2
 8006a62:	4605      	mov	r5, r0
 8006a64:	0092      	lsls	r2, r2, #2
 8006a66:	f106 010c 	add.w	r1, r6, #12
 8006a6a:	300c      	adds	r0, #12
 8006a6c:	f000 f912 	bl	8006c94 <memcpy>
 8006a70:	2201      	movs	r2, #1
 8006a72:	4629      	mov	r1, r5
 8006a74:	4620      	mov	r0, r4
 8006a76:	f000 fad9 	bl	800702c <__lshift>
 8006a7a:	9b00      	ldr	r3, [sp, #0]
 8006a7c:	f8cd b014 	str.w	fp, [sp, #20]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	46b1      	mov	r9, r6
 8006a86:	9307      	str	r3, [sp, #28]
 8006a88:	4606      	mov	r6, r0
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	9804      	ldr	r0, [sp, #16]
 8006a8e:	f7ff faa7 	bl	8005fe0 <quorem>
 8006a92:	4649      	mov	r1, r9
 8006a94:	4605      	mov	r5, r0
 8006a96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006a9a:	9804      	ldr	r0, [sp, #16]
 8006a9c:	f000 fb1a 	bl	80070d4 <__mcmp>
 8006aa0:	4632      	mov	r2, r6
 8006aa2:	9000      	str	r0, [sp, #0]
 8006aa4:	4639      	mov	r1, r7
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f000 fb2e 	bl	8007108 <__mdiff>
 8006aac:	68c3      	ldr	r3, [r0, #12]
 8006aae:	4602      	mov	r2, r0
 8006ab0:	bb03      	cbnz	r3, 8006af4 <_dtoa_r+0x9fc>
 8006ab2:	4601      	mov	r1, r0
 8006ab4:	9008      	str	r0, [sp, #32]
 8006ab6:	9804      	ldr	r0, [sp, #16]
 8006ab8:	f000 fb0c 	bl	80070d4 <__mcmp>
 8006abc:	9a08      	ldr	r2, [sp, #32]
 8006abe:	4603      	mov	r3, r0
 8006ac0:	4611      	mov	r1, r2
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	9308      	str	r3, [sp, #32]
 8006ac6:	f000 f924 	bl	8006d12 <_Bfree>
 8006aca:	9b08      	ldr	r3, [sp, #32]
 8006acc:	b9a3      	cbnz	r3, 8006af8 <_dtoa_r+0xa00>
 8006ace:	9a06      	ldr	r2, [sp, #24]
 8006ad0:	b992      	cbnz	r2, 8006af8 <_dtoa_r+0xa00>
 8006ad2:	9a07      	ldr	r2, [sp, #28]
 8006ad4:	b982      	cbnz	r2, 8006af8 <_dtoa_r+0xa00>
 8006ad6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006ada:	d029      	beq.n	8006b30 <_dtoa_r+0xa38>
 8006adc:	9b00      	ldr	r3, [sp, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	dd01      	ble.n	8006ae6 <_dtoa_r+0x9ee>
 8006ae2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006ae6:	9b05      	ldr	r3, [sp, #20]
 8006ae8:	1c5d      	adds	r5, r3, #1
 8006aea:	f883 8000 	strb.w	r8, [r3]
 8006aee:	e782      	b.n	80069f6 <_dtoa_r+0x8fe>
 8006af0:	4630      	mov	r0, r6
 8006af2:	e7c2      	b.n	8006a7a <_dtoa_r+0x982>
 8006af4:	2301      	movs	r3, #1
 8006af6:	e7e3      	b.n	8006ac0 <_dtoa_r+0x9c8>
 8006af8:	9a00      	ldr	r2, [sp, #0]
 8006afa:	2a00      	cmp	r2, #0
 8006afc:	db04      	blt.n	8006b08 <_dtoa_r+0xa10>
 8006afe:	d125      	bne.n	8006b4c <_dtoa_r+0xa54>
 8006b00:	9a06      	ldr	r2, [sp, #24]
 8006b02:	bb1a      	cbnz	r2, 8006b4c <_dtoa_r+0xa54>
 8006b04:	9a07      	ldr	r2, [sp, #28]
 8006b06:	bb0a      	cbnz	r2, 8006b4c <_dtoa_r+0xa54>
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	ddec      	ble.n	8006ae6 <_dtoa_r+0x9ee>
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	9904      	ldr	r1, [sp, #16]
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 fa8b 	bl	800702c <__lshift>
 8006b16:	4639      	mov	r1, r7
 8006b18:	9004      	str	r0, [sp, #16]
 8006b1a:	f000 fadb 	bl	80070d4 <__mcmp>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	dc03      	bgt.n	8006b2a <_dtoa_r+0xa32>
 8006b22:	d1e0      	bne.n	8006ae6 <_dtoa_r+0x9ee>
 8006b24:	f018 0f01 	tst.w	r8, #1
 8006b28:	d0dd      	beq.n	8006ae6 <_dtoa_r+0x9ee>
 8006b2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b2e:	d1d8      	bne.n	8006ae2 <_dtoa_r+0x9ea>
 8006b30:	9b05      	ldr	r3, [sp, #20]
 8006b32:	9a05      	ldr	r2, [sp, #20]
 8006b34:	1c5d      	adds	r5, r3, #1
 8006b36:	2339      	movs	r3, #57	; 0x39
 8006b38:	7013      	strb	r3, [r2, #0]
 8006b3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b3e:	2b39      	cmp	r3, #57	; 0x39
 8006b40:	f105 32ff 	add.w	r2, r5, #4294967295
 8006b44:	d04f      	beq.n	8006be6 <_dtoa_r+0xaee>
 8006b46:	3301      	adds	r3, #1
 8006b48:	7013      	strb	r3, [r2, #0]
 8006b4a:	e754      	b.n	80069f6 <_dtoa_r+0x8fe>
 8006b4c:	9a05      	ldr	r2, [sp, #20]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f102 0501 	add.w	r5, r2, #1
 8006b54:	dd06      	ble.n	8006b64 <_dtoa_r+0xa6c>
 8006b56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b5a:	d0e9      	beq.n	8006b30 <_dtoa_r+0xa38>
 8006b5c:	f108 0801 	add.w	r8, r8, #1
 8006b60:	9b05      	ldr	r3, [sp, #20]
 8006b62:	e7c2      	b.n	8006aea <_dtoa_r+0x9f2>
 8006b64:	9a02      	ldr	r2, [sp, #8]
 8006b66:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006b6a:	eba5 030b 	sub.w	r3, r5, fp
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d021      	beq.n	8006bb6 <_dtoa_r+0xabe>
 8006b72:	2300      	movs	r3, #0
 8006b74:	220a      	movs	r2, #10
 8006b76:	9904      	ldr	r1, [sp, #16]
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f000 f8e1 	bl	8006d40 <__multadd>
 8006b7e:	45b1      	cmp	r9, r6
 8006b80:	9004      	str	r0, [sp, #16]
 8006b82:	f04f 0300 	mov.w	r3, #0
 8006b86:	f04f 020a 	mov.w	r2, #10
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	d105      	bne.n	8006b9c <_dtoa_r+0xaa4>
 8006b90:	f000 f8d6 	bl	8006d40 <__multadd>
 8006b94:	4681      	mov	r9, r0
 8006b96:	4606      	mov	r6, r0
 8006b98:	9505      	str	r5, [sp, #20]
 8006b9a:	e776      	b.n	8006a8a <_dtoa_r+0x992>
 8006b9c:	f000 f8d0 	bl	8006d40 <__multadd>
 8006ba0:	4631      	mov	r1, r6
 8006ba2:	4681      	mov	r9, r0
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	220a      	movs	r2, #10
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 f8c9 	bl	8006d40 <__multadd>
 8006bae:	4606      	mov	r6, r0
 8006bb0:	e7f2      	b.n	8006b98 <_dtoa_r+0xaa0>
 8006bb2:	f04f 0900 	mov.w	r9, #0
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	9904      	ldr	r1, [sp, #16]
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f000 fa36 	bl	800702c <__lshift>
 8006bc0:	4639      	mov	r1, r7
 8006bc2:	9004      	str	r0, [sp, #16]
 8006bc4:	f000 fa86 	bl	80070d4 <__mcmp>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	dcb6      	bgt.n	8006b3a <_dtoa_r+0xa42>
 8006bcc:	d102      	bne.n	8006bd4 <_dtoa_r+0xadc>
 8006bce:	f018 0f01 	tst.w	r8, #1
 8006bd2:	d1b2      	bne.n	8006b3a <_dtoa_r+0xa42>
 8006bd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bd8:	2b30      	cmp	r3, #48	; 0x30
 8006bda:	f105 32ff 	add.w	r2, r5, #4294967295
 8006bde:	f47f af0a 	bne.w	80069f6 <_dtoa_r+0x8fe>
 8006be2:	4615      	mov	r5, r2
 8006be4:	e7f6      	b.n	8006bd4 <_dtoa_r+0xadc>
 8006be6:	4593      	cmp	fp, r2
 8006be8:	d105      	bne.n	8006bf6 <_dtoa_r+0xafe>
 8006bea:	2331      	movs	r3, #49	; 0x31
 8006bec:	f10a 0a01 	add.w	sl, sl, #1
 8006bf0:	f88b 3000 	strb.w	r3, [fp]
 8006bf4:	e6ff      	b.n	80069f6 <_dtoa_r+0x8fe>
 8006bf6:	4615      	mov	r5, r2
 8006bf8:	e79f      	b.n	8006b3a <_dtoa_r+0xa42>
 8006bfa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006c60 <_dtoa_r+0xb68>
 8006bfe:	e007      	b.n	8006c10 <_dtoa_r+0xb18>
 8006c00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c02:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006c64 <_dtoa_r+0xb6c>
 8006c06:	b11b      	cbz	r3, 8006c10 <_dtoa_r+0xb18>
 8006c08:	f10b 0308 	add.w	r3, fp, #8
 8006c0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	4658      	mov	r0, fp
 8006c12:	b017      	add	sp, #92	; 0x5c
 8006c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c18:	9b06      	ldr	r3, [sp, #24]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	f77f ae35 	ble.w	800688a <_dtoa_r+0x792>
 8006c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c22:	9307      	str	r3, [sp, #28]
 8006c24:	e649      	b.n	80068ba <_dtoa_r+0x7c2>
 8006c26:	9b02      	ldr	r3, [sp, #8]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	dc03      	bgt.n	8006c34 <_dtoa_r+0xb3c>
 8006c2c:	9b06      	ldr	r3, [sp, #24]
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	f73f aecc 	bgt.w	80069cc <_dtoa_r+0x8d4>
 8006c34:	465d      	mov	r5, fp
 8006c36:	4639      	mov	r1, r7
 8006c38:	9804      	ldr	r0, [sp, #16]
 8006c3a:	f7ff f9d1 	bl	8005fe0 <quorem>
 8006c3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006c42:	f805 8b01 	strb.w	r8, [r5], #1
 8006c46:	9a02      	ldr	r2, [sp, #8]
 8006c48:	eba5 030b 	sub.w	r3, r5, fp
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	ddb0      	ble.n	8006bb2 <_dtoa_r+0xaba>
 8006c50:	2300      	movs	r3, #0
 8006c52:	220a      	movs	r2, #10
 8006c54:	9904      	ldr	r1, [sp, #16]
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 f872 	bl	8006d40 <__multadd>
 8006c5c:	9004      	str	r0, [sp, #16]
 8006c5e:	e7ea      	b.n	8006c36 <_dtoa_r+0xb3e>
 8006c60:	08007878 	.word	0x08007878
 8006c64:	0800789c 	.word	0x0800789c

08006c68 <_localeconv_r>:
 8006c68:	4b04      	ldr	r3, [pc, #16]	; (8006c7c <_localeconv_r+0x14>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6a18      	ldr	r0, [r3, #32]
 8006c6e:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <_localeconv_r+0x18>)
 8006c70:	2800      	cmp	r0, #0
 8006c72:	bf08      	it	eq
 8006c74:	4618      	moveq	r0, r3
 8006c76:	30f0      	adds	r0, #240	; 0xf0
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	20000024 	.word	0x20000024
 8006c80:	20000088 	.word	0x20000088

08006c84 <malloc>:
 8006c84:	4b02      	ldr	r3, [pc, #8]	; (8006c90 <malloc+0xc>)
 8006c86:	4601      	mov	r1, r0
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	f000 bb45 	b.w	8007318 <_malloc_r>
 8006c8e:	bf00      	nop
 8006c90:	20000024 	.word	0x20000024

08006c94 <memcpy>:
 8006c94:	b510      	push	{r4, lr}
 8006c96:	1e43      	subs	r3, r0, #1
 8006c98:	440a      	add	r2, r1
 8006c9a:	4291      	cmp	r1, r2
 8006c9c:	d100      	bne.n	8006ca0 <memcpy+0xc>
 8006c9e:	bd10      	pop	{r4, pc}
 8006ca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ca8:	e7f7      	b.n	8006c9a <memcpy+0x6>

08006caa <_Balloc>:
 8006caa:	b570      	push	{r4, r5, r6, lr}
 8006cac:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006cae:	4604      	mov	r4, r0
 8006cb0:	460e      	mov	r6, r1
 8006cb2:	b93d      	cbnz	r5, 8006cc4 <_Balloc+0x1a>
 8006cb4:	2010      	movs	r0, #16
 8006cb6:	f7ff ffe5 	bl	8006c84 <malloc>
 8006cba:	6260      	str	r0, [r4, #36]	; 0x24
 8006cbc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006cc0:	6005      	str	r5, [r0, #0]
 8006cc2:	60c5      	str	r5, [r0, #12]
 8006cc4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006cc6:	68eb      	ldr	r3, [r5, #12]
 8006cc8:	b183      	cbz	r3, 8006cec <_Balloc+0x42>
 8006cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006cd2:	b9b8      	cbnz	r0, 8006d04 <_Balloc+0x5a>
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	fa01 f506 	lsl.w	r5, r1, r6
 8006cda:	1d6a      	adds	r2, r5, #5
 8006cdc:	0092      	lsls	r2, r2, #2
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f000 fabe 	bl	8007260 <_calloc_r>
 8006ce4:	b160      	cbz	r0, 8006d00 <_Balloc+0x56>
 8006ce6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006cea:	e00e      	b.n	8006d0a <_Balloc+0x60>
 8006cec:	2221      	movs	r2, #33	; 0x21
 8006cee:	2104      	movs	r1, #4
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f000 fab5 	bl	8007260 <_calloc_r>
 8006cf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cf8:	60e8      	str	r0, [r5, #12]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1e4      	bne.n	8006cca <_Balloc+0x20>
 8006d00:	2000      	movs	r0, #0
 8006d02:	bd70      	pop	{r4, r5, r6, pc}
 8006d04:	6802      	ldr	r2, [r0, #0]
 8006d06:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d10:	e7f7      	b.n	8006d02 <_Balloc+0x58>

08006d12 <_Bfree>:
 8006d12:	b570      	push	{r4, r5, r6, lr}
 8006d14:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006d16:	4606      	mov	r6, r0
 8006d18:	460d      	mov	r5, r1
 8006d1a:	b93c      	cbnz	r4, 8006d2c <_Bfree+0x1a>
 8006d1c:	2010      	movs	r0, #16
 8006d1e:	f7ff ffb1 	bl	8006c84 <malloc>
 8006d22:	6270      	str	r0, [r6, #36]	; 0x24
 8006d24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d28:	6004      	str	r4, [r0, #0]
 8006d2a:	60c4      	str	r4, [r0, #12]
 8006d2c:	b13d      	cbz	r5, 8006d3e <_Bfree+0x2c>
 8006d2e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006d30:	686a      	ldr	r2, [r5, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d38:	6029      	str	r1, [r5, #0]
 8006d3a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}

08006d40 <__multadd>:
 8006d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d44:	690d      	ldr	r5, [r1, #16]
 8006d46:	461f      	mov	r7, r3
 8006d48:	4606      	mov	r6, r0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	f101 0c14 	add.w	ip, r1, #20
 8006d50:	2300      	movs	r3, #0
 8006d52:	f8dc 0000 	ldr.w	r0, [ip]
 8006d56:	b281      	uxth	r1, r0
 8006d58:	fb02 7101 	mla	r1, r2, r1, r7
 8006d5c:	0c0f      	lsrs	r7, r1, #16
 8006d5e:	0c00      	lsrs	r0, r0, #16
 8006d60:	fb02 7000 	mla	r0, r2, r0, r7
 8006d64:	b289      	uxth	r1, r1
 8006d66:	3301      	adds	r3, #1
 8006d68:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006d6c:	429d      	cmp	r5, r3
 8006d6e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006d72:	f84c 1b04 	str.w	r1, [ip], #4
 8006d76:	dcec      	bgt.n	8006d52 <__multadd+0x12>
 8006d78:	b1d7      	cbz	r7, 8006db0 <__multadd+0x70>
 8006d7a:	68a3      	ldr	r3, [r4, #8]
 8006d7c:	42ab      	cmp	r3, r5
 8006d7e:	dc12      	bgt.n	8006da6 <__multadd+0x66>
 8006d80:	6861      	ldr	r1, [r4, #4]
 8006d82:	4630      	mov	r0, r6
 8006d84:	3101      	adds	r1, #1
 8006d86:	f7ff ff90 	bl	8006caa <_Balloc>
 8006d8a:	6922      	ldr	r2, [r4, #16]
 8006d8c:	3202      	adds	r2, #2
 8006d8e:	f104 010c 	add.w	r1, r4, #12
 8006d92:	4680      	mov	r8, r0
 8006d94:	0092      	lsls	r2, r2, #2
 8006d96:	300c      	adds	r0, #12
 8006d98:	f7ff ff7c 	bl	8006c94 <memcpy>
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	4630      	mov	r0, r6
 8006da0:	f7ff ffb7 	bl	8006d12 <_Bfree>
 8006da4:	4644      	mov	r4, r8
 8006da6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006daa:	3501      	adds	r5, #1
 8006dac:	615f      	str	r7, [r3, #20]
 8006dae:	6125      	str	r5, [r4, #16]
 8006db0:	4620      	mov	r0, r4
 8006db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006db6 <__hi0bits>:
 8006db6:	0c02      	lsrs	r2, r0, #16
 8006db8:	0412      	lsls	r2, r2, #16
 8006dba:	4603      	mov	r3, r0
 8006dbc:	b9b2      	cbnz	r2, 8006dec <__hi0bits+0x36>
 8006dbe:	0403      	lsls	r3, r0, #16
 8006dc0:	2010      	movs	r0, #16
 8006dc2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006dc6:	bf04      	itt	eq
 8006dc8:	021b      	lsleq	r3, r3, #8
 8006dca:	3008      	addeq	r0, #8
 8006dcc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006dd0:	bf04      	itt	eq
 8006dd2:	011b      	lsleq	r3, r3, #4
 8006dd4:	3004      	addeq	r0, #4
 8006dd6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006dda:	bf04      	itt	eq
 8006ddc:	009b      	lsleq	r3, r3, #2
 8006dde:	3002      	addeq	r0, #2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	db06      	blt.n	8006df2 <__hi0bits+0x3c>
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	d503      	bpl.n	8006df0 <__hi0bits+0x3a>
 8006de8:	3001      	adds	r0, #1
 8006dea:	4770      	bx	lr
 8006dec:	2000      	movs	r0, #0
 8006dee:	e7e8      	b.n	8006dc2 <__hi0bits+0xc>
 8006df0:	2020      	movs	r0, #32
 8006df2:	4770      	bx	lr

08006df4 <__lo0bits>:
 8006df4:	6803      	ldr	r3, [r0, #0]
 8006df6:	f013 0207 	ands.w	r2, r3, #7
 8006dfa:	4601      	mov	r1, r0
 8006dfc:	d00b      	beq.n	8006e16 <__lo0bits+0x22>
 8006dfe:	07da      	lsls	r2, r3, #31
 8006e00:	d423      	bmi.n	8006e4a <__lo0bits+0x56>
 8006e02:	0798      	lsls	r0, r3, #30
 8006e04:	bf49      	itett	mi
 8006e06:	085b      	lsrmi	r3, r3, #1
 8006e08:	089b      	lsrpl	r3, r3, #2
 8006e0a:	2001      	movmi	r0, #1
 8006e0c:	600b      	strmi	r3, [r1, #0]
 8006e0e:	bf5c      	itt	pl
 8006e10:	600b      	strpl	r3, [r1, #0]
 8006e12:	2002      	movpl	r0, #2
 8006e14:	4770      	bx	lr
 8006e16:	b298      	uxth	r0, r3
 8006e18:	b9a8      	cbnz	r0, 8006e46 <__lo0bits+0x52>
 8006e1a:	0c1b      	lsrs	r3, r3, #16
 8006e1c:	2010      	movs	r0, #16
 8006e1e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006e22:	bf04      	itt	eq
 8006e24:	0a1b      	lsreq	r3, r3, #8
 8006e26:	3008      	addeq	r0, #8
 8006e28:	071a      	lsls	r2, r3, #28
 8006e2a:	bf04      	itt	eq
 8006e2c:	091b      	lsreq	r3, r3, #4
 8006e2e:	3004      	addeq	r0, #4
 8006e30:	079a      	lsls	r2, r3, #30
 8006e32:	bf04      	itt	eq
 8006e34:	089b      	lsreq	r3, r3, #2
 8006e36:	3002      	addeq	r0, #2
 8006e38:	07da      	lsls	r2, r3, #31
 8006e3a:	d402      	bmi.n	8006e42 <__lo0bits+0x4e>
 8006e3c:	085b      	lsrs	r3, r3, #1
 8006e3e:	d006      	beq.n	8006e4e <__lo0bits+0x5a>
 8006e40:	3001      	adds	r0, #1
 8006e42:	600b      	str	r3, [r1, #0]
 8006e44:	4770      	bx	lr
 8006e46:	4610      	mov	r0, r2
 8006e48:	e7e9      	b.n	8006e1e <__lo0bits+0x2a>
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	4770      	bx	lr
 8006e4e:	2020      	movs	r0, #32
 8006e50:	4770      	bx	lr

08006e52 <__i2b>:
 8006e52:	b510      	push	{r4, lr}
 8006e54:	460c      	mov	r4, r1
 8006e56:	2101      	movs	r1, #1
 8006e58:	f7ff ff27 	bl	8006caa <_Balloc>
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	6144      	str	r4, [r0, #20]
 8006e60:	6102      	str	r2, [r0, #16]
 8006e62:	bd10      	pop	{r4, pc}

08006e64 <__multiply>:
 8006e64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e68:	4614      	mov	r4, r2
 8006e6a:	690a      	ldr	r2, [r1, #16]
 8006e6c:	6923      	ldr	r3, [r4, #16]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	bfb8      	it	lt
 8006e72:	460b      	movlt	r3, r1
 8006e74:	4688      	mov	r8, r1
 8006e76:	bfbc      	itt	lt
 8006e78:	46a0      	movlt	r8, r4
 8006e7a:	461c      	movlt	r4, r3
 8006e7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e80:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006e84:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e8c:	eb07 0609 	add.w	r6, r7, r9
 8006e90:	42b3      	cmp	r3, r6
 8006e92:	bfb8      	it	lt
 8006e94:	3101      	addlt	r1, #1
 8006e96:	f7ff ff08 	bl	8006caa <_Balloc>
 8006e9a:	f100 0514 	add.w	r5, r0, #20
 8006e9e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006ea2:	462b      	mov	r3, r5
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	4573      	cmp	r3, lr
 8006ea8:	d316      	bcc.n	8006ed8 <__multiply+0x74>
 8006eaa:	f104 0214 	add.w	r2, r4, #20
 8006eae:	f108 0114 	add.w	r1, r8, #20
 8006eb2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006eb6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	9b00      	ldr	r3, [sp, #0]
 8006ebe:	9201      	str	r2, [sp, #4]
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d80c      	bhi.n	8006ede <__multiply+0x7a>
 8006ec4:	2e00      	cmp	r6, #0
 8006ec6:	dd03      	ble.n	8006ed0 <__multiply+0x6c>
 8006ec8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d05d      	beq.n	8006f8c <__multiply+0x128>
 8006ed0:	6106      	str	r6, [r0, #16]
 8006ed2:	b003      	add	sp, #12
 8006ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed8:	f843 2b04 	str.w	r2, [r3], #4
 8006edc:	e7e3      	b.n	8006ea6 <__multiply+0x42>
 8006ede:	f8b2 b000 	ldrh.w	fp, [r2]
 8006ee2:	f1bb 0f00 	cmp.w	fp, #0
 8006ee6:	d023      	beq.n	8006f30 <__multiply+0xcc>
 8006ee8:	4689      	mov	r9, r1
 8006eea:	46ac      	mov	ip, r5
 8006eec:	f04f 0800 	mov.w	r8, #0
 8006ef0:	f859 4b04 	ldr.w	r4, [r9], #4
 8006ef4:	f8dc a000 	ldr.w	sl, [ip]
 8006ef8:	b2a3      	uxth	r3, r4
 8006efa:	fa1f fa8a 	uxth.w	sl, sl
 8006efe:	fb0b a303 	mla	r3, fp, r3, sl
 8006f02:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006f06:	f8dc 4000 	ldr.w	r4, [ip]
 8006f0a:	4443      	add	r3, r8
 8006f0c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006f10:	fb0b 840a 	mla	r4, fp, sl, r8
 8006f14:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006f18:	46e2      	mov	sl, ip
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f20:	454f      	cmp	r7, r9
 8006f22:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006f26:	f84a 3b04 	str.w	r3, [sl], #4
 8006f2a:	d82b      	bhi.n	8006f84 <__multiply+0x120>
 8006f2c:	f8cc 8004 	str.w	r8, [ip, #4]
 8006f30:	9b01      	ldr	r3, [sp, #4]
 8006f32:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006f36:	3204      	adds	r2, #4
 8006f38:	f1ba 0f00 	cmp.w	sl, #0
 8006f3c:	d020      	beq.n	8006f80 <__multiply+0x11c>
 8006f3e:	682b      	ldr	r3, [r5, #0]
 8006f40:	4689      	mov	r9, r1
 8006f42:	46a8      	mov	r8, r5
 8006f44:	f04f 0b00 	mov.w	fp, #0
 8006f48:	f8b9 c000 	ldrh.w	ip, [r9]
 8006f4c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006f50:	fb0a 440c 	mla	r4, sl, ip, r4
 8006f54:	445c      	add	r4, fp
 8006f56:	46c4      	mov	ip, r8
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f5e:	f84c 3b04 	str.w	r3, [ip], #4
 8006f62:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f66:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006f6a:	0c1b      	lsrs	r3, r3, #16
 8006f6c:	fb0a b303 	mla	r3, sl, r3, fp
 8006f70:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006f74:	454f      	cmp	r7, r9
 8006f76:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006f7a:	d805      	bhi.n	8006f88 <__multiply+0x124>
 8006f7c:	f8c8 3004 	str.w	r3, [r8, #4]
 8006f80:	3504      	adds	r5, #4
 8006f82:	e79b      	b.n	8006ebc <__multiply+0x58>
 8006f84:	46d4      	mov	ip, sl
 8006f86:	e7b3      	b.n	8006ef0 <__multiply+0x8c>
 8006f88:	46e0      	mov	r8, ip
 8006f8a:	e7dd      	b.n	8006f48 <__multiply+0xe4>
 8006f8c:	3e01      	subs	r6, #1
 8006f8e:	e799      	b.n	8006ec4 <__multiply+0x60>

08006f90 <__pow5mult>:
 8006f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f94:	4615      	mov	r5, r2
 8006f96:	f012 0203 	ands.w	r2, r2, #3
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	460f      	mov	r7, r1
 8006f9e:	d007      	beq.n	8006fb0 <__pow5mult+0x20>
 8006fa0:	3a01      	subs	r2, #1
 8006fa2:	4c21      	ldr	r4, [pc, #132]	; (8007028 <__pow5mult+0x98>)
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006faa:	f7ff fec9 	bl	8006d40 <__multadd>
 8006fae:	4607      	mov	r7, r0
 8006fb0:	10ad      	asrs	r5, r5, #2
 8006fb2:	d035      	beq.n	8007020 <__pow5mult+0x90>
 8006fb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006fb6:	b93c      	cbnz	r4, 8006fc8 <__pow5mult+0x38>
 8006fb8:	2010      	movs	r0, #16
 8006fba:	f7ff fe63 	bl	8006c84 <malloc>
 8006fbe:	6270      	str	r0, [r6, #36]	; 0x24
 8006fc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fc4:	6004      	str	r4, [r0, #0]
 8006fc6:	60c4      	str	r4, [r0, #12]
 8006fc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006fcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fd0:	b94c      	cbnz	r4, 8006fe6 <__pow5mult+0x56>
 8006fd2:	f240 2171 	movw	r1, #625	; 0x271
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	f7ff ff3b 	bl	8006e52 <__i2b>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	6003      	str	r3, [r0, #0]
 8006fe6:	f04f 0800 	mov.w	r8, #0
 8006fea:	07eb      	lsls	r3, r5, #31
 8006fec:	d50a      	bpl.n	8007004 <__pow5mult+0x74>
 8006fee:	4639      	mov	r1, r7
 8006ff0:	4622      	mov	r2, r4
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f7ff ff36 	bl	8006e64 <__multiply>
 8006ff8:	4639      	mov	r1, r7
 8006ffa:	4681      	mov	r9, r0
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	f7ff fe88 	bl	8006d12 <_Bfree>
 8007002:	464f      	mov	r7, r9
 8007004:	106d      	asrs	r5, r5, #1
 8007006:	d00b      	beq.n	8007020 <__pow5mult+0x90>
 8007008:	6820      	ldr	r0, [r4, #0]
 800700a:	b938      	cbnz	r0, 800701c <__pow5mult+0x8c>
 800700c:	4622      	mov	r2, r4
 800700e:	4621      	mov	r1, r4
 8007010:	4630      	mov	r0, r6
 8007012:	f7ff ff27 	bl	8006e64 <__multiply>
 8007016:	6020      	str	r0, [r4, #0]
 8007018:	f8c0 8000 	str.w	r8, [r0]
 800701c:	4604      	mov	r4, r0
 800701e:	e7e4      	b.n	8006fea <__pow5mult+0x5a>
 8007020:	4638      	mov	r0, r7
 8007022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007026:	bf00      	nop
 8007028:	080079a0 	.word	0x080079a0

0800702c <__lshift>:
 800702c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007030:	460c      	mov	r4, r1
 8007032:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007036:	6923      	ldr	r3, [r4, #16]
 8007038:	6849      	ldr	r1, [r1, #4]
 800703a:	eb0a 0903 	add.w	r9, sl, r3
 800703e:	68a3      	ldr	r3, [r4, #8]
 8007040:	4607      	mov	r7, r0
 8007042:	4616      	mov	r6, r2
 8007044:	f109 0501 	add.w	r5, r9, #1
 8007048:	42ab      	cmp	r3, r5
 800704a:	db32      	blt.n	80070b2 <__lshift+0x86>
 800704c:	4638      	mov	r0, r7
 800704e:	f7ff fe2c 	bl	8006caa <_Balloc>
 8007052:	2300      	movs	r3, #0
 8007054:	4680      	mov	r8, r0
 8007056:	f100 0114 	add.w	r1, r0, #20
 800705a:	461a      	mov	r2, r3
 800705c:	4553      	cmp	r3, sl
 800705e:	db2b      	blt.n	80070b8 <__lshift+0x8c>
 8007060:	6920      	ldr	r0, [r4, #16]
 8007062:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007066:	f104 0314 	add.w	r3, r4, #20
 800706a:	f016 021f 	ands.w	r2, r6, #31
 800706e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007072:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007076:	d025      	beq.n	80070c4 <__lshift+0x98>
 8007078:	f1c2 0e20 	rsb	lr, r2, #32
 800707c:	2000      	movs	r0, #0
 800707e:	681e      	ldr	r6, [r3, #0]
 8007080:	468a      	mov	sl, r1
 8007082:	4096      	lsls	r6, r2
 8007084:	4330      	orrs	r0, r6
 8007086:	f84a 0b04 	str.w	r0, [sl], #4
 800708a:	f853 0b04 	ldr.w	r0, [r3], #4
 800708e:	459c      	cmp	ip, r3
 8007090:	fa20 f00e 	lsr.w	r0, r0, lr
 8007094:	d814      	bhi.n	80070c0 <__lshift+0x94>
 8007096:	6048      	str	r0, [r1, #4]
 8007098:	b108      	cbz	r0, 800709e <__lshift+0x72>
 800709a:	f109 0502 	add.w	r5, r9, #2
 800709e:	3d01      	subs	r5, #1
 80070a0:	4638      	mov	r0, r7
 80070a2:	f8c8 5010 	str.w	r5, [r8, #16]
 80070a6:	4621      	mov	r1, r4
 80070a8:	f7ff fe33 	bl	8006d12 <_Bfree>
 80070ac:	4640      	mov	r0, r8
 80070ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b2:	3101      	adds	r1, #1
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	e7c7      	b.n	8007048 <__lshift+0x1c>
 80070b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80070bc:	3301      	adds	r3, #1
 80070be:	e7cd      	b.n	800705c <__lshift+0x30>
 80070c0:	4651      	mov	r1, sl
 80070c2:	e7dc      	b.n	800707e <__lshift+0x52>
 80070c4:	3904      	subs	r1, #4
 80070c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80070ce:	459c      	cmp	ip, r3
 80070d0:	d8f9      	bhi.n	80070c6 <__lshift+0x9a>
 80070d2:	e7e4      	b.n	800709e <__lshift+0x72>

080070d4 <__mcmp>:
 80070d4:	6903      	ldr	r3, [r0, #16]
 80070d6:	690a      	ldr	r2, [r1, #16]
 80070d8:	1a9b      	subs	r3, r3, r2
 80070da:	b530      	push	{r4, r5, lr}
 80070dc:	d10c      	bne.n	80070f8 <__mcmp+0x24>
 80070de:	0092      	lsls	r2, r2, #2
 80070e0:	3014      	adds	r0, #20
 80070e2:	3114      	adds	r1, #20
 80070e4:	1884      	adds	r4, r0, r2
 80070e6:	4411      	add	r1, r2
 80070e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80070ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80070f0:	4295      	cmp	r5, r2
 80070f2:	d003      	beq.n	80070fc <__mcmp+0x28>
 80070f4:	d305      	bcc.n	8007102 <__mcmp+0x2e>
 80070f6:	2301      	movs	r3, #1
 80070f8:	4618      	mov	r0, r3
 80070fa:	bd30      	pop	{r4, r5, pc}
 80070fc:	42a0      	cmp	r0, r4
 80070fe:	d3f3      	bcc.n	80070e8 <__mcmp+0x14>
 8007100:	e7fa      	b.n	80070f8 <__mcmp+0x24>
 8007102:	f04f 33ff 	mov.w	r3, #4294967295
 8007106:	e7f7      	b.n	80070f8 <__mcmp+0x24>

08007108 <__mdiff>:
 8007108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800710c:	460d      	mov	r5, r1
 800710e:	4607      	mov	r7, r0
 8007110:	4611      	mov	r1, r2
 8007112:	4628      	mov	r0, r5
 8007114:	4614      	mov	r4, r2
 8007116:	f7ff ffdd 	bl	80070d4 <__mcmp>
 800711a:	1e06      	subs	r6, r0, #0
 800711c:	d108      	bne.n	8007130 <__mdiff+0x28>
 800711e:	4631      	mov	r1, r6
 8007120:	4638      	mov	r0, r7
 8007122:	f7ff fdc2 	bl	8006caa <_Balloc>
 8007126:	2301      	movs	r3, #1
 8007128:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800712c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007130:	bfa4      	itt	ge
 8007132:	4623      	movge	r3, r4
 8007134:	462c      	movge	r4, r5
 8007136:	4638      	mov	r0, r7
 8007138:	6861      	ldr	r1, [r4, #4]
 800713a:	bfa6      	itte	ge
 800713c:	461d      	movge	r5, r3
 800713e:	2600      	movge	r6, #0
 8007140:	2601      	movlt	r6, #1
 8007142:	f7ff fdb2 	bl	8006caa <_Balloc>
 8007146:	692b      	ldr	r3, [r5, #16]
 8007148:	60c6      	str	r6, [r0, #12]
 800714a:	6926      	ldr	r6, [r4, #16]
 800714c:	f105 0914 	add.w	r9, r5, #20
 8007150:	f104 0214 	add.w	r2, r4, #20
 8007154:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007158:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800715c:	f100 0514 	add.w	r5, r0, #20
 8007160:	f04f 0e00 	mov.w	lr, #0
 8007164:	f852 ab04 	ldr.w	sl, [r2], #4
 8007168:	f859 4b04 	ldr.w	r4, [r9], #4
 800716c:	fa1e f18a 	uxtah	r1, lr, sl
 8007170:	b2a3      	uxth	r3, r4
 8007172:	1ac9      	subs	r1, r1, r3
 8007174:	0c23      	lsrs	r3, r4, #16
 8007176:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800717a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800717e:	b289      	uxth	r1, r1
 8007180:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007184:	45c8      	cmp	r8, r9
 8007186:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800718a:	4694      	mov	ip, r2
 800718c:	f845 3b04 	str.w	r3, [r5], #4
 8007190:	d8e8      	bhi.n	8007164 <__mdiff+0x5c>
 8007192:	45bc      	cmp	ip, r7
 8007194:	d304      	bcc.n	80071a0 <__mdiff+0x98>
 8007196:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800719a:	b183      	cbz	r3, 80071be <__mdiff+0xb6>
 800719c:	6106      	str	r6, [r0, #16]
 800719e:	e7c5      	b.n	800712c <__mdiff+0x24>
 80071a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80071a4:	fa1e f381 	uxtah	r3, lr, r1
 80071a8:	141a      	asrs	r2, r3, #16
 80071aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071b4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80071b8:	f845 3b04 	str.w	r3, [r5], #4
 80071bc:	e7e9      	b.n	8007192 <__mdiff+0x8a>
 80071be:	3e01      	subs	r6, #1
 80071c0:	e7e9      	b.n	8007196 <__mdiff+0x8e>

080071c2 <__d2b>:
 80071c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80071c6:	460e      	mov	r6, r1
 80071c8:	2101      	movs	r1, #1
 80071ca:	ec59 8b10 	vmov	r8, r9, d0
 80071ce:	4615      	mov	r5, r2
 80071d0:	f7ff fd6b 	bl	8006caa <_Balloc>
 80071d4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80071d8:	4607      	mov	r7, r0
 80071da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071de:	bb34      	cbnz	r4, 800722e <__d2b+0x6c>
 80071e0:	9301      	str	r3, [sp, #4]
 80071e2:	f1b8 0300 	subs.w	r3, r8, #0
 80071e6:	d027      	beq.n	8007238 <__d2b+0x76>
 80071e8:	a802      	add	r0, sp, #8
 80071ea:	f840 3d08 	str.w	r3, [r0, #-8]!
 80071ee:	f7ff fe01 	bl	8006df4 <__lo0bits>
 80071f2:	9900      	ldr	r1, [sp, #0]
 80071f4:	b1f0      	cbz	r0, 8007234 <__d2b+0x72>
 80071f6:	9a01      	ldr	r2, [sp, #4]
 80071f8:	f1c0 0320 	rsb	r3, r0, #32
 80071fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007200:	430b      	orrs	r3, r1
 8007202:	40c2      	lsrs	r2, r0
 8007204:	617b      	str	r3, [r7, #20]
 8007206:	9201      	str	r2, [sp, #4]
 8007208:	9b01      	ldr	r3, [sp, #4]
 800720a:	61bb      	str	r3, [r7, #24]
 800720c:	2b00      	cmp	r3, #0
 800720e:	bf14      	ite	ne
 8007210:	2102      	movne	r1, #2
 8007212:	2101      	moveq	r1, #1
 8007214:	6139      	str	r1, [r7, #16]
 8007216:	b1c4      	cbz	r4, 800724a <__d2b+0x88>
 8007218:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800721c:	4404      	add	r4, r0
 800721e:	6034      	str	r4, [r6, #0]
 8007220:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007224:	6028      	str	r0, [r5, #0]
 8007226:	4638      	mov	r0, r7
 8007228:	b003      	add	sp, #12
 800722a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800722e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007232:	e7d5      	b.n	80071e0 <__d2b+0x1e>
 8007234:	6179      	str	r1, [r7, #20]
 8007236:	e7e7      	b.n	8007208 <__d2b+0x46>
 8007238:	a801      	add	r0, sp, #4
 800723a:	f7ff fddb 	bl	8006df4 <__lo0bits>
 800723e:	9b01      	ldr	r3, [sp, #4]
 8007240:	617b      	str	r3, [r7, #20]
 8007242:	2101      	movs	r1, #1
 8007244:	6139      	str	r1, [r7, #16]
 8007246:	3020      	adds	r0, #32
 8007248:	e7e5      	b.n	8007216 <__d2b+0x54>
 800724a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800724e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007252:	6030      	str	r0, [r6, #0]
 8007254:	6918      	ldr	r0, [r3, #16]
 8007256:	f7ff fdae 	bl	8006db6 <__hi0bits>
 800725a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800725e:	e7e1      	b.n	8007224 <__d2b+0x62>

08007260 <_calloc_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	fb02 f401 	mul.w	r4, r2, r1
 8007266:	4621      	mov	r1, r4
 8007268:	f000 f856 	bl	8007318 <_malloc_r>
 800726c:	4605      	mov	r5, r0
 800726e:	b118      	cbz	r0, 8007278 <_calloc_r+0x18>
 8007270:	4622      	mov	r2, r4
 8007272:	2100      	movs	r1, #0
 8007274:	f7fe fa30 	bl	80056d8 <memset>
 8007278:	4628      	mov	r0, r5
 800727a:	bd38      	pop	{r3, r4, r5, pc}

0800727c <_free_r>:
 800727c:	b538      	push	{r3, r4, r5, lr}
 800727e:	4605      	mov	r5, r0
 8007280:	2900      	cmp	r1, #0
 8007282:	d045      	beq.n	8007310 <_free_r+0x94>
 8007284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007288:	1f0c      	subs	r4, r1, #4
 800728a:	2b00      	cmp	r3, #0
 800728c:	bfb8      	it	lt
 800728e:	18e4      	addlt	r4, r4, r3
 8007290:	f000 fa29 	bl	80076e6 <__malloc_lock>
 8007294:	4a1f      	ldr	r2, [pc, #124]	; (8007314 <_free_r+0x98>)
 8007296:	6813      	ldr	r3, [r2, #0]
 8007298:	4610      	mov	r0, r2
 800729a:	b933      	cbnz	r3, 80072aa <_free_r+0x2e>
 800729c:	6063      	str	r3, [r4, #4]
 800729e:	6014      	str	r4, [r2, #0]
 80072a0:	4628      	mov	r0, r5
 80072a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072a6:	f000 ba1f 	b.w	80076e8 <__malloc_unlock>
 80072aa:	42a3      	cmp	r3, r4
 80072ac:	d90c      	bls.n	80072c8 <_free_r+0x4c>
 80072ae:	6821      	ldr	r1, [r4, #0]
 80072b0:	1862      	adds	r2, r4, r1
 80072b2:	4293      	cmp	r3, r2
 80072b4:	bf04      	itt	eq
 80072b6:	681a      	ldreq	r2, [r3, #0]
 80072b8:	685b      	ldreq	r3, [r3, #4]
 80072ba:	6063      	str	r3, [r4, #4]
 80072bc:	bf04      	itt	eq
 80072be:	1852      	addeq	r2, r2, r1
 80072c0:	6022      	streq	r2, [r4, #0]
 80072c2:	6004      	str	r4, [r0, #0]
 80072c4:	e7ec      	b.n	80072a0 <_free_r+0x24>
 80072c6:	4613      	mov	r3, r2
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	b10a      	cbz	r2, 80072d0 <_free_r+0x54>
 80072cc:	42a2      	cmp	r2, r4
 80072ce:	d9fa      	bls.n	80072c6 <_free_r+0x4a>
 80072d0:	6819      	ldr	r1, [r3, #0]
 80072d2:	1858      	adds	r0, r3, r1
 80072d4:	42a0      	cmp	r0, r4
 80072d6:	d10b      	bne.n	80072f0 <_free_r+0x74>
 80072d8:	6820      	ldr	r0, [r4, #0]
 80072da:	4401      	add	r1, r0
 80072dc:	1858      	adds	r0, r3, r1
 80072de:	4282      	cmp	r2, r0
 80072e0:	6019      	str	r1, [r3, #0]
 80072e2:	d1dd      	bne.n	80072a0 <_free_r+0x24>
 80072e4:	6810      	ldr	r0, [r2, #0]
 80072e6:	6852      	ldr	r2, [r2, #4]
 80072e8:	605a      	str	r2, [r3, #4]
 80072ea:	4401      	add	r1, r0
 80072ec:	6019      	str	r1, [r3, #0]
 80072ee:	e7d7      	b.n	80072a0 <_free_r+0x24>
 80072f0:	d902      	bls.n	80072f8 <_free_r+0x7c>
 80072f2:	230c      	movs	r3, #12
 80072f4:	602b      	str	r3, [r5, #0]
 80072f6:	e7d3      	b.n	80072a0 <_free_r+0x24>
 80072f8:	6820      	ldr	r0, [r4, #0]
 80072fa:	1821      	adds	r1, r4, r0
 80072fc:	428a      	cmp	r2, r1
 80072fe:	bf04      	itt	eq
 8007300:	6811      	ldreq	r1, [r2, #0]
 8007302:	6852      	ldreq	r2, [r2, #4]
 8007304:	6062      	str	r2, [r4, #4]
 8007306:	bf04      	itt	eq
 8007308:	1809      	addeq	r1, r1, r0
 800730a:	6021      	streq	r1, [r4, #0]
 800730c:	605c      	str	r4, [r3, #4]
 800730e:	e7c7      	b.n	80072a0 <_free_r+0x24>
 8007310:	bd38      	pop	{r3, r4, r5, pc}
 8007312:	bf00      	nop
 8007314:	2000027c 	.word	0x2000027c

08007318 <_malloc_r>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	1ccd      	adds	r5, r1, #3
 800731c:	f025 0503 	bic.w	r5, r5, #3
 8007320:	3508      	adds	r5, #8
 8007322:	2d0c      	cmp	r5, #12
 8007324:	bf38      	it	cc
 8007326:	250c      	movcc	r5, #12
 8007328:	2d00      	cmp	r5, #0
 800732a:	4606      	mov	r6, r0
 800732c:	db01      	blt.n	8007332 <_malloc_r+0x1a>
 800732e:	42a9      	cmp	r1, r5
 8007330:	d903      	bls.n	800733a <_malloc_r+0x22>
 8007332:	230c      	movs	r3, #12
 8007334:	6033      	str	r3, [r6, #0]
 8007336:	2000      	movs	r0, #0
 8007338:	bd70      	pop	{r4, r5, r6, pc}
 800733a:	f000 f9d4 	bl	80076e6 <__malloc_lock>
 800733e:	4a21      	ldr	r2, [pc, #132]	; (80073c4 <_malloc_r+0xac>)
 8007340:	6814      	ldr	r4, [r2, #0]
 8007342:	4621      	mov	r1, r4
 8007344:	b991      	cbnz	r1, 800736c <_malloc_r+0x54>
 8007346:	4c20      	ldr	r4, [pc, #128]	; (80073c8 <_malloc_r+0xb0>)
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	b91b      	cbnz	r3, 8007354 <_malloc_r+0x3c>
 800734c:	4630      	mov	r0, r6
 800734e:	f000 f98f 	bl	8007670 <_sbrk_r>
 8007352:	6020      	str	r0, [r4, #0]
 8007354:	4629      	mov	r1, r5
 8007356:	4630      	mov	r0, r6
 8007358:	f000 f98a 	bl	8007670 <_sbrk_r>
 800735c:	1c43      	adds	r3, r0, #1
 800735e:	d124      	bne.n	80073aa <_malloc_r+0x92>
 8007360:	230c      	movs	r3, #12
 8007362:	6033      	str	r3, [r6, #0]
 8007364:	4630      	mov	r0, r6
 8007366:	f000 f9bf 	bl	80076e8 <__malloc_unlock>
 800736a:	e7e4      	b.n	8007336 <_malloc_r+0x1e>
 800736c:	680b      	ldr	r3, [r1, #0]
 800736e:	1b5b      	subs	r3, r3, r5
 8007370:	d418      	bmi.n	80073a4 <_malloc_r+0x8c>
 8007372:	2b0b      	cmp	r3, #11
 8007374:	d90f      	bls.n	8007396 <_malloc_r+0x7e>
 8007376:	600b      	str	r3, [r1, #0]
 8007378:	50cd      	str	r5, [r1, r3]
 800737a:	18cc      	adds	r4, r1, r3
 800737c:	4630      	mov	r0, r6
 800737e:	f000 f9b3 	bl	80076e8 <__malloc_unlock>
 8007382:	f104 000b 	add.w	r0, r4, #11
 8007386:	1d23      	adds	r3, r4, #4
 8007388:	f020 0007 	bic.w	r0, r0, #7
 800738c:	1ac3      	subs	r3, r0, r3
 800738e:	d0d3      	beq.n	8007338 <_malloc_r+0x20>
 8007390:	425a      	negs	r2, r3
 8007392:	50e2      	str	r2, [r4, r3]
 8007394:	e7d0      	b.n	8007338 <_malloc_r+0x20>
 8007396:	428c      	cmp	r4, r1
 8007398:	684b      	ldr	r3, [r1, #4]
 800739a:	bf16      	itet	ne
 800739c:	6063      	strne	r3, [r4, #4]
 800739e:	6013      	streq	r3, [r2, #0]
 80073a0:	460c      	movne	r4, r1
 80073a2:	e7eb      	b.n	800737c <_malloc_r+0x64>
 80073a4:	460c      	mov	r4, r1
 80073a6:	6849      	ldr	r1, [r1, #4]
 80073a8:	e7cc      	b.n	8007344 <_malloc_r+0x2c>
 80073aa:	1cc4      	adds	r4, r0, #3
 80073ac:	f024 0403 	bic.w	r4, r4, #3
 80073b0:	42a0      	cmp	r0, r4
 80073b2:	d005      	beq.n	80073c0 <_malloc_r+0xa8>
 80073b4:	1a21      	subs	r1, r4, r0
 80073b6:	4630      	mov	r0, r6
 80073b8:	f000 f95a 	bl	8007670 <_sbrk_r>
 80073bc:	3001      	adds	r0, #1
 80073be:	d0cf      	beq.n	8007360 <_malloc_r+0x48>
 80073c0:	6025      	str	r5, [r4, #0]
 80073c2:	e7db      	b.n	800737c <_malloc_r+0x64>
 80073c4:	2000027c 	.word	0x2000027c
 80073c8:	20000280 	.word	0x20000280

080073cc <__ssputs_r>:
 80073cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d0:	688e      	ldr	r6, [r1, #8]
 80073d2:	429e      	cmp	r6, r3
 80073d4:	4682      	mov	sl, r0
 80073d6:	460c      	mov	r4, r1
 80073d8:	4690      	mov	r8, r2
 80073da:	4699      	mov	r9, r3
 80073dc:	d837      	bhi.n	800744e <__ssputs_r+0x82>
 80073de:	898a      	ldrh	r2, [r1, #12]
 80073e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073e4:	d031      	beq.n	800744a <__ssputs_r+0x7e>
 80073e6:	6825      	ldr	r5, [r4, #0]
 80073e8:	6909      	ldr	r1, [r1, #16]
 80073ea:	1a6f      	subs	r7, r5, r1
 80073ec:	6965      	ldr	r5, [r4, #20]
 80073ee:	2302      	movs	r3, #2
 80073f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80073f8:	f109 0301 	add.w	r3, r9, #1
 80073fc:	443b      	add	r3, r7
 80073fe:	429d      	cmp	r5, r3
 8007400:	bf38      	it	cc
 8007402:	461d      	movcc	r5, r3
 8007404:	0553      	lsls	r3, r2, #21
 8007406:	d530      	bpl.n	800746a <__ssputs_r+0x9e>
 8007408:	4629      	mov	r1, r5
 800740a:	f7ff ff85 	bl	8007318 <_malloc_r>
 800740e:	4606      	mov	r6, r0
 8007410:	b950      	cbnz	r0, 8007428 <__ssputs_r+0x5c>
 8007412:	230c      	movs	r3, #12
 8007414:	f8ca 3000 	str.w	r3, [sl]
 8007418:	89a3      	ldrh	r3, [r4, #12]
 800741a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800741e:	81a3      	strh	r3, [r4, #12]
 8007420:	f04f 30ff 	mov.w	r0, #4294967295
 8007424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007428:	463a      	mov	r2, r7
 800742a:	6921      	ldr	r1, [r4, #16]
 800742c:	f7ff fc32 	bl	8006c94 <memcpy>
 8007430:	89a3      	ldrh	r3, [r4, #12]
 8007432:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800743a:	81a3      	strh	r3, [r4, #12]
 800743c:	6126      	str	r6, [r4, #16]
 800743e:	6165      	str	r5, [r4, #20]
 8007440:	443e      	add	r6, r7
 8007442:	1bed      	subs	r5, r5, r7
 8007444:	6026      	str	r6, [r4, #0]
 8007446:	60a5      	str	r5, [r4, #8]
 8007448:	464e      	mov	r6, r9
 800744a:	454e      	cmp	r6, r9
 800744c:	d900      	bls.n	8007450 <__ssputs_r+0x84>
 800744e:	464e      	mov	r6, r9
 8007450:	4632      	mov	r2, r6
 8007452:	4641      	mov	r1, r8
 8007454:	6820      	ldr	r0, [r4, #0]
 8007456:	f000 f92d 	bl	80076b4 <memmove>
 800745a:	68a3      	ldr	r3, [r4, #8]
 800745c:	1b9b      	subs	r3, r3, r6
 800745e:	60a3      	str	r3, [r4, #8]
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	441e      	add	r6, r3
 8007464:	6026      	str	r6, [r4, #0]
 8007466:	2000      	movs	r0, #0
 8007468:	e7dc      	b.n	8007424 <__ssputs_r+0x58>
 800746a:	462a      	mov	r2, r5
 800746c:	f000 f93d 	bl	80076ea <_realloc_r>
 8007470:	4606      	mov	r6, r0
 8007472:	2800      	cmp	r0, #0
 8007474:	d1e2      	bne.n	800743c <__ssputs_r+0x70>
 8007476:	6921      	ldr	r1, [r4, #16]
 8007478:	4650      	mov	r0, sl
 800747a:	f7ff feff 	bl	800727c <_free_r>
 800747e:	e7c8      	b.n	8007412 <__ssputs_r+0x46>

08007480 <_svfiprintf_r>:
 8007480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007484:	461d      	mov	r5, r3
 8007486:	898b      	ldrh	r3, [r1, #12]
 8007488:	061f      	lsls	r7, r3, #24
 800748a:	b09d      	sub	sp, #116	; 0x74
 800748c:	4680      	mov	r8, r0
 800748e:	460c      	mov	r4, r1
 8007490:	4616      	mov	r6, r2
 8007492:	d50f      	bpl.n	80074b4 <_svfiprintf_r+0x34>
 8007494:	690b      	ldr	r3, [r1, #16]
 8007496:	b96b      	cbnz	r3, 80074b4 <_svfiprintf_r+0x34>
 8007498:	2140      	movs	r1, #64	; 0x40
 800749a:	f7ff ff3d 	bl	8007318 <_malloc_r>
 800749e:	6020      	str	r0, [r4, #0]
 80074a0:	6120      	str	r0, [r4, #16]
 80074a2:	b928      	cbnz	r0, 80074b0 <_svfiprintf_r+0x30>
 80074a4:	230c      	movs	r3, #12
 80074a6:	f8c8 3000 	str.w	r3, [r8]
 80074aa:	f04f 30ff 	mov.w	r0, #4294967295
 80074ae:	e0c8      	b.n	8007642 <_svfiprintf_r+0x1c2>
 80074b0:	2340      	movs	r3, #64	; 0x40
 80074b2:	6163      	str	r3, [r4, #20]
 80074b4:	2300      	movs	r3, #0
 80074b6:	9309      	str	r3, [sp, #36]	; 0x24
 80074b8:	2320      	movs	r3, #32
 80074ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074be:	2330      	movs	r3, #48	; 0x30
 80074c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074c4:	9503      	str	r5, [sp, #12]
 80074c6:	f04f 0b01 	mov.w	fp, #1
 80074ca:	4637      	mov	r7, r6
 80074cc:	463d      	mov	r5, r7
 80074ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80074d2:	b10b      	cbz	r3, 80074d8 <_svfiprintf_r+0x58>
 80074d4:	2b25      	cmp	r3, #37	; 0x25
 80074d6:	d13e      	bne.n	8007556 <_svfiprintf_r+0xd6>
 80074d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80074dc:	d00b      	beq.n	80074f6 <_svfiprintf_r+0x76>
 80074de:	4653      	mov	r3, sl
 80074e0:	4632      	mov	r2, r6
 80074e2:	4621      	mov	r1, r4
 80074e4:	4640      	mov	r0, r8
 80074e6:	f7ff ff71 	bl	80073cc <__ssputs_r>
 80074ea:	3001      	adds	r0, #1
 80074ec:	f000 80a4 	beq.w	8007638 <_svfiprintf_r+0x1b8>
 80074f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074f2:	4453      	add	r3, sl
 80074f4:	9309      	str	r3, [sp, #36]	; 0x24
 80074f6:	783b      	ldrb	r3, [r7, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 809d 	beq.w	8007638 <_svfiprintf_r+0x1b8>
 80074fe:	2300      	movs	r3, #0
 8007500:	f04f 32ff 	mov.w	r2, #4294967295
 8007504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007508:	9304      	str	r3, [sp, #16]
 800750a:	9307      	str	r3, [sp, #28]
 800750c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007510:	931a      	str	r3, [sp, #104]	; 0x68
 8007512:	462f      	mov	r7, r5
 8007514:	2205      	movs	r2, #5
 8007516:	f817 1b01 	ldrb.w	r1, [r7], #1
 800751a:	4850      	ldr	r0, [pc, #320]	; (800765c <_svfiprintf_r+0x1dc>)
 800751c:	f7f8 fe68 	bl	80001f0 <memchr>
 8007520:	9b04      	ldr	r3, [sp, #16]
 8007522:	b9d0      	cbnz	r0, 800755a <_svfiprintf_r+0xda>
 8007524:	06d9      	lsls	r1, r3, #27
 8007526:	bf44      	itt	mi
 8007528:	2220      	movmi	r2, #32
 800752a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800752e:	071a      	lsls	r2, r3, #28
 8007530:	bf44      	itt	mi
 8007532:	222b      	movmi	r2, #43	; 0x2b
 8007534:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007538:	782a      	ldrb	r2, [r5, #0]
 800753a:	2a2a      	cmp	r2, #42	; 0x2a
 800753c:	d015      	beq.n	800756a <_svfiprintf_r+0xea>
 800753e:	9a07      	ldr	r2, [sp, #28]
 8007540:	462f      	mov	r7, r5
 8007542:	2000      	movs	r0, #0
 8007544:	250a      	movs	r5, #10
 8007546:	4639      	mov	r1, r7
 8007548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800754c:	3b30      	subs	r3, #48	; 0x30
 800754e:	2b09      	cmp	r3, #9
 8007550:	d94d      	bls.n	80075ee <_svfiprintf_r+0x16e>
 8007552:	b1b8      	cbz	r0, 8007584 <_svfiprintf_r+0x104>
 8007554:	e00f      	b.n	8007576 <_svfiprintf_r+0xf6>
 8007556:	462f      	mov	r7, r5
 8007558:	e7b8      	b.n	80074cc <_svfiprintf_r+0x4c>
 800755a:	4a40      	ldr	r2, [pc, #256]	; (800765c <_svfiprintf_r+0x1dc>)
 800755c:	1a80      	subs	r0, r0, r2
 800755e:	fa0b f000 	lsl.w	r0, fp, r0
 8007562:	4318      	orrs	r0, r3
 8007564:	9004      	str	r0, [sp, #16]
 8007566:	463d      	mov	r5, r7
 8007568:	e7d3      	b.n	8007512 <_svfiprintf_r+0x92>
 800756a:	9a03      	ldr	r2, [sp, #12]
 800756c:	1d11      	adds	r1, r2, #4
 800756e:	6812      	ldr	r2, [r2, #0]
 8007570:	9103      	str	r1, [sp, #12]
 8007572:	2a00      	cmp	r2, #0
 8007574:	db01      	blt.n	800757a <_svfiprintf_r+0xfa>
 8007576:	9207      	str	r2, [sp, #28]
 8007578:	e004      	b.n	8007584 <_svfiprintf_r+0x104>
 800757a:	4252      	negs	r2, r2
 800757c:	f043 0302 	orr.w	r3, r3, #2
 8007580:	9207      	str	r2, [sp, #28]
 8007582:	9304      	str	r3, [sp, #16]
 8007584:	783b      	ldrb	r3, [r7, #0]
 8007586:	2b2e      	cmp	r3, #46	; 0x2e
 8007588:	d10c      	bne.n	80075a4 <_svfiprintf_r+0x124>
 800758a:	787b      	ldrb	r3, [r7, #1]
 800758c:	2b2a      	cmp	r3, #42	; 0x2a
 800758e:	d133      	bne.n	80075f8 <_svfiprintf_r+0x178>
 8007590:	9b03      	ldr	r3, [sp, #12]
 8007592:	1d1a      	adds	r2, r3, #4
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	9203      	str	r2, [sp, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	bfb8      	it	lt
 800759c:	f04f 33ff 	movlt.w	r3, #4294967295
 80075a0:	3702      	adds	r7, #2
 80075a2:	9305      	str	r3, [sp, #20]
 80075a4:	4d2e      	ldr	r5, [pc, #184]	; (8007660 <_svfiprintf_r+0x1e0>)
 80075a6:	7839      	ldrb	r1, [r7, #0]
 80075a8:	2203      	movs	r2, #3
 80075aa:	4628      	mov	r0, r5
 80075ac:	f7f8 fe20 	bl	80001f0 <memchr>
 80075b0:	b138      	cbz	r0, 80075c2 <_svfiprintf_r+0x142>
 80075b2:	2340      	movs	r3, #64	; 0x40
 80075b4:	1b40      	subs	r0, r0, r5
 80075b6:	fa03 f000 	lsl.w	r0, r3, r0
 80075ba:	9b04      	ldr	r3, [sp, #16]
 80075bc:	4303      	orrs	r3, r0
 80075be:	3701      	adds	r7, #1
 80075c0:	9304      	str	r3, [sp, #16]
 80075c2:	7839      	ldrb	r1, [r7, #0]
 80075c4:	4827      	ldr	r0, [pc, #156]	; (8007664 <_svfiprintf_r+0x1e4>)
 80075c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075ca:	2206      	movs	r2, #6
 80075cc:	1c7e      	adds	r6, r7, #1
 80075ce:	f7f8 fe0f 	bl	80001f0 <memchr>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d038      	beq.n	8007648 <_svfiprintf_r+0x1c8>
 80075d6:	4b24      	ldr	r3, [pc, #144]	; (8007668 <_svfiprintf_r+0x1e8>)
 80075d8:	bb13      	cbnz	r3, 8007620 <_svfiprintf_r+0x1a0>
 80075da:	9b03      	ldr	r3, [sp, #12]
 80075dc:	3307      	adds	r3, #7
 80075de:	f023 0307 	bic.w	r3, r3, #7
 80075e2:	3308      	adds	r3, #8
 80075e4:	9303      	str	r3, [sp, #12]
 80075e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e8:	444b      	add	r3, r9
 80075ea:	9309      	str	r3, [sp, #36]	; 0x24
 80075ec:	e76d      	b.n	80074ca <_svfiprintf_r+0x4a>
 80075ee:	fb05 3202 	mla	r2, r5, r2, r3
 80075f2:	2001      	movs	r0, #1
 80075f4:	460f      	mov	r7, r1
 80075f6:	e7a6      	b.n	8007546 <_svfiprintf_r+0xc6>
 80075f8:	2300      	movs	r3, #0
 80075fa:	3701      	adds	r7, #1
 80075fc:	9305      	str	r3, [sp, #20]
 80075fe:	4619      	mov	r1, r3
 8007600:	250a      	movs	r5, #10
 8007602:	4638      	mov	r0, r7
 8007604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007608:	3a30      	subs	r2, #48	; 0x30
 800760a:	2a09      	cmp	r2, #9
 800760c:	d903      	bls.n	8007616 <_svfiprintf_r+0x196>
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0c8      	beq.n	80075a4 <_svfiprintf_r+0x124>
 8007612:	9105      	str	r1, [sp, #20]
 8007614:	e7c6      	b.n	80075a4 <_svfiprintf_r+0x124>
 8007616:	fb05 2101 	mla	r1, r5, r1, r2
 800761a:	2301      	movs	r3, #1
 800761c:	4607      	mov	r7, r0
 800761e:	e7f0      	b.n	8007602 <_svfiprintf_r+0x182>
 8007620:	ab03      	add	r3, sp, #12
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	4622      	mov	r2, r4
 8007626:	4b11      	ldr	r3, [pc, #68]	; (800766c <_svfiprintf_r+0x1ec>)
 8007628:	a904      	add	r1, sp, #16
 800762a:	4640      	mov	r0, r8
 800762c:	f7fe f8f0 	bl	8005810 <_printf_float>
 8007630:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007634:	4681      	mov	r9, r0
 8007636:	d1d6      	bne.n	80075e6 <_svfiprintf_r+0x166>
 8007638:	89a3      	ldrh	r3, [r4, #12]
 800763a:	065b      	lsls	r3, r3, #25
 800763c:	f53f af35 	bmi.w	80074aa <_svfiprintf_r+0x2a>
 8007640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007642:	b01d      	add	sp, #116	; 0x74
 8007644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007648:	ab03      	add	r3, sp, #12
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	4622      	mov	r2, r4
 800764e:	4b07      	ldr	r3, [pc, #28]	; (800766c <_svfiprintf_r+0x1ec>)
 8007650:	a904      	add	r1, sp, #16
 8007652:	4640      	mov	r0, r8
 8007654:	f7fe fb92 	bl	8005d7c <_printf_i>
 8007658:	e7ea      	b.n	8007630 <_svfiprintf_r+0x1b0>
 800765a:	bf00      	nop
 800765c:	080079ac 	.word	0x080079ac
 8007660:	080079b2 	.word	0x080079b2
 8007664:	080079b6 	.word	0x080079b6
 8007668:	08005811 	.word	0x08005811
 800766c:	080073cd 	.word	0x080073cd

08007670 <_sbrk_r>:
 8007670:	b538      	push	{r3, r4, r5, lr}
 8007672:	4c06      	ldr	r4, [pc, #24]	; (800768c <_sbrk_r+0x1c>)
 8007674:	2300      	movs	r3, #0
 8007676:	4605      	mov	r5, r0
 8007678:	4608      	mov	r0, r1
 800767a:	6023      	str	r3, [r4, #0]
 800767c:	f7fa f9be 	bl	80019fc <_sbrk>
 8007680:	1c43      	adds	r3, r0, #1
 8007682:	d102      	bne.n	800768a <_sbrk_r+0x1a>
 8007684:	6823      	ldr	r3, [r4, #0]
 8007686:	b103      	cbz	r3, 800768a <_sbrk_r+0x1a>
 8007688:	602b      	str	r3, [r5, #0]
 800768a:	bd38      	pop	{r3, r4, r5, pc}
 800768c:	2000d5a4 	.word	0x2000d5a4

08007690 <__ascii_mbtowc>:
 8007690:	b082      	sub	sp, #8
 8007692:	b901      	cbnz	r1, 8007696 <__ascii_mbtowc+0x6>
 8007694:	a901      	add	r1, sp, #4
 8007696:	b142      	cbz	r2, 80076aa <__ascii_mbtowc+0x1a>
 8007698:	b14b      	cbz	r3, 80076ae <__ascii_mbtowc+0x1e>
 800769a:	7813      	ldrb	r3, [r2, #0]
 800769c:	600b      	str	r3, [r1, #0]
 800769e:	7812      	ldrb	r2, [r2, #0]
 80076a0:	1c10      	adds	r0, r2, #0
 80076a2:	bf18      	it	ne
 80076a4:	2001      	movne	r0, #1
 80076a6:	b002      	add	sp, #8
 80076a8:	4770      	bx	lr
 80076aa:	4610      	mov	r0, r2
 80076ac:	e7fb      	b.n	80076a6 <__ascii_mbtowc+0x16>
 80076ae:	f06f 0001 	mvn.w	r0, #1
 80076b2:	e7f8      	b.n	80076a6 <__ascii_mbtowc+0x16>

080076b4 <memmove>:
 80076b4:	4288      	cmp	r0, r1
 80076b6:	b510      	push	{r4, lr}
 80076b8:	eb01 0302 	add.w	r3, r1, r2
 80076bc:	d807      	bhi.n	80076ce <memmove+0x1a>
 80076be:	1e42      	subs	r2, r0, #1
 80076c0:	4299      	cmp	r1, r3
 80076c2:	d00a      	beq.n	80076da <memmove+0x26>
 80076c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80076cc:	e7f8      	b.n	80076c0 <memmove+0xc>
 80076ce:	4283      	cmp	r3, r0
 80076d0:	d9f5      	bls.n	80076be <memmove+0xa>
 80076d2:	1881      	adds	r1, r0, r2
 80076d4:	1ad2      	subs	r2, r2, r3
 80076d6:	42d3      	cmn	r3, r2
 80076d8:	d100      	bne.n	80076dc <memmove+0x28>
 80076da:	bd10      	pop	{r4, pc}
 80076dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80076e4:	e7f7      	b.n	80076d6 <memmove+0x22>

080076e6 <__malloc_lock>:
 80076e6:	4770      	bx	lr

080076e8 <__malloc_unlock>:
 80076e8:	4770      	bx	lr

080076ea <_realloc_r>:
 80076ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ec:	4607      	mov	r7, r0
 80076ee:	4614      	mov	r4, r2
 80076f0:	460e      	mov	r6, r1
 80076f2:	b921      	cbnz	r1, 80076fe <_realloc_r+0x14>
 80076f4:	4611      	mov	r1, r2
 80076f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076fa:	f7ff be0d 	b.w	8007318 <_malloc_r>
 80076fe:	b922      	cbnz	r2, 800770a <_realloc_r+0x20>
 8007700:	f7ff fdbc 	bl	800727c <_free_r>
 8007704:	4625      	mov	r5, r4
 8007706:	4628      	mov	r0, r5
 8007708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800770a:	f000 f821 	bl	8007750 <_malloc_usable_size_r>
 800770e:	42a0      	cmp	r0, r4
 8007710:	d20f      	bcs.n	8007732 <_realloc_r+0x48>
 8007712:	4621      	mov	r1, r4
 8007714:	4638      	mov	r0, r7
 8007716:	f7ff fdff 	bl	8007318 <_malloc_r>
 800771a:	4605      	mov	r5, r0
 800771c:	2800      	cmp	r0, #0
 800771e:	d0f2      	beq.n	8007706 <_realloc_r+0x1c>
 8007720:	4631      	mov	r1, r6
 8007722:	4622      	mov	r2, r4
 8007724:	f7ff fab6 	bl	8006c94 <memcpy>
 8007728:	4631      	mov	r1, r6
 800772a:	4638      	mov	r0, r7
 800772c:	f7ff fda6 	bl	800727c <_free_r>
 8007730:	e7e9      	b.n	8007706 <_realloc_r+0x1c>
 8007732:	4635      	mov	r5, r6
 8007734:	e7e7      	b.n	8007706 <_realloc_r+0x1c>

08007736 <__ascii_wctomb>:
 8007736:	b149      	cbz	r1, 800774c <__ascii_wctomb+0x16>
 8007738:	2aff      	cmp	r2, #255	; 0xff
 800773a:	bf85      	ittet	hi
 800773c:	238a      	movhi	r3, #138	; 0x8a
 800773e:	6003      	strhi	r3, [r0, #0]
 8007740:	700a      	strbls	r2, [r1, #0]
 8007742:	f04f 30ff 	movhi.w	r0, #4294967295
 8007746:	bf98      	it	ls
 8007748:	2001      	movls	r0, #1
 800774a:	4770      	bx	lr
 800774c:	4608      	mov	r0, r1
 800774e:	4770      	bx	lr

08007750 <_malloc_usable_size_r>:
 8007750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007754:	1f18      	subs	r0, r3, #4
 8007756:	2b00      	cmp	r3, #0
 8007758:	bfbc      	itt	lt
 800775a:	580b      	ldrlt	r3, [r1, r0]
 800775c:	18c0      	addlt	r0, r0, r3
 800775e:	4770      	bx	lr

08007760 <round>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	ec57 6b10 	vmov	r6, r7, d0
 8007766:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800776a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800776e:	2c13      	cmp	r4, #19
 8007770:	463b      	mov	r3, r7
 8007772:	463d      	mov	r5, r7
 8007774:	dc17      	bgt.n	80077a6 <round+0x46>
 8007776:	2c00      	cmp	r4, #0
 8007778:	da09      	bge.n	800778e <round+0x2e>
 800777a:	3401      	adds	r4, #1
 800777c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8007780:	d103      	bne.n	800778a <round+0x2a>
 8007782:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007786:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800778a:	2100      	movs	r1, #0
 800778c:	e02c      	b.n	80077e8 <round+0x88>
 800778e:	4a18      	ldr	r2, [pc, #96]	; (80077f0 <round+0x90>)
 8007790:	4122      	asrs	r2, r4
 8007792:	4217      	tst	r7, r2
 8007794:	d100      	bne.n	8007798 <round+0x38>
 8007796:	b19e      	cbz	r6, 80077c0 <round+0x60>
 8007798:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800779c:	4123      	asrs	r3, r4
 800779e:	442b      	add	r3, r5
 80077a0:	ea23 0302 	bic.w	r3, r3, r2
 80077a4:	e7f1      	b.n	800778a <round+0x2a>
 80077a6:	2c33      	cmp	r4, #51	; 0x33
 80077a8:	dd0d      	ble.n	80077c6 <round+0x66>
 80077aa:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80077ae:	d107      	bne.n	80077c0 <round+0x60>
 80077b0:	4630      	mov	r0, r6
 80077b2:	4639      	mov	r1, r7
 80077b4:	ee10 2a10 	vmov	r2, s0
 80077b8:	f7f8 fd70 	bl	800029c <__adddf3>
 80077bc:	4606      	mov	r6, r0
 80077be:	460f      	mov	r7, r1
 80077c0:	ec47 6b10 	vmov	d0, r6, r7
 80077c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077c6:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80077ca:	f04f 30ff 	mov.w	r0, #4294967295
 80077ce:	40d0      	lsrs	r0, r2
 80077d0:	4206      	tst	r6, r0
 80077d2:	d0f5      	beq.n	80077c0 <round+0x60>
 80077d4:	2201      	movs	r2, #1
 80077d6:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80077da:	fa02 f404 	lsl.w	r4, r2, r4
 80077de:	1931      	adds	r1, r6, r4
 80077e0:	bf28      	it	cs
 80077e2:	189b      	addcs	r3, r3, r2
 80077e4:	ea21 0100 	bic.w	r1, r1, r0
 80077e8:	461f      	mov	r7, r3
 80077ea:	460e      	mov	r6, r1
 80077ec:	e7e8      	b.n	80077c0 <round+0x60>
 80077ee:	bf00      	nop
 80077f0:	000fffff 	.word	0x000fffff

080077f4 <_init>:
 80077f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f6:	bf00      	nop
 80077f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077fa:	bc08      	pop	{r3}
 80077fc:	469e      	mov	lr, r3
 80077fe:	4770      	bx	lr

08007800 <_fini>:
 8007800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007802:	bf00      	nop
 8007804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007806:	bc08      	pop	{r3}
 8007808:	469e      	mov	lr, r3
 800780a:	4770      	bx	lr

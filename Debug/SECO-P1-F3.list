
SECO-P1-F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c0c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de4  08003de4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003de4  08003de4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003de4  08003de4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de4  08003de4  00013de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003de8  08003de8  00013de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001460  2000000c  08003df8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000146c  08003df8  0002146c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b91c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018d6  00000000  00000000  0002b958  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c00  00000000  00000000  0002d230  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b38  00000000  00000000  0002de30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d388  00000000  00000000  0002e968  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000950e  00000000  00000000  0004bcf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b019a  00000000  00000000  000551fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00105398  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a0  00000000  00000000  00105414  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003d88 	.word	0x08003d88

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003d88 	.word	0x08003d88

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ea:	f000 fbdd 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ee:	f000 f839 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f2:	f000 f9f1 	bl	80005d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001f6:	f000 f9bf 	bl	8000578 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80001fa:	f000 f897 	bl	800032c <MX_TIM2_Init>
  MX_TIM3_Init();
 80001fe:	f000 f8e9 	bl	80003d4 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000202:	f000 f94d 	bl	80004a0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000206:	f000 f981 	bl	800050c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800020a:	2100      	movs	r1, #0
 800020c:	480f      	ldr	r0, [pc, #60]	; (800024c <main+0x68>)
 800020e:	f002 fa79 	bl	8002704 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000212:	2104      	movs	r1, #4
 8000214:	480d      	ldr	r0, [pc, #52]	; (800024c <main+0x68>)
 8000216:	f002 fa75 	bl	8002704 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800021a:	213c      	movs	r1, #60	; 0x3c
 800021c:	480c      	ldr	r0, [pc, #48]	; (8000250 <main+0x6c>)
 800021e:	f002 fb63 	bl	80028e8 <HAL_TIM_Encoder_Start_IT>
    HAL_TIM_Base_Init(&htim6);
 8000222:	480c      	ldr	r0, [pc, #48]	; (8000254 <main+0x70>)
 8000224:	f002 fa18 	bl	8002658 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Init(&htim7);
 8000228:	480b      	ldr	r0, [pc, #44]	; (8000258 <main+0x74>)
 800022a:	f002 fa15 	bl	8002658 <HAL_TIM_Base_Init>
	  uint8_t buffer_trasmite[] =  malloc(100);
	  uint8_t buffer_trasmite[4];
	  HAL_UART_Transmit(&huart4, buffer_trasmite, sizeof(buffer_trasmite), HAL_MAX_DELAY);
	  //HAL_UART_Receive(&huart4, pData, sideof(buffer), HAL_MAX_DELAY);
	  */
	  	char* str_name= "PRUEBA";
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <main+0x78>)
 8000230:	607b      	str	r3, [r7, #4]

	  	 HAL_UART_Transmit(&huart2,(uint8_t*) str_name, strlen(str_name), HAL_MAX_DELAY);
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f7ff ffce 	bl	80001d4 <strlen>
 8000238:	4603      	mov	r3, r0
 800023a:	b29a      	uxth	r2, r3
 800023c:	f04f 33ff 	mov.w	r3, #4294967295
 8000240:	6879      	ldr	r1, [r7, #4]
 8000242:	4807      	ldr	r0, [pc, #28]	; (8000260 <main+0x7c>)
 8000244:	f003 f964 	bl	8003510 <HAL_UART_Transmit>
  {
 8000248:	e7f1      	b.n	800022e <main+0x4a>
 800024a:	bf00      	nop
 800024c:	20000028 	.word	0x20000028
 8000250:	20001368 	.word	0x20001368
 8000254:	20001328 	.word	0x20001328
 8000258:	20001428 	.word	0x20001428
 800025c:	08003da4 	.word	0x08003da4
 8000260:	200013a8 	.word	0x200013a8

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b0a6      	sub	sp, #152	; 0x98
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800026e:	2228      	movs	r2, #40	; 0x28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f003 fd80 	bl	8003d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]
 8000286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2258      	movs	r2, #88	; 0x58
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f003 fd72 	bl	8003d78 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000294:	2302      	movs	r3, #2
 8000296:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000298:	2301      	movs	r3, #1
 800029a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029c:	2310      	movs	r3, #16
 800029e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a2:	2302      	movs	r3, #2
 80002a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80002b0:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 80002b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80002b8:	2301      	movs	r3, #1
 80002ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 fe5e 	bl	8000f84 <HAL_RCC_OscConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ce:	f000 f9c3 	bl	8000658 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	230f      	movs	r3, #15
 80002d4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d6:	2302      	movs	r3, #2
 80002d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002ec:	2102      	movs	r1, #2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 fd5e 	bl	8001db0 <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002fa:	f000 f9ad 	bl	8000658 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <SystemClock_Config+0xc4>)
 8000300:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000302:	2300      	movs	r3, #0
 8000304:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000306:	2300      	movs	r3, #0
 8000308:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800030a:	2300      	movs	r3, #0
 800030c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f001 ff83 	bl	800221c <HAL_RCCEx_PeriphCLKConfig>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800031c:	f000 f99c 	bl	8000658 <Error_Handler>
  }
}
 8000320:	bf00      	nop
 8000322:	3798      	adds	r7, #152	; 0x98
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	00300002 	.word	0x00300002

0800032c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b08c      	sub	sp, #48	; 0x30
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000332:	f107 030c 	add.w	r3, r7, #12
 8000336:	2224      	movs	r2, #36	; 0x24
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f003 fd1c 	bl	8003d78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000340:	463b      	mov	r3, r7
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800034a:	4b21      	ldr	r3, [pc, #132]	; (80003d0 <MX_TIM2_Init+0xa4>)
 800034c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000350:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000352:	4b1f      	ldr	r3, [pc, #124]	; (80003d0 <MX_TIM2_Init+0xa4>)
 8000354:	2200      	movs	r2, #0
 8000356:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000358:	4b1d      	ldr	r3, [pc, #116]	; (80003d0 <MX_TIM2_Init+0xa4>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800035e:	4b1c      	ldr	r3, [pc, #112]	; (80003d0 <MX_TIM2_Init+0xa4>)
 8000360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000364:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000366:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <MX_TIM2_Init+0xa4>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800036c:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <MX_TIM2_Init+0xa4>)
 800036e:	2200      	movs	r2, #0
 8000370:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000372:	2303      	movs	r3, #3
 8000374:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000376:	2300      	movs	r3, #0
 8000378:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800037a:	2301      	movs	r3, #1
 800037c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000386:	2300      	movs	r3, #0
 8000388:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800038a:	2301      	movs	r3, #1
 800038c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000396:	f107 030c 	add.w	r3, r7, #12
 800039a:	4619      	mov	r1, r3
 800039c:	480c      	ldr	r0, [pc, #48]	; (80003d0 <MX_TIM2_Init+0xa4>)
 800039e:	f002 fa11 	bl	80027c4 <HAL_TIM_Encoder_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80003a8:	f000 f956 	bl	8000658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ac:	2300      	movs	r3, #0
 80003ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003b4:	463b      	mov	r3, r7
 80003b6:	4619      	mov	r1, r3
 80003b8:	4805      	ldr	r0, [pc, #20]	; (80003d0 <MX_TIM2_Init+0xa4>)
 80003ba:	f002 ffcf 	bl	800335c <HAL_TIMEx_MasterConfigSynchronization>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80003c4:	f000 f948 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003c8:	bf00      	nop
 80003ca:	3730      	adds	r7, #48	; 0x30
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20001368 	.word	0x20001368

080003d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08a      	sub	sp, #40	; 0x28
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003da:	f107 031c 	add.w	r3, r7, #28
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003e6:	463b      	mov	r3, r7
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
 80003f4:	615a      	str	r2, [r3, #20]
 80003f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003f8:	4b27      	ldr	r3, [pc, #156]	; (8000498 <MX_TIM3_Init+0xc4>)
 80003fa:	4a28      	ldr	r2, [pc, #160]	; (800049c <MX_TIM3_Init+0xc8>)
 80003fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 80003fe:	4b26      	ldr	r3, [pc, #152]	; (8000498 <MX_TIM3_Init+0xc4>)
 8000400:	2202      	movs	r2, #2
 8000402:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000404:	4b24      	ldr	r3, [pc, #144]	; (8000498 <MX_TIM3_Init+0xc4>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800040a:	4b23      	ldr	r3, [pc, #140]	; (8000498 <MX_TIM3_Init+0xc4>)
 800040c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000410:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000412:	4b21      	ldr	r3, [pc, #132]	; (8000498 <MX_TIM3_Init+0xc4>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000418:	4b1f      	ldr	r3, [pc, #124]	; (8000498 <MX_TIM3_Init+0xc4>)
 800041a:	2200      	movs	r2, #0
 800041c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800041e:	481e      	ldr	r0, [pc, #120]	; (8000498 <MX_TIM3_Init+0xc4>)
 8000420:	f002 f945 	bl	80026ae <HAL_TIM_PWM_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800042a:	f000 f915 	bl	8000658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800042e:	2300      	movs	r3, #0
 8000430:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000432:	2300      	movs	r3, #0
 8000434:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000436:	f107 031c 	add.w	r3, r7, #28
 800043a:	4619      	mov	r1, r3
 800043c:	4816      	ldr	r0, [pc, #88]	; (8000498 <MX_TIM3_Init+0xc4>)
 800043e:	f002 ff8d 	bl	800335c <HAL_TIMEx_MasterConfigSynchronization>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000448:	f000 f906 	bl	8000658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800044c:	2360      	movs	r3, #96	; 0x60
 800044e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000458:	2300      	movs	r3, #0
 800045a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800045c:	463b      	mov	r3, r7
 800045e:	2200      	movs	r2, #0
 8000460:	4619      	mov	r1, r3
 8000462:	480d      	ldr	r0, [pc, #52]	; (8000498 <MX_TIM3_Init+0xc4>)
 8000464:	f002 fa98 	bl	8002998 <HAL_TIM_PWM_ConfigChannel>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800046e:	f000 f8f3 	bl	8000658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000472:	463b      	mov	r3, r7
 8000474:	2204      	movs	r2, #4
 8000476:	4619      	mov	r1, r3
 8000478:	4807      	ldr	r0, [pc, #28]	; (8000498 <MX_TIM3_Init+0xc4>)
 800047a:	f002 fa8d 	bl	8002998 <HAL_TIM_PWM_ConfigChannel>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000484:	f000 f8e8 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000488:	4803      	ldr	r0, [pc, #12]	; (8000498 <MX_TIM3_Init+0xc4>)
 800048a:	f000 f9a5 	bl	80007d8 <HAL_TIM_MspPostInit>

}
 800048e:	bf00      	nop
 8000490:	3728      	adds	r7, #40	; 0x28
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000028 	.word	0x20000028
 800049c:	40000400 	.word	0x40000400

080004a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <MX_TIM6_Init+0x64>)
 80004b2:	4a15      	ldr	r2, [pc, #84]	; (8000508 <MX_TIM6_Init+0x68>)
 80004b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 59999;
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <MX_TIM6_Init+0x64>)
 80004b8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80004bc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <MX_TIM6_Init+0x64>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <MX_TIM6_Init+0x64>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <MX_TIM6_Init+0x64>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80004d0:	480c      	ldr	r0, [pc, #48]	; (8000504 <MX_TIM6_Init+0x64>)
 80004d2:	f002 f8c1 	bl	8002658 <HAL_TIM_Base_Init>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80004dc:	f000 f8bc 	bl	8000658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e0:	2300      	movs	r3, #0
 80004e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	4619      	mov	r1, r3
 80004ec:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_TIM6_Init+0x64>)
 80004ee:	f002 ff35 	bl	800335c <HAL_TIMEx_MasterConfigSynchronization>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80004f8:	f000 f8ae 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80004fc:	bf00      	nop
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20001328 	.word	0x20001328
 8000508:	40001000 	.word	0x40001000

0800050c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <MX_TIM7_Init+0x64>)
 800051e:	4a15      	ldr	r2, [pc, #84]	; (8000574 <MX_TIM7_Init+0x68>)
 8000520:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <MX_TIM7_Init+0x64>)
 8000524:	2200      	movs	r2, #0
 8000526:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_TIM7_Init+0x64>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <MX_TIM7_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000534:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MX_TIM7_Init+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800053a:	480d      	ldr	r0, [pc, #52]	; (8000570 <MX_TIM7_Init+0x64>)
 800053c:	f002 f88c 	bl	8002658 <HAL_TIM_Base_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000546:	f000 f887 	bl	8000658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054a:	2300      	movs	r3, #0
 800054c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	4619      	mov	r1, r3
 8000556:	4806      	ldr	r0, [pc, #24]	; (8000570 <MX_TIM7_Init+0x64>)
 8000558:	f002 ff00 	bl	800335c <HAL_TIMEx_MasterConfigSynchronization>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000562:	f000 f879 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20001428 	.word	0x20001428
 8000574:	40001400 	.word	0x40001400

08000578 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 800057e:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <MX_USART2_UART_Init+0x5c>)
 8000580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 8000584:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 800059e:	220c      	movs	r2, #12
 80005a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 80005bc:	f002 ff5a 	bl	8003474 <HAL_UART_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005c6:	f000 f847 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200013a8 	.word	0x200013a8
 80005d4:	40004400 	.word	0x40004400

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_GPIO_Init+0x7c>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a18      	ldr	r2, [pc, #96]	; (8000654 <MX_GPIO_Init+0x7c>)
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	6153      	str	r3, [r2, #20]
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <MX_GPIO_Init+0x7c>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <MX_GPIO_Init+0x7c>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a12      	ldr	r2, [pc, #72]	; (8000654 <MX_GPIO_Init+0x7c>)
 800060c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <MX_GPIO_Init+0x7c>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000628:	f000 fc94 	bl	8000f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800062c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000630:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	4619      	mov	r1, r3
 8000644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000648:	f000 fafa 	bl	8000c40 <HAL_GPIO_Init>

}
 800064c:	bf00      	nop
 800064e:	3720      	adds	r7, #32
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40021000 	.word	0x40021000

08000658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
	...

08000668 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <HAL_MspInit+0x44>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <HAL_MspInit+0x44>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6193      	str	r3, [r2, #24]
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <HAL_MspInit+0x44>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <HAL_MspInit+0x44>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <HAL_MspInit+0x44>)
 800068c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000690:	61d3      	str	r3, [r2, #28]
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <HAL_MspInit+0x44>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000

080006b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006d0:	d128      	bne.n	8000724 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <HAL_TIM_Encoder_MspInit+0x7c>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <HAL_TIM_Encoder_MspInit+0x7c>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <HAL_TIM_Encoder_MspInit+0x7c>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <HAL_TIM_Encoder_MspInit+0x7c>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a0f      	ldr	r2, [pc, #60]	; (800072c <HAL_TIM_Encoder_MspInit+0x7c>)
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <HAL_TIM_Encoder_MspInit+0x7c>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000702:	2303      	movs	r3, #3
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2300      	movs	r3, #0
 8000710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000712:	2301      	movs	r3, #1
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000720:	f000 fa8e 	bl	8000c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	; 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000

08000730 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <HAL_TIM_PWM_MspInit+0x38>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d10b      	bne.n	800075a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <HAL_TIM_PWM_MspInit+0x3c>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	4a09      	ldr	r2, [pc, #36]	; (800076c <HAL_TIM_PWM_MspInit+0x3c>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	61d3      	str	r3, [r2, #28]
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <HAL_TIM_PWM_MspInit+0x3c>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40000400 	.word	0x40000400
 800076c:	40021000 	.word	0x40021000

08000770 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a13      	ldr	r2, [pc, #76]	; (80007cc <HAL_TIM_Base_MspInit+0x5c>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d10c      	bne.n	800079c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <HAL_TIM_Base_MspInit+0x60>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <HAL_TIM_Base_MspInit+0x60>)
 8000788:	f043 0310 	orr.w	r3, r3, #16
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <HAL_TIM_Base_MspInit+0x60>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f003 0310 	and.w	r3, r3, #16
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800079a:	e010      	b.n	80007be <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0c      	ldr	r2, [pc, #48]	; (80007d4 <HAL_TIM_Base_MspInit+0x64>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d10b      	bne.n	80007be <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <HAL_TIM_Base_MspInit+0x60>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	4a09      	ldr	r2, [pc, #36]	; (80007d0 <HAL_TIM_Base_MspInit+0x60>)
 80007ac:	f043 0320 	orr.w	r3, r3, #32
 80007b0:	61d3      	str	r3, [r2, #28]
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <HAL_TIM_Base_MspInit+0x60>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40001000 	.word	0x40001000
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40001400 	.word	0x40001400

080007d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a11      	ldr	r2, [pc, #68]	; (800083c <HAL_TIM_MspPostInit+0x64>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d11b      	bne.n	8000832 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <HAL_TIM_MspPostInit+0x68>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <HAL_TIM_MspPostInit+0x68>)
 8000800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000804:	6153      	str	r3, [r2, #20]
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <HAL_TIM_MspPostInit+0x68>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000812:	2330      	movs	r3, #48	; 0x30
 8000814:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000822:	2302      	movs	r3, #2
 8000824:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <HAL_TIM_MspPostInit+0x6c>)
 800082e:	f000 fa07 	bl	8000c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40000400 	.word	0x40000400
 8000840:	40021000 	.word	0x40021000
 8000844:	48000400 	.word	0x48000400

08000848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <HAL_UART_MspInit+0x7c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d128      	bne.n	80008bc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <HAL_UART_MspInit+0x80>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <HAL_UART_MspInit+0x80>)
 8000870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000874:	61d3      	str	r3, [r2, #28]
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_UART_MspInit+0x80>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <HAL_UART_MspInit+0x80>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <HAL_UART_MspInit+0x80>)
 8000888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088c:	6153      	str	r3, [r2, #20]
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <HAL_UART_MspInit+0x80>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800089a:	230c      	movs	r3, #12
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008aa:	2307      	movs	r3, #7
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b8:	f000 f9c2 	bl	8000c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40004400 	.word	0x40004400
 80008c8:	40021000 	.word	0x40021000

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <MemManage_Handler+0x4>

080008e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000920:	f000 f888 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <SystemInit+0x28>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a07      	ldr	r2, [pc, #28]	; (8000950 <SystemInit+0x28>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <SystemInit+0x28>)
 800093e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000942:	609a      	str	r2, [r3, #8]
#endif
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800098c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000958:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800095a:	e003      	b.n	8000964 <LoopCopyDataInit>

0800095c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800095e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000960:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000962:	3104      	adds	r1, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000968:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800096a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800096c:	d3f6      	bcc.n	800095c <CopyDataInit>
	ldr	r2, =_sbss
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000970:	e002      	b.n	8000978 <LoopFillZerobss>

08000972 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000972:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000974:	f842 3b04 	str.w	r3, [r2], #4

08000978 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <LoopForever+0x16>)
	cmp	r2, r3
 800097a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800097c:	d3f9      	bcc.n	8000972 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800097e:	f7ff ffd3 	bl	8000928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000982:	f003 f9d5 	bl	8003d30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000986:	f7ff fc2d 	bl	80001e4 <main>

0800098a <LoopForever>:

LoopForever:
    b LoopForever
 800098a:	e7fe      	b.n	800098a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800098c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000990:	08003dec 	.word	0x08003dec
	ldr	r0, =_sdata
 8000994:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000998:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800099c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80009a0:	2000146c 	.word	0x2000146c

080009a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC1_2_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_Init+0x28>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_Init+0x28>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 f90d 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 f808 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c4:	f7ff fe50 	bl	8000668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40022000 	.word	0x40022000

080009d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_InitTick+0x54>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_InitTick+0x58>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f917 	bl	8000c26 <HAL_SYSTICK_Config>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00e      	b.n	8000a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d80a      	bhi.n	8000a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f000 f8ed 	bl	8000bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a14:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <HAL_InitTick+0x5c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000004 	.word	0x20000004

08000a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_IncTick+0x20>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_IncTick+0x24>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_IncTick+0x24>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20001468 	.word	0x20001468

08000a5c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <HAL_GetTick+0x14>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20001468 	.word	0x20001468

08000a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	60d3      	str	r3, [r2, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	f003 0307 	and.w	r3, r3, #7
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	db0a      	blt.n	8000b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	490c      	ldr	r1, [pc, #48]	; (8000b24 <__NVIC_SetPriority+0x4c>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	0112      	lsls	r2, r2, #4
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	440b      	add	r3, r1
 8000afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b00:	e00a      	b.n	8000b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4908      	ldr	r1, [pc, #32]	; (8000b28 <__NVIC_SetPriority+0x50>)
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	f003 030f 	and.w	r3, r3, #15
 8000b0e:	3b04      	subs	r3, #4
 8000b10:	0112      	lsls	r2, r2, #4
 8000b12:	b2d2      	uxtb	r2, r2
 8000b14:	440b      	add	r3, r1
 8000b16:	761a      	strb	r2, [r3, #24]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000e100 	.word	0xe000e100
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b089      	sub	sp, #36	; 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f1c3 0307 	rsb	r3, r3, #7
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	bf28      	it	cs
 8000b4a:	2304      	movcs	r3, #4
 8000b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3304      	adds	r3, #4
 8000b52:	2b06      	cmp	r3, #6
 8000b54:	d902      	bls.n	8000b5c <NVIC_EncodePriority+0x30>
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3b03      	subs	r3, #3
 8000b5a:	e000      	b.n	8000b5e <NVIC_EncodePriority+0x32>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	f04f 32ff 	mov.w	r2, #4294967295
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	401a      	ands	r2, r3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	43d9      	mvns	r1, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	4313      	orrs	r3, r2
         );
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3724      	adds	r7, #36	; 0x24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba4:	d301      	bcc.n	8000baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00f      	b.n	8000bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <SysTick_Config+0x40>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f7ff ff8e 	bl	8000ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <SysTick_Config+0x40>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <SysTick_Config+0x40>)
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff47 	bl	8000a74 <__NVIC_SetPriorityGrouping>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c00:	f7ff ff5c 	bl	8000abc <__NVIC_GetPriorityGrouping>
 8000c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	6978      	ldr	r0, [r7, #20]
 8000c0c:	f7ff ff8e 	bl	8000b2c <NVIC_EncodePriority>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff5d 	bl	8000ad8 <__NVIC_SetPriority>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffb0 	bl	8000b94 <SysTick_Config>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b087      	sub	sp, #28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4e:	e160      	b.n	8000f12 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	2101      	movs	r1, #1
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 8152 	beq.w	8000f0c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_Init+0x38>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b12      	cmp	r3, #18
 8000c76:	d123      	bne.n	8000cc0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	08da      	lsrs	r2, r3, #3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3208      	adds	r2, #8
 8000c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	f003 0307 	and.w	r3, r3, #7
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	220f      	movs	r2, #15
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	691a      	ldr	r2, [r3, #16]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	08da      	lsrs	r2, r3, #3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3208      	adds	r2, #8
 8000cba:	6939      	ldr	r1, [r7, #16]
 8000cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	2203      	movs	r2, #3
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0203 	and.w	r2, r3, #3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d00b      	beq.n	8000d14 <HAL_GPIO_Init+0xd4>
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d007      	beq.n	8000d14 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d08:	2b11      	cmp	r3, #17
 8000d0a:	d003      	beq.n	8000d14 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b12      	cmp	r3, #18
 8000d12:	d130      	bne.n	8000d76 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	f003 0201 	and.w	r2, r3, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 80ac 	beq.w	8000f0c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db4:	4b5e      	ldr	r3, [pc, #376]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a5d      	ldr	r2, [pc, #372]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b5b      	ldr	r3, [pc, #364]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dcc:	4a59      	ldr	r2, [pc, #356]	; (8000f34 <HAL_GPIO_Init+0x2f4>)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	089b      	lsrs	r3, r3, #2
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	220f      	movs	r2, #15
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000df6:	d025      	beq.n	8000e44 <HAL_GPIO_Init+0x204>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a4f      	ldr	r2, [pc, #316]	; (8000f38 <HAL_GPIO_Init+0x2f8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d01f      	beq.n	8000e40 <HAL_GPIO_Init+0x200>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a4e      	ldr	r2, [pc, #312]	; (8000f3c <HAL_GPIO_Init+0x2fc>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d019      	beq.n	8000e3c <HAL_GPIO_Init+0x1fc>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a4d      	ldr	r2, [pc, #308]	; (8000f40 <HAL_GPIO_Init+0x300>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d013      	beq.n	8000e38 <HAL_GPIO_Init+0x1f8>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a4c      	ldr	r2, [pc, #304]	; (8000f44 <HAL_GPIO_Init+0x304>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d00d      	beq.n	8000e34 <HAL_GPIO_Init+0x1f4>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a4b      	ldr	r2, [pc, #300]	; (8000f48 <HAL_GPIO_Init+0x308>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d007      	beq.n	8000e30 <HAL_GPIO_Init+0x1f0>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a4a      	ldr	r2, [pc, #296]	; (8000f4c <HAL_GPIO_Init+0x30c>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d101      	bne.n	8000e2c <HAL_GPIO_Init+0x1ec>
 8000e28:	2306      	movs	r3, #6
 8000e2a:	e00c      	b.n	8000e46 <HAL_GPIO_Init+0x206>
 8000e2c:	2307      	movs	r3, #7
 8000e2e:	e00a      	b.n	8000e46 <HAL_GPIO_Init+0x206>
 8000e30:	2305      	movs	r3, #5
 8000e32:	e008      	b.n	8000e46 <HAL_GPIO_Init+0x206>
 8000e34:	2304      	movs	r3, #4
 8000e36:	e006      	b.n	8000e46 <HAL_GPIO_Init+0x206>
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e004      	b.n	8000e46 <HAL_GPIO_Init+0x206>
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	e002      	b.n	8000e46 <HAL_GPIO_Init+0x206>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <HAL_GPIO_Init+0x206>
 8000e44:	2300      	movs	r3, #0
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	f002 0203 	and.w	r2, r2, #3
 8000e4c:	0092      	lsls	r2, r2, #2
 8000e4e:	4093      	lsls	r3, r2
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e56:	4937      	ldr	r1, [pc, #220]	; (8000f34 <HAL_GPIO_Init+0x2f4>)
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e64:	4b3a      	ldr	r3, [pc, #232]	; (8000f50 <HAL_GPIO_Init+0x310>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e88:	4a31      	ldr	r2, [pc, #196]	; (8000f50 <HAL_GPIO_Init+0x310>)
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e8e:	4b30      	ldr	r3, [pc, #192]	; (8000f50 <HAL_GPIO_Init+0x310>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eb2:	4a27      	ldr	r2, [pc, #156]	; (8000f50 <HAL_GPIO_Init+0x310>)
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb8:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <HAL_GPIO_Init+0x310>)
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000edc:	4a1c      	ldr	r2, [pc, #112]	; (8000f50 <HAL_GPIO_Init+0x310>)
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <HAL_GPIO_Init+0x310>)
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <HAL_GPIO_Init+0x310>)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f47f ae97 	bne.w	8000c50 <HAL_GPIO_Init+0x10>
  }
}
 8000f22:	bf00      	nop
 8000f24:	371c      	adds	r7, #28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40010000 	.word	0x40010000
 8000f38:	48000400 	.word	0x48000400
 8000f3c:	48000800 	.word	0x48000800
 8000f40:	48000c00 	.word	0x48000c00
 8000f44:	48001000 	.word	0x48001000
 8000f48:	48001400 	.word	0x48001400
 8000f4c:	48001800 	.word	0x48001800
 8000f50:	40010400 	.word	0x40010400

08000f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
 8000f60:	4613      	mov	r3, r2
 8000f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f64:	787b      	ldrb	r3, [r7, #1]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f6a:	887a      	ldrh	r2, [r7, #2]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f70:	e002      	b.n	8000f78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	f000 bf01 	b.w	8001da0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 8160 	beq.w	800126e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fae:	4bae      	ldr	r3, [pc, #696]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 030c 	and.w	r3, r3, #12
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d00c      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fba:	4bab      	ldr	r3, [pc, #684]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 030c 	and.w	r3, r3, #12
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d159      	bne.n	800107a <HAL_RCC_OscConfig+0xf6>
 8000fc6:	4ba8      	ldr	r3, [pc, #672]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd2:	d152      	bne.n	800107a <HAL_RCC_OscConfig+0xf6>
 8000fd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fdc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000fe0:	fa93 f3a3 	rbit	r3, r3
 8000fe4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fe8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fec:	fab3 f383 	clz	r3, r3
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d102      	bne.n	8001006 <HAL_RCC_OscConfig+0x82>
 8001000:	4b99      	ldr	r3, [pc, #612]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	e015      	b.n	8001032 <HAL_RCC_OscConfig+0xae>
 8001006:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001012:	fa93 f3a3 	rbit	r3, r3
 8001016:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800101a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800101e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001022:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001026:	fa93 f3a3 	rbit	r3, r3
 800102a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800102e:	4b8e      	ldr	r3, [pc, #568]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 8001030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001032:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001036:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800103a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800103e:	fa92 f2a2 	rbit	r2, r2
 8001042:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001046:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800104a:	fab2 f282 	clz	r2, r2
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	f042 0220 	orr.w	r2, r2, #32
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	f002 021f 	and.w	r2, r2, #31
 800105a:	2101      	movs	r1, #1
 800105c:	fa01 f202 	lsl.w	r2, r1, r2
 8001060:	4013      	ands	r3, r2
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 8102 	beq.w	800126c <HAL_RCC_OscConfig+0x2e8>
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	f040 80fc 	bne.w	800126c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	f000 be93 	b.w	8001da0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001084:	d106      	bne.n	8001094 <HAL_RCC_OscConfig+0x110>
 8001086:	4b78      	ldr	r3, [pc, #480]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a77      	ldr	r2, [pc, #476]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 800108c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e030      	b.n	80010f6 <HAL_RCC_OscConfig+0x172>
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10c      	bne.n	80010b8 <HAL_RCC_OscConfig+0x134>
 800109e:	4b72      	ldr	r3, [pc, #456]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a71      	ldr	r2, [pc, #452]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 80010a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	4b6f      	ldr	r3, [pc, #444]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a6e      	ldr	r2, [pc, #440]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 80010b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e01e      	b.n	80010f6 <HAL_RCC_OscConfig+0x172>
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c2:	d10c      	bne.n	80010de <HAL_RCC_OscConfig+0x15a>
 80010c4:	4b68      	ldr	r3, [pc, #416]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a67      	ldr	r2, [pc, #412]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 80010ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b65      	ldr	r3, [pc, #404]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a64      	ldr	r2, [pc, #400]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 80010d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	e00b      	b.n	80010f6 <HAL_RCC_OscConfig+0x172>
 80010de:	4b62      	ldr	r3, [pc, #392]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a61      	ldr	r2, [pc, #388]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 80010e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4b5f      	ldr	r3, [pc, #380]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a5e      	ldr	r2, [pc, #376]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 80010f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d059      	beq.n	80011b4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff fcac 	bl	8000a5c <HAL_GetTick>
 8001104:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001108:	e00a      	b.n	8001120 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800110a:	f7ff fca7 	bl	8000a5c <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b64      	cmp	r3, #100	; 0x64
 8001118:	d902      	bls.n	8001120 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	f000 be40 	b.w	8001da0 <HAL_RCC_OscConfig+0xe1c>
 8001120:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001124:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001128:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800112c:	fa93 f3a3 	rbit	r3, r3
 8001130:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001134:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001138:	fab3 f383 	clz	r3, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	b2db      	uxtb	r3, r3
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b01      	cmp	r3, #1
 800114a:	d102      	bne.n	8001152 <HAL_RCC_OscConfig+0x1ce>
 800114c:	4b46      	ldr	r3, [pc, #280]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	e015      	b.n	800117e <HAL_RCC_OscConfig+0x1fa>
 8001152:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001156:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800115e:	fa93 f3a3 	rbit	r3, r3
 8001162:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800116a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800116e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001172:	fa93 f3a3 	rbit	r3, r3
 8001176:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800117a:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001182:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001186:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800118a:	fa92 f2a2 	rbit	r2, r2
 800118e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001192:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001196:	fab2 f282 	clz	r2, r2
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	f042 0220 	orr.w	r2, r2, #32
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	f002 021f 	and.w	r2, r2, #31
 80011a6:	2101      	movs	r1, #1
 80011a8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0ab      	beq.n	800110a <HAL_RCC_OscConfig+0x186>
 80011b2:	e05c      	b.n	800126e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fc52 	bl	8000a5c <HAL_GetTick>
 80011b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011bc:	e00a      	b.n	80011d4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011be:	f7ff fc4d 	bl	8000a5c <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b64      	cmp	r3, #100	; 0x64
 80011cc:	d902      	bls.n	80011d4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	f000 bde6 	b.w	8001da0 <HAL_RCC_OscConfig+0xe1c>
 80011d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011d8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80011e0:	fa93 f3a3 	rbit	r3, r3
 80011e4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80011e8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ec:	fab3 f383 	clz	r3, r3
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d102      	bne.n	8001206 <HAL_RCC_OscConfig+0x282>
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	e015      	b.n	8001232 <HAL_RCC_OscConfig+0x2ae>
 8001206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800120a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001212:	fa93 f3a3 	rbit	r3, r3
 8001216:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800121a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800121e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001222:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001226:	fa93 f3a3 	rbit	r3, r3
 800122a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_RCC_OscConfig+0x2e4>)
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001232:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001236:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800123a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800123e:	fa92 f2a2 	rbit	r2, r2
 8001242:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001246:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800124a:	fab2 f282 	clz	r2, r2
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	f042 0220 	orr.w	r2, r2, #32
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	f002 021f 	and.w	r2, r2, #31
 800125a:	2101      	movs	r1, #1
 800125c:	fa01 f202 	lsl.w	r2, r1, r2
 8001260:	4013      	ands	r3, r2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1ab      	bne.n	80011be <HAL_RCC_OscConfig+0x23a>
 8001266:	e002      	b.n	800126e <HAL_RCC_OscConfig+0x2ea>
 8001268:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 8170 	beq.w	800155e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800127e:	4bd0      	ldr	r3, [pc, #832]	; (80015c0 <HAL_RCC_OscConfig+0x63c>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00c      	beq.n	80012a4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800128a:	4bcd      	ldr	r3, [pc, #820]	; (80015c0 <HAL_RCC_OscConfig+0x63c>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b08      	cmp	r3, #8
 8001294:	d16d      	bne.n	8001372 <HAL_RCC_OscConfig+0x3ee>
 8001296:	4bca      	ldr	r3, [pc, #808]	; (80015c0 <HAL_RCC_OscConfig+0x63c>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800129e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012a2:	d166      	bne.n	8001372 <HAL_RCC_OscConfig+0x3ee>
 80012a4:	2302      	movs	r3, #2
 80012a6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012aa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80012ae:	fa93 f3a3 	rbit	r3, r3
 80012b2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80012b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ba:	fab3 f383 	clz	r3, r3
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	095b      	lsrs	r3, r3, #5
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d102      	bne.n	80012d4 <HAL_RCC_OscConfig+0x350>
 80012ce:	4bbc      	ldr	r3, [pc, #752]	; (80015c0 <HAL_RCC_OscConfig+0x63c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	e013      	b.n	80012fc <HAL_RCC_OscConfig+0x378>
 80012d4:	2302      	movs	r3, #2
 80012d6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012da:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80012de:	fa93 f3a3 	rbit	r3, r3
 80012e2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80012e6:	2302      	movs	r3, #2
 80012e8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012ec:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80012f0:	fa93 f3a3 	rbit	r3, r3
 80012f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80012f8:	4bb1      	ldr	r3, [pc, #708]	; (80015c0 <HAL_RCC_OscConfig+0x63c>)
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	2202      	movs	r2, #2
 80012fe:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001302:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001306:	fa92 f2a2 	rbit	r2, r2
 800130a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800130e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001312:	fab2 f282 	clz	r2, r2
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	f042 0220 	orr.w	r2, r2, #32
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	f002 021f 	and.w	r2, r2, #31
 8001322:	2101      	movs	r1, #1
 8001324:	fa01 f202 	lsl.w	r2, r1, r2
 8001328:	4013      	ands	r3, r2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d007      	beq.n	800133e <HAL_RCC_OscConfig+0x3ba>
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d002      	beq.n	800133e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	f000 bd31 	b.w	8001da0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133e:	4ba0      	ldr	r3, [pc, #640]	; (80015c0 <HAL_RCC_OscConfig+0x63c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	21f8      	movs	r1, #248	; 0xf8
 800134e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001352:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001356:	fa91 f1a1 	rbit	r1, r1
 800135a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800135e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001362:	fab1 f181 	clz	r1, r1
 8001366:	b2c9      	uxtb	r1, r1
 8001368:	408b      	lsls	r3, r1
 800136a:	4995      	ldr	r1, [pc, #596]	; (80015c0 <HAL_RCC_OscConfig+0x63c>)
 800136c:	4313      	orrs	r3, r2
 800136e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001370:	e0f5      	b.n	800155e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8085 	beq.w	8001488 <HAL_RCC_OscConfig+0x504>
 800137e:	2301      	movs	r3, #1
 8001380:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001384:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001388:	fa93 f3a3 	rbit	r3, r3
 800138c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001390:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001394:	fab3 f383 	clz	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800139e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	461a      	mov	r2, r3
 80013a6:	2301      	movs	r3, #1
 80013a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013aa:	f7ff fb57 	bl	8000a5c <HAL_GetTick>
 80013ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b2:	e00a      	b.n	80013ca <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b4:	f7ff fb52 	bl	8000a5c <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d902      	bls.n	80013ca <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	f000 bceb 	b.w	8001da0 <HAL_RCC_OscConfig+0xe1c>
 80013ca:	2302      	movs	r3, #2
 80013cc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80013d4:	fa93 f3a3 	rbit	r3, r3
 80013d8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80013dc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e0:	fab3 f383 	clz	r3, r3
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d102      	bne.n	80013fa <HAL_RCC_OscConfig+0x476>
 80013f4:	4b72      	ldr	r3, [pc, #456]	; (80015c0 <HAL_RCC_OscConfig+0x63c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	e013      	b.n	8001422 <HAL_RCC_OscConfig+0x49e>
 80013fa:	2302      	movs	r3, #2
 80013fc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001404:	fa93 f3a3 	rbit	r3, r3
 8001408:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800140c:	2302      	movs	r3, #2
 800140e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001412:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001416:	fa93 f3a3 	rbit	r3, r3
 800141a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800141e:	4b68      	ldr	r3, [pc, #416]	; (80015c0 <HAL_RCC_OscConfig+0x63c>)
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	2202      	movs	r2, #2
 8001424:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001428:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800142c:	fa92 f2a2 	rbit	r2, r2
 8001430:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001434:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001438:	fab2 f282 	clz	r2, r2
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	f042 0220 	orr.w	r2, r2, #32
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	f002 021f 	and.w	r2, r2, #31
 8001448:	2101      	movs	r1, #1
 800144a:	fa01 f202 	lsl.w	r2, r1, r2
 800144e:	4013      	ands	r3, r2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0af      	beq.n	80013b4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001454:	4b5a      	ldr	r3, [pc, #360]	; (80015c0 <HAL_RCC_OscConfig+0x63c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	21f8      	movs	r1, #248	; 0xf8
 8001464:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800146c:	fa91 f1a1 	rbit	r1, r1
 8001470:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001474:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001478:	fab1 f181 	clz	r1, r1
 800147c:	b2c9      	uxtb	r1, r1
 800147e:	408b      	lsls	r3, r1
 8001480:	494f      	ldr	r1, [pc, #316]	; (80015c0 <HAL_RCC_OscConfig+0x63c>)
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]
 8001486:	e06a      	b.n	800155e <HAL_RCC_OscConfig+0x5da>
 8001488:	2301      	movs	r3, #1
 800148a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001492:	fa93 f3a3 	rbit	r3, r3
 8001496:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800149a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	461a      	mov	r2, r3
 80014b0:	2300      	movs	r3, #0
 80014b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fad2 	bl	8000a5c <HAL_GetTick>
 80014b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014bc:	e00a      	b.n	80014d4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014be:	f7ff facd 	bl	8000a5c <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d902      	bls.n	80014d4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	f000 bc66 	b.w	8001da0 <HAL_RCC_OscConfig+0xe1c>
 80014d4:	2302      	movs	r3, #2
 80014d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80014de:	fa93 f3a3 	rbit	r3, r3
 80014e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80014e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ea:	fab3 f383 	clz	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	095b      	lsrs	r3, r3, #5
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d102      	bne.n	8001504 <HAL_RCC_OscConfig+0x580>
 80014fe:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <HAL_RCC_OscConfig+0x63c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	e013      	b.n	800152c <HAL_RCC_OscConfig+0x5a8>
 8001504:	2302      	movs	r3, #2
 8001506:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001516:	2302      	movs	r3, #2
 8001518:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800151c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001520:	fa93 f3a3 	rbit	r3, r3
 8001524:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001528:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <HAL_RCC_OscConfig+0x63c>)
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	2202      	movs	r2, #2
 800152e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001532:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001536:	fa92 f2a2 	rbit	r2, r2
 800153a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800153e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001542:	fab2 f282 	clz	r2, r2
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	f042 0220 	orr.w	r2, r2, #32
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	f002 021f 	and.w	r2, r2, #31
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	4013      	ands	r3, r2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1af      	bne.n	80014be <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80da 	beq.w	8001722 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d069      	beq.n	800164c <HAL_RCC_OscConfig+0x6c8>
 8001578:	2301      	movs	r3, #1
 800157a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001582:	fa93 f3a3 	rbit	r3, r3
 8001586:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800158a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158e:	fab3 f383 	clz	r3, r3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_RCC_OscConfig+0x640>)
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	461a      	mov	r2, r3
 800159e:	2301      	movs	r3, #1
 80015a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fa5b 	bl	8000a5c <HAL_GetTick>
 80015a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	e00d      	b.n	80015c8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ac:	f7ff fa56 	bl	8000a5c <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d905      	bls.n	80015c8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e3ef      	b.n	8001da0 <HAL_RCC_OscConfig+0xe1c>
 80015c0:	40021000 	.word	0x40021000
 80015c4:	10908120 	.word	0x10908120
 80015c8:	2302      	movs	r3, #2
 80015ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015d2:	fa93 f2a3 	rbit	r2, r3
 80015d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80015e0:	2202      	movs	r2, #2
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	fa93 f2a3 	rbit	r2, r3
 80015ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015f8:	2202      	movs	r2, #2
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	fa93 f2a3 	rbit	r2, r3
 8001606:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800160a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160c:	4ba4      	ldr	r3, [pc, #656]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 800160e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001610:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001614:	2102      	movs	r1, #2
 8001616:	6019      	str	r1, [r3, #0]
 8001618:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	fa93 f1a3 	rbit	r1, r3
 8001622:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001626:	6019      	str	r1, [r3, #0]
  return result;
 8001628:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	fab3 f383 	clz	r3, r3
 8001632:	b2db      	uxtb	r3, r3
 8001634:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001638:	b2db      	uxtb	r3, r3
 800163a:	f003 031f 	and.w	r3, r3, #31
 800163e:	2101      	movs	r1, #1
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	4013      	ands	r3, r2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0b0      	beq.n	80015ac <HAL_RCC_OscConfig+0x628>
 800164a:	e06a      	b.n	8001722 <HAL_RCC_OscConfig+0x79e>
 800164c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001654:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	fa93 f2a3 	rbit	r2, r3
 800165e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001662:	601a      	str	r2, [r3, #0]
  return result;
 8001664:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001668:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800166a:	fab3 f383 	clz	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	4b8c      	ldr	r3, [pc, #560]	; (80018a4 <HAL_RCC_OscConfig+0x920>)
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	461a      	mov	r2, r3
 800167a:	2300      	movs	r3, #0
 800167c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167e:	f7ff f9ed 	bl	8000a5c <HAL_GetTick>
 8001682:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001686:	e009      	b.n	800169c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff f9e8 	bl	8000a5c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e381      	b.n	8001da0 <HAL_RCC_OscConfig+0xe1c>
 800169c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80016a0:	2202      	movs	r2, #2
 80016a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	fa93 f2a3 	rbit	r2, r3
 80016ae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016b8:	2202      	movs	r2, #2
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	fa93 f2a3 	rbit	r2, r3
 80016c6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016d0:	2202      	movs	r2, #2
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	fa93 f2a3 	rbit	r2, r3
 80016de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e4:	4b6e      	ldr	r3, [pc, #440]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 80016e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016ec:	2102      	movs	r1, #2
 80016ee:	6019      	str	r1, [r3, #0]
 80016f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	fa93 f1a3 	rbit	r1, r3
 80016fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016fe:	6019      	str	r1, [r3, #0]
  return result;
 8001700:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	fab3 f383 	clz	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	2101      	movs	r1, #1
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	4013      	ands	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1b2      	bne.n	8001688 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 8157 	beq.w	80019e0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001738:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d112      	bne.n	800176a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001744:	4b56      	ldr	r3, [pc, #344]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	4a55      	ldr	r2, [pc, #340]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 800174a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174e:	61d3      	str	r3, [r2, #28]
 8001750:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001764:	2301      	movs	r3, #1
 8001766:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176a:	4b4f      	ldr	r3, [pc, #316]	; (80018a8 <HAL_RCC_OscConfig+0x924>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d11a      	bne.n	80017ac <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001776:	4b4c      	ldr	r3, [pc, #304]	; (80018a8 <HAL_RCC_OscConfig+0x924>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a4b      	ldr	r2, [pc, #300]	; (80018a8 <HAL_RCC_OscConfig+0x924>)
 800177c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001780:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001782:	f7ff f96b 	bl	8000a5c <HAL_GetTick>
 8001786:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178a:	e009      	b.n	80017a0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178c:	f7ff f966 	bl	8000a5c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b64      	cmp	r3, #100	; 0x64
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e2ff      	b.n	8001da0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <HAL_RCC_OscConfig+0x924>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0ef      	beq.n	800178c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d106      	bne.n	80017c4 <HAL_RCC_OscConfig+0x840>
 80017b6:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4a39      	ldr	r2, [pc, #228]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6213      	str	r3, [r2, #32]
 80017c2:	e02f      	b.n	8001824 <HAL_RCC_OscConfig+0x8a0>
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x864>
 80017ce:	4b34      	ldr	r3, [pc, #208]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	4a33      	ldr	r2, [pc, #204]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	6213      	str	r3, [r2, #32]
 80017da:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	4a30      	ldr	r2, [pc, #192]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 80017e0:	f023 0304 	bic.w	r3, r3, #4
 80017e4:	6213      	str	r3, [r2, #32]
 80017e6:	e01d      	b.n	8001824 <HAL_RCC_OscConfig+0x8a0>
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0x888>
 80017f2:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4a2a      	ldr	r2, [pc, #168]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6213      	str	r3, [r2, #32]
 80017fe:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4a27      	ldr	r2, [pc, #156]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6213      	str	r3, [r2, #32]
 800180a:	e00b      	b.n	8001824 <HAL_RCC_OscConfig+0x8a0>
 800180c:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4a23      	ldr	r2, [pc, #140]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 8001812:	f023 0301 	bic.w	r3, r3, #1
 8001816:	6213      	str	r3, [r2, #32]
 8001818:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4a20      	ldr	r2, [pc, #128]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 800181e:	f023 0304 	bic.w	r3, r3, #4
 8001822:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d06a      	beq.n	8001904 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182e:	f7ff f915 	bl	8000a5c <HAL_GetTick>
 8001832:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001836:	e00b      	b.n	8001850 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001838:	f7ff f910 	bl	8000a5c <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	; 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e2a7      	b.n	8001da0 <HAL_RCC_OscConfig+0xe1c>
 8001850:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001854:	2202      	movs	r2, #2
 8001856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001858:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	fa93 f2a3 	rbit	r2, r3
 8001862:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800186c:	2202      	movs	r2, #2
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	fa93 f2a3 	rbit	r2, r3
 800187a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800187e:	601a      	str	r2, [r3, #0]
  return result;
 8001880:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001884:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001886:	fab3 f383 	clz	r3, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	095b      	lsrs	r3, r3, #5
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d108      	bne.n	80018ac <HAL_RCC_OscConfig+0x928>
 800189a:	4b01      	ldr	r3, [pc, #4]	; (80018a0 <HAL_RCC_OscConfig+0x91c>)
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	e013      	b.n	80018c8 <HAL_RCC_OscConfig+0x944>
 80018a0:	40021000 	.word	0x40021000
 80018a4:	10908120 	.word	0x10908120
 80018a8:	40007000 	.word	0x40007000
 80018ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80018b0:	2202      	movs	r2, #2
 80018b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	fa93 f2a3 	rbit	r2, r3
 80018be:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	4bc0      	ldr	r3, [pc, #768]	; (8001bc8 <HAL_RCC_OscConfig+0xc44>)
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80018cc:	2102      	movs	r1, #2
 80018ce:	6011      	str	r1, [r2, #0]
 80018d0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	fa92 f1a2 	rbit	r1, r2
 80018da:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80018de:	6011      	str	r1, [r2, #0]
  return result;
 80018e0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	fab2 f282 	clz	r2, r2
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	f002 021f 	and.w	r2, r2, #31
 80018f6:	2101      	movs	r1, #1
 80018f8:	fa01 f202 	lsl.w	r2, r1, r2
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d09a      	beq.n	8001838 <HAL_RCC_OscConfig+0x8b4>
 8001902:	e063      	b.n	80019cc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001904:	f7ff f8aa 	bl	8000a5c <HAL_GetTick>
 8001908:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190c:	e00b      	b.n	8001926 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190e:	f7ff f8a5 	bl	8000a5c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e23c      	b.n	8001da0 <HAL_RCC_OscConfig+0xe1c>
 8001926:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800192a:	2202      	movs	r2, #2
 800192c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	fa93 f2a3 	rbit	r2, r3
 8001938:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001942:	2202      	movs	r2, #2
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	fa93 f2a3 	rbit	r2, r3
 8001950:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001954:	601a      	str	r2, [r3, #0]
  return result;
 8001956:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800195a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800195c:	fab3 f383 	clz	r3, r3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f043 0302 	orr.w	r3, r3, #2
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d102      	bne.n	8001976 <HAL_RCC_OscConfig+0x9f2>
 8001970:	4b95      	ldr	r3, [pc, #596]	; (8001bc8 <HAL_RCC_OscConfig+0xc44>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	e00d      	b.n	8001992 <HAL_RCC_OscConfig+0xa0e>
 8001976:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800197a:	2202      	movs	r2, #2
 800197c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	fa93 f2a3 	rbit	r2, r3
 8001988:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	4b8e      	ldr	r3, [pc, #568]	; (8001bc8 <HAL_RCC_OscConfig+0xc44>)
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001996:	2102      	movs	r1, #2
 8001998:	6011      	str	r1, [r2, #0]
 800199a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	fa92 f1a2 	rbit	r1, r2
 80019a4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80019a8:	6011      	str	r1, [r2, #0]
  return result;
 80019aa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	fab2 f282 	clz	r2, r2
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	f002 021f 	and.w	r2, r2, #31
 80019c0:	2101      	movs	r1, #1
 80019c2:	fa01 f202 	lsl.w	r2, r1, r2
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1a0      	bne.n	800190e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019cc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d105      	bne.n	80019e0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d4:	4b7c      	ldr	r3, [pc, #496]	; (8001bc8 <HAL_RCC_OscConfig+0xc44>)
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	4a7b      	ldr	r2, [pc, #492]	; (8001bc8 <HAL_RCC_OscConfig+0xc44>)
 80019da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 81d9 	beq.w	8001d9e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ec:	4b76      	ldr	r3, [pc, #472]	; (8001bc8 <HAL_RCC_OscConfig+0xc44>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	f000 81a6 	beq.w	8001d46 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	f040 811e 	bne.w	8001c42 <HAL_RCC_OscConfig+0xcbe>
 8001a06:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	fa93 f2a3 	rbit	r2, r3
 8001a1a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a1e:	601a      	str	r2, [r3, #0]
  return result;
 8001a20:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a24:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a26:	fab3 f383 	clz	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	461a      	mov	r2, r3
 8001a38:	2300      	movs	r3, #0
 8001a3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f80e 	bl	8000a5c <HAL_GetTick>
 8001a40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a44:	e009      	b.n	8001a5a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a46:	f7ff f809 	bl	8000a5c <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e1a2      	b.n	8001da0 <HAL_RCC_OscConfig+0xe1c>
 8001a5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a64:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	fa93 f2a3 	rbit	r2, r3
 8001a6e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a72:	601a      	str	r2, [r3, #0]
  return result;
 8001a74:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7a:	fab3 f383 	clz	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	095b      	lsrs	r3, r3, #5
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d102      	bne.n	8001a94 <HAL_RCC_OscConfig+0xb10>
 8001a8e:	4b4e      	ldr	r3, [pc, #312]	; (8001bc8 <HAL_RCC_OscConfig+0xc44>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	e01b      	b.n	8001acc <HAL_RCC_OscConfig+0xb48>
 8001a94:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	fa93 f2a3 	rbit	r2, r3
 8001aa8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ab2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	fa93 f2a3 	rbit	r2, r3
 8001ac2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	4b3f      	ldr	r3, [pc, #252]	; (8001bc8 <HAL_RCC_OscConfig+0xc44>)
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001ad0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ad4:	6011      	str	r1, [r2, #0]
 8001ad6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	fa92 f1a2 	rbit	r1, r2
 8001ae0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ae4:	6011      	str	r1, [r2, #0]
  return result;
 8001ae6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	fab2 f282 	clz	r2, r2
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	f042 0220 	orr.w	r2, r2, #32
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	f002 021f 	and.w	r2, r2, #31
 8001afc:	2101      	movs	r1, #1
 8001afe:	fa01 f202 	lsl.w	r2, r1, r2
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d19e      	bne.n	8001a46 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b08:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <HAL_RCC_OscConfig+0xc44>)
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	f023 020f 	bic.w	r2, r3, #15
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	492c      	ldr	r1, [pc, #176]	; (8001bc8 <HAL_RCC_OscConfig+0xc44>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001b1c:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_RCC_OscConfig+0xc44>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6a19      	ldr	r1, [r3, #32]
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	4925      	ldr	r1, [pc, #148]	; (8001bc8 <HAL_RCC_OscConfig+0xc44>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
 8001b38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	fa93 f2a3 	rbit	r2, r3
 8001b4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b50:	601a      	str	r2, [r3, #0]
  return result;
 8001b52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b56:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	461a      	mov	r2, r3
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6e:	f7fe ff75 	bl	8000a5c <HAL_GetTick>
 8001b72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b76:	e009      	b.n	8001b8c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b78:	f7fe ff70 	bl	8000a5c <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e109      	b.n	8001da0 <HAL_RCC_OscConfig+0xe1c>
 8001b8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	fa93 f2a3 	rbit	r2, r3
 8001ba0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ba4:	601a      	str	r2, [r3, #0]
  return result;
 8001ba6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001baa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bac:	fab3 f383 	clz	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d105      	bne.n	8001bcc <HAL_RCC_OscConfig+0xc48>
 8001bc0:	4b01      	ldr	r3, [pc, #4]	; (8001bc8 <HAL_RCC_OscConfig+0xc44>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	e01e      	b.n	8001c04 <HAL_RCC_OscConfig+0xc80>
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	fa93 f2a3 	rbit	r2, r3
 8001be0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	fa93 f2a3 	rbit	r2, r3
 8001bfa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	4b6a      	ldr	r3, [pc, #424]	; (8001dac <HAL_RCC_OscConfig+0xe28>)
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001c08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c0c:	6011      	str	r1, [r2, #0]
 8001c0e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	fa92 f1a2 	rbit	r1, r2
 8001c18:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c1c:	6011      	str	r1, [r2, #0]
  return result;
 8001c1e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	fab2 f282 	clz	r2, r2
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	f042 0220 	orr.w	r2, r2, #32
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	f002 021f 	and.w	r2, r2, #31
 8001c34:	2101      	movs	r1, #1
 8001c36:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d09b      	beq.n	8001b78 <HAL_RCC_OscConfig+0xbf4>
 8001c40:	e0ad      	b.n	8001d9e <HAL_RCC_OscConfig+0xe1a>
 8001c42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	fa93 f2a3 	rbit	r2, r3
 8001c56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c5a:	601a      	str	r2, [r3, #0]
  return result;
 8001c5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c60:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	461a      	mov	r2, r3
 8001c74:	2300      	movs	r3, #0
 8001c76:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7fe fef0 	bl	8000a5c <HAL_GetTick>
 8001c7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c80:	e009      	b.n	8001c96 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c82:	f7fe feeb 	bl	8000a5c <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e084      	b.n	8001da0 <HAL_RCC_OscConfig+0xe1c>
 8001c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cae:	601a      	str	r2, [r3, #0]
  return result;
 8001cb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cb4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	095b      	lsrs	r3, r3, #5
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d102      	bne.n	8001cd0 <HAL_RCC_OscConfig+0xd4c>
 8001cca:	4b38      	ldr	r3, [pc, #224]	; (8001dac <HAL_RCC_OscConfig+0xe28>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	e01b      	b.n	8001d08 <HAL_RCC_OscConfig+0xd84>
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	fa93 f2a3 	rbit	r2, r3
 8001ce4:	f107 0320 	add.w	r3, r7, #32
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fa93 f2a3 	rbit	r2, r3
 8001cfe:	f107 0318 	add.w	r3, r7, #24
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	4b29      	ldr	r3, [pc, #164]	; (8001dac <HAL_RCC_OscConfig+0xe28>)
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	f107 0214 	add.w	r2, r7, #20
 8001d0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d10:	6011      	str	r1, [r2, #0]
 8001d12:	f107 0214 	add.w	r2, r7, #20
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	fa92 f1a2 	rbit	r1, r2
 8001d1c:	f107 0210 	add.w	r2, r7, #16
 8001d20:	6011      	str	r1, [r2, #0]
  return result;
 8001d22:	f107 0210 	add.w	r2, r7, #16
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	fab2 f282 	clz	r2, r2
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	f042 0220 	orr.w	r2, r2, #32
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	f002 021f 	and.w	r2, r2, #31
 8001d38:	2101      	movs	r1, #1
 8001d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d19e      	bne.n	8001c82 <HAL_RCC_OscConfig+0xcfe>
 8001d44:	e02b      	b.n	8001d9e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e025      	b.n	8001da0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_RCC_OscConfig+0xe28>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <HAL_RCC_OscConfig+0xe28>)
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d68:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d111      	bne.n	8001d9a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d76:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d108      	bne.n	8001d9a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d8c:	f003 020f 	and.w	r2, r3, #15
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d001      	beq.n	8001d9e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000

08001db0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b09e      	sub	sp, #120	; 0x78
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e162      	b.n	800208e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b90      	ldr	r3, [pc, #576]	; (800200c <HAL_RCC_ClockConfig+0x25c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d910      	bls.n	8001df8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b8d      	ldr	r3, [pc, #564]	; (800200c <HAL_RCC_ClockConfig+0x25c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0207 	bic.w	r2, r3, #7
 8001dde:	498b      	ldr	r1, [pc, #556]	; (800200c <HAL_RCC_ClockConfig+0x25c>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b89      	ldr	r3, [pc, #548]	; (800200c <HAL_RCC_ClockConfig+0x25c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e14a      	b.n	800208e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e04:	4b82      	ldr	r3, [pc, #520]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	497f      	ldr	r1, [pc, #508]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 80dc 	beq.w	8001fdc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d13c      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xf6>
 8001e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e30:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d102      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xa6>
 8001e50:	4b6f      	ldr	r3, [pc, #444]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	e00f      	b.n	8001e76 <HAL_RCC_ClockConfig+0xc6>
 8001e56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	667b      	str	r3, [r7, #100]	; 0x64
 8001e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e68:	663b      	str	r3, [r7, #96]	; 0x60
 8001e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e72:	4b67      	ldr	r3, [pc, #412]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e7e:	fa92 f2a2 	rbit	r2, r2
 8001e82:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e86:	fab2 f282 	clz	r2, r2
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	f042 0220 	orr.w	r2, r2, #32
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	f002 021f 	and.w	r2, r2, #31
 8001e96:	2101      	movs	r1, #1
 8001e98:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d17b      	bne.n	8001f9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0f3      	b.n	800208e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d13c      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x178>
 8001eae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	095b      	lsrs	r3, r3, #5
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d102      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x128>
 8001ed2:	4b4f      	ldr	r3, [pc, #316]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	e00f      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x148>
 8001ed8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001edc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee0:	fa93 f3a3 	rbit	r3, r3
 8001ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eea:	643b      	str	r3, [r7, #64]	; 0x40
 8001eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ef4:	4b46      	ldr	r3, [pc, #280]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001efc:	63ba      	str	r2, [r7, #56]	; 0x38
 8001efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f00:	fa92 f2a2 	rbit	r2, r2
 8001f04:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f08:	fab2 f282 	clz	r2, r2
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	f042 0220 	orr.w	r2, r2, #32
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	f002 021f 	and.w	r2, r2, #31
 8001f18:	2101      	movs	r1, #1
 8001f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d13a      	bne.n	8001f9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0b2      	b.n	800208e <HAL_RCC_ClockConfig+0x2de>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	095b      	lsrs	r3, r3, #5
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d102      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x1a0>
 8001f4a:	4b31      	ldr	r3, [pc, #196]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	e00d      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1bc>
 8001f50:	2302      	movs	r3, #2
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	623b      	str	r3, [r7, #32]
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	61ba      	str	r2, [r7, #24]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	fa92 f2a2 	rbit	r2, r2
 8001f76:	617a      	str	r2, [r7, #20]
  return result;
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	fab2 f282 	clz	r2, r2
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	f042 0220 	orr.w	r2, r2, #32
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	f002 021f 	and.w	r2, r2, #31
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e079      	b.n	800208e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f023 0203 	bic.w	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	491a      	ldr	r1, [pc, #104]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fac:	f7fe fd56 	bl	8000a5c <HAL_GetTick>
 8001fb0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb4:	f7fe fd52 	bl	8000a5c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e061      	b.n	800208e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_RCC_ClockConfig+0x260>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 020c 	and.w	r2, r3, #12
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d1eb      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCC_ClockConfig+0x25c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d214      	bcs.n	8002014 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <HAL_RCC_ClockConfig+0x25c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 0207 	bic.w	r2, r3, #7
 8001ff2:	4906      	ldr	r1, [pc, #24]	; (800200c <HAL_RCC_ClockConfig+0x25c>)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b04      	ldr	r3, [pc, #16]	; (800200c <HAL_RCC_ClockConfig+0x25c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d005      	beq.n	8002014 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e040      	b.n	800208e <HAL_RCC_ClockConfig+0x2de>
 800200c:	40022000 	.word	0x40022000
 8002010:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002020:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_RCC_ClockConfig+0x2e8>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	491a      	ldr	r1, [pc, #104]	; (8002098 <HAL_RCC_ClockConfig+0x2e8>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d009      	beq.n	8002052 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800203e:	4b16      	ldr	r3, [pc, #88]	; (8002098 <HAL_RCC_ClockConfig+0x2e8>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4912      	ldr	r1, [pc, #72]	; (8002098 <HAL_RCC_ClockConfig+0x2e8>)
 800204e:	4313      	orrs	r3, r2
 8002050:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002052:	f000 f829 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002056:	4601      	mov	r1, r0
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <HAL_RCC_ClockConfig+0x2e8>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002060:	22f0      	movs	r2, #240	; 0xf0
 8002062:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	fa92 f2a2 	rbit	r2, r2
 800206a:	60fa      	str	r2, [r7, #12]
  return result;
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	fab2 f282 	clz	r2, r2
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	40d3      	lsrs	r3, r2
 8002076:	4a09      	ldr	r2, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x2ec>)
 8002078:	5cd3      	ldrb	r3, [r2, r3]
 800207a:	fa21 f303 	lsr.w	r3, r1, r3
 800207e:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_RCC_ClockConfig+0x2f0>)
 8002080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_RCC_ClockConfig+0x2f4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fca4 	bl	80009d4 <HAL_InitTick>
  
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3778      	adds	r7, #120	; 0x78
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	08003dac 	.word	0x08003dac
 80020a0:	20000000 	.word	0x20000000
 80020a4:	20000004 	.word	0x20000004

080020a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b08b      	sub	sp, #44	; 0x2c
 80020ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020c2:	4b2a      	ldr	r3, [pc, #168]	; (800216c <HAL_RCC_GetSysClockFreq+0xc4>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d002      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x30>
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d003      	beq.n	80020de <HAL_RCC_GetSysClockFreq+0x36>
 80020d6:	e03f      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020d8:	4b25      	ldr	r3, [pc, #148]	; (8002170 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020da:	623b      	str	r3, [r7, #32]
      break;
 80020dc:	e03f      	b.n	800215e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	fa92 f2a2 	rbit	r2, r2
 80020f0:	607a      	str	r2, [r7, #4]
  return result;
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	fab2 f282 	clz	r2, r2
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	40d3      	lsrs	r3, r2
 80020fc:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002102:	4b1a      	ldr	r3, [pc, #104]	; (800216c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	220f      	movs	r2, #15
 800210c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	fa92 f2a2 	rbit	r2, r2
 8002114:	60fa      	str	r2, [r7, #12]
  return result;
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	fab2 f282 	clz	r2, r2
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	40d3      	lsrs	r3, r2
 8002120:	4a15      	ldr	r2, [pc, #84]	; (8002178 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002122:	5cd3      	ldrb	r3, [r2, r3]
 8002124:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002130:	4a0f      	ldr	r2, [pc, #60]	; (8002170 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	fbb2 f2f3 	udiv	r2, r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
 8002140:	e007      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002142:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	fbb2 f2f3 	udiv	r2, r2, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	fb02 f303 	mul.w	r3, r2, r3
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	623b      	str	r3, [r7, #32]
      break;
 8002156:	e002      	b.n	800215e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_RCC_GetSysClockFreq+0xc8>)
 800215a:	623b      	str	r3, [r7, #32]
      break;
 800215c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800215e:	6a3b      	ldr	r3, [r7, #32]
}
 8002160:	4618      	mov	r0, r3
 8002162:	372c      	adds	r7, #44	; 0x2c
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	40021000 	.word	0x40021000
 8002170:	007a1200 	.word	0x007a1200
 8002174:	08003dc4 	.word	0x08003dc4
 8002178:	08003dd4 	.word	0x08003dd4

0800217c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <HAL_RCC_GetHCLKFreq+0x14>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000000 	.word	0x20000000

08002194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800219a:	f7ff ffef 	bl	800217c <HAL_RCC_GetHCLKFreq>
 800219e:	4601      	mov	r1, r0
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	fa92 f2a2 	rbit	r2, r2
 80021b4:	603a      	str	r2, [r7, #0]
  return result;
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	fab2 f282 	clz	r2, r2
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	40d3      	lsrs	r3, r2
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
 80021c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	08003dbc 	.word	0x08003dbc

080021d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021de:	f7ff ffcd 	bl	800217c <HAL_RCC_GetHCLKFreq>
 80021e2:	4601      	mov	r1, r0
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	fa92 f2a2 	rbit	r2, r2
 80021f8:	603a      	str	r2, [r7, #0]
  return result;
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	fab2 f282 	clz	r2, r2
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	40d3      	lsrs	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40021000 	.word	0x40021000
 8002218:	08003dbc 	.word	0x08003dbc

0800221c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b092      	sub	sp, #72	; 0x48
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80d7 	beq.w	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002240:	4b4e      	ldr	r3, [pc, #312]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10e      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224c:	4b4b      	ldr	r3, [pc, #300]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	4a4a      	ldr	r2, [pc, #296]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002256:	61d3      	str	r3, [r2, #28]
 8002258:	4b48      	ldr	r3, [pc, #288]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002264:	2301      	movs	r3, #1
 8002266:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226a:	4b45      	ldr	r3, [pc, #276]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d118      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002276:	4b42      	ldr	r3, [pc, #264]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a41      	ldr	r2, [pc, #260]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002282:	f7fe fbeb 	bl	8000a5c <HAL_GetTick>
 8002286:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002288:	e008      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228a:	f7fe fbe7 	bl	8000a5c <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b64      	cmp	r3, #100	; 0x64
 8002296:	d901      	bls.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e1d6      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229c:	4b38      	ldr	r3, [pc, #224]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022a8:	4b34      	ldr	r3, [pc, #208]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 8084 	beq.w	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d07c      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022c8:	4b2c      	ldr	r3, [pc, #176]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	461a      	mov	r2, r3
 80022f2:	2301      	movs	r3, #1
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	461a      	mov	r2, r3
 8002316:	2300      	movs	r3, #0
 8002318:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800231a:	4a18      	ldr	r2, [pc, #96]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d04b      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7fe fb97 	bl	8000a5c <HAL_GetTick>
 800232e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002330:	e00a      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002332:	f7fe fb93 	bl	8000a5c <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002340:	4293      	cmp	r3, r2
 8002342:	d901      	bls.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e180      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002348:	2302      	movs	r3, #2
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
 8002354:	2302      	movs	r3, #2
 8002356:	623b      	str	r3, [r7, #32]
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	61fb      	str	r3, [r7, #28]
  return result;
 8002360:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f043 0302 	orr.w	r3, r3, #2
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d108      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002376:	4b01      	ldr	r3, [pc, #4]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	e00d      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800237c:	40021000 	.word	0x40021000
 8002380:	40007000 	.word	0x40007000
 8002384:	10908100 	.word	0x10908100
 8002388:	2302      	movs	r3, #2
 800238a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fa93 f3a3 	rbit	r3, r3
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	4ba0      	ldr	r3, [pc, #640]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	2202      	movs	r2, #2
 800239a:	613a      	str	r2, [r7, #16]
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	fa92 f2a2 	rbit	r2, r2
 80023a2:	60fa      	str	r2, [r7, #12]
  return result;
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	fab2 f282 	clz	r2, r2
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	f002 021f 	and.w	r2, r2, #31
 80023b6:	2101      	movs	r1, #1
 80023b8:	fa01 f202 	lsl.w	r2, r1, r2
 80023bc:	4013      	ands	r3, r2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0b7      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023c2:	4b95      	ldr	r3, [pc, #596]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	4992      	ldr	r1, [pc, #584]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d105      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023dc:	4b8e      	ldr	r3, [pc, #568]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	4a8d      	ldr	r2, [pc, #564]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023f4:	4b88      	ldr	r3, [pc, #544]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	f023 0203 	bic.w	r2, r3, #3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4985      	ldr	r1, [pc, #532]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002402:	4313      	orrs	r3, r2
 8002404:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002412:	4b81      	ldr	r3, [pc, #516]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	497e      	ldr	r1, [pc, #504]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002420:	4313      	orrs	r3, r2
 8002422:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002430:	4b79      	ldr	r3, [pc, #484]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	4976      	ldr	r1, [pc, #472]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800243e:	4313      	orrs	r3, r2
 8002440:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800244e:	4b72      	ldr	r3, [pc, #456]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f023 0210 	bic.w	r2, r3, #16
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	496f      	ldr	r1, [pc, #444]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800245c:	4313      	orrs	r3, r2
 800245e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800246c:	4b6a      	ldr	r3, [pc, #424]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002478:	4967      	ldr	r1, [pc, #412]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800247a:	4313      	orrs	r3, r2
 800247c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800248a:	4b63      	ldr	r3, [pc, #396]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f023 0220 	bic.w	r2, r3, #32
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	4960      	ldr	r1, [pc, #384]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002498:	4313      	orrs	r3, r2
 800249a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024a8:	4b5b      	ldr	r3, [pc, #364]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	4958      	ldr	r1, [pc, #352]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d008      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024c6:	4b54      	ldr	r3, [pc, #336]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	4951      	ldr	r1, [pc, #324]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024e4:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	4949      	ldr	r1, [pc, #292]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d008      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002502:	4b45      	ldr	r3, [pc, #276]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4942      	ldr	r1, [pc, #264]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002520:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002524:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	493a      	ldr	r1, [pc, #232]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800252e:	4313      	orrs	r3, r2
 8002530:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800253e:	4b36      	ldr	r3, [pc, #216]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	4933      	ldr	r1, [pc, #204]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800254c:	4313      	orrs	r3, r2
 800254e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800255c:	4b2e      	ldr	r3, [pc, #184]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002568:	492b      	ldr	r1, [pc, #172]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800256a:	4313      	orrs	r3, r2
 800256c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800257a:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	4924      	ldr	r1, [pc, #144]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002588:	4313      	orrs	r3, r2
 800258a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002598:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a4:	491c      	ldr	r1, [pc, #112]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d008      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c2:	4915      	ldr	r1, [pc, #84]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80025d4:	4b10      	ldr	r3, [pc, #64]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	490d      	ldr	r1, [pc, #52]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d008      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fe:	4906      	ldr	r1, [pc, #24]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002600:	4313      	orrs	r3, r2
 8002602:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00c      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002610:	4b01      	ldr	r3, [pc, #4]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	e002      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002624:	490b      	ldr	r1, [pc, #44]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002626:	4313      	orrs	r3, r2
 8002628:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002636:	4b07      	ldr	r3, [pc, #28]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002642:	4904      	ldr	r1, [pc, #16]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002644:	4313      	orrs	r3, r2
 8002646:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3748      	adds	r7, #72	; 0x48
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000

08002658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e01d      	b.n	80026a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe f876 	bl	8000770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3304      	adds	r3, #4
 8002694:	4619      	mov	r1, r3
 8002696:	4610      	mov	r0, r2
 8002698:	f000 fa96 	bl	8002bc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e01d      	b.n	80026fc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d106      	bne.n	80026da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7fe f82b 	bl	8000730 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2202      	movs	r2, #2
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3304      	adds	r3, #4
 80026ea:	4619      	mov	r1, r3
 80026ec:	4610      	mov	r0, r2
 80026ee:	f000 fa6b 	bl	8002bc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2201      	movs	r2, #1
 8002714:	6839      	ldr	r1, [r7, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fdfa 	bl	8003310 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a21      	ldr	r2, [pc, #132]	; (80027a8 <HAL_TIM_PWM_Start+0xa4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d018      	beq.n	8002758 <HAL_TIM_PWM_Start+0x54>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a20      	ldr	r2, [pc, #128]	; (80027ac <HAL_TIM_PWM_Start+0xa8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d013      	beq.n	8002758 <HAL_TIM_PWM_Start+0x54>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1e      	ldr	r2, [pc, #120]	; (80027b0 <HAL_TIM_PWM_Start+0xac>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00e      	beq.n	8002758 <HAL_TIM_PWM_Start+0x54>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <HAL_TIM_PWM_Start+0xb0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d009      	beq.n	8002758 <HAL_TIM_PWM_Start+0x54>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a1b      	ldr	r2, [pc, #108]	; (80027b8 <HAL_TIM_PWM_Start+0xb4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d004      	beq.n	8002758 <HAL_TIM_PWM_Start+0x54>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1a      	ldr	r2, [pc, #104]	; (80027bc <HAL_TIM_PWM_Start+0xb8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_TIM_PWM_Start+0x58>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <HAL_TIM_PWM_Start+0x5a>
 800275c:	2300      	movs	r3, #0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002770:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_TIM_PWM_Start+0xbc>)
 800277a:	4013      	ands	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b06      	cmp	r3, #6
 8002782:	d00b      	beq.n	800279c <HAL_TIM_PWM_Start+0x98>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278a:	d007      	beq.n	800279c <HAL_TIM_PWM_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40012c00 	.word	0x40012c00
 80027ac:	40013400 	.word	0x40013400
 80027b0:	40014000 	.word	0x40014000
 80027b4:	40014400 	.word	0x40014400
 80027b8:	40014800 	.word	0x40014800
 80027bc:	40015000 	.word	0x40015000
 80027c0:	00010007 	.word	0x00010007

080027c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e083      	b.n	80028e0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d106      	bne.n	80027f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7fd ff5f 	bl	80006b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2202      	movs	r2, #2
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002808:	f023 0307 	bic.w	r3, r3, #7
 800280c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3304      	adds	r3, #4
 8002816:	4619      	mov	r1, r3
 8002818:	4610      	mov	r0, r2
 800281a:	f000 f9d5 	bl	8002bc8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002846:	f023 0303 	bic.w	r3, r3, #3
 800284a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	4313      	orrs	r3, r2
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002864:	f023 030c 	bic.w	r3, r3, #12
 8002868:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002870:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002874:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	4313      	orrs	r3, r2
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	011a      	lsls	r2, r3, #4
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	031b      	lsls	r3, r3, #12
 8002894:	4313      	orrs	r3, r2
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80028a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80028aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	4313      	orrs	r3, r2
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <HAL_TIM_Encoder_Start_IT+0x16>
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d010      	beq.n	800291e <HAL_TIM_Encoder_Start_IT+0x36>
 80028fc:	e01f      	b.n	800293e <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2201      	movs	r2, #1
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fd02 	bl	8003310 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0202 	orr.w	r2, r2, #2
 800291a:	60da      	str	r2, [r3, #12]
      break;
 800291c:	e02e      	b.n	800297c <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2201      	movs	r2, #1
 8002924:	2104      	movs	r1, #4
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fcf2 	bl	8003310 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0204 	orr.w	r2, r2, #4
 800293a:	60da      	str	r2, [r3, #12]
      break;
 800293c:	e01e      	b.n	800297c <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2201      	movs	r2, #1
 8002944:	2100      	movs	r1, #0
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fce2 	bl	8003310 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2201      	movs	r2, #1
 8002952:	2104      	movs	r1, #4
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fcdb 	bl	8003310 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0202 	orr.w	r2, r2, #2
 8002968:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0204 	orr.w	r2, r2, #4
 8002978:	60da      	str	r2, [r3, #12]
      break;
 800297a:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e105      	b.n	8002bbe <HAL_TIM_PWM_ConfigChannel+0x226>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2202      	movs	r2, #2
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b14      	cmp	r3, #20
 80029c6:	f200 80f0 	bhi.w	8002baa <HAL_TIM_PWM_ConfigChannel+0x212>
 80029ca:	a201      	add	r2, pc, #4	; (adr r2, 80029d0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80029cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d0:	08002a25 	.word	0x08002a25
 80029d4:	08002bab 	.word	0x08002bab
 80029d8:	08002bab 	.word	0x08002bab
 80029dc:	08002bab 	.word	0x08002bab
 80029e0:	08002a65 	.word	0x08002a65
 80029e4:	08002bab 	.word	0x08002bab
 80029e8:	08002bab 	.word	0x08002bab
 80029ec:	08002bab 	.word	0x08002bab
 80029f0:	08002aa7 	.word	0x08002aa7
 80029f4:	08002bab 	.word	0x08002bab
 80029f8:	08002bab 	.word	0x08002bab
 80029fc:	08002bab 	.word	0x08002bab
 8002a00:	08002ae7 	.word	0x08002ae7
 8002a04:	08002bab 	.word	0x08002bab
 8002a08:	08002bab 	.word	0x08002bab
 8002a0c:	08002bab 	.word	0x08002bab
 8002a10:	08002b29 	.word	0x08002b29
 8002a14:	08002bab 	.word	0x08002bab
 8002a18:	08002bab 	.word	0x08002bab
 8002a1c:	08002bab 	.word	0x08002bab
 8002a20:	08002b69 	.word	0x08002b69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f96a 	bl	8002d04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0208 	orr.w	r2, r2, #8
 8002a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699a      	ldr	r2, [r3, #24]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0204 	bic.w	r2, r2, #4
 8002a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6999      	ldr	r1, [r3, #24]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	619a      	str	r2, [r3, #24]
      break;
 8002a62:	e0a3      	b.n	8002bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f9e4 	bl	8002e38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6999      	ldr	r1, [r3, #24]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	021a      	lsls	r2, r3, #8
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	619a      	str	r2, [r3, #24]
      break;
 8002aa4:	e082      	b.n	8002bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68b9      	ldr	r1, [r7, #8]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fa57 	bl	8002f60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0208 	orr.w	r2, r2, #8
 8002ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69da      	ldr	r2, [r3, #28]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0204 	bic.w	r2, r2, #4
 8002ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69d9      	ldr	r1, [r3, #28]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	61da      	str	r2, [r3, #28]
      break;
 8002ae4:	e062      	b.n	8002bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 fac9 	bl	8003084 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	69da      	ldr	r2, [r3, #28]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69da      	ldr	r2, [r3, #28]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	69d9      	ldr	r1, [r3, #28]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	021a      	lsls	r2, r3, #8
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	61da      	str	r2, [r3, #28]
      break;
 8002b26:	e041      	b.n	8002bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fb18 	bl	8003164 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0208 	orr.w	r2, r2, #8
 8002b42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0204 	bic.w	r2, r2, #4
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b66:	e021      	b.n	8002bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 fb62 	bl	8003238 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	021a      	lsls	r2, r3, #8
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ba8:	e000      	b.n	8002bac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002baa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop

08002bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a42      	ldr	r2, [pc, #264]	; (8002ce4 <TIM_Base_SetConfig+0x11c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d013      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be6:	d00f      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a3f      	ldr	r2, [pc, #252]	; (8002ce8 <TIM_Base_SetConfig+0x120>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00b      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a3e      	ldr	r2, [pc, #248]	; (8002cec <TIM_Base_SetConfig+0x124>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d007      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a3d      	ldr	r2, [pc, #244]	; (8002cf0 <TIM_Base_SetConfig+0x128>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d003      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3c      	ldr	r2, [pc, #240]	; (8002cf4 <TIM_Base_SetConfig+0x12c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d108      	bne.n	8002c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a31      	ldr	r2, [pc, #196]	; (8002ce4 <TIM_Base_SetConfig+0x11c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d01f      	beq.n	8002c62 <TIM_Base_SetConfig+0x9a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c28:	d01b      	beq.n	8002c62 <TIM_Base_SetConfig+0x9a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a2e      	ldr	r2, [pc, #184]	; (8002ce8 <TIM_Base_SetConfig+0x120>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d017      	beq.n	8002c62 <TIM_Base_SetConfig+0x9a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a2d      	ldr	r2, [pc, #180]	; (8002cec <TIM_Base_SetConfig+0x124>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d013      	beq.n	8002c62 <TIM_Base_SetConfig+0x9a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a2c      	ldr	r2, [pc, #176]	; (8002cf0 <TIM_Base_SetConfig+0x128>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00f      	beq.n	8002c62 <TIM_Base_SetConfig+0x9a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a2c      	ldr	r2, [pc, #176]	; (8002cf8 <TIM_Base_SetConfig+0x130>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00b      	beq.n	8002c62 <TIM_Base_SetConfig+0x9a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a2b      	ldr	r2, [pc, #172]	; (8002cfc <TIM_Base_SetConfig+0x134>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d007      	beq.n	8002c62 <TIM_Base_SetConfig+0x9a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a2a      	ldr	r2, [pc, #168]	; (8002d00 <TIM_Base_SetConfig+0x138>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d003      	beq.n	8002c62 <TIM_Base_SetConfig+0x9a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a25      	ldr	r2, [pc, #148]	; (8002cf4 <TIM_Base_SetConfig+0x12c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d108      	bne.n	8002c74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <TIM_Base_SetConfig+0x11c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d013      	beq.n	8002cc8 <TIM_Base_SetConfig+0x100>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a13      	ldr	r2, [pc, #76]	; (8002cf0 <TIM_Base_SetConfig+0x128>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00f      	beq.n	8002cc8 <TIM_Base_SetConfig+0x100>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a13      	ldr	r2, [pc, #76]	; (8002cf8 <TIM_Base_SetConfig+0x130>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00b      	beq.n	8002cc8 <TIM_Base_SetConfig+0x100>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <TIM_Base_SetConfig+0x134>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d007      	beq.n	8002cc8 <TIM_Base_SetConfig+0x100>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a11      	ldr	r2, [pc, #68]	; (8002d00 <TIM_Base_SetConfig+0x138>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d003      	beq.n	8002cc8 <TIM_Base_SetConfig+0x100>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a0c      	ldr	r2, [pc, #48]	; (8002cf4 <TIM_Base_SetConfig+0x12c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d103      	bne.n	8002cd0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	615a      	str	r2, [r3, #20]
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40012c00 	.word	0x40012c00
 8002ce8:	40000400 	.word	0x40000400
 8002cec:	40000800 	.word	0x40000800
 8002cf0:	40013400 	.word	0x40013400
 8002cf4:	40015000 	.word	0x40015000
 8002cf8:	40014000 	.word	0x40014000
 8002cfc:	40014400 	.word	0x40014400
 8002d00:	40014800 	.word	0x40014800

08002d04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	f023 0201 	bic.w	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0303 	bic.w	r3, r3, #3
 8002d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f023 0302 	bic.w	r3, r3, #2
 8002d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a30      	ldr	r2, [pc, #192]	; (8002e20 <TIM_OC1_SetConfig+0x11c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d013      	beq.n	8002d8c <TIM_OC1_SetConfig+0x88>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a2f      	ldr	r2, [pc, #188]	; (8002e24 <TIM_OC1_SetConfig+0x120>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00f      	beq.n	8002d8c <TIM_OC1_SetConfig+0x88>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a2e      	ldr	r2, [pc, #184]	; (8002e28 <TIM_OC1_SetConfig+0x124>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00b      	beq.n	8002d8c <TIM_OC1_SetConfig+0x88>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a2d      	ldr	r2, [pc, #180]	; (8002e2c <TIM_OC1_SetConfig+0x128>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d007      	beq.n	8002d8c <TIM_OC1_SetConfig+0x88>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a2c      	ldr	r2, [pc, #176]	; (8002e30 <TIM_OC1_SetConfig+0x12c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d003      	beq.n	8002d8c <TIM_OC1_SetConfig+0x88>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a2b      	ldr	r2, [pc, #172]	; (8002e34 <TIM_OC1_SetConfig+0x130>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d10c      	bne.n	8002da6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f023 0308 	bic.w	r3, r3, #8
 8002d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f023 0304 	bic.w	r3, r3, #4
 8002da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a1d      	ldr	r2, [pc, #116]	; (8002e20 <TIM_OC1_SetConfig+0x11c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d013      	beq.n	8002dd6 <TIM_OC1_SetConfig+0xd2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a1c      	ldr	r2, [pc, #112]	; (8002e24 <TIM_OC1_SetConfig+0x120>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00f      	beq.n	8002dd6 <TIM_OC1_SetConfig+0xd2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <TIM_OC1_SetConfig+0x124>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00b      	beq.n	8002dd6 <TIM_OC1_SetConfig+0xd2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a1a      	ldr	r2, [pc, #104]	; (8002e2c <TIM_OC1_SetConfig+0x128>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d007      	beq.n	8002dd6 <TIM_OC1_SetConfig+0xd2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <TIM_OC1_SetConfig+0x12c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d003      	beq.n	8002dd6 <TIM_OC1_SetConfig+0xd2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <TIM_OC1_SetConfig+0x130>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d111      	bne.n	8002dfa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	621a      	str	r2, [r3, #32]
}
 8002e14:	bf00      	nop
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	40012c00 	.word	0x40012c00
 8002e24:	40013400 	.word	0x40013400
 8002e28:	40014000 	.word	0x40014000
 8002e2c:	40014400 	.word	0x40014400
 8002e30:	40014800 	.word	0x40014800
 8002e34:	40015000 	.word	0x40015000

08002e38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f023 0210 	bic.w	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f023 0320 	bic.w	r3, r3, #32
 8002e86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a2c      	ldr	r2, [pc, #176]	; (8002f48 <TIM_OC2_SetConfig+0x110>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d007      	beq.n	8002eac <TIM_OC2_SetConfig+0x74>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a2b      	ldr	r2, [pc, #172]	; (8002f4c <TIM_OC2_SetConfig+0x114>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d003      	beq.n	8002eac <TIM_OC2_SetConfig+0x74>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a2a      	ldr	r2, [pc, #168]	; (8002f50 <TIM_OC2_SetConfig+0x118>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d10d      	bne.n	8002ec8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ec6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a1f      	ldr	r2, [pc, #124]	; (8002f48 <TIM_OC2_SetConfig+0x110>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d013      	beq.n	8002ef8 <TIM_OC2_SetConfig+0xc0>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a1e      	ldr	r2, [pc, #120]	; (8002f4c <TIM_OC2_SetConfig+0x114>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00f      	beq.n	8002ef8 <TIM_OC2_SetConfig+0xc0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a1e      	ldr	r2, [pc, #120]	; (8002f54 <TIM_OC2_SetConfig+0x11c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00b      	beq.n	8002ef8 <TIM_OC2_SetConfig+0xc0>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a1d      	ldr	r2, [pc, #116]	; (8002f58 <TIM_OC2_SetConfig+0x120>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d007      	beq.n	8002ef8 <TIM_OC2_SetConfig+0xc0>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a1c      	ldr	r2, [pc, #112]	; (8002f5c <TIM_OC2_SetConfig+0x124>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d003      	beq.n	8002ef8 <TIM_OC2_SetConfig+0xc0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a17      	ldr	r2, [pc, #92]	; (8002f50 <TIM_OC2_SetConfig+0x118>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d113      	bne.n	8002f20 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002efe:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f06:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	621a      	str	r2, [r3, #32]
}
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40012c00 	.word	0x40012c00
 8002f4c:	40013400 	.word	0x40013400
 8002f50:	40015000 	.word	0x40015000
 8002f54:	40014000 	.word	0x40014000
 8002f58:	40014400 	.word	0x40014400
 8002f5c:	40014800 	.word	0x40014800

08002f60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 0303 	bic.w	r3, r3, #3
 8002f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	021b      	lsls	r3, r3, #8
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a2b      	ldr	r2, [pc, #172]	; (800306c <TIM_OC3_SetConfig+0x10c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d007      	beq.n	8002fd2 <TIM_OC3_SetConfig+0x72>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a2a      	ldr	r2, [pc, #168]	; (8003070 <TIM_OC3_SetConfig+0x110>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d003      	beq.n	8002fd2 <TIM_OC3_SetConfig+0x72>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a29      	ldr	r2, [pc, #164]	; (8003074 <TIM_OC3_SetConfig+0x114>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d10d      	bne.n	8002fee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fec:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a1e      	ldr	r2, [pc, #120]	; (800306c <TIM_OC3_SetConfig+0x10c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <TIM_OC3_SetConfig+0xbe>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1d      	ldr	r2, [pc, #116]	; (8003070 <TIM_OC3_SetConfig+0x110>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00f      	beq.n	800301e <TIM_OC3_SetConfig+0xbe>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a1d      	ldr	r2, [pc, #116]	; (8003078 <TIM_OC3_SetConfig+0x118>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00b      	beq.n	800301e <TIM_OC3_SetConfig+0xbe>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a1c      	ldr	r2, [pc, #112]	; (800307c <TIM_OC3_SetConfig+0x11c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d007      	beq.n	800301e <TIM_OC3_SetConfig+0xbe>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a1b      	ldr	r2, [pc, #108]	; (8003080 <TIM_OC3_SetConfig+0x120>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d003      	beq.n	800301e <TIM_OC3_SetConfig+0xbe>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a16      	ldr	r2, [pc, #88]	; (8003074 <TIM_OC3_SetConfig+0x114>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d113      	bne.n	8003046 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800302c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	621a      	str	r2, [r3, #32]
}
 8003060:	bf00      	nop
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	40012c00 	.word	0x40012c00
 8003070:	40013400 	.word	0x40013400
 8003074:	40015000 	.word	0x40015000
 8003078:	40014000 	.word	0x40014000
 800307c:	40014400 	.word	0x40014400
 8003080:	40014800 	.word	0x40014800

08003084 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	031b      	lsls	r3, r3, #12
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a1a      	ldr	r2, [pc, #104]	; (800314c <TIM_OC4_SetConfig+0xc8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d013      	beq.n	8003110 <TIM_OC4_SetConfig+0x8c>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a19      	ldr	r2, [pc, #100]	; (8003150 <TIM_OC4_SetConfig+0xcc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00f      	beq.n	8003110 <TIM_OC4_SetConfig+0x8c>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a18      	ldr	r2, [pc, #96]	; (8003154 <TIM_OC4_SetConfig+0xd0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00b      	beq.n	8003110 <TIM_OC4_SetConfig+0x8c>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a17      	ldr	r2, [pc, #92]	; (8003158 <TIM_OC4_SetConfig+0xd4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d007      	beq.n	8003110 <TIM_OC4_SetConfig+0x8c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a16      	ldr	r2, [pc, #88]	; (800315c <TIM_OC4_SetConfig+0xd8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d003      	beq.n	8003110 <TIM_OC4_SetConfig+0x8c>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a15      	ldr	r2, [pc, #84]	; (8003160 <TIM_OC4_SetConfig+0xdc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d109      	bne.n	8003124 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003116:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	019b      	lsls	r3, r3, #6
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	621a      	str	r2, [r3, #32]
}
 800313e:	bf00      	nop
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40012c00 	.word	0x40012c00
 8003150:	40013400 	.word	0x40013400
 8003154:	40014000 	.word	0x40014000
 8003158:	40014400 	.word	0x40014400
 800315c:	40014800 	.word	0x40014800
 8003160:	40015000 	.word	0x40015000

08003164 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80031a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a19      	ldr	r2, [pc, #100]	; (8003220 <TIM_OC5_SetConfig+0xbc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <TIM_OC5_SetConfig+0x82>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a18      	ldr	r2, [pc, #96]	; (8003224 <TIM_OC5_SetConfig+0xc0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00f      	beq.n	80031e6 <TIM_OC5_SetConfig+0x82>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a17      	ldr	r2, [pc, #92]	; (8003228 <TIM_OC5_SetConfig+0xc4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00b      	beq.n	80031e6 <TIM_OC5_SetConfig+0x82>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a16      	ldr	r2, [pc, #88]	; (800322c <TIM_OC5_SetConfig+0xc8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d007      	beq.n	80031e6 <TIM_OC5_SetConfig+0x82>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a15      	ldr	r2, [pc, #84]	; (8003230 <TIM_OC5_SetConfig+0xcc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d003      	beq.n	80031e6 <TIM_OC5_SetConfig+0x82>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a14      	ldr	r2, [pc, #80]	; (8003234 <TIM_OC5_SetConfig+0xd0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d109      	bne.n	80031fa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	621a      	str	r2, [r3, #32]
}
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40012c00 	.word	0x40012c00
 8003224:	40013400 	.word	0x40013400
 8003228:	40014000 	.word	0x40014000
 800322c:	40014400 	.word	0x40014400
 8003230:	40014800 	.word	0x40014800
 8003234:	40015000 	.word	0x40015000

08003238 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	021b      	lsls	r3, r3, #8
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4313      	orrs	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800327e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	051b      	lsls	r3, r3, #20
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a1a      	ldr	r2, [pc, #104]	; (80032f8 <TIM_OC6_SetConfig+0xc0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d013      	beq.n	80032bc <TIM_OC6_SetConfig+0x84>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a19      	ldr	r2, [pc, #100]	; (80032fc <TIM_OC6_SetConfig+0xc4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00f      	beq.n	80032bc <TIM_OC6_SetConfig+0x84>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a18      	ldr	r2, [pc, #96]	; (8003300 <TIM_OC6_SetConfig+0xc8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00b      	beq.n	80032bc <TIM_OC6_SetConfig+0x84>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a17      	ldr	r2, [pc, #92]	; (8003304 <TIM_OC6_SetConfig+0xcc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d007      	beq.n	80032bc <TIM_OC6_SetConfig+0x84>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a16      	ldr	r2, [pc, #88]	; (8003308 <TIM_OC6_SetConfig+0xd0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <TIM_OC6_SetConfig+0x84>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a15      	ldr	r2, [pc, #84]	; (800330c <TIM_OC6_SetConfig+0xd4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d109      	bne.n	80032d0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	029b      	lsls	r3, r3, #10
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	621a      	str	r2, [r3, #32]
}
 80032ea:	bf00      	nop
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	40013400 	.word	0x40013400
 8003300:	40014000 	.word	0x40014000
 8003304:	40014400 	.word	0x40014400
 8003308:	40014800 	.word	0x40014800
 800330c:	40015000 	.word	0x40015000

08003310 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	2201      	movs	r2, #1
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a1a      	ldr	r2, [r3, #32]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	43db      	mvns	r3, r3
 8003332:	401a      	ands	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a1a      	ldr	r2, [r3, #32]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 031f 	and.w	r3, r3, #31
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	fa01 f303 	lsl.w	r3, r1, r3
 8003348:	431a      	orrs	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	621a      	str	r2, [r3, #32]
}
 800334e:	bf00      	nop
 8003350:	371c      	adds	r7, #28
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003370:	2302      	movs	r3, #2
 8003372:	e06d      	b.n	8003450 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a30      	ldr	r2, [pc, #192]	; (800345c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d009      	beq.n	80033b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a2f      	ldr	r2, [pc, #188]	; (8003460 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d004      	beq.n	80033b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a2d      	ldr	r2, [pc, #180]	; (8003464 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d108      	bne.n	80033c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1e      	ldr	r2, [pc, #120]	; (800345c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d01d      	beq.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f0:	d018      	beq.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d013      	beq.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a1a      	ldr	r2, [pc, #104]	; (800346c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00e      	beq.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a15      	ldr	r2, [pc, #84]	; (8003460 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d009      	beq.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a16      	ldr	r2, [pc, #88]	; (8003470 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d004      	beq.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a11      	ldr	r2, [pc, #68]	; (8003464 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d10c      	bne.n	800343e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800342a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	4313      	orrs	r3, r2
 8003434:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	40012c00 	.word	0x40012c00
 8003460:	40013400 	.word	0x40013400
 8003464:	40015000 	.word	0x40015000
 8003468:	40000400 	.word	0x40000400
 800346c:	40000800 	.word	0x40000800
 8003470:	40014000 	.word	0x40014000

08003474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e040      	b.n	8003508 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7fd f9d6 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2224      	movs	r2, #36	; 0x24
 80034a0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f8c0 	bl	8003638 <UART_SetConfig>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e022      	b.n	8003508 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 face 	bl	8003a6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fb55 	bl	8003bb0 <UART_CheckIdleState>
 8003506:	4603      	mov	r3, r0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003524:	2b20      	cmp	r3, #32
 8003526:	f040 8081 	bne.w	800362c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <HAL_UART_Transmit+0x26>
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e079      	b.n	800362e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_UART_Transmit+0x38>
 8003544:	2302      	movs	r3, #2
 8003546:	e072      	b.n	800362e <HAL_UART_Transmit+0x11e>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2221      	movs	r2, #33	; 0x21
 800355a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800355c:	f7fd fa7e 	bl	8000a5c <HAL_GetTick>
 8003560:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	88fa      	ldrh	r2, [r7, #6]
 8003566:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	88fa      	ldrh	r2, [r7, #6]
 800356e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357a:	d108      	bne.n	800358e <HAL_UART_Transmit+0x7e>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d104      	bne.n	800358e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003584:	2300      	movs	r3, #0
 8003586:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	61bb      	str	r3, [r7, #24]
 800358c:	e003      	b.n	8003596 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003596:	e02d      	b.n	80035f4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2200      	movs	r2, #0
 80035a0:	2180      	movs	r1, #128	; 0x80
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 fb49 	bl	8003c3a <UART_WaitOnFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e03d      	b.n	800362e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10b      	bne.n	80035d0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	881a      	ldrh	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035c4:	b292      	uxth	r2, r2
 80035c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	3302      	adds	r3, #2
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	e008      	b.n	80035e2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	781a      	ldrb	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	b292      	uxth	r2, r2
 80035da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	3301      	adds	r3, #1
 80035e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1cb      	bne.n	8003598 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2200      	movs	r2, #0
 8003608:	2140      	movs	r1, #64	; 0x40
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 fb15 	bl	8003c3a <UART_WaitOnFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e009      	b.n	800362e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	e000      	b.n	800362e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800362c:	2302      	movs	r3, #2
  }
}
 800362e:	4618      	mov	r0, r3
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003640:	2300      	movs	r3, #0
 8003642:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	4bac      	ldr	r3, [pc, #688]	; (8003918 <UART_SetConfig+0x2e0>)
 8003668:	4013      	ands	r3, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	6939      	ldr	r1, [r7, #16]
 8003670:	430b      	orrs	r3, r1
 8003672:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a9a      	ldr	r2, [pc, #616]	; (800391c <UART_SetConfig+0x2e4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d121      	bne.n	80036fc <UART_SetConfig+0xc4>
 80036b8:	4b99      	ldr	r3, [pc, #612]	; (8003920 <UART_SetConfig+0x2e8>)
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d817      	bhi.n	80036f4 <UART_SetConfig+0xbc>
 80036c4:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <UART_SetConfig+0x94>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	080036dd 	.word	0x080036dd
 80036d0:	080036e9 	.word	0x080036e9
 80036d4:	080036ef 	.word	0x080036ef
 80036d8:	080036e3 	.word	0x080036e3
 80036dc:	2301      	movs	r3, #1
 80036de:	77fb      	strb	r3, [r7, #31]
 80036e0:	e0b2      	b.n	8003848 <UART_SetConfig+0x210>
 80036e2:	2302      	movs	r3, #2
 80036e4:	77fb      	strb	r3, [r7, #31]
 80036e6:	e0af      	b.n	8003848 <UART_SetConfig+0x210>
 80036e8:	2304      	movs	r3, #4
 80036ea:	77fb      	strb	r3, [r7, #31]
 80036ec:	e0ac      	b.n	8003848 <UART_SetConfig+0x210>
 80036ee:	2308      	movs	r3, #8
 80036f0:	77fb      	strb	r3, [r7, #31]
 80036f2:	e0a9      	b.n	8003848 <UART_SetConfig+0x210>
 80036f4:	2310      	movs	r3, #16
 80036f6:	77fb      	strb	r3, [r7, #31]
 80036f8:	bf00      	nop
 80036fa:	e0a5      	b.n	8003848 <UART_SetConfig+0x210>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a88      	ldr	r2, [pc, #544]	; (8003924 <UART_SetConfig+0x2ec>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d123      	bne.n	800374e <UART_SetConfig+0x116>
 8003706:	4b86      	ldr	r3, [pc, #536]	; (8003920 <UART_SetConfig+0x2e8>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800370e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003712:	d012      	beq.n	800373a <UART_SetConfig+0x102>
 8003714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003718:	d802      	bhi.n	8003720 <UART_SetConfig+0xe8>
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <UART_SetConfig+0xf6>
 800371e:	e012      	b.n	8003746 <UART_SetConfig+0x10e>
 8003720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003724:	d00c      	beq.n	8003740 <UART_SetConfig+0x108>
 8003726:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800372a:	d003      	beq.n	8003734 <UART_SetConfig+0xfc>
 800372c:	e00b      	b.n	8003746 <UART_SetConfig+0x10e>
 800372e:	2300      	movs	r3, #0
 8003730:	77fb      	strb	r3, [r7, #31]
 8003732:	e089      	b.n	8003848 <UART_SetConfig+0x210>
 8003734:	2302      	movs	r3, #2
 8003736:	77fb      	strb	r3, [r7, #31]
 8003738:	e086      	b.n	8003848 <UART_SetConfig+0x210>
 800373a:	2304      	movs	r3, #4
 800373c:	77fb      	strb	r3, [r7, #31]
 800373e:	e083      	b.n	8003848 <UART_SetConfig+0x210>
 8003740:	2308      	movs	r3, #8
 8003742:	77fb      	strb	r3, [r7, #31]
 8003744:	e080      	b.n	8003848 <UART_SetConfig+0x210>
 8003746:	2310      	movs	r3, #16
 8003748:	77fb      	strb	r3, [r7, #31]
 800374a:	bf00      	nop
 800374c:	e07c      	b.n	8003848 <UART_SetConfig+0x210>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a75      	ldr	r2, [pc, #468]	; (8003928 <UART_SetConfig+0x2f0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d123      	bne.n	80037a0 <UART_SetConfig+0x168>
 8003758:	4b71      	ldr	r3, [pc, #452]	; (8003920 <UART_SetConfig+0x2e8>)
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003760:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003764:	d012      	beq.n	800378c <UART_SetConfig+0x154>
 8003766:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800376a:	d802      	bhi.n	8003772 <UART_SetConfig+0x13a>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d007      	beq.n	8003780 <UART_SetConfig+0x148>
 8003770:	e012      	b.n	8003798 <UART_SetConfig+0x160>
 8003772:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003776:	d00c      	beq.n	8003792 <UART_SetConfig+0x15a>
 8003778:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800377c:	d003      	beq.n	8003786 <UART_SetConfig+0x14e>
 800377e:	e00b      	b.n	8003798 <UART_SetConfig+0x160>
 8003780:	2300      	movs	r3, #0
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e060      	b.n	8003848 <UART_SetConfig+0x210>
 8003786:	2302      	movs	r3, #2
 8003788:	77fb      	strb	r3, [r7, #31]
 800378a:	e05d      	b.n	8003848 <UART_SetConfig+0x210>
 800378c:	2304      	movs	r3, #4
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e05a      	b.n	8003848 <UART_SetConfig+0x210>
 8003792:	2308      	movs	r3, #8
 8003794:	77fb      	strb	r3, [r7, #31]
 8003796:	e057      	b.n	8003848 <UART_SetConfig+0x210>
 8003798:	2310      	movs	r3, #16
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	bf00      	nop
 800379e:	e053      	b.n	8003848 <UART_SetConfig+0x210>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a61      	ldr	r2, [pc, #388]	; (800392c <UART_SetConfig+0x2f4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d123      	bne.n	80037f2 <UART_SetConfig+0x1ba>
 80037aa:	4b5d      	ldr	r3, [pc, #372]	; (8003920 <UART_SetConfig+0x2e8>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80037b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b6:	d012      	beq.n	80037de <UART_SetConfig+0x1a6>
 80037b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037bc:	d802      	bhi.n	80037c4 <UART_SetConfig+0x18c>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d007      	beq.n	80037d2 <UART_SetConfig+0x19a>
 80037c2:	e012      	b.n	80037ea <UART_SetConfig+0x1b2>
 80037c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037c8:	d00c      	beq.n	80037e4 <UART_SetConfig+0x1ac>
 80037ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037ce:	d003      	beq.n	80037d8 <UART_SetConfig+0x1a0>
 80037d0:	e00b      	b.n	80037ea <UART_SetConfig+0x1b2>
 80037d2:	2300      	movs	r3, #0
 80037d4:	77fb      	strb	r3, [r7, #31]
 80037d6:	e037      	b.n	8003848 <UART_SetConfig+0x210>
 80037d8:	2302      	movs	r3, #2
 80037da:	77fb      	strb	r3, [r7, #31]
 80037dc:	e034      	b.n	8003848 <UART_SetConfig+0x210>
 80037de:	2304      	movs	r3, #4
 80037e0:	77fb      	strb	r3, [r7, #31]
 80037e2:	e031      	b.n	8003848 <UART_SetConfig+0x210>
 80037e4:	2308      	movs	r3, #8
 80037e6:	77fb      	strb	r3, [r7, #31]
 80037e8:	e02e      	b.n	8003848 <UART_SetConfig+0x210>
 80037ea:	2310      	movs	r3, #16
 80037ec:	77fb      	strb	r3, [r7, #31]
 80037ee:	bf00      	nop
 80037f0:	e02a      	b.n	8003848 <UART_SetConfig+0x210>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a4e      	ldr	r2, [pc, #312]	; (8003930 <UART_SetConfig+0x2f8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d123      	bne.n	8003844 <UART_SetConfig+0x20c>
 80037fc:	4b48      	ldr	r3, [pc, #288]	; (8003920 <UART_SetConfig+0x2e8>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003808:	d012      	beq.n	8003830 <UART_SetConfig+0x1f8>
 800380a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800380e:	d802      	bhi.n	8003816 <UART_SetConfig+0x1de>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d007      	beq.n	8003824 <UART_SetConfig+0x1ec>
 8003814:	e012      	b.n	800383c <UART_SetConfig+0x204>
 8003816:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800381a:	d00c      	beq.n	8003836 <UART_SetConfig+0x1fe>
 800381c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003820:	d003      	beq.n	800382a <UART_SetConfig+0x1f2>
 8003822:	e00b      	b.n	800383c <UART_SetConfig+0x204>
 8003824:	2300      	movs	r3, #0
 8003826:	77fb      	strb	r3, [r7, #31]
 8003828:	e00e      	b.n	8003848 <UART_SetConfig+0x210>
 800382a:	2302      	movs	r3, #2
 800382c:	77fb      	strb	r3, [r7, #31]
 800382e:	e00b      	b.n	8003848 <UART_SetConfig+0x210>
 8003830:	2304      	movs	r3, #4
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e008      	b.n	8003848 <UART_SetConfig+0x210>
 8003836:	2308      	movs	r3, #8
 8003838:	77fb      	strb	r3, [r7, #31]
 800383a:	e005      	b.n	8003848 <UART_SetConfig+0x210>
 800383c:	2310      	movs	r3, #16
 800383e:	77fb      	strb	r3, [r7, #31]
 8003840:	bf00      	nop
 8003842:	e001      	b.n	8003848 <UART_SetConfig+0x210>
 8003844:	2310      	movs	r3, #16
 8003846:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003850:	f040 8090 	bne.w	8003974 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003854:	7ffb      	ldrb	r3, [r7, #31]
 8003856:	2b08      	cmp	r3, #8
 8003858:	d86c      	bhi.n	8003934 <UART_SetConfig+0x2fc>
 800385a:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <UART_SetConfig+0x228>)
 800385c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003860:	08003885 	.word	0x08003885
 8003864:	080038a5 	.word	0x080038a5
 8003868:	080038c5 	.word	0x080038c5
 800386c:	08003935 	.word	0x08003935
 8003870:	080038e1 	.word	0x080038e1
 8003874:	08003935 	.word	0x08003935
 8003878:	08003935 	.word	0x08003935
 800387c:	08003935 	.word	0x08003935
 8003880:	08003901 	.word	0x08003901
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003884:	f7fe fc86 	bl	8002194 <HAL_RCC_GetPCLK1Freq>
 8003888:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	005a      	lsls	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	085b      	lsrs	r3, r3, #1
 8003894:	441a      	add	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	fbb2 f3f3 	udiv	r3, r2, r3
 800389e:	b29b      	uxth	r3, r3
 80038a0:	61bb      	str	r3, [r7, #24]
        break;
 80038a2:	e04a      	b.n	800393a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038a4:	f7fe fc98 	bl	80021d8 <HAL_RCC_GetPCLK2Freq>
 80038a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	005a      	lsls	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	085b      	lsrs	r3, r3, #1
 80038b4:	441a      	add	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80038be:	b29b      	uxth	r3, r3
 80038c0:	61bb      	str	r3, [r7, #24]
        break;
 80038c2:	e03a      	b.n	800393a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80038ce:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6852      	ldr	r2, [r2, #4]
 80038d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80038da:	b29b      	uxth	r3, r3
 80038dc:	61bb      	str	r3, [r7, #24]
        break;
 80038de:	e02c      	b.n	800393a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038e0:	f7fe fbe2 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 80038e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	005a      	lsls	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	441a      	add	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	61bb      	str	r3, [r7, #24]
        break;
 80038fe:	e01c      	b.n	800393a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003912:	b29b      	uxth	r3, r3
 8003914:	61bb      	str	r3, [r7, #24]
        break;
 8003916:	e010      	b.n	800393a <UART_SetConfig+0x302>
 8003918:	efff69f3 	.word	0xefff69f3
 800391c:	40013800 	.word	0x40013800
 8003920:	40021000 	.word	0x40021000
 8003924:	40004400 	.word	0x40004400
 8003928:	40004800 	.word	0x40004800
 800392c:	40004c00 	.word	0x40004c00
 8003930:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	75fb      	strb	r3, [r7, #23]
        break;
 8003938:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b0f      	cmp	r3, #15
 800393e:	d916      	bls.n	800396e <UART_SetConfig+0x336>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003946:	d212      	bcs.n	800396e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	b29b      	uxth	r3, r3
 800394c:	f023 030f 	bic.w	r3, r3, #15
 8003950:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	085b      	lsrs	r3, r3, #1
 8003956:	b29b      	uxth	r3, r3
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	b29a      	uxth	r2, r3
 800395e:	897b      	ldrh	r3, [r7, #10]
 8003960:	4313      	orrs	r3, r2
 8003962:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	897a      	ldrh	r2, [r7, #10]
 800396a:	60da      	str	r2, [r3, #12]
 800396c:	e072      	b.n	8003a54 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	75fb      	strb	r3, [r7, #23]
 8003972:	e06f      	b.n	8003a54 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8003974:	7ffb      	ldrb	r3, [r7, #31]
 8003976:	2b08      	cmp	r3, #8
 8003978:	d85b      	bhi.n	8003a32 <UART_SetConfig+0x3fa>
 800397a:	a201      	add	r2, pc, #4	; (adr r2, 8003980 <UART_SetConfig+0x348>)
 800397c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003980:	080039a5 	.word	0x080039a5
 8003984:	080039c3 	.word	0x080039c3
 8003988:	080039e1 	.word	0x080039e1
 800398c:	08003a33 	.word	0x08003a33
 8003990:	080039fd 	.word	0x080039fd
 8003994:	08003a33 	.word	0x08003a33
 8003998:	08003a33 	.word	0x08003a33
 800399c:	08003a33 	.word	0x08003a33
 80039a0:	08003a1b 	.word	0x08003a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039a4:	f7fe fbf6 	bl	8002194 <HAL_RCC_GetPCLK1Freq>
 80039a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	085a      	lsrs	r2, r3, #1
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	441a      	add	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	b29b      	uxth	r3, r3
 80039be:	61bb      	str	r3, [r7, #24]
        break;
 80039c0:	e03a      	b.n	8003a38 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039c2:	f7fe fc09 	bl	80021d8 <HAL_RCC_GetPCLK2Freq>
 80039c6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	085a      	lsrs	r2, r3, #1
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	441a      	add	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039da:	b29b      	uxth	r3, r3
 80039dc:	61bb      	str	r3, [r7, #24]
        break;
 80039de:	e02b      	b.n	8003a38 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	085b      	lsrs	r3, r3, #1
 80039e6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80039ea:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6852      	ldr	r2, [r2, #4]
 80039f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	61bb      	str	r3, [r7, #24]
        break;
 80039fa:	e01d      	b.n	8003a38 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039fc:	f7fe fb54 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8003a00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	085a      	lsrs	r2, r3, #1
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	441a      	add	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	61bb      	str	r3, [r7, #24]
        break;
 8003a18:	e00e      	b.n	8003a38 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	085b      	lsrs	r3, r3, #1
 8003a20:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	61bb      	str	r3, [r7, #24]
        break;
 8003a30:	e002      	b.n	8003a38 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	75fb      	strb	r3, [r7, #23]
        break;
 8003a36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b0f      	cmp	r3, #15
 8003a3c:	d908      	bls.n	8003a50 <UART_SetConfig+0x418>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a44:	d204      	bcs.n	8003a50 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	60da      	str	r2, [r3, #12]
 8003a4e:	e001      	b.n	8003a54 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop

08003a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01a      	beq.n	8003b82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b6a:	d10a      	bne.n	8003b82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003bbe:	f7fc ff4d 	bl	8000a5c <HAL_GetTick>
 8003bc2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d10e      	bne.n	8003bf0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f82a 	bl	8003c3a <UART_WaitOnFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e020      	b.n	8003c32 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d10e      	bne.n	8003c1c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f814 	bl	8003c3a <UART_WaitOnFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e00a      	b.n	8003c32 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	603b      	str	r3, [r7, #0]
 8003c46:	4613      	mov	r3, r2
 8003c48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4a:	e05d      	b.n	8003d08 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d059      	beq.n	8003d08 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c54:	f7fc ff02 	bl	8000a5c <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d302      	bcc.n	8003c6a <UART_WaitOnFlagUntilTimeout+0x30>
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d11b      	bne.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c78:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e042      	b.n	8003d28 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d02b      	beq.n	8003d08 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cbe:	d123      	bne.n	8003d08 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cc8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cd8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0201 	bic.w	r2, r2, #1
 8003ce8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e00f      	b.n	8003d28 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69da      	ldr	r2, [r3, #28]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4013      	ands	r3, r2
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d092      	beq.n	8003c4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <__libc_init_array>:
 8003d30:	b570      	push	{r4, r5, r6, lr}
 8003d32:	4e0d      	ldr	r6, [pc, #52]	; (8003d68 <__libc_init_array+0x38>)
 8003d34:	4c0d      	ldr	r4, [pc, #52]	; (8003d6c <__libc_init_array+0x3c>)
 8003d36:	1ba4      	subs	r4, r4, r6
 8003d38:	10a4      	asrs	r4, r4, #2
 8003d3a:	2500      	movs	r5, #0
 8003d3c:	42a5      	cmp	r5, r4
 8003d3e:	d109      	bne.n	8003d54 <__libc_init_array+0x24>
 8003d40:	4e0b      	ldr	r6, [pc, #44]	; (8003d70 <__libc_init_array+0x40>)
 8003d42:	4c0c      	ldr	r4, [pc, #48]	; (8003d74 <__libc_init_array+0x44>)
 8003d44:	f000 f820 	bl	8003d88 <_init>
 8003d48:	1ba4      	subs	r4, r4, r6
 8003d4a:	10a4      	asrs	r4, r4, #2
 8003d4c:	2500      	movs	r5, #0
 8003d4e:	42a5      	cmp	r5, r4
 8003d50:	d105      	bne.n	8003d5e <__libc_init_array+0x2e>
 8003d52:	bd70      	pop	{r4, r5, r6, pc}
 8003d54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d58:	4798      	blx	r3
 8003d5a:	3501      	adds	r5, #1
 8003d5c:	e7ee      	b.n	8003d3c <__libc_init_array+0xc>
 8003d5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d62:	4798      	blx	r3
 8003d64:	3501      	adds	r5, #1
 8003d66:	e7f2      	b.n	8003d4e <__libc_init_array+0x1e>
 8003d68:	08003de4 	.word	0x08003de4
 8003d6c:	08003de4 	.word	0x08003de4
 8003d70:	08003de4 	.word	0x08003de4
 8003d74:	08003de8 	.word	0x08003de8

08003d78 <memset>:
 8003d78:	4402      	add	r2, r0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d100      	bne.n	8003d82 <memset+0xa>
 8003d80:	4770      	bx	lr
 8003d82:	f803 1b01 	strb.w	r1, [r3], #1
 8003d86:	e7f9      	b.n	8003d7c <memset+0x4>

08003d88 <_init>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr

08003d94 <_fini>:
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	bf00      	nop
 8003d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d9a:	bc08      	pop	{r3}
 8003d9c:	469e      	mov	lr, r3
 8003d9e:	4770      	bx	lr


SECO-P1-F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005694  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b4  080058b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080058b4  080058b4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058b4  080058b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058b8  080058b8  000158b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080058bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006f80  20000070  0800592c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006ff0  0800592c  00026ff0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3ca  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e93  00000000  00000000  0002d46a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c90  00000000  00000000  0002f300  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b88  00000000  00000000  0002ff90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dd39  00000000  00000000  00030b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a86f  00000000  00000000  0004e851  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b0709  00000000  00000000  000590c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001097c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f4  00000000  00000000  00109844  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800581c 	.word	0x0800581c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800581c 	.word	0x0800581c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_GPIO_Init+0x7c>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <MX_GPIO_Init+0x7c>)
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bec:	6153      	str	r3, [r2, #20]
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_GPIO_Init+0x7c>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <MX_GPIO_Init+0x7c>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <MX_GPIO_Init+0x7c>)
 8000c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c04:	6153      	str	r3, [r2, #20]
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_GPIO_Init+0x7c>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1c:	f001 f8d4 	bl	8001dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	4619      	mov	r1, r3
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3c:	f000 ff3a 	bl	8001ab4 <HAL_GPIO_Init>

}
 8000c40:	bf00      	nop
 8000c42:	3720      	adds	r7, #32
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c50:	f000 fdb8 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c54:	f000 f82a 	bl	8000cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c58:	f7ff ffb8 	bl	8000bcc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c5c:	f000 fd16 	bl	800168c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c60:	f000 fb06 	bl	8001270 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c64:	f000 fb58 	bl	8001318 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000c68:	f000 fbbc 	bl	80013e4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000c6c:	f000 fbf0 	bl	8001450 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c70:	2100      	movs	r1, #0
 8000c72:	480a      	ldr	r0, [pc, #40]	; (8000c9c <main+0x50>)
 8000c74:	f002 fcd6 	bl	8003624 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c78:	2104      	movs	r1, #4
 8000c7a:	4808      	ldr	r0, [pc, #32]	; (8000c9c <main+0x50>)
 8000c7c:	f002 fcd2 	bl	8003624 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000c80:	213c      	movs	r1, #60	; 0x3c
 8000c82:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <main+0x54>)
 8000c84:	f002 fdc0 	bl	8003808 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Init(&htim6);
 8000c88:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <main+0x58>)
 8000c8a:	f002 fc1f 	bl	80034cc <HAL_TIM_Base_Init>
  HAL_TIM_Base_Init(&htim7);
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <main+0x5c>)
 8000c90:	f002 fc1c 	bl	80034cc <HAL_TIM_Base_Init>
  reductora();
 8000c94:	f000 fa18 	bl	80010c8 <reductora>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <main+0x4c>
 8000c9a:	bf00      	nop
 8000c9c:	20006e68 	.word	0x20006e68
 8000ca0:	20006ee8 	.word	0x20006ee8
 8000ca4:	20006ea8 	.word	0x20006ea8
 8000ca8:	20006f28 	.word	0x20006f28

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b0a6      	sub	sp, #152	; 0x98
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cb6:	2228      	movs	r2, #40	; 0x28
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f004 f956 	bl	8004f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2258      	movs	r2, #88	; 0x58
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f004 f948 	bl	8004f6c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cea:	2302      	movs	r3, #2
 8000cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000cf8:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8000cfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000d00:	2301      	movs	r3, #1
 8000d02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d06:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 f874 	bl	8001df8 <HAL_RCC_OscConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d16:	f000 f9e7 	bl	80010e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d34:	2102      	movs	r1, #2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 ff74 	bl	8002c24 <HAL_RCC_ClockConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d42:	f000 f9d1 	bl	80010e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <SystemClock_Config+0xc4>)
 8000d48:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 f999 	bl	8003090 <HAL_RCCEx_PeriphCLKConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000d64:	f000 f9c0 	bl	80010e8 <Error_Handler>
  }
}
 8000d68:	bf00      	nop
 8000d6a:	3798      	adds	r7, #152	; 0x98
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	00300002 	.word	0x00300002
 8000d74:	00000000 	.word	0x00000000

08000d78 <HAL_TIM_PeriodElapsedCallback>:
//we have to use this function for all the GPIO interruption, we use the hall that call this function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM6) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a34      	ldr	r2, [pc, #208]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d12b      	bne.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0x6a>
		medidas[i] = __HAL_TIM_GET_COUNTER(&htim2);
 8000d8a:	4b34      	ldr	r3, [pc, #208]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d90:	4b33      	ldr	r3, [pc, #204]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4611      	mov	r1, r2
 8000d96:	4a33      	ldr	r2, [pc, #204]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000d98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		i += 1;
 8000d9c:	4b30      	ldr	r3, [pc, #192]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	4a2f      	ldr	r2, [pc, #188]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000da4:	6013      	str	r3, [r2, #0]
		if(i == 4000){
 8000da6:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000dae:	d147      	bne.n	8000e40 <HAL_TIM_PeriodElapsedCallback+0xc8>
			cuenta = __HAL_TIM_GET_COUNTER(&htim2);
 8000db0:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000dba:	601a      	str	r2, [r3, #0]
			sprintf(str_name, "Cuenta = %d", cuenta);
 8000dbc:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	492a      	ldr	r1, [pc, #168]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000dc4:	482a      	ldr	r0, [pc, #168]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000dc6:	f004 f8d9 	bl	8004f7c <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*) str_name, strlen(str_name), HAL_MAX_DELAY);
 8000dca:	4829      	ldr	r0, [pc, #164]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000dcc:	f7ff fa08 	bl	80001e0 <strlen>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd8:	4925      	ldr	r1, [pc, #148]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000dda:	4826      	ldr	r0, [pc, #152]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000ddc:	f003 fc8c 	bl	80046f8 <HAL_UART_Transmit>
				selec_voltage(0);
		}
	}
	else {
	}
}
 8000de0:	e02e      	b.n	8000e40 <HAL_TIM_PeriodElapsedCallback+0xc8>
	else if (htim->Instance==TIM7) {
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a24      	ldr	r2, [pc, #144]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d129      	bne.n	8000e40 <HAL_TIM_PeriodElapsedCallback+0xc8>
		count_pul += 1;
 8000dec:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	3301      	adds	r3, #1
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000dfc:	801a      	strh	r2, [r3, #0]
		switch(count_pul){
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d007      	beq.n	8000e18 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d009      	beq.n	8000e20 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d113      	bne.n	8000e38 <HAL_TIM_PeriodElapsedCallback+0xc0>
				selec_voltage(1);
 8000e10:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8000e48 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8000e14:	f000 f8dc 	bl	8000fd0 <selec_voltage>
				selec_voltage(0);
 8000e18:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8000e50 <HAL_TIM_PeriodElapsedCallback+0xd8>
 8000e1c:	f000 f8d8 	bl	8000fd0 <selec_voltage>
				selec_voltage(0);
 8000e20:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8000e50 <HAL_TIM_PeriodElapsedCallback+0xd8>
 8000e24:	f000 f8d4 	bl	8000fd0 <selec_voltage>
				HAL_TIM_Base_Stop_IT(&htim6);
 8000e28:	4815      	ldr	r0, [pc, #84]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e2a:	f002 fba5 	bl	8003578 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_Base_Stop_IT(&htim7);
 8000e2e:	4815      	ldr	r0, [pc, #84]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000e30:	f002 fba2 	bl	8003578 <HAL_TIM_Base_Stop_IT>
				enviarcuenta();
 8000e34:	f000 f91a 	bl	800106c <enviarcuenta>
				selec_voltage(0);
 8000e38:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8000e50 <HAL_TIM_PeriodElapsedCallback+0xd8>
 8000e3c:	f000 f8c8 	bl	8000fd0 <selec_voltage>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	00000000 	.word	0x00000000
 8000e4c:	3ff00000 	.word	0x3ff00000
	...
 8000e58:	40001000 	.word	0x40001000
 8000e5c:	20006ee8 	.word	0x20006ee8
 8000e60:	20000094 	.word	0x20000094
 8000e64:	200000a4 	.word	0x200000a4
 8000e68:	2000008c 	.word	0x2000008c
 8000e6c:	08005834 	.word	0x08005834
 8000e70:	20006e04 	.word	0x20006e04
 8000e74:	20006f68 	.word	0x20006f68
 8000e78:	40001400 	.word	0x40001400
 8000e7c:	20000090 	.word	0x20000090
 8000e80:	20006ea8 	.word	0x20006ea8
 8000e84:	20006f28 	.word	0x20006f28

08000e88 <move>:

void move(double_t v1,double_t v2){
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000e92:	ed87 1b00 	vstr	d1, [r7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea0:	f000 ff92 	bl	8001dc8 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4848      	ldr	r0, [pc, #288]	; (8000fc8 <move+0x140>)
 8000ea8:	f002 fbbc 	bl	8003624 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000eac:	2104      	movs	r1, #4
 8000eae:	4846      	ldr	r0, [pc, #280]	; (8000fc8 <move+0x140>)
 8000eb0:	f002 fbb8 	bl	8003624 <HAL_TIM_PWM_Start>
	v1 = round(v1);
 8000eb4:	ed97 0b02 	vldr	d0, [r7, #8]
 8000eb8:	f004 fc66 	bl	8005788 <round>
 8000ebc:	ed87 0b02 	vstr	d0, [r7, #8]
	v2 = round(v2);
 8000ec0:	ed97 0b00 	vldr	d0, [r7]
 8000ec4:	f004 fc60 	bl	8005788 <round>
 8000ec8:	ed87 0b00 	vstr	d0, [r7]

	if(v1>999){
 8000ecc:	a33c      	add	r3, pc, #240	; (adr r3, 8000fc0 <move+0x138>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ed6:	f7ff fe27 	bl	8000b28 <__aeabi_dcmpgt>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <move+0x64>
		v1 = 999;
 8000ee0:	a437      	add	r4, pc, #220	; (adr r4, 8000fc0 <move+0x138>)
 8000ee2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000ee6:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8000eea:	e010      	b.n	8000f0e <move+0x86>
	}
	else if(v1<0){
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ef8:	f7ff fdf8 	bl	8000aec <__aeabi_dcmplt>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d005      	beq.n	8000f0e <move+0x86>
		v1 = 0;
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	f04f 0400 	mov.w	r4, #0
 8000f0a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	}

	if(v2<0){
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f1a:	f7ff fde7 	bl	8000aec <__aeabi_dcmplt>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <move+0xaa>
		v2 = 0;
 8000f24:	f04f 0300 	mov.w	r3, #0
 8000f28:	f04f 0400 	mov.w	r4, #0
 8000f2c:	e9c7 3400 	strd	r3, r4, [r7]
 8000f30:	e00e      	b.n	8000f50 <move+0xc8>
	}
	else if(v2>999){
 8000f32:	a323      	add	r3, pc, #140	; (adr r3, 8000fc0 <move+0x138>)
 8000f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f3c:	f7ff fdf4 	bl	8000b28 <__aeabi_dcmpgt>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d004      	beq.n	8000f50 <move+0xc8>
		v2 = 999;
 8000f46:	a41e      	add	r4, pc, #120	; (adr r4, 8000fc0 <move+0x138>)
 8000f48:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000f4c:	e9c7 3400 	strd	r3, r4, [r7]
	}

	if(v1 != 0 && v2 !=0){
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f5c:	f7ff fdbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d116      	bne.n	8000f94 <move+0x10c>
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	f04f 0300 	mov.w	r3, #0
 8000f6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f72:	f7ff fdb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10b      	bne.n	8000f94 <move+0x10c>
		v1 = 0;
 8000f7c:	f04f 0300 	mov.w	r3, #0
 8000f80:	f04f 0400 	mov.w	r4, #0
 8000f84:	e9c7 3402 	strd	r3, r4, [r7, #8]
		v2 = 0;
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	f04f 0400 	mov.w	r4, #0
 8000f90:	e9c7 3400 	strd	r3, r4, [r7]
	}
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,v1);
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <move+0x140>)
 8000f96:	681c      	ldr	r4, [r3, #0]
 8000f98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f9c:	f7ff fdf6 	bl	8000b8c <__aeabi_d2uiz>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	6363      	str	r3, [r4, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,v2);
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <move+0x140>)
 8000fa6:	681c      	ldr	r4, [r3, #0]
 8000fa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fac:	f7ff fdee 	bl	8000b8c <__aeabi_d2uiz>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd90      	pop	{r4, r7, pc}
 8000fbc:	f3af 8000 	nop.w
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	408f3800 	.word	0x408f3800
 8000fc8:	20006e68 	.word	0x20006e68
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <selec_voltage>:
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
}


void selec_voltage (double_t V){
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	ed87 0b00 	vstr	d0, [r7]
	double tension_pwm;
	tension_pwm = (V/12)*999;
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	4b22      	ldr	r3, [pc, #136]	; (8001068 <selec_voltage+0x98>)
 8000fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fe4:	f7ff fc3a 	bl	800085c <__aeabi_ddiv>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	460c      	mov	r4, r1
 8000fec:	4618      	mov	r0, r3
 8000fee:	4621      	mov	r1, r4
 8000ff0:	a319      	add	r3, pc, #100	; (adr r3, 8001058 <selec_voltage+0x88>)
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	f7ff fb07 	bl	8000608 <__aeabi_dmul>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	460c      	mov	r4, r1
 8000ffe:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if (V>0) {
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	f04f 0300 	mov.w	r3, #0
 800100a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800100e:	f7ff fd8b 	bl	8000b28 <__aeabi_dcmpgt>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <selec_voltage+0x56>
		move(tension_pwm,0);
 8001018:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8001060 <selec_voltage+0x90>
 800101c:	ed97 0b02 	vldr	d0, [r7, #8]
 8001020:	f7ff ff32 	bl	8000e88 <move>
	}else {
		tension_pwm = abs(tension_pwm);
		move(0,tension_pwm);
	}

}
 8001024:	e014      	b.n	8001050 <selec_voltage+0x80>
		tension_pwm = abs(tension_pwm);
 8001026:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800102a:	f7ff fd87 	bl	8000b3c <__aeabi_d2iz>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	bfb8      	it	lt
 8001034:	425b      	neglt	r3, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fa7c 	bl	8000534 <__aeabi_i2d>
 800103c:	4603      	mov	r3, r0
 800103e:	460c      	mov	r4, r1
 8001040:	e9c7 3402 	strd	r3, r4, [r7, #8]
		move(0,tension_pwm);
 8001044:	ed97 1b02 	vldr	d1, [r7, #8]
 8001048:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8001060 <selec_voltage+0x90>
 800104c:	f7ff ff1c 	bl	8000e88 <move>
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	bd90      	pop	{r4, r7, pc}
 8001058:	00000000 	.word	0x00000000
 800105c:	408f3800 	.word	0x408f3800
	...
 8001068:	40280000 	.word	0x40280000

0800106c <enviarcuenta>:

void enviarcuenta(){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
	for(int i = 0; i<num_muestras; i++){
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	e016      	b.n	80010a6 <enviarcuenta+0x3a>
		sprintf(str_name, "%d\t%d\n", i, medidas[i]);
 8001078:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <enviarcuenta+0x4c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	490e      	ldr	r1, [pc, #56]	; (80010bc <enviarcuenta+0x50>)
 8001084:	480e      	ldr	r0, [pc, #56]	; (80010c0 <enviarcuenta+0x54>)
 8001086:	f003 ff79 	bl	8004f7c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) str_name, strlen(str_name), HAL_MAX_DELAY);
 800108a:	480d      	ldr	r0, [pc, #52]	; (80010c0 <enviarcuenta+0x54>)
 800108c:	f7ff f8a8 	bl	80001e0 <strlen>
 8001090:	4603      	mov	r3, r0
 8001092:	b29a      	uxth	r2, r3
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
 8001098:	4909      	ldr	r1, [pc, #36]	; (80010c0 <enviarcuenta+0x54>)
 800109a:	480a      	ldr	r0, [pc, #40]	; (80010c4 <enviarcuenta+0x58>)
 800109c:	f003 fb2c 	bl	80046f8 <HAL_UART_Transmit>
	for(int i = 0; i<num_muestras; i++){
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3301      	adds	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f641 3257 	movw	r2, #6999	; 0x1b57
 80010ac:	4293      	cmp	r3, r2
 80010ae:	dde3      	ble.n	8001078 <enviarcuenta+0xc>
	}
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200000a4 	.word	0x200000a4
 80010bc:	08005840 	.word	0x08005840
 80010c0:	20006e04 	.word	0x20006e04
 80010c4:	20006f68 	.word	0x20006f68

080010c8 <reductora>:
	HAL_TIM_Base_Start_IT(&htim7);
	count_pul = 0;
	selec_voltage(V);
}

void reductora(){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <reductora+0x18>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2200      	movs	r2, #0
 80010d2:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim6);
 80010d4:	4803      	ldr	r0, [pc, #12]	; (80010e4 <reductora+0x1c>)
 80010d6:	f002 fa25 	bl	8003524 <HAL_TIM_Base_Start_IT>
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20006ee8 	.word	0x20006ee8
 80010e4:	20006ea8 	.word	0x20006ea8

080010e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <HAL_MspInit+0x44>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <HAL_MspInit+0x44>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6193      	str	r3, [r2, #24]
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <HAL_MspInit+0x44>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_MspInit+0x44>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a08      	ldr	r2, [pc, #32]	; (800113c <HAL_MspInit+0x44>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_MspInit+0x44>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <HardFault_Handler+0x4>

08001154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <MemManage_Handler+0x4>

0800115a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <BusFault_Handler+0x4>

08001160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <UsageFault_Handler+0x4>

08001166 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001194:	f000 fb5c 	bl	8001850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}

0800119c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <TIM2_IRQHandler+0x10>)
 80011a2:	f002 fb88 	bl	80038b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20006ee8 	.word	0x20006ee8

080011b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM3_IRQHandler+0x10>)
 80011b6:	f002 fb7e 	bl	80038b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20006e68 	.word	0x20006e68

080011c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <TIM6_DAC_IRQHandler+0x10>)
 80011ca:	f002 fb74 	bl	80038b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20006ea8 	.word	0x20006ea8

080011d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <TIM7_IRQHandler+0x10>)
 80011de:	f002 fb6a 	bl	80038b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20006f28 	.word	0x20006f28

080011ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <_sbrk+0x50>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <_sbrk+0x16>
		heap_end = &end;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <_sbrk+0x50>)
 80011fe:	4a10      	ldr	r2, [pc, #64]	; (8001240 <_sbrk+0x54>)
 8001200:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <_sbrk+0x50>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <_sbrk+0x50>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4413      	add	r3, r2
 8001210:	466a      	mov	r2, sp
 8001212:	4293      	cmp	r3, r2
 8001214:	d907      	bls.n	8001226 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001216:	f003 fe7f 	bl	8004f18 <__errno>
 800121a:	4602      	mov	r2, r0
 800121c:	230c      	movs	r3, #12
 800121e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	e006      	b.n	8001234 <_sbrk+0x48>
	}

	heap_end += incr;
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <_sbrk+0x50>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	4a03      	ldr	r2, [pc, #12]	; (800123c <_sbrk+0x50>)
 8001230:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000098 	.word	0x20000098
 8001240:	20006ff0 	.word	0x20006ff0

08001244 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <SystemInit+0x28>)
 800124a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800124e:	4a07      	ldr	r2, [pc, #28]	; (800126c <SystemInit+0x28>)
 8001250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001254:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <SystemInit+0x28>)
 800125a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800125e:	609a      	str	r2, [r3, #8]
#endif
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	; 0x30
 8001274:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2224      	movs	r2, #36	; 0x24
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f003 fe74 	bl	8004f6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	463b      	mov	r3, r7
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <MX_TIM2_Init+0xa4>)
 8001290:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001294:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <MX_TIM2_Init+0xa4>)
 8001298:	2200      	movs	r2, #0
 800129a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <MX_TIM2_Init+0xa4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <MX_TIM2_Init+0xa4>)
 80012a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_TIM2_Init+0xa4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_TIM2_Init+0xa4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012b6:	2303      	movs	r3, #3
 80012b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012be:	2301      	movs	r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012ce:	2301      	movs	r3, #1
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	4619      	mov	r1, r3
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <MX_TIM2_Init+0xa4>)
 80012e2:	f002 f9ff 	bl	80036e4 <HAL_TIM_Encoder_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80012ec:	f7ff fefc 	bl	80010e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f0:	2300      	movs	r3, #0
 80012f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f8:	463b      	mov	r3, r7
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_TIM2_Init+0xa4>)
 80012fe:	f003 f903 	bl	8004508 <HAL_TIMEx_MasterConfigSynchronization>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001308:	f7ff feee 	bl	80010e8 <Error_Handler>
  }

}
 800130c:	bf00      	nop
 800130e:	3730      	adds	r7, #48	; 0x30
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20006ee8 	.word	0x20006ee8

08001318 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800132a:	463b      	mov	r3, r7
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	615a      	str	r2, [r3, #20]
 800133a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800133c:	4b27      	ldr	r3, [pc, #156]	; (80013dc <MX_TIM3_Init+0xc4>)
 800133e:	4a28      	ldr	r2, [pc, #160]	; (80013e0 <MX_TIM3_Init+0xc8>)
 8001340:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 8001342:	4b26      	ldr	r3, [pc, #152]	; (80013dc <MX_TIM3_Init+0xc4>)
 8001344:	2202      	movs	r2, #2
 8001346:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b24      	ldr	r3, [pc, #144]	; (80013dc <MX_TIM3_Init+0xc4>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800134e:	4b23      	ldr	r3, [pc, #140]	; (80013dc <MX_TIM3_Init+0xc4>)
 8001350:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001354:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <MX_TIM3_Init+0xc4>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <MX_TIM3_Init+0xc4>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001362:	481e      	ldr	r0, [pc, #120]	; (80013dc <MX_TIM3_Init+0xc4>)
 8001364:	f002 f933 	bl	80035ce <HAL_TIM_PWM_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800136e:	f7ff febb 	bl	80010e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	4816      	ldr	r0, [pc, #88]	; (80013dc <MX_TIM3_Init+0xc4>)
 8001382:	f003 f8c1 	bl	8004508 <HAL_TIMEx_MasterConfigSynchronization>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800138c:	f7ff feac 	bl	80010e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001390:	2360      	movs	r3, #96	; 0x60
 8001392:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	2200      	movs	r2, #0
 80013a4:	4619      	mov	r1, r3
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_TIM3_Init+0xc4>)
 80013a8:	f002 fba4 	bl	8003af4 <HAL_TIM_PWM_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80013b2:	f7ff fe99 	bl	80010e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013b6:	463b      	mov	r3, r7
 80013b8:	2204      	movs	r2, #4
 80013ba:	4619      	mov	r1, r3
 80013bc:	4807      	ldr	r0, [pc, #28]	; (80013dc <MX_TIM3_Init+0xc4>)
 80013be:	f002 fb99 	bl	8003af4 <HAL_TIM_PWM_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80013c8:	f7ff fe8e 	bl	80010e8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80013cc:	4803      	ldr	r0, [pc, #12]	; (80013dc <MX_TIM3_Init+0xc4>)
 80013ce:	f000 f925 	bl	800161c <HAL_TIM_MspPostInit>

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	; 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20006e68 	.word	0x20006e68
 80013e0:	40000400 	.word	0x40000400

080013e4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_TIM6_Init+0x64>)
 80013f6:	4a15      	ldr	r2, [pc, #84]	; (800144c <MX_TIM6_Init+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 199;
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <MX_TIM6_Init+0x64>)
 80013fc:	22c7      	movs	r2, #199	; 0xc7
 80013fe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_TIM6_Init+0x64>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 299;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_TIM6_Init+0x64>)
 8001408:	f240 122b 	movw	r2, #299	; 0x12b
 800140c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_TIM6_Init+0x64>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <MX_TIM6_Init+0x64>)
 8001416:	f002 f859 	bl	80034cc <HAL_TIM_Base_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001420:	f7ff fe62 	bl	80010e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_TIM6_Init+0x64>)
 8001432:	f003 f869 	bl	8004508 <HAL_TIMEx_MasterConfigSynchronization>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800143c:	f7ff fe54 	bl	80010e8 <Error_Handler>
  }

}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20006ea8 	.word	0x20006ea8
 800144c:	40001000 	.word	0x40001000

08001450 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_TIM7_Init+0x64>)
 8001462:	4a15      	ldr	r2, [pc, #84]	; (80014b8 <MX_TIM7_Init+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <MX_TIM7_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_TIM7_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 3599;
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <MX_TIM7_Init+0x64>)
 8001474:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001478:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_TIM7_Init+0x64>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001480:	480c      	ldr	r0, [pc, #48]	; (80014b4 <MX_TIM7_Init+0x64>)
 8001482:	f002 f823 	bl	80034cc <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800148c:	f7ff fe2c 	bl	80010e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_TIM7_Init+0x64>)
 800149e:	f003 f833 	bl	8004508 <HAL_TIMEx_MasterConfigSynchronization>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80014a8:	f7ff fe1e 	bl	80010e8 <Error_Handler>
  }

}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20006f28 	.word	0x20006f28
 80014b8:	40001400 	.word	0x40001400

080014bc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014dc:	d130      	bne.n	8001540 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <HAL_TIM_Encoder_MspInit+0x8c>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a19      	ldr	r2, [pc, #100]	; (8001548 <HAL_TIM_Encoder_MspInit+0x8c>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_TIM_Encoder_MspInit+0x8c>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_TIM_Encoder_MspInit+0x8c>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	4a13      	ldr	r2, [pc, #76]	; (8001548 <HAL_TIM_Encoder_MspInit+0x8c>)
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	6153      	str	r3, [r2, #20]
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800150e:	2303      	movs	r3, #3
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800151e:	2301      	movs	r3, #1
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152c:	f000 fac2 	bl	8001ab4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	2100      	movs	r1, #0
 8001534:	201c      	movs	r0, #28
 8001536:	f000 fa86 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800153a:	201c      	movs	r0, #28
 800153c:	f000 fa9f 	bl	8001a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001540:	bf00      	nop
 8001542:	3728      	adds	r7, #40	; 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000

0800154c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <HAL_TIM_PWM_MspInit+0x44>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d113      	bne.n	8001586 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <HAL_TIM_PWM_MspInit+0x48>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <HAL_TIM_PWM_MspInit+0x48>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	61d3      	str	r3, [r2, #28]
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_TIM_PWM_MspInit+0x48>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	201d      	movs	r0, #29
 800157c:	f000 fa63 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001580:	201d      	movs	r0, #29
 8001582:	f000 fa7c 	bl	8001a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40000400 	.word	0x40000400
 8001594:	40021000 	.word	0x40021000

08001598 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a1a      	ldr	r2, [pc, #104]	; (8001610 <HAL_TIM_Base_MspInit+0x78>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d114      	bne.n	80015d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <HAL_TIM_Base_MspInit+0x7c>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4a19      	ldr	r2, [pc, #100]	; (8001614 <HAL_TIM_Base_MspInit+0x7c>)
 80015b0:	f043 0310 	orr.w	r3, r3, #16
 80015b4:	61d3      	str	r3, [r2, #28]
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <HAL_TIM_Base_MspInit+0x7c>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2036      	movs	r0, #54	; 0x36
 80015c8:	f000 fa3d 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015cc:	2036      	movs	r0, #54	; 0x36
 80015ce:	f000 fa56 	bl	8001a7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80015d2:	e018      	b.n	8001606 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <HAL_TIM_Base_MspInit+0x80>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d113      	bne.n	8001606 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_TIM_Base_MspInit+0x7c>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <HAL_TIM_Base_MspInit+0x7c>)
 80015e4:	f043 0320 	orr.w	r3, r3, #32
 80015e8:	61d3      	str	r3, [r2, #28]
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <HAL_TIM_Base_MspInit+0x7c>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 0320 	and.w	r3, r3, #32
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2037      	movs	r0, #55	; 0x37
 80015fc:	f000 fa23 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001600:	2037      	movs	r0, #55	; 0x37
 8001602:	f000 fa3c 	bl	8001a7e <HAL_NVIC_EnableIRQ>
}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40001000 	.word	0x40001000
 8001614:	40021000 	.word	0x40021000
 8001618:	40001400 	.word	0x40001400

0800161c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a11      	ldr	r2, [pc, #68]	; (8001680 <HAL_TIM_MspPostInit+0x64>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d11b      	bne.n	8001676 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_TIM_MspPostInit+0x68>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a10      	ldr	r2, [pc, #64]	; (8001684 <HAL_TIM_MspPostInit+0x68>)
 8001644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001648:	6153      	str	r3, [r2, #20]
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_TIM_MspPostInit+0x68>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001656:	2330      	movs	r3, #48	; 0x30
 8001658:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001666:	2302      	movs	r3, #2
 8001668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	; (8001688 <HAL_TIM_MspPostInit+0x6c>)
 8001672:	f000 fa1f 	bl	8001ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001676:	bf00      	nop
 8001678:	3720      	adds	r7, #32
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40000400 	.word	0x40000400
 8001684:	40021000 	.word	0x40021000
 8001688:	48000400 	.word	0x48000400

0800168c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 8001692:	4a15      	ldr	r2, [pc, #84]	; (80016e8 <MX_USART2_UART_Init+0x5c>)
 8001694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 8001698:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800169c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_USART2_UART_Init+0x58>)
 80016d0:	f002 ffc4 	bl	800465c <HAL_UART_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016da:	f7ff fd05 	bl	80010e8 <Error_Handler>
  }

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20006f68 	.word	0x20006f68
 80016e8:	40004400 	.word	0x40004400

080016ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a17      	ldr	r2, [pc, #92]	; (8001768 <HAL_UART_MspInit+0x7c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d128      	bne.n	8001760 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_UART_MspInit+0x80>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	4a16      	ldr	r2, [pc, #88]	; (800176c <HAL_UART_MspInit+0x80>)
 8001714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001718:	61d3      	str	r3, [r2, #28]
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <HAL_UART_MspInit+0x80>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_UART_MspInit+0x80>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <HAL_UART_MspInit+0x80>)
 800172c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001730:	6153      	str	r3, [r2, #20]
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_UART_MspInit+0x80>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800173e:	230c      	movs	r3, #12
 8001740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800174e:	2307      	movs	r3, #7
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175c:	f000 f9aa 	bl	8001ab4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	; 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40004400 	.word	0x40004400
 800176c:	40021000 	.word	0x40021000

08001770 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001774:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001776:	e003      	b.n	8001780 <LoopCopyDataInit>

08001778 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800177a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800177c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800177e:	3104      	adds	r1, #4

08001780 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001780:	480b      	ldr	r0, [pc, #44]	; (80017b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001784:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001786:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001788:	d3f6      	bcc.n	8001778 <CopyDataInit>
	ldr	r2, =_sbss
 800178a:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800178c:	e002      	b.n	8001794 <LoopFillZerobss>

0800178e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800178e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001790:	f842 3b04 	str.w	r3, [r2], #4

08001794 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <LoopForever+0x16>)
	cmp	r2, r3
 8001796:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001798:	d3f9      	bcc.n	800178e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800179a:	f7ff fd53 	bl	8001244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800179e:	f003 fbc1 	bl	8004f24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017a2:	f7ff fa53 	bl	8000c4c <main>

080017a6 <LoopForever>:

LoopForever:
    b LoopForever
 80017a6:	e7fe      	b.n	80017a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017a8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80017ac:	080058bc 	.word	0x080058bc
	ldr	r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80017b4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80017b8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80017bc:	20006ff0 	.word	0x20006ff0

080017c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC1_2_IRQHandler>
	...

080017c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <HAL_Init+0x28>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a07      	ldr	r2, [pc, #28]	; (80017ec <HAL_Init+0x28>)
 80017ce:	f043 0310 	orr.w	r3, r3, #16
 80017d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d4:	2003      	movs	r0, #3
 80017d6:	f000 f92b 	bl	8001a30 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017da:	2000      	movs	r0, #0
 80017dc:	f000 f808 	bl	80017f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e0:	f7ff fc8a 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40022000 	.word	0x40022000

080017f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_InitTick+0x54>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_InitTick+0x58>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4619      	mov	r1, r3
 8001802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001806:	fbb3 f3f1 	udiv	r3, r3, r1
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f943 	bl	8001a9a <HAL_SYSTICK_Config>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e00e      	b.n	800183c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b0f      	cmp	r3, #15
 8001822:	d80a      	bhi.n	800183a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001824:	2200      	movs	r2, #0
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	f000 f90b 	bl	8001a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001830:	4a06      	ldr	r2, [pc, #24]	; (800184c <HAL_InitTick+0x5c>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	e000      	b.n	800183c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000000 	.word	0x20000000
 8001848:	20000008 	.word	0x20000008
 800184c:	20000004 	.word	0x20000004

08001850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_IncTick+0x20>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_IncTick+0x24>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4413      	add	r3, r2
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <HAL_IncTick+0x24>)
 8001862:	6013      	str	r3, [r2, #0]
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000008 	.word	0x20000008
 8001874:	20006fe8 	.word	0x20006fe8

08001878 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return uwTick;  
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <HAL_GetTick+0x14>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20006fe8 	.word	0x20006fe8

08001890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c2:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	60d3      	str	r3, [r2, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <__NVIC_GetPriorityGrouping+0x18>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	f003 0307 	and.w	r3, r3, #7
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	2b00      	cmp	r3, #0
 8001904:	db0b      	blt.n	800191e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	f003 021f 	and.w	r2, r3, #31
 800190c:	4907      	ldr	r1, [pc, #28]	; (800192c <__NVIC_EnableIRQ+0x38>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	2001      	movs	r0, #1
 8001916:	fa00 f202 	lsl.w	r2, r0, r2
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000e100 	.word	0xe000e100

08001930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	6039      	str	r1, [r7, #0]
 800193a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	2b00      	cmp	r3, #0
 8001942:	db0a      	blt.n	800195a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	490c      	ldr	r1, [pc, #48]	; (800197c <__NVIC_SetPriority+0x4c>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	0112      	lsls	r2, r2, #4
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	440b      	add	r3, r1
 8001954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001958:	e00a      	b.n	8001970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4908      	ldr	r1, [pc, #32]	; (8001980 <__NVIC_SetPriority+0x50>)
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	3b04      	subs	r3, #4
 8001968:	0112      	lsls	r2, r2, #4
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	440b      	add	r3, r1
 800196e:	761a      	strb	r2, [r3, #24]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000e100 	.word	0xe000e100
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f1c3 0307 	rsb	r3, r3, #7
 800199e:	2b04      	cmp	r3, #4
 80019a0:	bf28      	it	cs
 80019a2:	2304      	movcs	r3, #4
 80019a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3304      	adds	r3, #4
 80019aa:	2b06      	cmp	r3, #6
 80019ac:	d902      	bls.n	80019b4 <NVIC_EncodePriority+0x30>
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3b03      	subs	r3, #3
 80019b2:	e000      	b.n	80019b6 <NVIC_EncodePriority+0x32>
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 32ff 	mov.w	r2, #4294967295
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43da      	mvns	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	401a      	ands	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019cc:	f04f 31ff 	mov.w	r1, #4294967295
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	43d9      	mvns	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	4313      	orrs	r3, r2
         );
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3724      	adds	r7, #36	; 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019fc:	d301      	bcc.n	8001a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00f      	b.n	8001a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <SysTick_Config+0x40>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f7ff ff8e 	bl	8001930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <SysTick_Config+0x40>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <SysTick_Config+0x40>)
 8001a1c:	2207      	movs	r2, #7
 8001a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	e000e010 	.word	0xe000e010

08001a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff29 	bl	8001890 <__NVIC_SetPriorityGrouping>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a58:	f7ff ff3e 	bl	80018d8 <__NVIC_GetPriorityGrouping>
 8001a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	6978      	ldr	r0, [r7, #20]
 8001a64:	f7ff ff8e 	bl	8001984 <NVIC_EncodePriority>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff5d 	bl	8001930 <__NVIC_SetPriority>
}
 8001a76:	bf00      	nop
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff31 	bl	80018f4 <__NVIC_EnableIRQ>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ffa2 	bl	80019ec <SysTick_Config>
 8001aa8:	4603      	mov	r3, r0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac2:	e160      	b.n	8001d86 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8152 	beq.w	8001d80 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x38>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b12      	cmp	r3, #18
 8001aea:	d123      	bne.n	8001b34 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	08da      	lsrs	r2, r3, #3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3208      	adds	r2, #8
 8001af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	220f      	movs	r2, #15
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	691a      	ldr	r2, [r3, #16]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	08da      	lsrs	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3208      	adds	r2, #8
 8001b2e:	6939      	ldr	r1, [r7, #16]
 8001b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2203      	movs	r2, #3
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0203 	and.w	r2, r3, #3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d00b      	beq.n	8001b88 <HAL_GPIO_Init+0xd4>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d007      	beq.n	8001b88 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b7c:	2b11      	cmp	r3, #17
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b12      	cmp	r3, #18
 8001b86:	d130      	bne.n	8001bea <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	f003 0201 	and.w	r2, r3, #1
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 80ac 	beq.w	8001d80 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c28:	4b5e      	ldr	r3, [pc, #376]	; (8001da4 <HAL_GPIO_Init+0x2f0>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	4a5d      	ldr	r2, [pc, #372]	; (8001da4 <HAL_GPIO_Init+0x2f0>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6193      	str	r3, [r2, #24]
 8001c34:	4b5b      	ldr	r3, [pc, #364]	; (8001da4 <HAL_GPIO_Init+0x2f0>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c40:	4a59      	ldr	r2, [pc, #356]	; (8001da8 <HAL_GPIO_Init+0x2f4>)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	089b      	lsrs	r3, r3, #2
 8001c46:	3302      	adds	r3, #2
 8001c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c6a:	d025      	beq.n	8001cb8 <HAL_GPIO_Init+0x204>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a4f      	ldr	r2, [pc, #316]	; (8001dac <HAL_GPIO_Init+0x2f8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d01f      	beq.n	8001cb4 <HAL_GPIO_Init+0x200>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a4e      	ldr	r2, [pc, #312]	; (8001db0 <HAL_GPIO_Init+0x2fc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d019      	beq.n	8001cb0 <HAL_GPIO_Init+0x1fc>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a4d      	ldr	r2, [pc, #308]	; (8001db4 <HAL_GPIO_Init+0x300>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d013      	beq.n	8001cac <HAL_GPIO_Init+0x1f8>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a4c      	ldr	r2, [pc, #304]	; (8001db8 <HAL_GPIO_Init+0x304>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00d      	beq.n	8001ca8 <HAL_GPIO_Init+0x1f4>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a4b      	ldr	r2, [pc, #300]	; (8001dbc <HAL_GPIO_Init+0x308>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d007      	beq.n	8001ca4 <HAL_GPIO_Init+0x1f0>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a4a      	ldr	r2, [pc, #296]	; (8001dc0 <HAL_GPIO_Init+0x30c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d101      	bne.n	8001ca0 <HAL_GPIO_Init+0x1ec>
 8001c9c:	2306      	movs	r3, #6
 8001c9e:	e00c      	b.n	8001cba <HAL_GPIO_Init+0x206>
 8001ca0:	2307      	movs	r3, #7
 8001ca2:	e00a      	b.n	8001cba <HAL_GPIO_Init+0x206>
 8001ca4:	2305      	movs	r3, #5
 8001ca6:	e008      	b.n	8001cba <HAL_GPIO_Init+0x206>
 8001ca8:	2304      	movs	r3, #4
 8001caa:	e006      	b.n	8001cba <HAL_GPIO_Init+0x206>
 8001cac:	2303      	movs	r3, #3
 8001cae:	e004      	b.n	8001cba <HAL_GPIO_Init+0x206>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e002      	b.n	8001cba <HAL_GPIO_Init+0x206>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <HAL_GPIO_Init+0x206>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	f002 0203 	and.w	r2, r2, #3
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	4093      	lsls	r3, r2
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cca:	4937      	ldr	r1, [pc, #220]	; (8001da8 <HAL_GPIO_Init+0x2f4>)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cfc:	4a31      	ldr	r2, [pc, #196]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d02:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d26:	4a27      	ldr	r2, [pc, #156]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d50:	4a1c      	ldr	r2, [pc, #112]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f47f ae97 	bne.w	8001ac4 <HAL_GPIO_Init+0x10>
  }
}
 8001d96:	bf00      	nop
 8001d98:	371c      	adds	r7, #28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010000 	.word	0x40010000
 8001dac:	48000400 	.word	0x48000400
 8001db0:	48000800 	.word	0x48000800
 8001db4:	48000c00 	.word	0x48000c00
 8001db8:	48001000 	.word	0x48001000
 8001dbc:	48001400 	.word	0x48001400
 8001dc0:	48001800 	.word	0x48001800
 8001dc4:	40010400 	.word	0x40010400

08001dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	807b      	strh	r3, [r7, #2]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd8:	787b      	ldrb	r3, [r7, #1]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001de4:	e002      	b.n	8001dec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f000 bf01 	b.w	8002c14 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 8160 	beq.w	80020e2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e22:	4bae      	ldr	r3, [pc, #696]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d00c      	beq.n	8001e48 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e2e:	4bab      	ldr	r3, [pc, #684]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d159      	bne.n	8001eee <HAL_RCC_OscConfig+0xf6>
 8001e3a:	4ba8      	ldr	r3, [pc, #672]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e46:	d152      	bne.n	8001eee <HAL_RCC_OscConfig+0xf6>
 8001e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e4c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e5c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d102      	bne.n	8001e7a <HAL_RCC_OscConfig+0x82>
 8001e74:	4b99      	ldr	r3, [pc, #612]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	e015      	b.n	8001ea6 <HAL_RCC_OscConfig+0xae>
 8001e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e7e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e92:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e96:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ea2:	4b8e      	ldr	r3, [pc, #568]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eaa:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001eae:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001eb2:	fa92 f2a2 	rbit	r2, r2
 8001eb6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001eba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001ebe:	fab2 f282 	clz	r2, r2
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	f042 0220 	orr.w	r2, r2, #32
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	f002 021f 	and.w	r2, r2, #31
 8001ece:	2101      	movs	r1, #1
 8001ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 8102 	beq.w	80020e0 <HAL_RCC_OscConfig+0x2e8>
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f040 80fc 	bne.w	80020e0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f000 be93 	b.w	8002c14 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef8:	d106      	bne.n	8001f08 <HAL_RCC_OscConfig+0x110>
 8001efa:	4b78      	ldr	r3, [pc, #480]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a77      	ldr	r2, [pc, #476]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e030      	b.n	8001f6a <HAL_RCC_OscConfig+0x172>
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x134>
 8001f12:	4b72      	ldr	r3, [pc, #456]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a71      	ldr	r2, [pc, #452]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b6f      	ldr	r3, [pc, #444]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a6e      	ldr	r2, [pc, #440]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e01e      	b.n	8001f6a <HAL_RCC_OscConfig+0x172>
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f36:	d10c      	bne.n	8001f52 <HAL_RCC_OscConfig+0x15a>
 8001f38:	4b68      	ldr	r3, [pc, #416]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a67      	ldr	r2, [pc, #412]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001f3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b65      	ldr	r3, [pc, #404]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a64      	ldr	r2, [pc, #400]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	e00b      	b.n	8001f6a <HAL_RCC_OscConfig+0x172>
 8001f52:	4b62      	ldr	r3, [pc, #392]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a61      	ldr	r2, [pc, #388]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	4b5f      	ldr	r3, [pc, #380]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a5e      	ldr	r2, [pc, #376]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f68:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d059      	beq.n	8002028 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7ff fc80 	bl	8001878 <HAL_GetTick>
 8001f78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f7e:	f7ff fc7b 	bl	8001878 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d902      	bls.n	8001f94 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	f000 be40 	b.w	8002c14 <HAL_RCC_OscConfig+0xe1c>
 8001f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f98:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001fa8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fac:	fab3 f383 	clz	r3, r3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d102      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x1ce>
 8001fc0:	4b46      	ldr	r3, [pc, #280]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	e015      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1fa>
 8001fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001fd2:	fa93 f3a3 	rbit	r3, r3
 8001fd6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fde:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001fe2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001fee:	4b3b      	ldr	r3, [pc, #236]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ff6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001ffa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001ffe:	fa92 f2a2 	rbit	r2, r2
 8002002:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002006:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800200a:	fab2 f282 	clz	r2, r2
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	f042 0220 	orr.w	r2, r2, #32
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	f002 021f 	and.w	r2, r2, #31
 800201a:	2101      	movs	r1, #1
 800201c:	fa01 f202 	lsl.w	r2, r1, r2
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0ab      	beq.n	8001f7e <HAL_RCC_OscConfig+0x186>
 8002026:	e05c      	b.n	80020e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7ff fc26 	bl	8001878 <HAL_GetTick>
 800202c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002032:	f7ff fc21 	bl	8001878 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d902      	bls.n	8002048 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	f000 bde6 	b.w	8002c14 <HAL_RCC_OscConfig+0xe1c>
 8002048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800204c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800205c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002060:	fab3 f383 	clz	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	b2db      	uxtb	r3, r3
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d102      	bne.n	800207a <HAL_RCC_OscConfig+0x282>
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	e015      	b.n	80020a6 <HAL_RCC_OscConfig+0x2ae>
 800207a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800207e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800208e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002092:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002096:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_RCC_OscConfig+0x2e4>)
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020aa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80020ae:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80020b2:	fa92 f2a2 	rbit	r2, r2
 80020b6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80020ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80020be:	fab2 f282 	clz	r2, r2
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	f042 0220 	orr.w	r2, r2, #32
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	f002 021f 	and.w	r2, r2, #31
 80020ce:	2101      	movs	r1, #1
 80020d0:	fa01 f202 	lsl.w	r2, r1, r2
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1ab      	bne.n	8002032 <HAL_RCC_OscConfig+0x23a>
 80020da:	e002      	b.n	80020e2 <HAL_RCC_OscConfig+0x2ea>
 80020dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 8170 	beq.w	80023d2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020f2:	4bd0      	ldr	r3, [pc, #832]	; (8002434 <HAL_RCC_OscConfig+0x63c>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00c      	beq.n	8002118 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020fe:	4bcd      	ldr	r3, [pc, #820]	; (8002434 <HAL_RCC_OscConfig+0x63c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b08      	cmp	r3, #8
 8002108:	d16d      	bne.n	80021e6 <HAL_RCC_OscConfig+0x3ee>
 800210a:	4bca      	ldr	r3, [pc, #808]	; (8002434 <HAL_RCC_OscConfig+0x63c>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002116:	d166      	bne.n	80021e6 <HAL_RCC_OscConfig+0x3ee>
 8002118:	2302      	movs	r3, #2
 800211a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800212a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	b2db      	uxtb	r3, r3
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b01      	cmp	r3, #1
 8002140:	d102      	bne.n	8002148 <HAL_RCC_OscConfig+0x350>
 8002142:	4bbc      	ldr	r3, [pc, #752]	; (8002434 <HAL_RCC_OscConfig+0x63c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	e013      	b.n	8002170 <HAL_RCC_OscConfig+0x378>
 8002148:	2302      	movs	r3, #2
 800214a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800215a:	2302      	movs	r3, #2
 800215c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002160:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800216c:	4bb1      	ldr	r3, [pc, #708]	; (8002434 <HAL_RCC_OscConfig+0x63c>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	2202      	movs	r2, #2
 8002172:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002176:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800217a:	fa92 f2a2 	rbit	r2, r2
 800217e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002182:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002186:	fab2 f282 	clz	r2, r2
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	f042 0220 	orr.w	r2, r2, #32
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	f002 021f 	and.w	r2, r2, #31
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f202 	lsl.w	r2, r1, r2
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <HAL_RCC_OscConfig+0x3ba>
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d002      	beq.n	80021b2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	f000 bd31 	b.w	8002c14 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b2:	4ba0      	ldr	r3, [pc, #640]	; (8002434 <HAL_RCC_OscConfig+0x63c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	21f8      	movs	r1, #248	; 0xf8
 80021c2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80021ca:	fa91 f1a1 	rbit	r1, r1
 80021ce:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80021d2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80021d6:	fab1 f181 	clz	r1, r1
 80021da:	b2c9      	uxtb	r1, r1
 80021dc:	408b      	lsls	r3, r1
 80021de:	4995      	ldr	r1, [pc, #596]	; (8002434 <HAL_RCC_OscConfig+0x63c>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e4:	e0f5      	b.n	80023d2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8085 	beq.w	80022fc <HAL_RCC_OscConfig+0x504>
 80021f2:	2301      	movs	r3, #1
 80021f4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002204:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002212:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	461a      	mov	r2, r3
 800221a:	2301      	movs	r3, #1
 800221c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221e:	f7ff fb2b 	bl	8001878 <HAL_GetTick>
 8002222:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002226:	e00a      	b.n	800223e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002228:	f7ff fb26 	bl	8001878 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d902      	bls.n	800223e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	f000 bceb 	b.w	8002c14 <HAL_RCC_OscConfig+0xe1c>
 800223e:	2302      	movs	r3, #2
 8002240:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002250:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	b2db      	uxtb	r3, r3
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b01      	cmp	r3, #1
 8002266:	d102      	bne.n	800226e <HAL_RCC_OscConfig+0x476>
 8002268:	4b72      	ldr	r3, [pc, #456]	; (8002434 <HAL_RCC_OscConfig+0x63c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	e013      	b.n	8002296 <HAL_RCC_OscConfig+0x49e>
 800226e:	2302      	movs	r3, #2
 8002270:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002280:	2302      	movs	r3, #2
 8002282:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002286:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002292:	4b68      	ldr	r3, [pc, #416]	; (8002434 <HAL_RCC_OscConfig+0x63c>)
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	2202      	movs	r2, #2
 8002298:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800229c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80022a0:	fa92 f2a2 	rbit	r2, r2
 80022a4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80022a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80022ac:	fab2 f282 	clz	r2, r2
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	f042 0220 	orr.w	r2, r2, #32
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	f002 021f 	and.w	r2, r2, #31
 80022bc:	2101      	movs	r1, #1
 80022be:	fa01 f202 	lsl.w	r2, r1, r2
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0af      	beq.n	8002228 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c8:	4b5a      	ldr	r3, [pc, #360]	; (8002434 <HAL_RCC_OscConfig+0x63c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	21f8      	movs	r1, #248	; 0xf8
 80022d8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80022e0:	fa91 f1a1 	rbit	r1, r1
 80022e4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80022e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022ec:	fab1 f181 	clz	r1, r1
 80022f0:	b2c9      	uxtb	r1, r1
 80022f2:	408b      	lsls	r3, r1
 80022f4:	494f      	ldr	r1, [pc, #316]	; (8002434 <HAL_RCC_OscConfig+0x63c>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
 80022fa:	e06a      	b.n	80023d2 <HAL_RCC_OscConfig+0x5da>
 80022fc:	2301      	movs	r3, #1
 80022fe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800230e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800231c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	461a      	mov	r2, r3
 8002324:	2300      	movs	r3, #0
 8002326:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7ff faa6 	bl	8001878 <HAL_GetTick>
 800232c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002330:	e00a      	b.n	8002348 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002332:	f7ff faa1 	bl	8001878 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d902      	bls.n	8002348 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	f000 bc66 	b.w	8002c14 <HAL_RCC_OscConfig+0xe1c>
 8002348:	2302      	movs	r3, #2
 800234a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800235a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b01      	cmp	r3, #1
 8002370:	d102      	bne.n	8002378 <HAL_RCC_OscConfig+0x580>
 8002372:	4b30      	ldr	r3, [pc, #192]	; (8002434 <HAL_RCC_OscConfig+0x63c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	e013      	b.n	80023a0 <HAL_RCC_OscConfig+0x5a8>
 8002378:	2302      	movs	r3, #2
 800237a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800238a:	2302      	movs	r3, #2
 800238c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002390:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800239c:	4b25      	ldr	r3, [pc, #148]	; (8002434 <HAL_RCC_OscConfig+0x63c>)
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	2202      	movs	r2, #2
 80023a2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80023a6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80023aa:	fa92 f2a2 	rbit	r2, r2
 80023ae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80023b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80023b6:	fab2 f282 	clz	r2, r2
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	f042 0220 	orr.w	r2, r2, #32
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	f002 021f 	and.w	r2, r2, #31
 80023c6:	2101      	movs	r1, #1
 80023c8:	fa01 f202 	lsl.w	r2, r1, r2
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1af      	bne.n	8002332 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d2:	1d3b      	adds	r3, r7, #4
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80da 	beq.w	8002596 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d069      	beq.n	80024c0 <HAL_RCC_OscConfig+0x6c8>
 80023ec:	2301      	movs	r3, #1
 80023ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80023fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCC_OscConfig+0x640>)
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	461a      	mov	r2, r3
 8002412:	2301      	movs	r3, #1
 8002414:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7ff fa2f 	bl	8001878 <HAL_GetTick>
 800241a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241e:	e00d      	b.n	800243c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002420:	f7ff fa2a 	bl	8001878 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d905      	bls.n	800243c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e3ef      	b.n	8002c14 <HAL_RCC_OscConfig+0xe1c>
 8002434:	40021000 	.word	0x40021000
 8002438:	10908120 	.word	0x10908120
 800243c:	2302      	movs	r3, #2
 800243e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002446:	fa93 f2a3 	rbit	r2, r3
 800244a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002454:	2202      	movs	r2, #2
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	fa93 f2a3 	rbit	r2, r3
 8002462:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800246c:	2202      	movs	r2, #2
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	fa93 f2a3 	rbit	r2, r3
 800247a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800247e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002480:	4ba4      	ldr	r3, [pc, #656]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 8002482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002484:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002488:	2102      	movs	r1, #2
 800248a:	6019      	str	r1, [r3, #0]
 800248c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fa93 f1a3 	rbit	r1, r3
 8002496:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800249a:	6019      	str	r1, [r3, #0]
  return result;
 800249c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	fab3 f383 	clz	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	2101      	movs	r1, #1
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0b0      	beq.n	8002420 <HAL_RCC_OscConfig+0x628>
 80024be:	e06a      	b.n	8002596 <HAL_RCC_OscConfig+0x79e>
 80024c0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024c4:	2201      	movs	r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	fa93 f2a3 	rbit	r2, r3
 80024d2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80024d6:	601a      	str	r2, [r3, #0]
  return result;
 80024d8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80024dc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b8c      	ldr	r3, [pc, #560]	; (8002718 <HAL_RCC_OscConfig+0x920>)
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	461a      	mov	r2, r3
 80024ee:	2300      	movs	r3, #0
 80024f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f2:	f7ff f9c1 	bl	8001878 <HAL_GetTick>
 80024f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024fa:	e009      	b.n	8002510 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024fc:	f7ff f9bc 	bl	8001878 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e381      	b.n	8002c14 <HAL_RCC_OscConfig+0xe1c>
 8002510:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002514:	2202      	movs	r2, #2
 8002516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	fa93 f2a3 	rbit	r2, r3
 8002522:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800252c:	2202      	movs	r2, #2
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	fa93 f2a3 	rbit	r2, r3
 800253a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002544:	2202      	movs	r2, #2
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	fa93 f2a3 	rbit	r2, r3
 8002552:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002556:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002558:	4b6e      	ldr	r3, [pc, #440]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 800255a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800255c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002560:	2102      	movs	r1, #2
 8002562:	6019      	str	r1, [r3, #0]
 8002564:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	fa93 f1a3 	rbit	r1, r3
 800256e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002572:	6019      	str	r1, [r3, #0]
  return result;
 8002574:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f003 031f 	and.w	r3, r3, #31
 800258a:	2101      	movs	r1, #1
 800258c:	fa01 f303 	lsl.w	r3, r1, r3
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1b2      	bne.n	80024fc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 8157 	beq.w	8002854 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ac:	4b59      	ldr	r3, [pc, #356]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d112      	bne.n	80025de <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b8:	4b56      	ldr	r3, [pc, #344]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	4a55      	ldr	r2, [pc, #340]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 80025be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c2:	61d3      	str	r3, [r2, #28]
 80025c4:	4b53      	ldr	r3, [pc, #332]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025cc:	f107 030c 	add.w	r3, r7, #12
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025de:	4b4f      	ldr	r3, [pc, #316]	; (800271c <HAL_RCC_OscConfig+0x924>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d11a      	bne.n	8002620 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ea:	4b4c      	ldr	r3, [pc, #304]	; (800271c <HAL_RCC_OscConfig+0x924>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a4b      	ldr	r2, [pc, #300]	; (800271c <HAL_RCC_OscConfig+0x924>)
 80025f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f6:	f7ff f93f 	bl	8001878 <HAL_GetTick>
 80025fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fe:	e009      	b.n	8002614 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002600:	f7ff f93a 	bl	8001878 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b64      	cmp	r3, #100	; 0x64
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e2ff      	b.n	8002c14 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002614:	4b41      	ldr	r3, [pc, #260]	; (800271c <HAL_RCC_OscConfig+0x924>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ef      	beq.n	8002600 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d106      	bne.n	8002638 <HAL_RCC_OscConfig+0x840>
 800262a:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a39      	ldr	r2, [pc, #228]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	e02f      	b.n	8002698 <HAL_RCC_OscConfig+0x8a0>
 8002638:	1d3b      	adds	r3, r7, #4
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0x864>
 8002642:	4b34      	ldr	r3, [pc, #208]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	4a33      	ldr	r2, [pc, #204]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	6213      	str	r3, [r2, #32]
 800264e:	4b31      	ldr	r3, [pc, #196]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4a30      	ldr	r2, [pc, #192]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 8002654:	f023 0304 	bic.w	r3, r3, #4
 8002658:	6213      	str	r3, [r2, #32]
 800265a:	e01d      	b.n	8002698 <HAL_RCC_OscConfig+0x8a0>
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b05      	cmp	r3, #5
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0x888>
 8002666:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a2a      	ldr	r2, [pc, #168]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	6213      	str	r3, [r2, #32]
 8002672:	4b28      	ldr	r3, [pc, #160]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4a27      	ldr	r2, [pc, #156]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6213      	str	r3, [r2, #32]
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0x8a0>
 8002680:	4b24      	ldr	r3, [pc, #144]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	4a23      	ldr	r2, [pc, #140]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 8002686:	f023 0301 	bic.w	r3, r3, #1
 800268a:	6213      	str	r3, [r2, #32]
 800268c:	4b21      	ldr	r3, [pc, #132]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4a20      	ldr	r2, [pc, #128]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 8002692:	f023 0304 	bic.w	r3, r3, #4
 8002696:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d06a      	beq.n	8002778 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a2:	f7ff f8e9 	bl	8001878 <HAL_GetTick>
 80026a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026aa:	e00b      	b.n	80026c4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ac:	f7ff f8e4 	bl	8001878 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026bc:	4293      	cmp	r3, r2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e2a7      	b.n	8002c14 <HAL_RCC_OscConfig+0xe1c>
 80026c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80026c8:	2202      	movs	r2, #2
 80026ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	fa93 f2a3 	rbit	r2, r3
 80026d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80026e0:	2202      	movs	r2, #2
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	fa93 f2a3 	rbit	r2, r3
 80026ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026f2:	601a      	str	r2, [r3, #0]
  return result;
 80026f4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	095b      	lsrs	r3, r3, #5
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f043 0302 	orr.w	r3, r3, #2
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d108      	bne.n	8002720 <HAL_RCC_OscConfig+0x928>
 800270e:	4b01      	ldr	r3, [pc, #4]	; (8002714 <HAL_RCC_OscConfig+0x91c>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	e013      	b.n	800273c <HAL_RCC_OscConfig+0x944>
 8002714:	40021000 	.word	0x40021000
 8002718:	10908120 	.word	0x10908120
 800271c:	40007000 	.word	0x40007000
 8002720:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002724:	2202      	movs	r2, #2
 8002726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	fa93 f2a3 	rbit	r2, r3
 8002732:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	4bc0      	ldr	r3, [pc, #768]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002740:	2102      	movs	r1, #2
 8002742:	6011      	str	r1, [r2, #0]
 8002744:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	fa92 f1a2 	rbit	r1, r2
 800274e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002752:	6011      	str	r1, [r2, #0]
  return result;
 8002754:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	fab2 f282 	clz	r2, r2
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	f002 021f 	and.w	r2, r2, #31
 800276a:	2101      	movs	r1, #1
 800276c:	fa01 f202 	lsl.w	r2, r1, r2
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d09a      	beq.n	80026ac <HAL_RCC_OscConfig+0x8b4>
 8002776:	e063      	b.n	8002840 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002778:	f7ff f87e 	bl	8001878 <HAL_GetTick>
 800277c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002780:	e00b      	b.n	800279a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002782:	f7ff f879 	bl	8001878 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e23c      	b.n	8002c14 <HAL_RCC_OscConfig+0xe1c>
 800279a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800279e:	2202      	movs	r2, #2
 80027a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	fa93 f2a3 	rbit	r2, r3
 80027ac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027b6:	2202      	movs	r2, #2
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	fa93 f2a3 	rbit	r2, r3
 80027c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80027c8:	601a      	str	r2, [r3, #0]
  return result;
 80027ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80027ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f043 0302 	orr.w	r3, r3, #2
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d102      	bne.n	80027ea <HAL_RCC_OscConfig+0x9f2>
 80027e4:	4b95      	ldr	r3, [pc, #596]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	e00d      	b.n	8002806 <HAL_RCC_OscConfig+0xa0e>
 80027ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027ee:	2202      	movs	r2, #2
 80027f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	fa93 f2a3 	rbit	r2, r3
 80027fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	4b8e      	ldr	r3, [pc, #568]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800280a:	2102      	movs	r1, #2
 800280c:	6011      	str	r1, [r2, #0]
 800280e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	fa92 f1a2 	rbit	r1, r2
 8002818:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800281c:	6011      	str	r1, [r2, #0]
  return result;
 800281e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	fab2 f282 	clz	r2, r2
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	f002 021f 	and.w	r2, r2, #31
 8002834:	2101      	movs	r1, #1
 8002836:	fa01 f202 	lsl.w	r2, r1, r2
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1a0      	bne.n	8002782 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002840:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002844:	2b01      	cmp	r3, #1
 8002846:	d105      	bne.n	8002854 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002848:	4b7c      	ldr	r3, [pc, #496]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	4a7b      	ldr	r2, [pc, #492]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 800284e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002852:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 81d9 	beq.w	8002c12 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002860:	4b76      	ldr	r3, [pc, #472]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 030c 	and.w	r3, r3, #12
 8002868:	2b08      	cmp	r3, #8
 800286a:	f000 81a6 	beq.w	8002bba <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	2b02      	cmp	r3, #2
 8002876:	f040 811e 	bne.w	8002ab6 <HAL_RCC_OscConfig+0xcbe>
 800287a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800287e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	fa93 f2a3 	rbit	r2, r3
 800288e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002892:	601a      	str	r2, [r3, #0]
  return result;
 8002894:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002898:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	461a      	mov	r2, r3
 80028ac:	2300      	movs	r3, #0
 80028ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe ffe2 	bl	8001878 <HAL_GetTick>
 80028b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b8:	e009      	b.n	80028ce <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ba:	f7fe ffdd 	bl	8001878 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e1a2      	b.n	8002c14 <HAL_RCC_OscConfig+0xe1c>
 80028ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	fa93 f2a3 	rbit	r2, r3
 80028e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80028e6:	601a      	str	r2, [r3, #0]
  return result;
 80028e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80028ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d102      	bne.n	8002908 <HAL_RCC_OscConfig+0xb10>
 8002902:	4b4e      	ldr	r3, [pc, #312]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	e01b      	b.n	8002940 <HAL_RCC_OscConfig+0xb48>
 8002908:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800290c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	fa93 f2a3 	rbit	r2, r3
 800291c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	fa93 f2a3 	rbit	r2, r3
 8002936:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	4b3f      	ldr	r3, [pc, #252]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002944:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002948:	6011      	str	r1, [r2, #0]
 800294a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	fa92 f1a2 	rbit	r1, r2
 8002954:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002958:	6011      	str	r1, [r2, #0]
  return result;
 800295a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	fab2 f282 	clz	r2, r2
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	f042 0220 	orr.w	r2, r2, #32
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	f002 021f 	and.w	r2, r2, #31
 8002970:	2101      	movs	r1, #1
 8002972:	fa01 f202 	lsl.w	r2, r1, r2
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d19e      	bne.n	80028ba <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800297c:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	f023 020f 	bic.w	r2, r3, #15
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	492c      	ldr	r1, [pc, #176]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 800298c:	4313      	orrs	r3, r2
 800298e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002990:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6a19      	ldr	r1, [r3, #32]
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	430b      	orrs	r3, r1
 80029a6:	4925      	ldr	r1, [pc, #148]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
 80029ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	fa93 f2a3 	rbit	r2, r3
 80029c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029c4:	601a      	str	r2, [r3, #0]
  return result;
 80029c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029ca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029cc:	fab3 f383 	clz	r3, r3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	461a      	mov	r2, r3
 80029de:	2301      	movs	r3, #1
 80029e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e2:	f7fe ff49 	bl	8001878 <HAL_GetTick>
 80029e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ea:	e009      	b.n	8002a00 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ec:	f7fe ff44 	bl	8001878 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e109      	b.n	8002c14 <HAL_RCC_OscConfig+0xe1c>
 8002a00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	fa93 f2a3 	rbit	r2, r3
 8002a14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a18:	601a      	str	r2, [r3, #0]
  return result;
 8002a1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d105      	bne.n	8002a40 <HAL_RCC_OscConfig+0xc48>
 8002a34:	4b01      	ldr	r3, [pc, #4]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	e01e      	b.n	8002a78 <HAL_RCC_OscConfig+0xc80>
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	fa93 f2a3 	rbit	r2, r3
 8002a54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	fa93 f2a3 	rbit	r2, r3
 8002a6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	4b6a      	ldr	r3, [pc, #424]	; (8002c20 <HAL_RCC_OscConfig+0xe28>)
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002a7c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a80:	6011      	str	r1, [r2, #0]
 8002a82:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	fa92 f1a2 	rbit	r1, r2
 8002a8c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a90:	6011      	str	r1, [r2, #0]
  return result;
 8002a92:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	fab2 f282 	clz	r2, r2
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	f042 0220 	orr.w	r2, r2, #32
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	f002 021f 	and.w	r2, r2, #31
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d09b      	beq.n	80029ec <HAL_RCC_OscConfig+0xbf4>
 8002ab4:	e0ad      	b.n	8002c12 <HAL_RCC_OscConfig+0xe1a>
 8002ab6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002aba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	fa93 f2a3 	rbit	r2, r3
 8002aca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ace:	601a      	str	r2, [r3, #0]
  return result;
 8002ad0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ad4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad6:	fab3 f383 	clz	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ae0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	2300      	movs	r3, #0
 8002aea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fe fec4 	bl	8001878 <HAL_GetTick>
 8002af0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af4:	e009      	b.n	8002b0a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af6:	f7fe febf 	bl	8001878 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e084      	b.n	8002c14 <HAL_RCC_OscConfig+0xe1c>
 8002b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	fa93 f2a3 	rbit	r2, r3
 8002b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b22:	601a      	str	r2, [r3, #0]
  return result;
 8002b24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d102      	bne.n	8002b44 <HAL_RCC_OscConfig+0xd4c>
 8002b3e:	4b38      	ldr	r3, [pc, #224]	; (8002c20 <HAL_RCC_OscConfig+0xe28>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	e01b      	b.n	8002b7c <HAL_RCC_OscConfig+0xd84>
 8002b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	fa93 f2a3 	rbit	r2, r3
 8002b58:	f107 0320 	add.w	r3, r7, #32
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	f107 031c 	add.w	r3, r7, #28
 8002b62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	f107 031c 	add.w	r3, r7, #28
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	fa93 f2a3 	rbit	r2, r3
 8002b72:	f107 0318 	add.w	r3, r7, #24
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	4b29      	ldr	r3, [pc, #164]	; (8002c20 <HAL_RCC_OscConfig+0xe28>)
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	f107 0214 	add.w	r2, r7, #20
 8002b80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b84:	6011      	str	r1, [r2, #0]
 8002b86:	f107 0214 	add.w	r2, r7, #20
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	fa92 f1a2 	rbit	r1, r2
 8002b90:	f107 0210 	add.w	r2, r7, #16
 8002b94:	6011      	str	r1, [r2, #0]
  return result;
 8002b96:	f107 0210 	add.w	r2, r7, #16
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	fab2 f282 	clz	r2, r2
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	f042 0220 	orr.w	r2, r2, #32
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	f002 021f 	and.w	r2, r2, #31
 8002bac:	2101      	movs	r1, #1
 8002bae:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d19e      	bne.n	8002af6 <HAL_RCC_OscConfig+0xcfe>
 8002bb8:	e02b      	b.n	8002c12 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bba:	1d3b      	adds	r3, r7, #4
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e025      	b.n	8002c14 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bc8:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <HAL_RCC_OscConfig+0xe28>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <HAL_RCC_OscConfig+0xe28>)
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bd8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002bdc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d111      	bne.n	8002c0e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002bea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002bee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d108      	bne.n	8002c0e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002bfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c00:	f003 020f 	and.w	r2, r3, #15
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40021000 	.word	0x40021000

08002c24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b09e      	sub	sp, #120	; 0x78
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e162      	b.n	8002f02 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b90      	ldr	r3, [pc, #576]	; (8002e80 <HAL_RCC_ClockConfig+0x25c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d910      	bls.n	8002c6c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b8d      	ldr	r3, [pc, #564]	; (8002e80 <HAL_RCC_ClockConfig+0x25c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 0207 	bic.w	r2, r3, #7
 8002c52:	498b      	ldr	r1, [pc, #556]	; (8002e80 <HAL_RCC_ClockConfig+0x25c>)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b89      	ldr	r3, [pc, #548]	; (8002e80 <HAL_RCC_ClockConfig+0x25c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e14a      	b.n	8002f02 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c78:	4b82      	ldr	r3, [pc, #520]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	497f      	ldr	r1, [pc, #508]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 80dc 	beq.w	8002e50 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d13c      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xf6>
 8002ca0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d102      	bne.n	8002cca <HAL_RCC_ClockConfig+0xa6>
 8002cc4:	4b6f      	ldr	r3, [pc, #444]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	e00f      	b.n	8002cea <HAL_RCC_ClockConfig+0xc6>
 8002cca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	667b      	str	r3, [r7, #100]	; 0x64
 8002cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cdc:	663b      	str	r3, [r7, #96]	; 0x60
 8002cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ce0:	fa93 f3a3 	rbit	r3, r3
 8002ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ce6:	4b67      	ldr	r3, [pc, #412]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cee:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cf2:	fa92 f2a2 	rbit	r2, r2
 8002cf6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002cf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cfa:	fab2 f282 	clz	r2, r2
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	f042 0220 	orr.w	r2, r2, #32
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	f002 021f 	and.w	r2, r2, #31
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d17b      	bne.n	8002e0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e0f3      	b.n	8002f02 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d13c      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x178>
 8002d22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	095b      	lsrs	r3, r3, #5
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d102      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x128>
 8002d46:	4b4f      	ldr	r3, [pc, #316]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	e00f      	b.n	8002d6c <HAL_RCC_ClockConfig+0x148>
 8002d4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	647b      	str	r3, [r7, #68]	; 0x44
 8002d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d5e:	643b      	str	r3, [r7, #64]	; 0x40
 8002d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d68:	4b46      	ldr	r3, [pc, #280]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d70:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d74:	fa92 f2a2 	rbit	r2, r2
 8002d78:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d7c:	fab2 f282 	clz	r2, r2
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	f042 0220 	orr.w	r2, r2, #32
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	f002 021f 	and.w	r2, r2, #31
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d13a      	bne.n	8002e0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0b2      	b.n	8002f02 <HAL_RCC_ClockConfig+0x2de>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d102      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x1a0>
 8002dbe:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	e00d      	b.n	8002de0 <HAL_RCC_ClockConfig+0x1bc>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	623b      	str	r3, [r7, #32]
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	2202      	movs	r2, #2
 8002de2:	61ba      	str	r2, [r7, #24]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	fa92 f2a2 	rbit	r2, r2
 8002dea:	617a      	str	r2, [r7, #20]
  return result;
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	fab2 f282 	clz	r2, r2
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	f042 0220 	orr.w	r2, r2, #32
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	f002 021f 	and.w	r2, r2, #31
 8002dfe:	2101      	movs	r1, #1
 8002e00:	fa01 f202 	lsl.w	r2, r1, r2
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e079      	b.n	8002f02 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f023 0203 	bic.w	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	491a      	ldr	r1, [pc, #104]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e20:	f7fe fd2a 	bl	8001878 <HAL_GetTick>
 8002e24:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	e00a      	b.n	8002e3e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e28:	f7fe fd26 	bl	8001878 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e061      	b.n	8002f02 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 020c 	and.w	r2, r3, #12
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d1eb      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_RCC_ClockConfig+0x25c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d214      	bcs.n	8002e88 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_RCC_ClockConfig+0x25c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 0207 	bic.w	r2, r3, #7
 8002e66:	4906      	ldr	r1, [pc, #24]	; (8002e80 <HAL_RCC_ClockConfig+0x25c>)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <HAL_RCC_ClockConfig+0x25c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e040      	b.n	8002f02 <HAL_RCC_ClockConfig+0x2de>
 8002e80:	40022000 	.word	0x40022000
 8002e84:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e94:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <HAL_RCC_ClockConfig+0x2e8>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	491a      	ldr	r1, [pc, #104]	; (8002f0c <HAL_RCC_ClockConfig+0x2e8>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eb2:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <HAL_RCC_ClockConfig+0x2e8>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4912      	ldr	r1, [pc, #72]	; (8002f0c <HAL_RCC_ClockConfig+0x2e8>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ec6:	f000 f829 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 8002eca:	4601      	mov	r1, r0
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_RCC_ClockConfig+0x2e8>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ed4:	22f0      	movs	r2, #240	; 0xf0
 8002ed6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	fa92 f2a2 	rbit	r2, r2
 8002ede:	60fa      	str	r2, [r7, #12]
  return result;
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	fab2 f282 	clz	r2, r2
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	40d3      	lsrs	r3, r2
 8002eea:	4a09      	ldr	r2, [pc, #36]	; (8002f10 <HAL_RCC_ClockConfig+0x2ec>)
 8002eec:	5cd3      	ldrb	r3, [r2, r3]
 8002eee:	fa21 f303 	lsr.w	r3, r1, r3
 8002ef2:	4a08      	ldr	r2, [pc, #32]	; (8002f14 <HAL_RCC_ClockConfig+0x2f0>)
 8002ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <HAL_RCC_ClockConfig+0x2f4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe fc78 	bl	80017f0 <HAL_InitTick>
  
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3778      	adds	r7, #120	; 0x78
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	08005848 	.word	0x08005848
 8002f14:	20000000 	.word	0x20000000
 8002f18:	20000004 	.word	0x20000004

08002f1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b08b      	sub	sp, #44	; 0x2c
 8002f20:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	2300      	movs	r3, #0
 8002f28:	61bb      	str	r3, [r7, #24]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f36:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d002      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x30>
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0x36>
 8002f4a:	e03f      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f4c:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f4e:	623b      	str	r3, [r7, #32]
      break;
 8002f50:	e03f      	b.n	8002fd2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f58:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f5c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	fa92 f2a2 	rbit	r2, r2
 8002f64:	607a      	str	r2, [r7, #4]
  return result;
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	fab2 f282 	clz	r2, r2
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	40d3      	lsrs	r3, r2
 8002f70:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f72:	5cd3      	ldrb	r3, [r2, r3]
 8002f74:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f76:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	220f      	movs	r2, #15
 8002f80:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	fa92 f2a2 	rbit	r2, r2
 8002f88:	60fa      	str	r2, [r7, #12]
  return result;
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	fab2 f282 	clz	r2, r2
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	40d3      	lsrs	r3, r2
 8002f94:	4a15      	ldr	r2, [pc, #84]	; (8002fec <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f96:	5cd3      	ldrb	r3, [r2, r3]
 8002f98:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fa4:	4a0f      	ldr	r2, [pc, #60]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb4:	e007      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fb6:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	fb02 f303 	mul.w	r3, r2, r3
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	623b      	str	r3, [r7, #32]
      break;
 8002fca:	e002      	b.n	8002fd2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fce:	623b      	str	r3, [r7, #32]
      break;
 8002fd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	372c      	adds	r7, #44	; 0x2c
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	007a1200 	.word	0x007a1200
 8002fe8:	08005860 	.word	0x08005860
 8002fec:	08005870 	.word	0x08005870

08002ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff4:	4b03      	ldr	r3, [pc, #12]	; (8003004 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000000 	.word	0x20000000

08003008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800300e:	f7ff ffef 	bl	8002ff0 <HAL_RCC_GetHCLKFreq>
 8003012:	4601      	mov	r1, r0
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800301c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003020:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	fa92 f2a2 	rbit	r2, r2
 8003028:	603a      	str	r2, [r7, #0]
  return result;
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	fab2 f282 	clz	r2, r2
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	40d3      	lsrs	r3, r2
 8003034:	4a04      	ldr	r2, [pc, #16]	; (8003048 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003036:	5cd3      	ldrb	r3, [r2, r3]
 8003038:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40021000 	.word	0x40021000
 8003048:	08005858 	.word	0x08005858

0800304c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003052:	f7ff ffcd 	bl	8002ff0 <HAL_RCC_GetHCLKFreq>
 8003056:	4601      	mov	r1, r0
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003060:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003064:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	fa92 f2a2 	rbit	r2, r2
 800306c:	603a      	str	r2, [r7, #0]
  return result;
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	fab2 f282 	clz	r2, r2
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	40d3      	lsrs	r3, r2
 8003078:	4a04      	ldr	r2, [pc, #16]	; (800308c <HAL_RCC_GetPCLK2Freq+0x40>)
 800307a:	5cd3      	ldrb	r3, [r2, r3]
 800307c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000
 800308c:	08005858 	.word	0x08005858

08003090 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b092      	sub	sp, #72	; 0x48
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80d7 	beq.w	800325c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80030ae:	2300      	movs	r3, #0
 80030b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b4:	4b4e      	ldr	r3, [pc, #312]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10e      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c0:	4b4b      	ldr	r3, [pc, #300]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	4a4a      	ldr	r2, [pc, #296]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ca:	61d3      	str	r3, [r2, #28]
 80030cc:	4b48      	ldr	r3, [pc, #288]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030de:	4b45      	ldr	r3, [pc, #276]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d118      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ea:	4b42      	ldr	r3, [pc, #264]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a41      	ldr	r2, [pc, #260]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f6:	f7fe fbbf 	bl	8001878 <HAL_GetTick>
 80030fa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fc:	e008      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fe:	f7fe fbbb 	bl	8001878 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b64      	cmp	r3, #100	; 0x64
 800310a:	d901      	bls.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e1d6      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003110:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800311c:	4b34      	ldr	r3, [pc, #208]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003124:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8084 	beq.w	8003236 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003136:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003138:	429a      	cmp	r2, r3
 800313a:	d07c      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800313c:	4b2c      	ldr	r3, [pc, #176]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003146:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800314a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	fa93 f3a3 	rbit	r3, r3
 8003152:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	461a      	mov	r2, r3
 8003166:	2301      	movs	r3, #1
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800316e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003172:	fa93 f3a3 	rbit	r3, r3
 8003176:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800317a:	fab3 f383 	clz	r3, r3
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	461a      	mov	r2, r3
 800318a:	2300      	movs	r3, #0
 800318c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800318e:	4a18      	ldr	r2, [pc, #96]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003192:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d04b      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319e:	f7fe fb6b 	bl	8001878 <HAL_GetTick>
 80031a2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a4:	e00a      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a6:	f7fe fb67 	bl	8001878 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e180      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80031bc:	2302      	movs	r3, #2
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c2:	fa93 f3a3 	rbit	r3, r3
 80031c6:	627b      	str	r3, [r7, #36]	; 0x24
 80031c8:	2302      	movs	r3, #2
 80031ca:	623b      	str	r3, [r7, #32]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	61fb      	str	r3, [r7, #28]
  return result;
 80031d4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	f043 0302 	orr.w	r3, r3, #2
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d108      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80031ea:	4b01      	ldr	r3, [pc, #4]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	e00d      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40007000 	.word	0x40007000
 80031f8:	10908100 	.word	0x10908100
 80031fc:	2302      	movs	r3, #2
 80031fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	fa93 f3a3 	rbit	r3, r3
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	4ba0      	ldr	r3, [pc, #640]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	2202      	movs	r2, #2
 800320e:	613a      	str	r2, [r7, #16]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	fa92 f2a2 	rbit	r2, r2
 8003216:	60fa      	str	r2, [r7, #12]
  return result;
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	fab2 f282 	clz	r2, r2
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	f002 021f 	and.w	r2, r2, #31
 800322a:	2101      	movs	r1, #1
 800322c:	fa01 f202 	lsl.w	r2, r1, r2
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0b7      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003236:	4b95      	ldr	r3, [pc, #596]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4992      	ldr	r1, [pc, #584]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003244:	4313      	orrs	r3, r2
 8003246:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003248:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003250:	4b8e      	ldr	r3, [pc, #568]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	4a8d      	ldr	r2, [pc, #564]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003268:	4b88      	ldr	r3, [pc, #544]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	f023 0203 	bic.w	r2, r3, #3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	4985      	ldr	r1, [pc, #532]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003286:	4b81      	ldr	r3, [pc, #516]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	497e      	ldr	r1, [pc, #504]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003294:	4313      	orrs	r3, r2
 8003296:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032a4:	4b79      	ldr	r3, [pc, #484]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	4976      	ldr	r1, [pc, #472]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d008      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032c2:	4b72      	ldr	r3, [pc, #456]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f023 0210 	bic.w	r2, r3, #16
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	496f      	ldr	r1, [pc, #444]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80032e0:	4b6a      	ldr	r3, [pc, #424]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ec:	4967      	ldr	r1, [pc, #412]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d008      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032fe:	4b63      	ldr	r3, [pc, #396]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f023 0220 	bic.w	r2, r3, #32
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	4960      	ldr	r1, [pc, #384]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800330c:	4313      	orrs	r3, r2
 800330e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800331c:	4b5b      	ldr	r3, [pc, #364]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003320:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	4958      	ldr	r1, [pc, #352]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800332a:	4313      	orrs	r3, r2
 800332c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d008      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800333a:	4b54      	ldr	r3, [pc, #336]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	4951      	ldr	r1, [pc, #324]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003348:	4313      	orrs	r3, r2
 800334a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003358:	4b4c      	ldr	r3, [pc, #304]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	4949      	ldr	r1, [pc, #292]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003366:	4313      	orrs	r3, r2
 8003368:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003372:	2b00      	cmp	r3, #0
 8003374:	d008      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003376:	4b45      	ldr	r3, [pc, #276]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	4942      	ldr	r1, [pc, #264]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003384:	4313      	orrs	r3, r2
 8003386:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003394:	4b3d      	ldr	r3, [pc, #244]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	493a      	ldr	r1, [pc, #232]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80033b2:	4b36      	ldr	r3, [pc, #216]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	4933      	ldr	r1, [pc, #204]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80033d0:	4b2e      	ldr	r3, [pc, #184]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033dc:	492b      	ldr	r1, [pc, #172]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d008      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80033ee:	4b27      	ldr	r3, [pc, #156]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	4924      	ldr	r1, [pc, #144]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800340c:	4b1f      	ldr	r3, [pc, #124]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	491c      	ldr	r1, [pc, #112]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800341a:	4313      	orrs	r3, r2
 800341c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800342a:	4b18      	ldr	r3, [pc, #96]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003436:	4915      	ldr	r1, [pc, #84]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003438:	4313      	orrs	r3, r2
 800343a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003448:	4b10      	ldr	r3, [pc, #64]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003454:	490d      	ldr	r1, [pc, #52]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d008      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003472:	4906      	ldr	r1, [pc, #24]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003474:	4313      	orrs	r3, r2
 8003476:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00c      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003484:	4b01      	ldr	r3, [pc, #4]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	e002      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003498:	490b      	ldr	r1, [pc, #44]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800349a:	4313      	orrs	r3, r2
 800349c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d008      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80034aa:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b6:	4904      	ldr	r1, [pc, #16]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3748      	adds	r7, #72	; 0x48
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000

080034cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e01d      	b.n	800351a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fe f850 	bl	8001598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3304      	adds	r3, #4
 8003508:	4619      	mov	r1, r3
 800350a:	4610      	mov	r0, r2
 800350c:	f000 fc32 	bl	8003d74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <HAL_TIM_Base_Start_IT+0x50>)
 8003544:	4013      	ands	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b06      	cmp	r3, #6
 800354c:	d00b      	beq.n	8003566 <HAL_TIM_Base_Start_IT+0x42>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003554:	d007      	beq.n	8003566 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0201 	orr.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	00010007 	.word	0x00010007

08003578 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6a1a      	ldr	r2, [r3, #32]
 8003596:	f241 1311 	movw	r3, #4369	; 0x1111
 800359a:	4013      	ands	r3, r2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10f      	bne.n	80035c0 <HAL_TIM_Base_Stop_IT+0x48>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6a1a      	ldr	r2, [r3, #32]
 80035a6:	f240 4344 	movw	r3, #1092	; 0x444
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d107      	bne.n	80035c0 <HAL_TIM_Base_Stop_IT+0x48>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e01d      	b.n	800361c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d106      	bne.n	80035fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7fd ffa9 	bl	800154c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2202      	movs	r2, #2
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3304      	adds	r3, #4
 800360a:	4619      	mov	r1, r3
 800360c:	4610      	mov	r0, r2
 800360e:	f000 fbb1 	bl	8003d74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2201      	movs	r2, #1
 8003634:	6839      	ldr	r1, [r7, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 ff40 	bl	80044bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a21      	ldr	r2, [pc, #132]	; (80036c8 <HAL_TIM_PWM_Start+0xa4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d018      	beq.n	8003678 <HAL_TIM_PWM_Start+0x54>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a20      	ldr	r2, [pc, #128]	; (80036cc <HAL_TIM_PWM_Start+0xa8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d013      	beq.n	8003678 <HAL_TIM_PWM_Start+0x54>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1e      	ldr	r2, [pc, #120]	; (80036d0 <HAL_TIM_PWM_Start+0xac>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00e      	beq.n	8003678 <HAL_TIM_PWM_Start+0x54>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1d      	ldr	r2, [pc, #116]	; (80036d4 <HAL_TIM_PWM_Start+0xb0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d009      	beq.n	8003678 <HAL_TIM_PWM_Start+0x54>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1b      	ldr	r2, [pc, #108]	; (80036d8 <HAL_TIM_PWM_Start+0xb4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <HAL_TIM_PWM_Start+0x54>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1a      	ldr	r2, [pc, #104]	; (80036dc <HAL_TIM_PWM_Start+0xb8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d101      	bne.n	800367c <HAL_TIM_PWM_Start+0x58>
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_TIM_PWM_Start+0x5a>
 800367c:	2300      	movs	r3, #0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003690:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <HAL_TIM_PWM_Start+0xbc>)
 800369a:	4013      	ands	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2b06      	cmp	r3, #6
 80036a2:	d00b      	beq.n	80036bc <HAL_TIM_PWM_Start+0x98>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036aa:	d007      	beq.n	80036bc <HAL_TIM_PWM_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40012c00 	.word	0x40012c00
 80036cc:	40013400 	.word	0x40013400
 80036d0:	40014000 	.word	0x40014000
 80036d4:	40014400 	.word	0x40014400
 80036d8:	40014800 	.word	0x40014800
 80036dc:	40015000 	.word	0x40015000
 80036e0:	00010007 	.word	0x00010007

080036e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e083      	b.n	8003800 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d106      	bne.n	8003712 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7fd fed5 	bl	80014bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2202      	movs	r2, #2
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003728:	f023 0307 	bic.w	r3, r3, #7
 800372c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3304      	adds	r3, #4
 8003736:	4619      	mov	r1, r3
 8003738:	4610      	mov	r0, r2
 800373a:	f000 fb1b 	bl	8003d74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003766:	f023 0303 	bic.w	r3, r3, #3
 800376a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	021b      	lsls	r3, r3, #8
 8003776:	4313      	orrs	r3, r2
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003784:	f023 030c 	bic.w	r3, r3, #12
 8003788:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003794:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	4313      	orrs	r3, r2
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	011a      	lsls	r2, r3, #4
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	031b      	lsls	r3, r3, #12
 80037b4:	4313      	orrs	r3, r2
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80037c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80037ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	4313      	orrs	r3, r2
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_TIM_Encoder_Start_IT+0x16>
 8003818:	2b04      	cmp	r3, #4
 800381a:	d010      	beq.n	800383e <HAL_TIM_Encoder_Start_IT+0x36>
 800381c:	e01f      	b.n	800385e <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2201      	movs	r2, #1
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fe48 	bl	80044bc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0202 	orr.w	r2, r2, #2
 800383a:	60da      	str	r2, [r3, #12]
      break;
 800383c:	e02e      	b.n	800389c <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2201      	movs	r2, #1
 8003844:	2104      	movs	r1, #4
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fe38 	bl	80044bc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0204 	orr.w	r2, r2, #4
 800385a:	60da      	str	r2, [r3, #12]
      break;
 800385c:	e01e      	b.n	800389c <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2201      	movs	r2, #1
 8003864:	2100      	movs	r1, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fe28 	bl	80044bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2201      	movs	r2, #1
 8003872:	2104      	movs	r1, #4
 8003874:	4618      	mov	r0, r3
 8003876:	f000 fe21 	bl	80044bc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0202 	orr.w	r2, r2, #2
 8003888:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0204 	orr.w	r2, r2, #4
 8003898:	60da      	str	r2, [r3, #12]
      break;
 800389a:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d122      	bne.n	8003912 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d11b      	bne.n	8003912 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f06f 0202 	mvn.w	r2, #2
 80038e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fa1d 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 80038fe:	e005      	b.n	800390c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fa0f 	bl	8003d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fa20 	bl	8003d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b04      	cmp	r3, #4
 800391e:	d122      	bne.n	8003966 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b04      	cmp	r3, #4
 800392c:	d11b      	bne.n	8003966 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f06f 0204 	mvn.w	r2, #4
 8003936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f9f3 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 8003952:	e005      	b.n	8003960 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f9e5 	bl	8003d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f9f6 	bl	8003d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b08      	cmp	r3, #8
 8003972:	d122      	bne.n	80039ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b08      	cmp	r3, #8
 8003980:	d11b      	bne.n	80039ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f06f 0208 	mvn.w	r2, #8
 800398a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2204      	movs	r2, #4
 8003990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f9c9 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 80039a6:	e005      	b.n	80039b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f9bb 	bl	8003d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f9cc 	bl	8003d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d122      	bne.n	8003a0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b10      	cmp	r3, #16
 80039d4:	d11b      	bne.n	8003a0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f06f 0210 	mvn.w	r2, #16
 80039de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2208      	movs	r2, #8
 80039e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f99f 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 80039fa:	e005      	b.n	8003a08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f991 	bl	8003d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f9a2 	bl	8003d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d10e      	bne.n	8003a3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d107      	bne.n	8003a3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f06f 0201 	mvn.w	r2, #1
 8003a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7fd f99f 	bl	8000d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a44:	2b80      	cmp	r3, #128	; 0x80
 8003a46:	d10e      	bne.n	8003a66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a52:	2b80      	cmp	r3, #128	; 0x80
 8003a54:	d107      	bne.n	8003a66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 fde7 	bl	8004634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a74:	d10e      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a80:	2b80      	cmp	r3, #128	; 0x80
 8003a82:	d107      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fdda 	bl	8004648 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b40      	cmp	r3, #64	; 0x40
 8003aa0:	d10e      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aac:	2b40      	cmp	r3, #64	; 0x40
 8003aae:	d107      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f950 	bl	8003d60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d10e      	bne.n	8003aec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d107      	bne.n	8003aec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0220 	mvn.w	r2, #32
 8003ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fd9a 	bl	8004620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e105      	b.n	8003d1a <HAL_TIM_PWM_ConfigChannel+0x226>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b14      	cmp	r3, #20
 8003b22:	f200 80f0 	bhi.w	8003d06 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003b26:	a201      	add	r2, pc, #4	; (adr r2, 8003b2c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2c:	08003b81 	.word	0x08003b81
 8003b30:	08003d07 	.word	0x08003d07
 8003b34:	08003d07 	.word	0x08003d07
 8003b38:	08003d07 	.word	0x08003d07
 8003b3c:	08003bc1 	.word	0x08003bc1
 8003b40:	08003d07 	.word	0x08003d07
 8003b44:	08003d07 	.word	0x08003d07
 8003b48:	08003d07 	.word	0x08003d07
 8003b4c:	08003c03 	.word	0x08003c03
 8003b50:	08003d07 	.word	0x08003d07
 8003b54:	08003d07 	.word	0x08003d07
 8003b58:	08003d07 	.word	0x08003d07
 8003b5c:	08003c43 	.word	0x08003c43
 8003b60:	08003d07 	.word	0x08003d07
 8003b64:	08003d07 	.word	0x08003d07
 8003b68:	08003d07 	.word	0x08003d07
 8003b6c:	08003c85 	.word	0x08003c85
 8003b70:	08003d07 	.word	0x08003d07
 8003b74:	08003d07 	.word	0x08003d07
 8003b78:	08003d07 	.word	0x08003d07
 8003b7c:	08003cc5 	.word	0x08003cc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f992 	bl	8003eb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0208 	orr.w	r2, r2, #8
 8003b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0204 	bic.w	r2, r2, #4
 8003baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6999      	ldr	r1, [r3, #24]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	619a      	str	r2, [r3, #24]
      break;
 8003bbe:	e0a3      	b.n	8003d08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fa0c 	bl	8003fe4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6999      	ldr	r1, [r3, #24]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	021a      	lsls	r2, r3, #8
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	619a      	str	r2, [r3, #24]
      break;
 8003c00:	e082      	b.n	8003d08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fa7f 	bl	800410c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69da      	ldr	r2, [r3, #28]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0208 	orr.w	r2, r2, #8
 8003c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0204 	bic.w	r2, r2, #4
 8003c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69d9      	ldr	r1, [r3, #28]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	61da      	str	r2, [r3, #28]
      break;
 8003c40:	e062      	b.n	8003d08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 faf1 	bl	8004230 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69da      	ldr	r2, [r3, #28]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69d9      	ldr	r1, [r3, #28]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	021a      	lsls	r2, r3, #8
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	61da      	str	r2, [r3, #28]
      break;
 8003c82:	e041      	b.n	8003d08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fb40 	bl	8004310 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0208 	orr.w	r2, r2, #8
 8003c9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0204 	bic.w	r2, r2, #4
 8003cae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003cc2:	e021      	b.n	8003d08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fb8a 	bl	80043e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	021a      	lsls	r2, r3, #8
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d04:	e000      	b.n	8003d08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8003d06:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop

08003d24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a42      	ldr	r2, [pc, #264]	; (8003e90 <TIM_Base_SetConfig+0x11c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d013      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d92:	d00f      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a3f      	ldr	r2, [pc, #252]	; (8003e94 <TIM_Base_SetConfig+0x120>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00b      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a3e      	ldr	r2, [pc, #248]	; (8003e98 <TIM_Base_SetConfig+0x124>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d007      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a3d      	ldr	r2, [pc, #244]	; (8003e9c <TIM_Base_SetConfig+0x128>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d003      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a3c      	ldr	r2, [pc, #240]	; (8003ea0 <TIM_Base_SetConfig+0x12c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d108      	bne.n	8003dc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a31      	ldr	r2, [pc, #196]	; (8003e90 <TIM_Base_SetConfig+0x11c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d01f      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d01b      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a2e      	ldr	r2, [pc, #184]	; (8003e94 <TIM_Base_SetConfig+0x120>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d017      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a2d      	ldr	r2, [pc, #180]	; (8003e98 <TIM_Base_SetConfig+0x124>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d013      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a2c      	ldr	r2, [pc, #176]	; (8003e9c <TIM_Base_SetConfig+0x128>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00f      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a2c      	ldr	r2, [pc, #176]	; (8003ea4 <TIM_Base_SetConfig+0x130>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00b      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a2b      	ldr	r2, [pc, #172]	; (8003ea8 <TIM_Base_SetConfig+0x134>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d007      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a2a      	ldr	r2, [pc, #168]	; (8003eac <TIM_Base_SetConfig+0x138>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d003      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a25      	ldr	r2, [pc, #148]	; (8003ea0 <TIM_Base_SetConfig+0x12c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d108      	bne.n	8003e20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a12      	ldr	r2, [pc, #72]	; (8003e90 <TIM_Base_SetConfig+0x11c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d013      	beq.n	8003e74 <TIM_Base_SetConfig+0x100>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a13      	ldr	r2, [pc, #76]	; (8003e9c <TIM_Base_SetConfig+0x128>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00f      	beq.n	8003e74 <TIM_Base_SetConfig+0x100>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a13      	ldr	r2, [pc, #76]	; (8003ea4 <TIM_Base_SetConfig+0x130>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00b      	beq.n	8003e74 <TIM_Base_SetConfig+0x100>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a12      	ldr	r2, [pc, #72]	; (8003ea8 <TIM_Base_SetConfig+0x134>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d007      	beq.n	8003e74 <TIM_Base_SetConfig+0x100>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a11      	ldr	r2, [pc, #68]	; (8003eac <TIM_Base_SetConfig+0x138>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d003      	beq.n	8003e74 <TIM_Base_SetConfig+0x100>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a0c      	ldr	r2, [pc, #48]	; (8003ea0 <TIM_Base_SetConfig+0x12c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d103      	bne.n	8003e7c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	615a      	str	r2, [r3, #20]
}
 8003e82:	bf00      	nop
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40012c00 	.word	0x40012c00
 8003e94:	40000400 	.word	0x40000400
 8003e98:	40000800 	.word	0x40000800
 8003e9c:	40013400 	.word	0x40013400
 8003ea0:	40015000 	.word	0x40015000
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	40014400 	.word	0x40014400
 8003eac:	40014800 	.word	0x40014800

08003eb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f023 0201 	bic.w	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0303 	bic.w	r3, r3, #3
 8003eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f023 0302 	bic.w	r3, r3, #2
 8003efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a30      	ldr	r2, [pc, #192]	; (8003fcc <TIM_OC1_SetConfig+0x11c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d013      	beq.n	8003f38 <TIM_OC1_SetConfig+0x88>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a2f      	ldr	r2, [pc, #188]	; (8003fd0 <TIM_OC1_SetConfig+0x120>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00f      	beq.n	8003f38 <TIM_OC1_SetConfig+0x88>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a2e      	ldr	r2, [pc, #184]	; (8003fd4 <TIM_OC1_SetConfig+0x124>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00b      	beq.n	8003f38 <TIM_OC1_SetConfig+0x88>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a2d      	ldr	r2, [pc, #180]	; (8003fd8 <TIM_OC1_SetConfig+0x128>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d007      	beq.n	8003f38 <TIM_OC1_SetConfig+0x88>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a2c      	ldr	r2, [pc, #176]	; (8003fdc <TIM_OC1_SetConfig+0x12c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_OC1_SetConfig+0x88>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a2b      	ldr	r2, [pc, #172]	; (8003fe0 <TIM_OC1_SetConfig+0x130>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d10c      	bne.n	8003f52 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f023 0308 	bic.w	r3, r3, #8
 8003f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f023 0304 	bic.w	r3, r3, #4
 8003f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a1d      	ldr	r2, [pc, #116]	; (8003fcc <TIM_OC1_SetConfig+0x11c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d013      	beq.n	8003f82 <TIM_OC1_SetConfig+0xd2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a1c      	ldr	r2, [pc, #112]	; (8003fd0 <TIM_OC1_SetConfig+0x120>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00f      	beq.n	8003f82 <TIM_OC1_SetConfig+0xd2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a1b      	ldr	r2, [pc, #108]	; (8003fd4 <TIM_OC1_SetConfig+0x124>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00b      	beq.n	8003f82 <TIM_OC1_SetConfig+0xd2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a1a      	ldr	r2, [pc, #104]	; (8003fd8 <TIM_OC1_SetConfig+0x128>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d007      	beq.n	8003f82 <TIM_OC1_SetConfig+0xd2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a19      	ldr	r2, [pc, #100]	; (8003fdc <TIM_OC1_SetConfig+0x12c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d003      	beq.n	8003f82 <TIM_OC1_SetConfig+0xd2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <TIM_OC1_SetConfig+0x130>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d111      	bne.n	8003fa6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	621a      	str	r2, [r3, #32]
}
 8003fc0:	bf00      	nop
 8003fc2:	371c      	adds	r7, #28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	40012c00 	.word	0x40012c00
 8003fd0:	40013400 	.word	0x40013400
 8003fd4:	40014000 	.word	0x40014000
 8003fd8:	40014400 	.word	0x40014400
 8003fdc:	40014800 	.word	0x40014800
 8003fe0:	40015000 	.word	0x40015000

08003fe4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f023 0210 	bic.w	r2, r3, #16
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	021b      	lsls	r3, r3, #8
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4313      	orrs	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f023 0320 	bic.w	r3, r3, #32
 8004032:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a2c      	ldr	r2, [pc, #176]	; (80040f4 <TIM_OC2_SetConfig+0x110>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d007      	beq.n	8004058 <TIM_OC2_SetConfig+0x74>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a2b      	ldr	r2, [pc, #172]	; (80040f8 <TIM_OC2_SetConfig+0x114>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d003      	beq.n	8004058 <TIM_OC2_SetConfig+0x74>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a2a      	ldr	r2, [pc, #168]	; (80040fc <TIM_OC2_SetConfig+0x118>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d10d      	bne.n	8004074 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800405e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004072:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a1f      	ldr	r2, [pc, #124]	; (80040f4 <TIM_OC2_SetConfig+0x110>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d013      	beq.n	80040a4 <TIM_OC2_SetConfig+0xc0>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a1e      	ldr	r2, [pc, #120]	; (80040f8 <TIM_OC2_SetConfig+0x114>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00f      	beq.n	80040a4 <TIM_OC2_SetConfig+0xc0>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <TIM_OC2_SetConfig+0x11c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00b      	beq.n	80040a4 <TIM_OC2_SetConfig+0xc0>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a1d      	ldr	r2, [pc, #116]	; (8004104 <TIM_OC2_SetConfig+0x120>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d007      	beq.n	80040a4 <TIM_OC2_SetConfig+0xc0>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a1c      	ldr	r2, [pc, #112]	; (8004108 <TIM_OC2_SetConfig+0x124>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <TIM_OC2_SetConfig+0xc0>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a17      	ldr	r2, [pc, #92]	; (80040fc <TIM_OC2_SetConfig+0x118>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d113      	bne.n	80040cc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040aa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040b2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	621a      	str	r2, [r3, #32]
}
 80040e6:	bf00      	nop
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40012c00 	.word	0x40012c00
 80040f8:	40013400 	.word	0x40013400
 80040fc:	40015000 	.word	0x40015000
 8004100:	40014000 	.word	0x40014000
 8004104:	40014400 	.word	0x40014400
 8004108:	40014800 	.word	0x40014800

0800410c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f023 0303 	bic.w	r3, r3, #3
 8004146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a2b      	ldr	r2, [pc, #172]	; (8004218 <TIM_OC3_SetConfig+0x10c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d007      	beq.n	800417e <TIM_OC3_SetConfig+0x72>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a2a      	ldr	r2, [pc, #168]	; (800421c <TIM_OC3_SetConfig+0x110>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d003      	beq.n	800417e <TIM_OC3_SetConfig+0x72>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a29      	ldr	r2, [pc, #164]	; (8004220 <TIM_OC3_SetConfig+0x114>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d10d      	bne.n	800419a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004184:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004198:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a1e      	ldr	r2, [pc, #120]	; (8004218 <TIM_OC3_SetConfig+0x10c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <TIM_OC3_SetConfig+0xbe>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a1d      	ldr	r2, [pc, #116]	; (800421c <TIM_OC3_SetConfig+0x110>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00f      	beq.n	80041ca <TIM_OC3_SetConfig+0xbe>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <TIM_OC3_SetConfig+0x118>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00b      	beq.n	80041ca <TIM_OC3_SetConfig+0xbe>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a1c      	ldr	r2, [pc, #112]	; (8004228 <TIM_OC3_SetConfig+0x11c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d007      	beq.n	80041ca <TIM_OC3_SetConfig+0xbe>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a1b      	ldr	r2, [pc, #108]	; (800422c <TIM_OC3_SetConfig+0x120>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d003      	beq.n	80041ca <TIM_OC3_SetConfig+0xbe>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a16      	ldr	r2, [pc, #88]	; (8004220 <TIM_OC3_SetConfig+0x114>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d113      	bne.n	80041f2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	621a      	str	r2, [r3, #32]
}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	40012c00 	.word	0x40012c00
 800421c:	40013400 	.word	0x40013400
 8004220:	40015000 	.word	0x40015000
 8004224:	40014000 	.word	0x40014000
 8004228:	40014400 	.word	0x40014400
 800422c:	40014800 	.word	0x40014800

08004230 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800425e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800427e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	031b      	lsls	r3, r3, #12
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a1a      	ldr	r2, [pc, #104]	; (80042f8 <TIM_OC4_SetConfig+0xc8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <TIM_OC4_SetConfig+0x8c>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a19      	ldr	r2, [pc, #100]	; (80042fc <TIM_OC4_SetConfig+0xcc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00f      	beq.n	80042bc <TIM_OC4_SetConfig+0x8c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a18      	ldr	r2, [pc, #96]	; (8004300 <TIM_OC4_SetConfig+0xd0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00b      	beq.n	80042bc <TIM_OC4_SetConfig+0x8c>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a17      	ldr	r2, [pc, #92]	; (8004304 <TIM_OC4_SetConfig+0xd4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d007      	beq.n	80042bc <TIM_OC4_SetConfig+0x8c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a16      	ldr	r2, [pc, #88]	; (8004308 <TIM_OC4_SetConfig+0xd8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d003      	beq.n	80042bc <TIM_OC4_SetConfig+0x8c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a15      	ldr	r2, [pc, #84]	; (800430c <TIM_OC4_SetConfig+0xdc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d109      	bne.n	80042d0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	019b      	lsls	r3, r3, #6
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	40013400 	.word	0x40013400
 8004300:	40014000 	.word	0x40014000
 8004304:	40014400 	.word	0x40014400
 8004308:	40014800 	.word	0x40014800
 800430c:	40015000 	.word	0x40015000

08004310 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004354:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	041b      	lsls	r3, r3, #16
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a19      	ldr	r2, [pc, #100]	; (80043cc <TIM_OC5_SetConfig+0xbc>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <TIM_OC5_SetConfig+0x82>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a18      	ldr	r2, [pc, #96]	; (80043d0 <TIM_OC5_SetConfig+0xc0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00f      	beq.n	8004392 <TIM_OC5_SetConfig+0x82>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a17      	ldr	r2, [pc, #92]	; (80043d4 <TIM_OC5_SetConfig+0xc4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00b      	beq.n	8004392 <TIM_OC5_SetConfig+0x82>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a16      	ldr	r2, [pc, #88]	; (80043d8 <TIM_OC5_SetConfig+0xc8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d007      	beq.n	8004392 <TIM_OC5_SetConfig+0x82>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a15      	ldr	r2, [pc, #84]	; (80043dc <TIM_OC5_SetConfig+0xcc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d003      	beq.n	8004392 <TIM_OC5_SetConfig+0x82>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a14      	ldr	r2, [pc, #80]	; (80043e0 <TIM_OC5_SetConfig+0xd0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d109      	bne.n	80043a6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004398:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	621a      	str	r2, [r3, #32]
}
 80043c0:	bf00      	nop
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	40012c00 	.word	0x40012c00
 80043d0:	40013400 	.word	0x40013400
 80043d4:	40014000 	.word	0x40014000
 80043d8:	40014400 	.word	0x40014400
 80043dc:	40014800 	.word	0x40014800
 80043e0:	40015000 	.word	0x40015000

080043e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	021b      	lsls	r3, r3, #8
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800442a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	051b      	lsls	r3, r3, #20
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a1a      	ldr	r2, [pc, #104]	; (80044a4 <TIM_OC6_SetConfig+0xc0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d013      	beq.n	8004468 <TIM_OC6_SetConfig+0x84>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a19      	ldr	r2, [pc, #100]	; (80044a8 <TIM_OC6_SetConfig+0xc4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00f      	beq.n	8004468 <TIM_OC6_SetConfig+0x84>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a18      	ldr	r2, [pc, #96]	; (80044ac <TIM_OC6_SetConfig+0xc8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00b      	beq.n	8004468 <TIM_OC6_SetConfig+0x84>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a17      	ldr	r2, [pc, #92]	; (80044b0 <TIM_OC6_SetConfig+0xcc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d007      	beq.n	8004468 <TIM_OC6_SetConfig+0x84>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a16      	ldr	r2, [pc, #88]	; (80044b4 <TIM_OC6_SetConfig+0xd0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d003      	beq.n	8004468 <TIM_OC6_SetConfig+0x84>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a15      	ldr	r2, [pc, #84]	; (80044b8 <TIM_OC6_SetConfig+0xd4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d109      	bne.n	800447c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800446e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	029b      	lsls	r3, r3, #10
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	621a      	str	r2, [r3, #32]
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40013400 	.word	0x40013400
 80044ac:	40014000 	.word	0x40014000
 80044b0:	40014400 	.word	0x40014400
 80044b4:	40014800 	.word	0x40014800
 80044b8:	40015000 	.word	0x40015000

080044bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	2201      	movs	r2, #1
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a1a      	ldr	r2, [r3, #32]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	43db      	mvns	r3, r3
 80044de:	401a      	ands	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a1a      	ldr	r2, [r3, #32]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	fa01 f303 	lsl.w	r3, r1, r3
 80044f4:	431a      	orrs	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	621a      	str	r2, [r3, #32]
}
 80044fa:	bf00      	nop
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
	...

08004508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800451c:	2302      	movs	r3, #2
 800451e:	e06d      	b.n	80045fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a30      	ldr	r2, [pc, #192]	; (8004608 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d009      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a2f      	ldr	r2, [pc, #188]	; (800460c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a2d      	ldr	r2, [pc, #180]	; (8004610 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d108      	bne.n	8004570 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004564:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a1e      	ldr	r2, [pc, #120]	; (8004608 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d01d      	beq.n	80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459c:	d018      	beq.n	80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a1c      	ldr	r2, [pc, #112]	; (8004614 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d013      	beq.n	80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1a      	ldr	r2, [pc, #104]	; (8004618 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00e      	beq.n	80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a15      	ldr	r2, [pc, #84]	; (800460c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d009      	beq.n	80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a16      	ldr	r2, [pc, #88]	; (800461c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a11      	ldr	r2, [pc, #68]	; (8004610 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d10c      	bne.n	80045ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	40012c00 	.word	0x40012c00
 800460c:	40013400 	.word	0x40013400
 8004610:	40015000 	.word	0x40015000
 8004614:	40000400 	.word	0x40000400
 8004618:	40000800 	.word	0x40000800
 800461c:	40014000 	.word	0x40014000

08004620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e040      	b.n	80046f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fd f834 	bl	80016ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2224      	movs	r2, #36	; 0x24
 8004688:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0201 	bic.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f8c0 	bl	8004820 <UART_SetConfig>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e022      	b.n	80046f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 face 	bl	8004c54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fb55 	bl	8004d98 <UART_CheckIdleState>
 80046ee:	4603      	mov	r3, r0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08a      	sub	sp, #40	; 0x28
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	4613      	mov	r3, r2
 8004706:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800470c:	2b20      	cmp	r3, #32
 800470e:	f040 8081 	bne.w	8004814 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <HAL_UART_Transmit+0x26>
 8004718:	88fb      	ldrh	r3, [r7, #6]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e079      	b.n	8004816 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_UART_Transmit+0x38>
 800472c:	2302      	movs	r3, #2
 800472e:	e072      	b.n	8004816 <HAL_UART_Transmit+0x11e>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2221      	movs	r2, #33	; 0x21
 8004742:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004744:	f7fd f898 	bl	8001878 <HAL_GetTick>
 8004748:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	88fa      	ldrh	r2, [r7, #6]
 800474e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	88fa      	ldrh	r2, [r7, #6]
 8004756:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004762:	d108      	bne.n	8004776 <HAL_UART_Transmit+0x7e>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d104      	bne.n	8004776 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800476c:	2300      	movs	r3, #0
 800476e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	e003      	b.n	800477e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800477a:	2300      	movs	r3, #0
 800477c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800477e:	e02d      	b.n	80047dc <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2200      	movs	r2, #0
 8004788:	2180      	movs	r1, #128	; 0x80
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 fb49 	bl	8004e22 <UART_WaitOnFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e03d      	b.n	8004816 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10b      	bne.n	80047b8 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	881a      	ldrh	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047ac:	b292      	uxth	r2, r2
 80047ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	3302      	adds	r3, #2
 80047b4:	61bb      	str	r3, [r7, #24]
 80047b6:	e008      	b.n	80047ca <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	781a      	ldrb	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	b292      	uxth	r2, r2
 80047c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	3301      	adds	r3, #1
 80047c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1cb      	bne.n	8004780 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2200      	movs	r2, #0
 80047f0:	2140      	movs	r1, #64	; 0x40
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fb15 	bl	8004e22 <UART_WaitOnFlagUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e009      	b.n	8004816 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	e000      	b.n	8004816 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004814:	2302      	movs	r3, #2
  }
}
 8004816:	4618      	mov	r0, r3
 8004818:	3720      	adds	r7, #32
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004828:	2300      	movs	r3, #0
 800482a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4bac      	ldr	r3, [pc, #688]	; (8004b00 <UART_SetConfig+0x2e0>)
 8004850:	4013      	ands	r3, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6812      	ldr	r2, [r2, #0]
 8004856:	6939      	ldr	r1, [r7, #16]
 8004858:	430b      	orrs	r3, r1
 800485a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	430a      	orrs	r2, r1
 8004894:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a9a      	ldr	r2, [pc, #616]	; (8004b04 <UART_SetConfig+0x2e4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d121      	bne.n	80048e4 <UART_SetConfig+0xc4>
 80048a0:	4b99      	ldr	r3, [pc, #612]	; (8004b08 <UART_SetConfig+0x2e8>)
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d817      	bhi.n	80048dc <UART_SetConfig+0xbc>
 80048ac:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <UART_SetConfig+0x94>)
 80048ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b2:	bf00      	nop
 80048b4:	080048c5 	.word	0x080048c5
 80048b8:	080048d1 	.word	0x080048d1
 80048bc:	080048d7 	.word	0x080048d7
 80048c0:	080048cb 	.word	0x080048cb
 80048c4:	2301      	movs	r3, #1
 80048c6:	77fb      	strb	r3, [r7, #31]
 80048c8:	e0b2      	b.n	8004a30 <UART_SetConfig+0x210>
 80048ca:	2302      	movs	r3, #2
 80048cc:	77fb      	strb	r3, [r7, #31]
 80048ce:	e0af      	b.n	8004a30 <UART_SetConfig+0x210>
 80048d0:	2304      	movs	r3, #4
 80048d2:	77fb      	strb	r3, [r7, #31]
 80048d4:	e0ac      	b.n	8004a30 <UART_SetConfig+0x210>
 80048d6:	2308      	movs	r3, #8
 80048d8:	77fb      	strb	r3, [r7, #31]
 80048da:	e0a9      	b.n	8004a30 <UART_SetConfig+0x210>
 80048dc:	2310      	movs	r3, #16
 80048de:	77fb      	strb	r3, [r7, #31]
 80048e0:	bf00      	nop
 80048e2:	e0a5      	b.n	8004a30 <UART_SetConfig+0x210>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a88      	ldr	r2, [pc, #544]	; (8004b0c <UART_SetConfig+0x2ec>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d123      	bne.n	8004936 <UART_SetConfig+0x116>
 80048ee:	4b86      	ldr	r3, [pc, #536]	; (8004b08 <UART_SetConfig+0x2e8>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fa:	d012      	beq.n	8004922 <UART_SetConfig+0x102>
 80048fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004900:	d802      	bhi.n	8004908 <UART_SetConfig+0xe8>
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <UART_SetConfig+0xf6>
 8004906:	e012      	b.n	800492e <UART_SetConfig+0x10e>
 8004908:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800490c:	d00c      	beq.n	8004928 <UART_SetConfig+0x108>
 800490e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004912:	d003      	beq.n	800491c <UART_SetConfig+0xfc>
 8004914:	e00b      	b.n	800492e <UART_SetConfig+0x10e>
 8004916:	2300      	movs	r3, #0
 8004918:	77fb      	strb	r3, [r7, #31]
 800491a:	e089      	b.n	8004a30 <UART_SetConfig+0x210>
 800491c:	2302      	movs	r3, #2
 800491e:	77fb      	strb	r3, [r7, #31]
 8004920:	e086      	b.n	8004a30 <UART_SetConfig+0x210>
 8004922:	2304      	movs	r3, #4
 8004924:	77fb      	strb	r3, [r7, #31]
 8004926:	e083      	b.n	8004a30 <UART_SetConfig+0x210>
 8004928:	2308      	movs	r3, #8
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e080      	b.n	8004a30 <UART_SetConfig+0x210>
 800492e:	2310      	movs	r3, #16
 8004930:	77fb      	strb	r3, [r7, #31]
 8004932:	bf00      	nop
 8004934:	e07c      	b.n	8004a30 <UART_SetConfig+0x210>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a75      	ldr	r2, [pc, #468]	; (8004b10 <UART_SetConfig+0x2f0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d123      	bne.n	8004988 <UART_SetConfig+0x168>
 8004940:	4b71      	ldr	r3, [pc, #452]	; (8004b08 <UART_SetConfig+0x2e8>)
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004948:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800494c:	d012      	beq.n	8004974 <UART_SetConfig+0x154>
 800494e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004952:	d802      	bhi.n	800495a <UART_SetConfig+0x13a>
 8004954:	2b00      	cmp	r3, #0
 8004956:	d007      	beq.n	8004968 <UART_SetConfig+0x148>
 8004958:	e012      	b.n	8004980 <UART_SetConfig+0x160>
 800495a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800495e:	d00c      	beq.n	800497a <UART_SetConfig+0x15a>
 8004960:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004964:	d003      	beq.n	800496e <UART_SetConfig+0x14e>
 8004966:	e00b      	b.n	8004980 <UART_SetConfig+0x160>
 8004968:	2300      	movs	r3, #0
 800496a:	77fb      	strb	r3, [r7, #31]
 800496c:	e060      	b.n	8004a30 <UART_SetConfig+0x210>
 800496e:	2302      	movs	r3, #2
 8004970:	77fb      	strb	r3, [r7, #31]
 8004972:	e05d      	b.n	8004a30 <UART_SetConfig+0x210>
 8004974:	2304      	movs	r3, #4
 8004976:	77fb      	strb	r3, [r7, #31]
 8004978:	e05a      	b.n	8004a30 <UART_SetConfig+0x210>
 800497a:	2308      	movs	r3, #8
 800497c:	77fb      	strb	r3, [r7, #31]
 800497e:	e057      	b.n	8004a30 <UART_SetConfig+0x210>
 8004980:	2310      	movs	r3, #16
 8004982:	77fb      	strb	r3, [r7, #31]
 8004984:	bf00      	nop
 8004986:	e053      	b.n	8004a30 <UART_SetConfig+0x210>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a61      	ldr	r2, [pc, #388]	; (8004b14 <UART_SetConfig+0x2f4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d123      	bne.n	80049da <UART_SetConfig+0x1ba>
 8004992:	4b5d      	ldr	r3, [pc, #372]	; (8004b08 <UART_SetConfig+0x2e8>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800499a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800499e:	d012      	beq.n	80049c6 <UART_SetConfig+0x1a6>
 80049a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049a4:	d802      	bhi.n	80049ac <UART_SetConfig+0x18c>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d007      	beq.n	80049ba <UART_SetConfig+0x19a>
 80049aa:	e012      	b.n	80049d2 <UART_SetConfig+0x1b2>
 80049ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049b0:	d00c      	beq.n	80049cc <UART_SetConfig+0x1ac>
 80049b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049b6:	d003      	beq.n	80049c0 <UART_SetConfig+0x1a0>
 80049b8:	e00b      	b.n	80049d2 <UART_SetConfig+0x1b2>
 80049ba:	2300      	movs	r3, #0
 80049bc:	77fb      	strb	r3, [r7, #31]
 80049be:	e037      	b.n	8004a30 <UART_SetConfig+0x210>
 80049c0:	2302      	movs	r3, #2
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	e034      	b.n	8004a30 <UART_SetConfig+0x210>
 80049c6:	2304      	movs	r3, #4
 80049c8:	77fb      	strb	r3, [r7, #31]
 80049ca:	e031      	b.n	8004a30 <UART_SetConfig+0x210>
 80049cc:	2308      	movs	r3, #8
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e02e      	b.n	8004a30 <UART_SetConfig+0x210>
 80049d2:	2310      	movs	r3, #16
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	bf00      	nop
 80049d8:	e02a      	b.n	8004a30 <UART_SetConfig+0x210>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a4e      	ldr	r2, [pc, #312]	; (8004b18 <UART_SetConfig+0x2f8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d123      	bne.n	8004a2c <UART_SetConfig+0x20c>
 80049e4:	4b48      	ldr	r3, [pc, #288]	; (8004b08 <UART_SetConfig+0x2e8>)
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80049ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049f0:	d012      	beq.n	8004a18 <UART_SetConfig+0x1f8>
 80049f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049f6:	d802      	bhi.n	80049fe <UART_SetConfig+0x1de>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d007      	beq.n	8004a0c <UART_SetConfig+0x1ec>
 80049fc:	e012      	b.n	8004a24 <UART_SetConfig+0x204>
 80049fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a02:	d00c      	beq.n	8004a1e <UART_SetConfig+0x1fe>
 8004a04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a08:	d003      	beq.n	8004a12 <UART_SetConfig+0x1f2>
 8004a0a:	e00b      	b.n	8004a24 <UART_SetConfig+0x204>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	77fb      	strb	r3, [r7, #31]
 8004a10:	e00e      	b.n	8004a30 <UART_SetConfig+0x210>
 8004a12:	2302      	movs	r3, #2
 8004a14:	77fb      	strb	r3, [r7, #31]
 8004a16:	e00b      	b.n	8004a30 <UART_SetConfig+0x210>
 8004a18:	2304      	movs	r3, #4
 8004a1a:	77fb      	strb	r3, [r7, #31]
 8004a1c:	e008      	b.n	8004a30 <UART_SetConfig+0x210>
 8004a1e:	2308      	movs	r3, #8
 8004a20:	77fb      	strb	r3, [r7, #31]
 8004a22:	e005      	b.n	8004a30 <UART_SetConfig+0x210>
 8004a24:	2310      	movs	r3, #16
 8004a26:	77fb      	strb	r3, [r7, #31]
 8004a28:	bf00      	nop
 8004a2a:	e001      	b.n	8004a30 <UART_SetConfig+0x210>
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a38:	f040 8090 	bne.w	8004b5c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004a3c:	7ffb      	ldrb	r3, [r7, #31]
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d86c      	bhi.n	8004b1c <UART_SetConfig+0x2fc>
 8004a42:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <UART_SetConfig+0x228>)
 8004a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a48:	08004a6d 	.word	0x08004a6d
 8004a4c:	08004a8d 	.word	0x08004a8d
 8004a50:	08004aad 	.word	0x08004aad
 8004a54:	08004b1d 	.word	0x08004b1d
 8004a58:	08004ac9 	.word	0x08004ac9
 8004a5c:	08004b1d 	.word	0x08004b1d
 8004a60:	08004b1d 	.word	0x08004b1d
 8004a64:	08004b1d 	.word	0x08004b1d
 8004a68:	08004ae9 	.word	0x08004ae9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a6c:	f7fe facc 	bl	8003008 <HAL_RCC_GetPCLK1Freq>
 8004a70:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	005a      	lsls	r2, r3, #1
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	085b      	lsrs	r3, r3, #1
 8004a7c:	441a      	add	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	61bb      	str	r3, [r7, #24]
        break;
 8004a8a:	e04a      	b.n	8004b22 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a8c:	f7fe fade 	bl	800304c <HAL_RCC_GetPCLK2Freq>
 8004a90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	005a      	lsls	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	085b      	lsrs	r3, r3, #1
 8004a9c:	441a      	add	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	61bb      	str	r3, [r7, #24]
        break;
 8004aaa:	e03a      	b.n	8004b22 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	085b      	lsrs	r3, r3, #1
 8004ab2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004ab6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6852      	ldr	r2, [r2, #4]
 8004abe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	61bb      	str	r3, [r7, #24]
        break;
 8004ac6:	e02c      	b.n	8004b22 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ac8:	f7fe fa28 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 8004acc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	005a      	lsls	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	085b      	lsrs	r3, r3, #1
 8004ad8:	441a      	add	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	61bb      	str	r3, [r7, #24]
        break;
 8004ae6:	e01c      	b.n	8004b22 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	61bb      	str	r3, [r7, #24]
        break;
 8004afe:	e010      	b.n	8004b22 <UART_SetConfig+0x302>
 8004b00:	efff69f3 	.word	0xefff69f3
 8004b04:	40013800 	.word	0x40013800
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	40004400 	.word	0x40004400
 8004b10:	40004800 	.word	0x40004800
 8004b14:	40004c00 	.word	0x40004c00
 8004b18:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	75fb      	strb	r3, [r7, #23]
        break;
 8004b20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b0f      	cmp	r3, #15
 8004b26:	d916      	bls.n	8004b56 <UART_SetConfig+0x336>
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2e:	d212      	bcs.n	8004b56 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f023 030f 	bic.w	r3, r3, #15
 8004b38:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	085b      	lsrs	r3, r3, #1
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	897b      	ldrh	r3, [r7, #10]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	897a      	ldrh	r2, [r7, #10]
 8004b52:	60da      	str	r2, [r3, #12]
 8004b54:	e072      	b.n	8004c3c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	75fb      	strb	r3, [r7, #23]
 8004b5a:	e06f      	b.n	8004c3c <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8004b5c:	7ffb      	ldrb	r3, [r7, #31]
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d85b      	bhi.n	8004c1a <UART_SetConfig+0x3fa>
 8004b62:	a201      	add	r2, pc, #4	; (adr r2, 8004b68 <UART_SetConfig+0x348>)
 8004b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b68:	08004b8d 	.word	0x08004b8d
 8004b6c:	08004bab 	.word	0x08004bab
 8004b70:	08004bc9 	.word	0x08004bc9
 8004b74:	08004c1b 	.word	0x08004c1b
 8004b78:	08004be5 	.word	0x08004be5
 8004b7c:	08004c1b 	.word	0x08004c1b
 8004b80:	08004c1b 	.word	0x08004c1b
 8004b84:	08004c1b 	.word	0x08004c1b
 8004b88:	08004c03 	.word	0x08004c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b8c:	f7fe fa3c 	bl	8003008 <HAL_RCC_GetPCLK1Freq>
 8004b90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	085a      	lsrs	r2, r3, #1
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	441a      	add	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	61bb      	str	r3, [r7, #24]
        break;
 8004ba8:	e03a      	b.n	8004c20 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004baa:	f7fe fa4f 	bl	800304c <HAL_RCC_GetPCLK2Freq>
 8004bae:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	085a      	lsrs	r2, r3, #1
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	441a      	add	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	61bb      	str	r3, [r7, #24]
        break;
 8004bc6:	e02b      	b.n	8004c20 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	085b      	lsrs	r3, r3, #1
 8004bce:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004bd2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6852      	ldr	r2, [r2, #4]
 8004bda:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	61bb      	str	r3, [r7, #24]
        break;
 8004be2:	e01d      	b.n	8004c20 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004be4:	f7fe f99a 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 8004be8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	085a      	lsrs	r2, r3, #1
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	441a      	add	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	61bb      	str	r3, [r7, #24]
        break;
 8004c00:	e00e      	b.n	8004c20 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	085b      	lsrs	r3, r3, #1
 8004c08:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	61bb      	str	r3, [r7, #24]
        break;
 8004c18:	e002      	b.n	8004c20 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	75fb      	strb	r3, [r7, #23]
        break;
 8004c1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	2b0f      	cmp	r3, #15
 8004c24:	d908      	bls.n	8004c38 <UART_SetConfig+0x418>
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2c:	d204      	bcs.n	8004c38 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	60da      	str	r2, [r3, #12]
 8004c36:	e001      	b.n	8004c3c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3720      	adds	r7, #32
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop

08004c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d01a      	beq.n	8004d6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d52:	d10a      	bne.n	8004d6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	605a      	str	r2, [r3, #4]
  }
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004da6:	f7fc fd67 	bl	8001878 <HAL_GetTick>
 8004daa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d10e      	bne.n	8004dd8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f82a 	bl	8004e22 <UART_WaitOnFlagUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e020      	b.n	8004e1a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d10e      	bne.n	8004e04 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f814 	bl	8004e22 <UART_WaitOnFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e00a      	b.n	8004e1a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	603b      	str	r3, [r7, #0]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e32:	e05d      	b.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d059      	beq.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e3c:	f7fc fd1c 	bl	8001878 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d302      	bcc.n	8004e52 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d11b      	bne.n	8004e8a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0201 	bic.w	r2, r2, #1
 8004e70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e042      	b.n	8004f10 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d02b      	beq.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ea6:	d123      	bne.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004eb0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ec0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0201 	bic.w	r2, r2, #1
 8004ed0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e00f      	b.n	8004f10 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69da      	ldr	r2, [r3, #28]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	bf0c      	ite	eq
 8004f00:	2301      	moveq	r3, #1
 8004f02:	2300      	movne	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	461a      	mov	r2, r3
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d092      	beq.n	8004e34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <__errno>:
 8004f18:	4b01      	ldr	r3, [pc, #4]	; (8004f20 <__errno+0x8>)
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	2000000c 	.word	0x2000000c

08004f24 <__libc_init_array>:
 8004f24:	b570      	push	{r4, r5, r6, lr}
 8004f26:	4e0d      	ldr	r6, [pc, #52]	; (8004f5c <__libc_init_array+0x38>)
 8004f28:	4c0d      	ldr	r4, [pc, #52]	; (8004f60 <__libc_init_array+0x3c>)
 8004f2a:	1ba4      	subs	r4, r4, r6
 8004f2c:	10a4      	asrs	r4, r4, #2
 8004f2e:	2500      	movs	r5, #0
 8004f30:	42a5      	cmp	r5, r4
 8004f32:	d109      	bne.n	8004f48 <__libc_init_array+0x24>
 8004f34:	4e0b      	ldr	r6, [pc, #44]	; (8004f64 <__libc_init_array+0x40>)
 8004f36:	4c0c      	ldr	r4, [pc, #48]	; (8004f68 <__libc_init_array+0x44>)
 8004f38:	f000 fc70 	bl	800581c <_init>
 8004f3c:	1ba4      	subs	r4, r4, r6
 8004f3e:	10a4      	asrs	r4, r4, #2
 8004f40:	2500      	movs	r5, #0
 8004f42:	42a5      	cmp	r5, r4
 8004f44:	d105      	bne.n	8004f52 <__libc_init_array+0x2e>
 8004f46:	bd70      	pop	{r4, r5, r6, pc}
 8004f48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f4c:	4798      	blx	r3
 8004f4e:	3501      	adds	r5, #1
 8004f50:	e7ee      	b.n	8004f30 <__libc_init_array+0xc>
 8004f52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f56:	4798      	blx	r3
 8004f58:	3501      	adds	r5, #1
 8004f5a:	e7f2      	b.n	8004f42 <__libc_init_array+0x1e>
 8004f5c:	080058b4 	.word	0x080058b4
 8004f60:	080058b4 	.word	0x080058b4
 8004f64:	080058b4 	.word	0x080058b4
 8004f68:	080058b8 	.word	0x080058b8

08004f6c <memset>:
 8004f6c:	4402      	add	r2, r0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d100      	bne.n	8004f76 <memset+0xa>
 8004f74:	4770      	bx	lr
 8004f76:	f803 1b01 	strb.w	r1, [r3], #1
 8004f7a:	e7f9      	b.n	8004f70 <memset+0x4>

08004f7c <siprintf>:
 8004f7c:	b40e      	push	{r1, r2, r3}
 8004f7e:	b500      	push	{lr}
 8004f80:	b09c      	sub	sp, #112	; 0x70
 8004f82:	ab1d      	add	r3, sp, #116	; 0x74
 8004f84:	9002      	str	r0, [sp, #8]
 8004f86:	9006      	str	r0, [sp, #24]
 8004f88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f8c:	4809      	ldr	r0, [pc, #36]	; (8004fb4 <siprintf+0x38>)
 8004f8e:	9107      	str	r1, [sp, #28]
 8004f90:	9104      	str	r1, [sp, #16]
 8004f92:	4909      	ldr	r1, [pc, #36]	; (8004fb8 <siprintf+0x3c>)
 8004f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f98:	9105      	str	r1, [sp, #20]
 8004f9a:	6800      	ldr	r0, [r0, #0]
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	a902      	add	r1, sp, #8
 8004fa0:	f000 f866 	bl	8005070 <_svfiprintf_r>
 8004fa4:	9b02      	ldr	r3, [sp, #8]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	b01c      	add	sp, #112	; 0x70
 8004fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fb0:	b003      	add	sp, #12
 8004fb2:	4770      	bx	lr
 8004fb4:	2000000c 	.word	0x2000000c
 8004fb8:	ffff0208 	.word	0xffff0208

08004fbc <__ssputs_r>:
 8004fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc0:	688e      	ldr	r6, [r1, #8]
 8004fc2:	429e      	cmp	r6, r3
 8004fc4:	4682      	mov	sl, r0
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	4690      	mov	r8, r2
 8004fca:	4699      	mov	r9, r3
 8004fcc:	d837      	bhi.n	800503e <__ssputs_r+0x82>
 8004fce:	898a      	ldrh	r2, [r1, #12]
 8004fd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fd4:	d031      	beq.n	800503a <__ssputs_r+0x7e>
 8004fd6:	6825      	ldr	r5, [r4, #0]
 8004fd8:	6909      	ldr	r1, [r1, #16]
 8004fda:	1a6f      	subs	r7, r5, r1
 8004fdc:	6965      	ldr	r5, [r4, #20]
 8004fde:	2302      	movs	r3, #2
 8004fe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fe4:	fb95 f5f3 	sdiv	r5, r5, r3
 8004fe8:	f109 0301 	add.w	r3, r9, #1
 8004fec:	443b      	add	r3, r7
 8004fee:	429d      	cmp	r5, r3
 8004ff0:	bf38      	it	cc
 8004ff2:	461d      	movcc	r5, r3
 8004ff4:	0553      	lsls	r3, r2, #21
 8004ff6:	d530      	bpl.n	800505a <__ssputs_r+0x9e>
 8004ff8:	4629      	mov	r1, r5
 8004ffa:	f000 fb2b 	bl	8005654 <_malloc_r>
 8004ffe:	4606      	mov	r6, r0
 8005000:	b950      	cbnz	r0, 8005018 <__ssputs_r+0x5c>
 8005002:	230c      	movs	r3, #12
 8005004:	f8ca 3000 	str.w	r3, [sl]
 8005008:	89a3      	ldrh	r3, [r4, #12]
 800500a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800500e:	81a3      	strh	r3, [r4, #12]
 8005010:	f04f 30ff 	mov.w	r0, #4294967295
 8005014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005018:	463a      	mov	r2, r7
 800501a:	6921      	ldr	r1, [r4, #16]
 800501c:	f000 faa8 	bl	8005570 <memcpy>
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502a:	81a3      	strh	r3, [r4, #12]
 800502c:	6126      	str	r6, [r4, #16]
 800502e:	6165      	str	r5, [r4, #20]
 8005030:	443e      	add	r6, r7
 8005032:	1bed      	subs	r5, r5, r7
 8005034:	6026      	str	r6, [r4, #0]
 8005036:	60a5      	str	r5, [r4, #8]
 8005038:	464e      	mov	r6, r9
 800503a:	454e      	cmp	r6, r9
 800503c:	d900      	bls.n	8005040 <__ssputs_r+0x84>
 800503e:	464e      	mov	r6, r9
 8005040:	4632      	mov	r2, r6
 8005042:	4641      	mov	r1, r8
 8005044:	6820      	ldr	r0, [r4, #0]
 8005046:	f000 fa9e 	bl	8005586 <memmove>
 800504a:	68a3      	ldr	r3, [r4, #8]
 800504c:	1b9b      	subs	r3, r3, r6
 800504e:	60a3      	str	r3, [r4, #8]
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	441e      	add	r6, r3
 8005054:	6026      	str	r6, [r4, #0]
 8005056:	2000      	movs	r0, #0
 8005058:	e7dc      	b.n	8005014 <__ssputs_r+0x58>
 800505a:	462a      	mov	r2, r5
 800505c:	f000 fb54 	bl	8005708 <_realloc_r>
 8005060:	4606      	mov	r6, r0
 8005062:	2800      	cmp	r0, #0
 8005064:	d1e2      	bne.n	800502c <__ssputs_r+0x70>
 8005066:	6921      	ldr	r1, [r4, #16]
 8005068:	4650      	mov	r0, sl
 800506a:	f000 faa5 	bl	80055b8 <_free_r>
 800506e:	e7c8      	b.n	8005002 <__ssputs_r+0x46>

08005070 <_svfiprintf_r>:
 8005070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	461d      	mov	r5, r3
 8005076:	898b      	ldrh	r3, [r1, #12]
 8005078:	061f      	lsls	r7, r3, #24
 800507a:	b09d      	sub	sp, #116	; 0x74
 800507c:	4680      	mov	r8, r0
 800507e:	460c      	mov	r4, r1
 8005080:	4616      	mov	r6, r2
 8005082:	d50f      	bpl.n	80050a4 <_svfiprintf_r+0x34>
 8005084:	690b      	ldr	r3, [r1, #16]
 8005086:	b96b      	cbnz	r3, 80050a4 <_svfiprintf_r+0x34>
 8005088:	2140      	movs	r1, #64	; 0x40
 800508a:	f000 fae3 	bl	8005654 <_malloc_r>
 800508e:	6020      	str	r0, [r4, #0]
 8005090:	6120      	str	r0, [r4, #16]
 8005092:	b928      	cbnz	r0, 80050a0 <_svfiprintf_r+0x30>
 8005094:	230c      	movs	r3, #12
 8005096:	f8c8 3000 	str.w	r3, [r8]
 800509a:	f04f 30ff 	mov.w	r0, #4294967295
 800509e:	e0c8      	b.n	8005232 <_svfiprintf_r+0x1c2>
 80050a0:	2340      	movs	r3, #64	; 0x40
 80050a2:	6163      	str	r3, [r4, #20]
 80050a4:	2300      	movs	r3, #0
 80050a6:	9309      	str	r3, [sp, #36]	; 0x24
 80050a8:	2320      	movs	r3, #32
 80050aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050ae:	2330      	movs	r3, #48	; 0x30
 80050b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050b4:	9503      	str	r5, [sp, #12]
 80050b6:	f04f 0b01 	mov.w	fp, #1
 80050ba:	4637      	mov	r7, r6
 80050bc:	463d      	mov	r5, r7
 80050be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80050c2:	b10b      	cbz	r3, 80050c8 <_svfiprintf_r+0x58>
 80050c4:	2b25      	cmp	r3, #37	; 0x25
 80050c6:	d13e      	bne.n	8005146 <_svfiprintf_r+0xd6>
 80050c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80050cc:	d00b      	beq.n	80050e6 <_svfiprintf_r+0x76>
 80050ce:	4653      	mov	r3, sl
 80050d0:	4632      	mov	r2, r6
 80050d2:	4621      	mov	r1, r4
 80050d4:	4640      	mov	r0, r8
 80050d6:	f7ff ff71 	bl	8004fbc <__ssputs_r>
 80050da:	3001      	adds	r0, #1
 80050dc:	f000 80a4 	beq.w	8005228 <_svfiprintf_r+0x1b8>
 80050e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050e2:	4453      	add	r3, sl
 80050e4:	9309      	str	r3, [sp, #36]	; 0x24
 80050e6:	783b      	ldrb	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 809d 	beq.w	8005228 <_svfiprintf_r+0x1b8>
 80050ee:	2300      	movs	r3, #0
 80050f0:	f04f 32ff 	mov.w	r2, #4294967295
 80050f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050f8:	9304      	str	r3, [sp, #16]
 80050fa:	9307      	str	r3, [sp, #28]
 80050fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005100:	931a      	str	r3, [sp, #104]	; 0x68
 8005102:	462f      	mov	r7, r5
 8005104:	2205      	movs	r2, #5
 8005106:	f817 1b01 	ldrb.w	r1, [r7], #1
 800510a:	4850      	ldr	r0, [pc, #320]	; (800524c <_svfiprintf_r+0x1dc>)
 800510c:	f7fb f870 	bl	80001f0 <memchr>
 8005110:	9b04      	ldr	r3, [sp, #16]
 8005112:	b9d0      	cbnz	r0, 800514a <_svfiprintf_r+0xda>
 8005114:	06d9      	lsls	r1, r3, #27
 8005116:	bf44      	itt	mi
 8005118:	2220      	movmi	r2, #32
 800511a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800511e:	071a      	lsls	r2, r3, #28
 8005120:	bf44      	itt	mi
 8005122:	222b      	movmi	r2, #43	; 0x2b
 8005124:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005128:	782a      	ldrb	r2, [r5, #0]
 800512a:	2a2a      	cmp	r2, #42	; 0x2a
 800512c:	d015      	beq.n	800515a <_svfiprintf_r+0xea>
 800512e:	9a07      	ldr	r2, [sp, #28]
 8005130:	462f      	mov	r7, r5
 8005132:	2000      	movs	r0, #0
 8005134:	250a      	movs	r5, #10
 8005136:	4639      	mov	r1, r7
 8005138:	f811 3b01 	ldrb.w	r3, [r1], #1
 800513c:	3b30      	subs	r3, #48	; 0x30
 800513e:	2b09      	cmp	r3, #9
 8005140:	d94d      	bls.n	80051de <_svfiprintf_r+0x16e>
 8005142:	b1b8      	cbz	r0, 8005174 <_svfiprintf_r+0x104>
 8005144:	e00f      	b.n	8005166 <_svfiprintf_r+0xf6>
 8005146:	462f      	mov	r7, r5
 8005148:	e7b8      	b.n	80050bc <_svfiprintf_r+0x4c>
 800514a:	4a40      	ldr	r2, [pc, #256]	; (800524c <_svfiprintf_r+0x1dc>)
 800514c:	1a80      	subs	r0, r0, r2
 800514e:	fa0b f000 	lsl.w	r0, fp, r0
 8005152:	4318      	orrs	r0, r3
 8005154:	9004      	str	r0, [sp, #16]
 8005156:	463d      	mov	r5, r7
 8005158:	e7d3      	b.n	8005102 <_svfiprintf_r+0x92>
 800515a:	9a03      	ldr	r2, [sp, #12]
 800515c:	1d11      	adds	r1, r2, #4
 800515e:	6812      	ldr	r2, [r2, #0]
 8005160:	9103      	str	r1, [sp, #12]
 8005162:	2a00      	cmp	r2, #0
 8005164:	db01      	blt.n	800516a <_svfiprintf_r+0xfa>
 8005166:	9207      	str	r2, [sp, #28]
 8005168:	e004      	b.n	8005174 <_svfiprintf_r+0x104>
 800516a:	4252      	negs	r2, r2
 800516c:	f043 0302 	orr.w	r3, r3, #2
 8005170:	9207      	str	r2, [sp, #28]
 8005172:	9304      	str	r3, [sp, #16]
 8005174:	783b      	ldrb	r3, [r7, #0]
 8005176:	2b2e      	cmp	r3, #46	; 0x2e
 8005178:	d10c      	bne.n	8005194 <_svfiprintf_r+0x124>
 800517a:	787b      	ldrb	r3, [r7, #1]
 800517c:	2b2a      	cmp	r3, #42	; 0x2a
 800517e:	d133      	bne.n	80051e8 <_svfiprintf_r+0x178>
 8005180:	9b03      	ldr	r3, [sp, #12]
 8005182:	1d1a      	adds	r2, r3, #4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	9203      	str	r2, [sp, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	bfb8      	it	lt
 800518c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005190:	3702      	adds	r7, #2
 8005192:	9305      	str	r3, [sp, #20]
 8005194:	4d2e      	ldr	r5, [pc, #184]	; (8005250 <_svfiprintf_r+0x1e0>)
 8005196:	7839      	ldrb	r1, [r7, #0]
 8005198:	2203      	movs	r2, #3
 800519a:	4628      	mov	r0, r5
 800519c:	f7fb f828 	bl	80001f0 <memchr>
 80051a0:	b138      	cbz	r0, 80051b2 <_svfiprintf_r+0x142>
 80051a2:	2340      	movs	r3, #64	; 0x40
 80051a4:	1b40      	subs	r0, r0, r5
 80051a6:	fa03 f000 	lsl.w	r0, r3, r0
 80051aa:	9b04      	ldr	r3, [sp, #16]
 80051ac:	4303      	orrs	r3, r0
 80051ae:	3701      	adds	r7, #1
 80051b0:	9304      	str	r3, [sp, #16]
 80051b2:	7839      	ldrb	r1, [r7, #0]
 80051b4:	4827      	ldr	r0, [pc, #156]	; (8005254 <_svfiprintf_r+0x1e4>)
 80051b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051ba:	2206      	movs	r2, #6
 80051bc:	1c7e      	adds	r6, r7, #1
 80051be:	f7fb f817 	bl	80001f0 <memchr>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d038      	beq.n	8005238 <_svfiprintf_r+0x1c8>
 80051c6:	4b24      	ldr	r3, [pc, #144]	; (8005258 <_svfiprintf_r+0x1e8>)
 80051c8:	bb13      	cbnz	r3, 8005210 <_svfiprintf_r+0x1a0>
 80051ca:	9b03      	ldr	r3, [sp, #12]
 80051cc:	3307      	adds	r3, #7
 80051ce:	f023 0307 	bic.w	r3, r3, #7
 80051d2:	3308      	adds	r3, #8
 80051d4:	9303      	str	r3, [sp, #12]
 80051d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051d8:	444b      	add	r3, r9
 80051da:	9309      	str	r3, [sp, #36]	; 0x24
 80051dc:	e76d      	b.n	80050ba <_svfiprintf_r+0x4a>
 80051de:	fb05 3202 	mla	r2, r5, r2, r3
 80051e2:	2001      	movs	r0, #1
 80051e4:	460f      	mov	r7, r1
 80051e6:	e7a6      	b.n	8005136 <_svfiprintf_r+0xc6>
 80051e8:	2300      	movs	r3, #0
 80051ea:	3701      	adds	r7, #1
 80051ec:	9305      	str	r3, [sp, #20]
 80051ee:	4619      	mov	r1, r3
 80051f0:	250a      	movs	r5, #10
 80051f2:	4638      	mov	r0, r7
 80051f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051f8:	3a30      	subs	r2, #48	; 0x30
 80051fa:	2a09      	cmp	r2, #9
 80051fc:	d903      	bls.n	8005206 <_svfiprintf_r+0x196>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0c8      	beq.n	8005194 <_svfiprintf_r+0x124>
 8005202:	9105      	str	r1, [sp, #20]
 8005204:	e7c6      	b.n	8005194 <_svfiprintf_r+0x124>
 8005206:	fb05 2101 	mla	r1, r5, r1, r2
 800520a:	2301      	movs	r3, #1
 800520c:	4607      	mov	r7, r0
 800520e:	e7f0      	b.n	80051f2 <_svfiprintf_r+0x182>
 8005210:	ab03      	add	r3, sp, #12
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	4622      	mov	r2, r4
 8005216:	4b11      	ldr	r3, [pc, #68]	; (800525c <_svfiprintf_r+0x1ec>)
 8005218:	a904      	add	r1, sp, #16
 800521a:	4640      	mov	r0, r8
 800521c:	f3af 8000 	nop.w
 8005220:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005224:	4681      	mov	r9, r0
 8005226:	d1d6      	bne.n	80051d6 <_svfiprintf_r+0x166>
 8005228:	89a3      	ldrh	r3, [r4, #12]
 800522a:	065b      	lsls	r3, r3, #25
 800522c:	f53f af35 	bmi.w	800509a <_svfiprintf_r+0x2a>
 8005230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005232:	b01d      	add	sp, #116	; 0x74
 8005234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005238:	ab03      	add	r3, sp, #12
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	4622      	mov	r2, r4
 800523e:	4b07      	ldr	r3, [pc, #28]	; (800525c <_svfiprintf_r+0x1ec>)
 8005240:	a904      	add	r1, sp, #16
 8005242:	4640      	mov	r0, r8
 8005244:	f000 f882 	bl	800534c <_printf_i>
 8005248:	e7ea      	b.n	8005220 <_svfiprintf_r+0x1b0>
 800524a:	bf00      	nop
 800524c:	08005880 	.word	0x08005880
 8005250:	08005886 	.word	0x08005886
 8005254:	0800588a 	.word	0x0800588a
 8005258:	00000000 	.word	0x00000000
 800525c:	08004fbd 	.word	0x08004fbd

08005260 <_printf_common>:
 8005260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005264:	4691      	mov	r9, r2
 8005266:	461f      	mov	r7, r3
 8005268:	688a      	ldr	r2, [r1, #8]
 800526a:	690b      	ldr	r3, [r1, #16]
 800526c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005270:	4293      	cmp	r3, r2
 8005272:	bfb8      	it	lt
 8005274:	4613      	movlt	r3, r2
 8005276:	f8c9 3000 	str.w	r3, [r9]
 800527a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800527e:	4606      	mov	r6, r0
 8005280:	460c      	mov	r4, r1
 8005282:	b112      	cbz	r2, 800528a <_printf_common+0x2a>
 8005284:	3301      	adds	r3, #1
 8005286:	f8c9 3000 	str.w	r3, [r9]
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	0699      	lsls	r1, r3, #26
 800528e:	bf42      	ittt	mi
 8005290:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005294:	3302      	addmi	r3, #2
 8005296:	f8c9 3000 	strmi.w	r3, [r9]
 800529a:	6825      	ldr	r5, [r4, #0]
 800529c:	f015 0506 	ands.w	r5, r5, #6
 80052a0:	d107      	bne.n	80052b2 <_printf_common+0x52>
 80052a2:	f104 0a19 	add.w	sl, r4, #25
 80052a6:	68e3      	ldr	r3, [r4, #12]
 80052a8:	f8d9 2000 	ldr.w	r2, [r9]
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	42ab      	cmp	r3, r5
 80052b0:	dc28      	bgt.n	8005304 <_printf_common+0xa4>
 80052b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80052b6:	6822      	ldr	r2, [r4, #0]
 80052b8:	3300      	adds	r3, #0
 80052ba:	bf18      	it	ne
 80052bc:	2301      	movne	r3, #1
 80052be:	0692      	lsls	r2, r2, #26
 80052c0:	d42d      	bmi.n	800531e <_printf_common+0xbe>
 80052c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052c6:	4639      	mov	r1, r7
 80052c8:	4630      	mov	r0, r6
 80052ca:	47c0      	blx	r8
 80052cc:	3001      	adds	r0, #1
 80052ce:	d020      	beq.n	8005312 <_printf_common+0xb2>
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	68e5      	ldr	r5, [r4, #12]
 80052d4:	f8d9 2000 	ldr.w	r2, [r9]
 80052d8:	f003 0306 	and.w	r3, r3, #6
 80052dc:	2b04      	cmp	r3, #4
 80052de:	bf08      	it	eq
 80052e0:	1aad      	subeq	r5, r5, r2
 80052e2:	68a3      	ldr	r3, [r4, #8]
 80052e4:	6922      	ldr	r2, [r4, #16]
 80052e6:	bf0c      	ite	eq
 80052e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052ec:	2500      	movne	r5, #0
 80052ee:	4293      	cmp	r3, r2
 80052f0:	bfc4      	itt	gt
 80052f2:	1a9b      	subgt	r3, r3, r2
 80052f4:	18ed      	addgt	r5, r5, r3
 80052f6:	f04f 0900 	mov.w	r9, #0
 80052fa:	341a      	adds	r4, #26
 80052fc:	454d      	cmp	r5, r9
 80052fe:	d11a      	bne.n	8005336 <_printf_common+0xd6>
 8005300:	2000      	movs	r0, #0
 8005302:	e008      	b.n	8005316 <_printf_common+0xb6>
 8005304:	2301      	movs	r3, #1
 8005306:	4652      	mov	r2, sl
 8005308:	4639      	mov	r1, r7
 800530a:	4630      	mov	r0, r6
 800530c:	47c0      	blx	r8
 800530e:	3001      	adds	r0, #1
 8005310:	d103      	bne.n	800531a <_printf_common+0xba>
 8005312:	f04f 30ff 	mov.w	r0, #4294967295
 8005316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800531a:	3501      	adds	r5, #1
 800531c:	e7c3      	b.n	80052a6 <_printf_common+0x46>
 800531e:	18e1      	adds	r1, r4, r3
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	2030      	movs	r0, #48	; 0x30
 8005324:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005328:	4422      	add	r2, r4
 800532a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800532e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005332:	3302      	adds	r3, #2
 8005334:	e7c5      	b.n	80052c2 <_printf_common+0x62>
 8005336:	2301      	movs	r3, #1
 8005338:	4622      	mov	r2, r4
 800533a:	4639      	mov	r1, r7
 800533c:	4630      	mov	r0, r6
 800533e:	47c0      	blx	r8
 8005340:	3001      	adds	r0, #1
 8005342:	d0e6      	beq.n	8005312 <_printf_common+0xb2>
 8005344:	f109 0901 	add.w	r9, r9, #1
 8005348:	e7d8      	b.n	80052fc <_printf_common+0x9c>
	...

0800534c <_printf_i>:
 800534c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005350:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005354:	460c      	mov	r4, r1
 8005356:	7e09      	ldrb	r1, [r1, #24]
 8005358:	b085      	sub	sp, #20
 800535a:	296e      	cmp	r1, #110	; 0x6e
 800535c:	4617      	mov	r7, r2
 800535e:	4606      	mov	r6, r0
 8005360:	4698      	mov	r8, r3
 8005362:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005364:	f000 80b3 	beq.w	80054ce <_printf_i+0x182>
 8005368:	d822      	bhi.n	80053b0 <_printf_i+0x64>
 800536a:	2963      	cmp	r1, #99	; 0x63
 800536c:	d036      	beq.n	80053dc <_printf_i+0x90>
 800536e:	d80a      	bhi.n	8005386 <_printf_i+0x3a>
 8005370:	2900      	cmp	r1, #0
 8005372:	f000 80b9 	beq.w	80054e8 <_printf_i+0x19c>
 8005376:	2958      	cmp	r1, #88	; 0x58
 8005378:	f000 8083 	beq.w	8005482 <_printf_i+0x136>
 800537c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005380:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005384:	e032      	b.n	80053ec <_printf_i+0xa0>
 8005386:	2964      	cmp	r1, #100	; 0x64
 8005388:	d001      	beq.n	800538e <_printf_i+0x42>
 800538a:	2969      	cmp	r1, #105	; 0x69
 800538c:	d1f6      	bne.n	800537c <_printf_i+0x30>
 800538e:	6820      	ldr	r0, [r4, #0]
 8005390:	6813      	ldr	r3, [r2, #0]
 8005392:	0605      	lsls	r5, r0, #24
 8005394:	f103 0104 	add.w	r1, r3, #4
 8005398:	d52a      	bpl.n	80053f0 <_printf_i+0xa4>
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6011      	str	r1, [r2, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	da03      	bge.n	80053aa <_printf_i+0x5e>
 80053a2:	222d      	movs	r2, #45	; 0x2d
 80053a4:	425b      	negs	r3, r3
 80053a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80053aa:	486f      	ldr	r0, [pc, #444]	; (8005568 <_printf_i+0x21c>)
 80053ac:	220a      	movs	r2, #10
 80053ae:	e039      	b.n	8005424 <_printf_i+0xd8>
 80053b0:	2973      	cmp	r1, #115	; 0x73
 80053b2:	f000 809d 	beq.w	80054f0 <_printf_i+0x1a4>
 80053b6:	d808      	bhi.n	80053ca <_printf_i+0x7e>
 80053b8:	296f      	cmp	r1, #111	; 0x6f
 80053ba:	d020      	beq.n	80053fe <_printf_i+0xb2>
 80053bc:	2970      	cmp	r1, #112	; 0x70
 80053be:	d1dd      	bne.n	800537c <_printf_i+0x30>
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	f043 0320 	orr.w	r3, r3, #32
 80053c6:	6023      	str	r3, [r4, #0]
 80053c8:	e003      	b.n	80053d2 <_printf_i+0x86>
 80053ca:	2975      	cmp	r1, #117	; 0x75
 80053cc:	d017      	beq.n	80053fe <_printf_i+0xb2>
 80053ce:	2978      	cmp	r1, #120	; 0x78
 80053d0:	d1d4      	bne.n	800537c <_printf_i+0x30>
 80053d2:	2378      	movs	r3, #120	; 0x78
 80053d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053d8:	4864      	ldr	r0, [pc, #400]	; (800556c <_printf_i+0x220>)
 80053da:	e055      	b.n	8005488 <_printf_i+0x13c>
 80053dc:	6813      	ldr	r3, [r2, #0]
 80053de:	1d19      	adds	r1, r3, #4
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6011      	str	r1, [r2, #0]
 80053e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053ec:	2301      	movs	r3, #1
 80053ee:	e08c      	b.n	800550a <_printf_i+0x1be>
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6011      	str	r1, [r2, #0]
 80053f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053f8:	bf18      	it	ne
 80053fa:	b21b      	sxthne	r3, r3
 80053fc:	e7cf      	b.n	800539e <_printf_i+0x52>
 80053fe:	6813      	ldr	r3, [r2, #0]
 8005400:	6825      	ldr	r5, [r4, #0]
 8005402:	1d18      	adds	r0, r3, #4
 8005404:	6010      	str	r0, [r2, #0]
 8005406:	0628      	lsls	r0, r5, #24
 8005408:	d501      	bpl.n	800540e <_printf_i+0xc2>
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	e002      	b.n	8005414 <_printf_i+0xc8>
 800540e:	0668      	lsls	r0, r5, #25
 8005410:	d5fb      	bpl.n	800540a <_printf_i+0xbe>
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	4854      	ldr	r0, [pc, #336]	; (8005568 <_printf_i+0x21c>)
 8005416:	296f      	cmp	r1, #111	; 0x6f
 8005418:	bf14      	ite	ne
 800541a:	220a      	movne	r2, #10
 800541c:	2208      	moveq	r2, #8
 800541e:	2100      	movs	r1, #0
 8005420:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005424:	6865      	ldr	r5, [r4, #4]
 8005426:	60a5      	str	r5, [r4, #8]
 8005428:	2d00      	cmp	r5, #0
 800542a:	f2c0 8095 	blt.w	8005558 <_printf_i+0x20c>
 800542e:	6821      	ldr	r1, [r4, #0]
 8005430:	f021 0104 	bic.w	r1, r1, #4
 8005434:	6021      	str	r1, [r4, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d13d      	bne.n	80054b6 <_printf_i+0x16a>
 800543a:	2d00      	cmp	r5, #0
 800543c:	f040 808e 	bne.w	800555c <_printf_i+0x210>
 8005440:	4665      	mov	r5, ip
 8005442:	2a08      	cmp	r2, #8
 8005444:	d10b      	bne.n	800545e <_printf_i+0x112>
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	07db      	lsls	r3, r3, #31
 800544a:	d508      	bpl.n	800545e <_printf_i+0x112>
 800544c:	6923      	ldr	r3, [r4, #16]
 800544e:	6862      	ldr	r2, [r4, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	bfde      	ittt	le
 8005454:	2330      	movle	r3, #48	; 0x30
 8005456:	f805 3c01 	strble.w	r3, [r5, #-1]
 800545a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800545e:	ebac 0305 	sub.w	r3, ip, r5
 8005462:	6123      	str	r3, [r4, #16]
 8005464:	f8cd 8000 	str.w	r8, [sp]
 8005468:	463b      	mov	r3, r7
 800546a:	aa03      	add	r2, sp, #12
 800546c:	4621      	mov	r1, r4
 800546e:	4630      	mov	r0, r6
 8005470:	f7ff fef6 	bl	8005260 <_printf_common>
 8005474:	3001      	adds	r0, #1
 8005476:	d14d      	bne.n	8005514 <_printf_i+0x1c8>
 8005478:	f04f 30ff 	mov.w	r0, #4294967295
 800547c:	b005      	add	sp, #20
 800547e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005482:	4839      	ldr	r0, [pc, #228]	; (8005568 <_printf_i+0x21c>)
 8005484:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005488:	6813      	ldr	r3, [r2, #0]
 800548a:	6821      	ldr	r1, [r4, #0]
 800548c:	1d1d      	adds	r5, r3, #4
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6015      	str	r5, [r2, #0]
 8005492:	060a      	lsls	r2, r1, #24
 8005494:	d50b      	bpl.n	80054ae <_printf_i+0x162>
 8005496:	07ca      	lsls	r2, r1, #31
 8005498:	bf44      	itt	mi
 800549a:	f041 0120 	orrmi.w	r1, r1, #32
 800549e:	6021      	strmi	r1, [r4, #0]
 80054a0:	b91b      	cbnz	r3, 80054aa <_printf_i+0x15e>
 80054a2:	6822      	ldr	r2, [r4, #0]
 80054a4:	f022 0220 	bic.w	r2, r2, #32
 80054a8:	6022      	str	r2, [r4, #0]
 80054aa:	2210      	movs	r2, #16
 80054ac:	e7b7      	b.n	800541e <_printf_i+0xd2>
 80054ae:	064d      	lsls	r5, r1, #25
 80054b0:	bf48      	it	mi
 80054b2:	b29b      	uxthmi	r3, r3
 80054b4:	e7ef      	b.n	8005496 <_printf_i+0x14a>
 80054b6:	4665      	mov	r5, ip
 80054b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80054bc:	fb02 3311 	mls	r3, r2, r1, r3
 80054c0:	5cc3      	ldrb	r3, [r0, r3]
 80054c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80054c6:	460b      	mov	r3, r1
 80054c8:	2900      	cmp	r1, #0
 80054ca:	d1f5      	bne.n	80054b8 <_printf_i+0x16c>
 80054cc:	e7b9      	b.n	8005442 <_printf_i+0xf6>
 80054ce:	6813      	ldr	r3, [r2, #0]
 80054d0:	6825      	ldr	r5, [r4, #0]
 80054d2:	6961      	ldr	r1, [r4, #20]
 80054d4:	1d18      	adds	r0, r3, #4
 80054d6:	6010      	str	r0, [r2, #0]
 80054d8:	0628      	lsls	r0, r5, #24
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	d501      	bpl.n	80054e2 <_printf_i+0x196>
 80054de:	6019      	str	r1, [r3, #0]
 80054e0:	e002      	b.n	80054e8 <_printf_i+0x19c>
 80054e2:	066a      	lsls	r2, r5, #25
 80054e4:	d5fb      	bpl.n	80054de <_printf_i+0x192>
 80054e6:	8019      	strh	r1, [r3, #0]
 80054e8:	2300      	movs	r3, #0
 80054ea:	6123      	str	r3, [r4, #16]
 80054ec:	4665      	mov	r5, ip
 80054ee:	e7b9      	b.n	8005464 <_printf_i+0x118>
 80054f0:	6813      	ldr	r3, [r2, #0]
 80054f2:	1d19      	adds	r1, r3, #4
 80054f4:	6011      	str	r1, [r2, #0]
 80054f6:	681d      	ldr	r5, [r3, #0]
 80054f8:	6862      	ldr	r2, [r4, #4]
 80054fa:	2100      	movs	r1, #0
 80054fc:	4628      	mov	r0, r5
 80054fe:	f7fa fe77 	bl	80001f0 <memchr>
 8005502:	b108      	cbz	r0, 8005508 <_printf_i+0x1bc>
 8005504:	1b40      	subs	r0, r0, r5
 8005506:	6060      	str	r0, [r4, #4]
 8005508:	6863      	ldr	r3, [r4, #4]
 800550a:	6123      	str	r3, [r4, #16]
 800550c:	2300      	movs	r3, #0
 800550e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005512:	e7a7      	b.n	8005464 <_printf_i+0x118>
 8005514:	6923      	ldr	r3, [r4, #16]
 8005516:	462a      	mov	r2, r5
 8005518:	4639      	mov	r1, r7
 800551a:	4630      	mov	r0, r6
 800551c:	47c0      	blx	r8
 800551e:	3001      	adds	r0, #1
 8005520:	d0aa      	beq.n	8005478 <_printf_i+0x12c>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	079b      	lsls	r3, r3, #30
 8005526:	d413      	bmi.n	8005550 <_printf_i+0x204>
 8005528:	68e0      	ldr	r0, [r4, #12]
 800552a:	9b03      	ldr	r3, [sp, #12]
 800552c:	4298      	cmp	r0, r3
 800552e:	bfb8      	it	lt
 8005530:	4618      	movlt	r0, r3
 8005532:	e7a3      	b.n	800547c <_printf_i+0x130>
 8005534:	2301      	movs	r3, #1
 8005536:	464a      	mov	r2, r9
 8005538:	4639      	mov	r1, r7
 800553a:	4630      	mov	r0, r6
 800553c:	47c0      	blx	r8
 800553e:	3001      	adds	r0, #1
 8005540:	d09a      	beq.n	8005478 <_printf_i+0x12c>
 8005542:	3501      	adds	r5, #1
 8005544:	68e3      	ldr	r3, [r4, #12]
 8005546:	9a03      	ldr	r2, [sp, #12]
 8005548:	1a9b      	subs	r3, r3, r2
 800554a:	42ab      	cmp	r3, r5
 800554c:	dcf2      	bgt.n	8005534 <_printf_i+0x1e8>
 800554e:	e7eb      	b.n	8005528 <_printf_i+0x1dc>
 8005550:	2500      	movs	r5, #0
 8005552:	f104 0919 	add.w	r9, r4, #25
 8005556:	e7f5      	b.n	8005544 <_printf_i+0x1f8>
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1ac      	bne.n	80054b6 <_printf_i+0x16a>
 800555c:	7803      	ldrb	r3, [r0, #0]
 800555e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005562:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005566:	e76c      	b.n	8005442 <_printf_i+0xf6>
 8005568:	08005891 	.word	0x08005891
 800556c:	080058a2 	.word	0x080058a2

08005570 <memcpy>:
 8005570:	b510      	push	{r4, lr}
 8005572:	1e43      	subs	r3, r0, #1
 8005574:	440a      	add	r2, r1
 8005576:	4291      	cmp	r1, r2
 8005578:	d100      	bne.n	800557c <memcpy+0xc>
 800557a:	bd10      	pop	{r4, pc}
 800557c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005580:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005584:	e7f7      	b.n	8005576 <memcpy+0x6>

08005586 <memmove>:
 8005586:	4288      	cmp	r0, r1
 8005588:	b510      	push	{r4, lr}
 800558a:	eb01 0302 	add.w	r3, r1, r2
 800558e:	d807      	bhi.n	80055a0 <memmove+0x1a>
 8005590:	1e42      	subs	r2, r0, #1
 8005592:	4299      	cmp	r1, r3
 8005594:	d00a      	beq.n	80055ac <memmove+0x26>
 8005596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800559a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800559e:	e7f8      	b.n	8005592 <memmove+0xc>
 80055a0:	4283      	cmp	r3, r0
 80055a2:	d9f5      	bls.n	8005590 <memmove+0xa>
 80055a4:	1881      	adds	r1, r0, r2
 80055a6:	1ad2      	subs	r2, r2, r3
 80055a8:	42d3      	cmn	r3, r2
 80055aa:	d100      	bne.n	80055ae <memmove+0x28>
 80055ac:	bd10      	pop	{r4, pc}
 80055ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80055b6:	e7f7      	b.n	80055a8 <memmove+0x22>

080055b8 <_free_r>:
 80055b8:	b538      	push	{r3, r4, r5, lr}
 80055ba:	4605      	mov	r5, r0
 80055bc:	2900      	cmp	r1, #0
 80055be:	d045      	beq.n	800564c <_free_r+0x94>
 80055c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055c4:	1f0c      	subs	r4, r1, #4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	bfb8      	it	lt
 80055ca:	18e4      	addlt	r4, r4, r3
 80055cc:	f000 f8d2 	bl	8005774 <__malloc_lock>
 80055d0:	4a1f      	ldr	r2, [pc, #124]	; (8005650 <_free_r+0x98>)
 80055d2:	6813      	ldr	r3, [r2, #0]
 80055d4:	4610      	mov	r0, r2
 80055d6:	b933      	cbnz	r3, 80055e6 <_free_r+0x2e>
 80055d8:	6063      	str	r3, [r4, #4]
 80055da:	6014      	str	r4, [r2, #0]
 80055dc:	4628      	mov	r0, r5
 80055de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055e2:	f000 b8c8 	b.w	8005776 <__malloc_unlock>
 80055e6:	42a3      	cmp	r3, r4
 80055e8:	d90c      	bls.n	8005604 <_free_r+0x4c>
 80055ea:	6821      	ldr	r1, [r4, #0]
 80055ec:	1862      	adds	r2, r4, r1
 80055ee:	4293      	cmp	r3, r2
 80055f0:	bf04      	itt	eq
 80055f2:	681a      	ldreq	r2, [r3, #0]
 80055f4:	685b      	ldreq	r3, [r3, #4]
 80055f6:	6063      	str	r3, [r4, #4]
 80055f8:	bf04      	itt	eq
 80055fa:	1852      	addeq	r2, r2, r1
 80055fc:	6022      	streq	r2, [r4, #0]
 80055fe:	6004      	str	r4, [r0, #0]
 8005600:	e7ec      	b.n	80055dc <_free_r+0x24>
 8005602:	4613      	mov	r3, r2
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	b10a      	cbz	r2, 800560c <_free_r+0x54>
 8005608:	42a2      	cmp	r2, r4
 800560a:	d9fa      	bls.n	8005602 <_free_r+0x4a>
 800560c:	6819      	ldr	r1, [r3, #0]
 800560e:	1858      	adds	r0, r3, r1
 8005610:	42a0      	cmp	r0, r4
 8005612:	d10b      	bne.n	800562c <_free_r+0x74>
 8005614:	6820      	ldr	r0, [r4, #0]
 8005616:	4401      	add	r1, r0
 8005618:	1858      	adds	r0, r3, r1
 800561a:	4282      	cmp	r2, r0
 800561c:	6019      	str	r1, [r3, #0]
 800561e:	d1dd      	bne.n	80055dc <_free_r+0x24>
 8005620:	6810      	ldr	r0, [r2, #0]
 8005622:	6852      	ldr	r2, [r2, #4]
 8005624:	605a      	str	r2, [r3, #4]
 8005626:	4401      	add	r1, r0
 8005628:	6019      	str	r1, [r3, #0]
 800562a:	e7d7      	b.n	80055dc <_free_r+0x24>
 800562c:	d902      	bls.n	8005634 <_free_r+0x7c>
 800562e:	230c      	movs	r3, #12
 8005630:	602b      	str	r3, [r5, #0]
 8005632:	e7d3      	b.n	80055dc <_free_r+0x24>
 8005634:	6820      	ldr	r0, [r4, #0]
 8005636:	1821      	adds	r1, r4, r0
 8005638:	428a      	cmp	r2, r1
 800563a:	bf04      	itt	eq
 800563c:	6811      	ldreq	r1, [r2, #0]
 800563e:	6852      	ldreq	r2, [r2, #4]
 8005640:	6062      	str	r2, [r4, #4]
 8005642:	bf04      	itt	eq
 8005644:	1809      	addeq	r1, r1, r0
 8005646:	6021      	streq	r1, [r4, #0]
 8005648:	605c      	str	r4, [r3, #4]
 800564a:	e7c7      	b.n	80055dc <_free_r+0x24>
 800564c:	bd38      	pop	{r3, r4, r5, pc}
 800564e:	bf00      	nop
 8005650:	2000009c 	.word	0x2000009c

08005654 <_malloc_r>:
 8005654:	b570      	push	{r4, r5, r6, lr}
 8005656:	1ccd      	adds	r5, r1, #3
 8005658:	f025 0503 	bic.w	r5, r5, #3
 800565c:	3508      	adds	r5, #8
 800565e:	2d0c      	cmp	r5, #12
 8005660:	bf38      	it	cc
 8005662:	250c      	movcc	r5, #12
 8005664:	2d00      	cmp	r5, #0
 8005666:	4606      	mov	r6, r0
 8005668:	db01      	blt.n	800566e <_malloc_r+0x1a>
 800566a:	42a9      	cmp	r1, r5
 800566c:	d903      	bls.n	8005676 <_malloc_r+0x22>
 800566e:	230c      	movs	r3, #12
 8005670:	6033      	str	r3, [r6, #0]
 8005672:	2000      	movs	r0, #0
 8005674:	bd70      	pop	{r4, r5, r6, pc}
 8005676:	f000 f87d 	bl	8005774 <__malloc_lock>
 800567a:	4a21      	ldr	r2, [pc, #132]	; (8005700 <_malloc_r+0xac>)
 800567c:	6814      	ldr	r4, [r2, #0]
 800567e:	4621      	mov	r1, r4
 8005680:	b991      	cbnz	r1, 80056a8 <_malloc_r+0x54>
 8005682:	4c20      	ldr	r4, [pc, #128]	; (8005704 <_malloc_r+0xb0>)
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	b91b      	cbnz	r3, 8005690 <_malloc_r+0x3c>
 8005688:	4630      	mov	r0, r6
 800568a:	f000 f863 	bl	8005754 <_sbrk_r>
 800568e:	6020      	str	r0, [r4, #0]
 8005690:	4629      	mov	r1, r5
 8005692:	4630      	mov	r0, r6
 8005694:	f000 f85e 	bl	8005754 <_sbrk_r>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d124      	bne.n	80056e6 <_malloc_r+0x92>
 800569c:	230c      	movs	r3, #12
 800569e:	6033      	str	r3, [r6, #0]
 80056a0:	4630      	mov	r0, r6
 80056a2:	f000 f868 	bl	8005776 <__malloc_unlock>
 80056a6:	e7e4      	b.n	8005672 <_malloc_r+0x1e>
 80056a8:	680b      	ldr	r3, [r1, #0]
 80056aa:	1b5b      	subs	r3, r3, r5
 80056ac:	d418      	bmi.n	80056e0 <_malloc_r+0x8c>
 80056ae:	2b0b      	cmp	r3, #11
 80056b0:	d90f      	bls.n	80056d2 <_malloc_r+0x7e>
 80056b2:	600b      	str	r3, [r1, #0]
 80056b4:	50cd      	str	r5, [r1, r3]
 80056b6:	18cc      	adds	r4, r1, r3
 80056b8:	4630      	mov	r0, r6
 80056ba:	f000 f85c 	bl	8005776 <__malloc_unlock>
 80056be:	f104 000b 	add.w	r0, r4, #11
 80056c2:	1d23      	adds	r3, r4, #4
 80056c4:	f020 0007 	bic.w	r0, r0, #7
 80056c8:	1ac3      	subs	r3, r0, r3
 80056ca:	d0d3      	beq.n	8005674 <_malloc_r+0x20>
 80056cc:	425a      	negs	r2, r3
 80056ce:	50e2      	str	r2, [r4, r3]
 80056d0:	e7d0      	b.n	8005674 <_malloc_r+0x20>
 80056d2:	428c      	cmp	r4, r1
 80056d4:	684b      	ldr	r3, [r1, #4]
 80056d6:	bf16      	itet	ne
 80056d8:	6063      	strne	r3, [r4, #4]
 80056da:	6013      	streq	r3, [r2, #0]
 80056dc:	460c      	movne	r4, r1
 80056de:	e7eb      	b.n	80056b8 <_malloc_r+0x64>
 80056e0:	460c      	mov	r4, r1
 80056e2:	6849      	ldr	r1, [r1, #4]
 80056e4:	e7cc      	b.n	8005680 <_malloc_r+0x2c>
 80056e6:	1cc4      	adds	r4, r0, #3
 80056e8:	f024 0403 	bic.w	r4, r4, #3
 80056ec:	42a0      	cmp	r0, r4
 80056ee:	d005      	beq.n	80056fc <_malloc_r+0xa8>
 80056f0:	1a21      	subs	r1, r4, r0
 80056f2:	4630      	mov	r0, r6
 80056f4:	f000 f82e 	bl	8005754 <_sbrk_r>
 80056f8:	3001      	adds	r0, #1
 80056fa:	d0cf      	beq.n	800569c <_malloc_r+0x48>
 80056fc:	6025      	str	r5, [r4, #0]
 80056fe:	e7db      	b.n	80056b8 <_malloc_r+0x64>
 8005700:	2000009c 	.word	0x2000009c
 8005704:	200000a0 	.word	0x200000a0

08005708 <_realloc_r>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	4607      	mov	r7, r0
 800570c:	4614      	mov	r4, r2
 800570e:	460e      	mov	r6, r1
 8005710:	b921      	cbnz	r1, 800571c <_realloc_r+0x14>
 8005712:	4611      	mov	r1, r2
 8005714:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005718:	f7ff bf9c 	b.w	8005654 <_malloc_r>
 800571c:	b922      	cbnz	r2, 8005728 <_realloc_r+0x20>
 800571e:	f7ff ff4b 	bl	80055b8 <_free_r>
 8005722:	4625      	mov	r5, r4
 8005724:	4628      	mov	r0, r5
 8005726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005728:	f000 f826 	bl	8005778 <_malloc_usable_size_r>
 800572c:	42a0      	cmp	r0, r4
 800572e:	d20f      	bcs.n	8005750 <_realloc_r+0x48>
 8005730:	4621      	mov	r1, r4
 8005732:	4638      	mov	r0, r7
 8005734:	f7ff ff8e 	bl	8005654 <_malloc_r>
 8005738:	4605      	mov	r5, r0
 800573a:	2800      	cmp	r0, #0
 800573c:	d0f2      	beq.n	8005724 <_realloc_r+0x1c>
 800573e:	4631      	mov	r1, r6
 8005740:	4622      	mov	r2, r4
 8005742:	f7ff ff15 	bl	8005570 <memcpy>
 8005746:	4631      	mov	r1, r6
 8005748:	4638      	mov	r0, r7
 800574a:	f7ff ff35 	bl	80055b8 <_free_r>
 800574e:	e7e9      	b.n	8005724 <_realloc_r+0x1c>
 8005750:	4635      	mov	r5, r6
 8005752:	e7e7      	b.n	8005724 <_realloc_r+0x1c>

08005754 <_sbrk_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4c06      	ldr	r4, [pc, #24]	; (8005770 <_sbrk_r+0x1c>)
 8005758:	2300      	movs	r3, #0
 800575a:	4605      	mov	r5, r0
 800575c:	4608      	mov	r0, r1
 800575e:	6023      	str	r3, [r4, #0]
 8005760:	f7fb fd44 	bl	80011ec <_sbrk>
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d102      	bne.n	800576e <_sbrk_r+0x1a>
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	b103      	cbz	r3, 800576e <_sbrk_r+0x1a>
 800576c:	602b      	str	r3, [r5, #0]
 800576e:	bd38      	pop	{r3, r4, r5, pc}
 8005770:	20006fec 	.word	0x20006fec

08005774 <__malloc_lock>:
 8005774:	4770      	bx	lr

08005776 <__malloc_unlock>:
 8005776:	4770      	bx	lr

08005778 <_malloc_usable_size_r>:
 8005778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800577c:	1f18      	subs	r0, r3, #4
 800577e:	2b00      	cmp	r3, #0
 8005780:	bfbc      	itt	lt
 8005782:	580b      	ldrlt	r3, [r1, r0]
 8005784:	18c0      	addlt	r0, r0, r3
 8005786:	4770      	bx	lr

08005788 <round>:
 8005788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578a:	ec57 6b10 	vmov	r6, r7, d0
 800578e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8005792:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8005796:	2c13      	cmp	r4, #19
 8005798:	463b      	mov	r3, r7
 800579a:	463d      	mov	r5, r7
 800579c:	dc17      	bgt.n	80057ce <round+0x46>
 800579e:	2c00      	cmp	r4, #0
 80057a0:	da09      	bge.n	80057b6 <round+0x2e>
 80057a2:	3401      	adds	r4, #1
 80057a4:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80057a8:	d103      	bne.n	80057b2 <round+0x2a>
 80057aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80057ae:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80057b2:	2100      	movs	r1, #0
 80057b4:	e02c      	b.n	8005810 <round+0x88>
 80057b6:	4a18      	ldr	r2, [pc, #96]	; (8005818 <round+0x90>)
 80057b8:	4122      	asrs	r2, r4
 80057ba:	4217      	tst	r7, r2
 80057bc:	d100      	bne.n	80057c0 <round+0x38>
 80057be:	b19e      	cbz	r6, 80057e8 <round+0x60>
 80057c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80057c4:	4123      	asrs	r3, r4
 80057c6:	442b      	add	r3, r5
 80057c8:	ea23 0302 	bic.w	r3, r3, r2
 80057cc:	e7f1      	b.n	80057b2 <round+0x2a>
 80057ce:	2c33      	cmp	r4, #51	; 0x33
 80057d0:	dd0d      	ble.n	80057ee <round+0x66>
 80057d2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80057d6:	d107      	bne.n	80057e8 <round+0x60>
 80057d8:	4630      	mov	r0, r6
 80057da:	4639      	mov	r1, r7
 80057dc:	ee10 2a10 	vmov	r2, s0
 80057e0:	f7fa fd5c 	bl	800029c <__adddf3>
 80057e4:	4606      	mov	r6, r0
 80057e6:	460f      	mov	r7, r1
 80057e8:	ec47 6b10 	vmov	d0, r6, r7
 80057ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ee:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80057f2:	f04f 30ff 	mov.w	r0, #4294967295
 80057f6:	40d0      	lsrs	r0, r2
 80057f8:	4206      	tst	r6, r0
 80057fa:	d0f5      	beq.n	80057e8 <round+0x60>
 80057fc:	2201      	movs	r2, #1
 80057fe:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8005802:	fa02 f404 	lsl.w	r4, r2, r4
 8005806:	1931      	adds	r1, r6, r4
 8005808:	bf28      	it	cs
 800580a:	189b      	addcs	r3, r3, r2
 800580c:	ea21 0100 	bic.w	r1, r1, r0
 8005810:	461f      	mov	r7, r3
 8005812:	460e      	mov	r6, r1
 8005814:	e7e8      	b.n	80057e8 <round+0x60>
 8005816:	bf00      	nop
 8005818:	000fffff 	.word	0x000fffff

0800581c <_init>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	bf00      	nop
 8005820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005822:	bc08      	pop	{r3}
 8005824:	469e      	mov	lr, r3
 8005826:	4770      	bx	lr

08005828 <_fini>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	bf00      	nop
 800582c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582e:	bc08      	pop	{r3}
 8005830:	469e      	mov	lr, r3
 8005832:	4770      	bx	lr

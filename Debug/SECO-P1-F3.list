
SECO-P1-F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b2c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cf8  08003cf8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003cf8  08003cf8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cf8  08003cf8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf8  08003cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cfc  08003cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  08003d0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08003d0c  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c37c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c55  00000000  00000000  0002c3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c50  00000000  00000000  0002e010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  0002ec60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d950  00000000  00000000  0002f7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a2bc  00000000  00000000  0004d108  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b0218  00000000  00000000  000573c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001075dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032ec  00000000  00000000  00107658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003ca8 	.word	0x08003ca8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003ca8 	.word	0x08003ca8

080001d4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	f107 030c 	add.w	r3, r7, #12
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ea:	4b19      	ldr	r3, [pc, #100]	; (8000250 <MX_GPIO_Init+0x7c>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a18      	ldr	r2, [pc, #96]	; (8000250 <MX_GPIO_Init+0x7c>)
 80001f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b16      	ldr	r3, [pc, #88]	; (8000250 <MX_GPIO_Init+0x7c>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001fe:	60bb      	str	r3, [r7, #8]
 8000200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000202:	4b13      	ldr	r3, [pc, #76]	; (8000250 <MX_GPIO_Init+0x7c>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a12      	ldr	r2, [pc, #72]	; (8000250 <MX_GPIO_Init+0x7c>)
 8000208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800020c:	6153      	str	r3, [r2, #20]
 800020e:	4b10      	ldr	r3, [pc, #64]	; (8000250 <MX_GPIO_Init+0x7c>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000216:	607b      	str	r3, [r7, #4]
 8000218:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000224:	f000 fe8e 	bl	8000f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800022c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022e:	2301      	movs	r3, #1
 8000230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000236:	2300      	movs	r3, #0
 8000238:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800023a:	f107 030c 	add.w	r3, r7, #12
 800023e:	4619      	mov	r1, r3
 8000240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000244:	f000 fcf4 	bl	8000c30 <HAL_GPIO_Init>

}
 8000248:	bf00      	nop
 800024a:	3720      	adds	r7, #32
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	40021000 	.word	0x40021000

08000254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000258:	f000 fb9e 	bl	8000998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025c:	f000 f82a 	bl	80002b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000260:	f7ff ffb8 	bl	80001d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000264:	f000 fafc 	bl	8000860 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000268:	f000 f908 	bl	800047c <MX_TIM2_Init>
  MX_TIM3_Init();
 800026c:	f000 f95a 	bl	8000524 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000270:	f000 f9be 	bl	80005f0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000274:	f000 f9f2 	bl	800065c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000278:	2100      	movs	r1, #0
 800027a:	480a      	ldr	r0, [pc, #40]	; (80002a4 <main+0x50>)
 800027c:	f002 fa66 	bl	800274c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000280:	2104      	movs	r1, #4
 8000282:	4808      	ldr	r0, [pc, #32]	; (80002a4 <main+0x50>)
 8000284:	f002 fa62 	bl	800274c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000288:	213c      	movs	r1, #60	; 0x3c
 800028a:	4807      	ldr	r0, [pc, #28]	; (80002a8 <main+0x54>)
 800028c:	f002 fb50 	bl	8002930 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Init(&htim6);
 8000290:	4806      	ldr	r0, [pc, #24]	; (80002ac <main+0x58>)
 8000292:	f002 f9d9 	bl	8002648 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Init(&htim7);
 8000296:	4806      	ldr	r0, [pc, #24]	; (80002b0 <main+0x5c>)
 8000298:	f002 f9d6 	bl	8002648 <HAL_TIM_Base_Init>
  reductora();
 800029c:	f000 f86e 	bl	800037c <reductora>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a0:	e7fe      	b.n	80002a0 <main+0x4c>
 80002a2:	bf00      	nop
 80002a4:	20000028 	.word	0x20000028
 80002a8:	200000a8 	.word	0x200000a8
 80002ac:	20000068 	.word	0x20000068
 80002b0:	200000e8 	.word	0x200000e8

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b0a6      	sub	sp, #152	; 0x98
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002be:	2228      	movs	r2, #40	; 0x28
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f003 fce8 	bl	8003c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2258      	movs	r2, #88	; 0x58
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f003 fcda 	bl	8003c98 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e4:	2302      	movs	r3, #2
 80002e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e8:	2301      	movs	r3, #1
 80002ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ec:	2310      	movs	r3, #16
 80002ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	2302      	movs	r3, #2
 80002f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000300:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8000304:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000308:	2301      	movs	r3, #1
 800030a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000312:	4618      	mov	r0, r3
 8000314:	f000 fe2e 	bl	8000f74 <HAL_RCC_OscConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800031e:	f000 f83d 	bl	800039c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000322:	230f      	movs	r3, #15
 8000324:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000326:	2302      	movs	r3, #2
 8000328:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000332:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000338:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800033c:	2102      	movs	r1, #2
 800033e:	4618      	mov	r0, r3
 8000340:	f001 fd2e 	bl	8001da0 <HAL_RCC_ClockConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800034a:	f000 f827 	bl	800039c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2
 800034e:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <SystemClock_Config+0xc4>)
 8000350:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000352:	2300      	movs	r3, #0
 8000354:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000356:	2300      	movs	r3, #0
 8000358:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800035a:	2300      	movs	r3, #0
 800035c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4618      	mov	r0, r3
 8000362:	f001 ff53 	bl	800220c <HAL_RCCEx_PeriphCLKConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800036c:	f000 f816 	bl	800039c <Error_Handler>
  }
}
 8000370:	bf00      	nop
 8000372:	3798      	adds	r7, #152	; 0x98
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	00300002 	.word	0x00300002

0800037c <reductora>:
	//HAL_TIM_Base_Start_IT(&htim7);
	count_pul = 0;
	selec_voltage(V);
}

void reductora(){
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000380:	4b04      	ldr	r3, [pc, #16]	; (8000394 <reductora+0x18>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2200      	movs	r2, #0
 8000386:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim6);
 8000388:	4803      	ldr	r0, [pc, #12]	; (8000398 <reductora+0x1c>)
 800038a:	f002 f989 	bl	80026a0 <HAL_TIM_Base_Start_IT>
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	200000a8 	.word	0x200000a8
 8000398:	20000068 	.word	0x20000068

0800039c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
	...

080003ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003b2:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <HAL_MspInit+0x44>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <HAL_MspInit+0x44>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6193      	str	r3, [r2, #24]
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <HAL_MspInit+0x44>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ca:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <HAL_MspInit+0x44>)
 80003cc:	69db      	ldr	r3, [r3, #28]
 80003ce:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <HAL_MspInit+0x44>)
 80003d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d4:	61d3      	str	r3, [r2, #28]
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <HAL_MspInit+0x44>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003de:	603b      	str	r3, [r7, #0]
 80003e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000

080003f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000406:	e7fe      	b.n	8000406 <HardFault_Handler+0x4>

08000408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800040c:	e7fe      	b.n	800040c <MemManage_Handler+0x4>

0800040e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800040e:	b480      	push	{r7}
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000412:	e7fe      	b.n	8000412 <BusFault_Handler+0x4>

08000414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000418:	e7fe      	b.n	8000418 <UsageFault_Handler+0x4>

0800041a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800041a:	b480      	push	{r7}
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800041e:	bf00      	nop
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr

08000444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000448:	f000 faec 	bl	8000a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}

08000450 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <SystemInit+0x28>)
 8000456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800045a:	4a07      	ldr	r2, [pc, #28]	; (8000478 <SystemInit+0x28>)
 800045c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000464:	4b04      	ldr	r3, [pc, #16]	; (8000478 <SystemInit+0x28>)
 8000466:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800046a:	609a      	str	r2, [r3, #8]
#endif
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b08c      	sub	sp, #48	; 0x30
 8000480:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000482:	f107 030c 	add.w	r3, r7, #12
 8000486:	2224      	movs	r2, #36	; 0x24
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f003 fc04 	bl	8003c98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000490:	463b      	mov	r3, r7
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800049a:	4b21      	ldr	r3, [pc, #132]	; (8000520 <MX_TIM2_Init+0xa4>)
 800049c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004a2:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <MX_TIM2_Init+0xa4>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a8:	4b1d      	ldr	r3, [pc, #116]	; (8000520 <MX_TIM2_Init+0xa4>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80004ae:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <MX_TIM2_Init+0xa4>)
 80004b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b6:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <MX_TIM2_Init+0xa4>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004bc:	4b18      	ldr	r3, [pc, #96]	; (8000520 <MX_TIM2_Init+0xa4>)
 80004be:	2200      	movs	r2, #0
 80004c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80004c2:	2303      	movs	r3, #3
 80004c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004c6:	2300      	movs	r3, #0
 80004c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004ca:	2301      	movs	r3, #1
 80004cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004d6:	2300      	movs	r3, #0
 80004d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004da:	2301      	movs	r3, #1
 80004dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80004e6:	f107 030c 	add.w	r3, r7, #12
 80004ea:	4619      	mov	r1, r3
 80004ec:	480c      	ldr	r0, [pc, #48]	; (8000520 <MX_TIM2_Init+0xa4>)
 80004ee:	f002 f98d 	bl	800280c <HAL_TIM_Encoder_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80004f8:	f7ff ff50 	bl	800039c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004fc:	2300      	movs	r3, #0
 80004fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000504:	463b      	mov	r3, r7
 8000506:	4619      	mov	r1, r3
 8000508:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_TIM2_Init+0xa4>)
 800050a:	f002 ff4b 	bl	80033a4 <HAL_TIMEx_MasterConfigSynchronization>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000514:	f7ff ff42 	bl	800039c <Error_Handler>
  }

}
 8000518:	bf00      	nop
 800051a:	3730      	adds	r7, #48	; 0x30
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	200000a8 	.word	0x200000a8

08000524 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08a      	sub	sp, #40	; 0x28
 8000528:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800052a:	f107 031c 	add.w	r3, r7, #28
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000536:	463b      	mov	r3, r7
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
 8000544:	615a      	str	r2, [r3, #20]
 8000546:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000548:	4b27      	ldr	r3, [pc, #156]	; (80005e8 <MX_TIM3_Init+0xc4>)
 800054a:	4a28      	ldr	r2, [pc, #160]	; (80005ec <MX_TIM3_Init+0xc8>)
 800054c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 800054e:	4b26      	ldr	r3, [pc, #152]	; (80005e8 <MX_TIM3_Init+0xc4>)
 8000550:	2202      	movs	r2, #2
 8000552:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000554:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <MX_TIM3_Init+0xc4>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800055a:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <MX_TIM3_Init+0xc4>)
 800055c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000560:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000562:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <MX_TIM3_Init+0xc4>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <MX_TIM3_Init+0xc4>)
 800056a:	2200      	movs	r2, #0
 800056c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800056e:	481e      	ldr	r0, [pc, #120]	; (80005e8 <MX_TIM3_Init+0xc4>)
 8000570:	f002 f8c0 	bl	80026f4 <HAL_TIM_PWM_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800057a:	f7ff ff0f 	bl	800039c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000582:	2300      	movs	r3, #0
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	4619      	mov	r1, r3
 800058c:	4816      	ldr	r0, [pc, #88]	; (80005e8 <MX_TIM3_Init+0xc4>)
 800058e:	f002 ff09 	bl	80033a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000598:	f7ff ff00 	bl	800039c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800059c:	2360      	movs	r3, #96	; 0x60
 800059e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	4619      	mov	r1, r3
 80005b2:	480d      	ldr	r0, [pc, #52]	; (80005e8 <MX_TIM3_Init+0xc4>)
 80005b4:	f002 fa14 	bl	80029e0 <HAL_TIM_PWM_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80005be:	f7ff feed 	bl	800039c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005c2:	463b      	mov	r3, r7
 80005c4:	2204      	movs	r2, #4
 80005c6:	4619      	mov	r1, r3
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <MX_TIM3_Init+0xc4>)
 80005ca:	f002 fa09 	bl	80029e0 <HAL_TIM_PWM_ConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80005d4:	f7ff fee2 	bl	800039c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <MX_TIM3_Init+0xc4>)
 80005da:	f000 f909 	bl	80007f0 <HAL_TIM_MspPostInit>

}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	; 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000028 	.word	0x20000028
 80005ec:	40000400 	.word	0x40000400

080005f0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_TIM6_Init+0x64>)
 8000602:	4a15      	ldr	r2, [pc, #84]	; (8000658 <MX_TIM6_Init+0x68>)
 8000604:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 59999;
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <MX_TIM6_Init+0x64>)
 8000608:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800060c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_TIM6_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_TIM6_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_TIM6_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <MX_TIM6_Init+0x64>)
 8000622:	f002 f811 	bl	8002648 <HAL_TIM_Base_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800062c:	f7ff feb6 	bl	800039c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4619      	mov	r1, r3
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_TIM6_Init+0x64>)
 800063e:	f002 feb1 	bl	80033a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000648:	f7ff fea8 	bl	800039c <Error_Handler>
  }

}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000068 	.word	0x20000068
 8000658:	40001000 	.word	0x40001000

0800065c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_TIM7_Init+0x64>)
 800066e:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <MX_TIM7_Init+0x68>)
 8000670:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_TIM7_Init+0x64>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_TIM7_Init+0x64>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_TIM7_Init+0x64>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_TIM7_Init+0x64>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800068a:	480d      	ldr	r0, [pc, #52]	; (80006c0 <MX_TIM7_Init+0x64>)
 800068c:	f001 ffdc 	bl	8002648 <HAL_TIM_Base_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000696:	f7ff fe81 	bl	800039c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <MX_TIM7_Init+0x64>)
 80006a8:	f002 fe7c 	bl	80033a4 <HAL_TIMEx_MasterConfigSynchronization>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80006b2:	f7ff fe73 	bl	800039c <Error_Handler>
  }

}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000e8 	.word	0x200000e8
 80006c4:	40001400 	.word	0x40001400

080006c8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006e8:	d128      	bne.n	800073c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <HAL_TIM_Encoder_MspInit+0x7c>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	4a15      	ldr	r2, [pc, #84]	; (8000744 <HAL_TIM_Encoder_MspInit+0x7c>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	61d3      	str	r3, [r2, #28]
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <HAL_TIM_Encoder_MspInit+0x7c>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	4a0f      	ldr	r2, [pc, #60]	; (8000744 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800070c:	6153      	str	r3, [r2, #20]
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800071a:	2303      	movs	r3, #3
 800071c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071e:	2302      	movs	r3, #2
 8000720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800072a:	2301      	movs	r3, #1
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4619      	mov	r1, r3
 8000734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000738:	f000 fa7a 	bl	8000c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800073c:	bf00      	nop
 800073e:	3728      	adds	r7, #40	; 0x28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <HAL_TIM_PWM_MspInit+0x38>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d10b      	bne.n	8000772 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <HAL_TIM_PWM_MspInit+0x3c>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a09      	ldr	r2, [pc, #36]	; (8000784 <HAL_TIM_PWM_MspInit+0x3c>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <HAL_TIM_PWM_MspInit+0x3c>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40000400 	.word	0x40000400
 8000784:	40021000 	.word	0x40021000

08000788 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <HAL_TIM_Base_MspInit+0x5c>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d10c      	bne.n	80007b4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <HAL_TIM_Base_MspInit+0x60>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <HAL_TIM_Base_MspInit+0x60>)
 80007a0:	f043 0310 	orr.w	r3, r3, #16
 80007a4:	61d3      	str	r3, [r2, #28]
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <HAL_TIM_Base_MspInit+0x60>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f003 0310 	and.w	r3, r3, #16
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80007b2:	e010      	b.n	80007d6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <HAL_TIM_Base_MspInit+0x64>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d10b      	bne.n	80007d6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <HAL_TIM_Base_MspInit+0x60>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	4a09      	ldr	r2, [pc, #36]	; (80007e8 <HAL_TIM_Base_MspInit+0x60>)
 80007c4:	f043 0320 	orr.w	r3, r3, #32
 80007c8:	61d3      	str	r3, [r2, #28]
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <HAL_TIM_Base_MspInit+0x60>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	f003 0320 	and.w	r3, r3, #32
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
}
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40001000 	.word	0x40001000
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40001400 	.word	0x40001400

080007f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a11      	ldr	r2, [pc, #68]	; (8000854 <HAL_TIM_MspPostInit+0x64>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d11b      	bne.n	800084a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <HAL_TIM_MspPostInit+0x68>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <HAL_TIM_MspPostInit+0x68>)
 8000818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800081c:	6153      	str	r3, [r2, #20]
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <HAL_TIM_MspPostInit+0x68>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800082a:	2330      	movs	r3, #48	; 0x30
 800082c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800083a:	2302      	movs	r3, #2
 800083c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <HAL_TIM_MspPostInit+0x6c>)
 8000846:	f000 f9f3 	bl	8000c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800084a:	bf00      	nop
 800084c:	3720      	adds	r7, #32
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40000400 	.word	0x40000400
 8000858:	40021000 	.word	0x40021000
 800085c:	48000400 	.word	0x48000400

08000860 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 8000866:	4a15      	ldr	r2, [pc, #84]	; (80008bc <MX_USART2_UART_Init+0x5c>)
 8000868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 800086c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 80008a4:	f002 fe0a 	bl	80034bc <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ae:	f7ff fd75 	bl	800039c <Error_Handler>
  }

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000128 	.word	0x20000128
 80008bc:	40004400 	.word	0x40004400

080008c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a17      	ldr	r2, [pc, #92]	; (800093c <HAL_UART_MspInit+0x7c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d128      	bne.n	8000934 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <HAL_UART_MspInit+0x80>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	4a16      	ldr	r2, [pc, #88]	; (8000940 <HAL_UART_MspInit+0x80>)
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ec:	61d3      	str	r3, [r2, #28]
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <HAL_UART_MspInit+0x80>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_UART_MspInit+0x80>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <HAL_UART_MspInit+0x80>)
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	6153      	str	r3, [r2, #20]
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_UART_MspInit+0x80>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000912:	230c      	movs	r3, #12
 8000914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000922:	2307      	movs	r3, #7
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000930:	f000 f97e 	bl	8000c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40004400 	.word	0x40004400
 8000940:	40021000 	.word	0x40021000

08000944 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800097c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000948:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800094a:	e003      	b.n	8000954 <LoopCopyDataInit>

0800094c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800094e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000950:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000952:	3104      	adds	r1, #4

08000954 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000954:	480b      	ldr	r0, [pc, #44]	; (8000984 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000958:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800095a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800095c:	d3f6      	bcc.n	800094c <CopyDataInit>
	ldr	r2, =_sbss
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000960:	e002      	b.n	8000968 <LoopFillZerobss>

08000962 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000962:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000964:	f842 3b04 	str.w	r3, [r2], #4

08000968 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <LoopForever+0x16>)
	cmp	r2, r3
 800096a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800096c:	d3f9      	bcc.n	8000962 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800096e:	f7ff fd6f 	bl	8000450 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000972:	f003 f96d 	bl	8003c50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000976:	f7ff fc6d 	bl	8000254 <main>

0800097a <LoopForever>:

LoopForever:
    b LoopForever
 800097a:	e7fe      	b.n	800097a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800097c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000980:	08003d00 	.word	0x08003d00
	ldr	r0, =_sdata
 8000984:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000988:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800098c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000990:	200001ac 	.word	0x200001ac

08000994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC1_2_IRQHandler>
	...

08000998 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_Init+0x28>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <HAL_Init+0x28>)
 80009a2:	f043 0310 	orr.w	r3, r3, #16
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 f90d 	bl	8000bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 f808 	bl	80009c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b4:	f7ff fcfa 	bl	80003ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40022000 	.word	0x40022000

080009c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0x54>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_InitTick+0x58>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	fbb3 f3f1 	udiv	r3, r3, r1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f917 	bl	8000c16 <HAL_SYSTICK_Config>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00e      	b.n	8000a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d80a      	bhi.n	8000a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f000 f8ed 	bl	8000bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <HAL_InitTick+0x5c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e000      	b.n	8000a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000004 	.word	0x20000004

08000a24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_IncTick+0x20>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_IncTick+0x24>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <HAL_IncTick+0x24>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008
 8000a48:	200001a8 	.word	0x200001a8

08000a4c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <HAL_GetTick+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	200001a8 	.word	0x200001a8

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	db0a      	blt.n	8000af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	490c      	ldr	r1, [pc, #48]	; (8000b14 <__NVIC_SetPriority+0x4c>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	0112      	lsls	r2, r2, #4
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	440b      	add	r3, r1
 8000aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af0:	e00a      	b.n	8000b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4908      	ldr	r1, [pc, #32]	; (8000b18 <__NVIC_SetPriority+0x50>)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	f003 030f 	and.w	r3, r3, #15
 8000afe:	3b04      	subs	r3, #4
 8000b00:	0112      	lsls	r2, r2, #4
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	440b      	add	r3, r1
 8000b06:	761a      	strb	r2, [r3, #24]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000e100 	.word	0xe000e100
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b089      	sub	sp, #36	; 0x24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	f1c3 0307 	rsb	r3, r3, #7
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	bf28      	it	cs
 8000b3a:	2304      	movcs	r3, #4
 8000b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3304      	adds	r3, #4
 8000b42:	2b06      	cmp	r3, #6
 8000b44:	d902      	bls.n	8000b4c <NVIC_EncodePriority+0x30>
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3b03      	subs	r3, #3
 8000b4a:	e000      	b.n	8000b4e <NVIC_EncodePriority+0x32>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	f04f 32ff 	mov.w	r2, #4294967295
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	401a      	ands	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b64:	f04f 31ff 	mov.w	r1, #4294967295
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6e:	43d9      	mvns	r1, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	4313      	orrs	r3, r2
         );
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3724      	adds	r7, #36	; 0x24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b94:	d301      	bcc.n	8000b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00f      	b.n	8000bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <SysTick_Config+0x40>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba2:	210f      	movs	r1, #15
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f7ff ff8e 	bl	8000ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <SysTick_Config+0x40>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <SysTick_Config+0x40>)
 8000bb4:	2207      	movs	r2, #7
 8000bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	e000e010 	.word	0xe000e010

08000bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff47 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b086      	sub	sp, #24
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
 8000bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf0:	f7ff ff5c 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	68b9      	ldr	r1, [r7, #8]
 8000bfa:	6978      	ldr	r0, [r7, #20]
 8000bfc:	f7ff ff8e 	bl	8000b1c <NVIC_EncodePriority>
 8000c00:	4602      	mov	r2, r0
 8000c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff5d 	bl	8000ac8 <__NVIC_SetPriority>
}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff ffb0 	bl	8000b84 <SysTick_Config>
 8000c24:	4603      	mov	r3, r0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3e:	e160      	b.n	8000f02 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	2101      	movs	r1, #1
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 8152 	beq.w	8000efc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d003      	beq.n	8000c68 <HAL_GPIO_Init+0x38>
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b12      	cmp	r3, #18
 8000c66:	d123      	bne.n	8000cb0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	08da      	lsrs	r2, r3, #3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3208      	adds	r2, #8
 8000c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	f003 0307 	and.w	r3, r3, #7
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	220f      	movs	r2, #15
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	691a      	ldr	r2, [r3, #16]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	08da      	lsrs	r2, r3, #3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3208      	adds	r2, #8
 8000caa:	6939      	ldr	r1, [r7, #16]
 8000cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	2203      	movs	r2, #3
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0203 	and.w	r2, r3, #3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d00b      	beq.n	8000d04 <HAL_GPIO_Init+0xd4>
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d007      	beq.n	8000d04 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf8:	2b11      	cmp	r3, #17
 8000cfa:	d003      	beq.n	8000d04 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b12      	cmp	r3, #18
 8000d02:	d130      	bne.n	8000d66 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68da      	ldr	r2, [r3, #12]
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	091b      	lsrs	r3, r3, #4
 8000d50:	f003 0201 	and.w	r2, r3, #1
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	2203      	movs	r2, #3
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 80ac 	beq.w	8000efc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da4:	4b5e      	ldr	r3, [pc, #376]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a5d      	ldr	r2, [pc, #372]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b5b      	ldr	r3, [pc, #364]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dbc:	4a59      	ldr	r2, [pc, #356]	; (8000f24 <HAL_GPIO_Init+0x2f4>)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000de6:	d025      	beq.n	8000e34 <HAL_GPIO_Init+0x204>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a4f      	ldr	r2, [pc, #316]	; (8000f28 <HAL_GPIO_Init+0x2f8>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d01f      	beq.n	8000e30 <HAL_GPIO_Init+0x200>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a4e      	ldr	r2, [pc, #312]	; (8000f2c <HAL_GPIO_Init+0x2fc>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d019      	beq.n	8000e2c <HAL_GPIO_Init+0x1fc>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a4d      	ldr	r2, [pc, #308]	; (8000f30 <HAL_GPIO_Init+0x300>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d013      	beq.n	8000e28 <HAL_GPIO_Init+0x1f8>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a4c      	ldr	r2, [pc, #304]	; (8000f34 <HAL_GPIO_Init+0x304>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d00d      	beq.n	8000e24 <HAL_GPIO_Init+0x1f4>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a4b      	ldr	r2, [pc, #300]	; (8000f38 <HAL_GPIO_Init+0x308>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d007      	beq.n	8000e20 <HAL_GPIO_Init+0x1f0>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a4a      	ldr	r2, [pc, #296]	; (8000f3c <HAL_GPIO_Init+0x30c>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d101      	bne.n	8000e1c <HAL_GPIO_Init+0x1ec>
 8000e18:	2306      	movs	r3, #6
 8000e1a:	e00c      	b.n	8000e36 <HAL_GPIO_Init+0x206>
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	e00a      	b.n	8000e36 <HAL_GPIO_Init+0x206>
 8000e20:	2305      	movs	r3, #5
 8000e22:	e008      	b.n	8000e36 <HAL_GPIO_Init+0x206>
 8000e24:	2304      	movs	r3, #4
 8000e26:	e006      	b.n	8000e36 <HAL_GPIO_Init+0x206>
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e004      	b.n	8000e36 <HAL_GPIO_Init+0x206>
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	e002      	b.n	8000e36 <HAL_GPIO_Init+0x206>
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <HAL_GPIO_Init+0x206>
 8000e34:	2300      	movs	r3, #0
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	f002 0203 	and.w	r2, r2, #3
 8000e3c:	0092      	lsls	r2, r2, #2
 8000e3e:	4093      	lsls	r3, r2
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e46:	4937      	ldr	r1, [pc, #220]	; (8000f24 <HAL_GPIO_Init+0x2f4>)
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e54:	4b3a      	ldr	r3, [pc, #232]	; (8000f40 <HAL_GPIO_Init+0x310>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e78:	4a31      	ldr	r2, [pc, #196]	; (8000f40 <HAL_GPIO_Init+0x310>)
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e7e:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <HAL_GPIO_Init+0x310>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ea2:	4a27      	ldr	r2, [pc, #156]	; (8000f40 <HAL_GPIO_Init+0x310>)
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ea8:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <HAL_GPIO_Init+0x310>)
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ecc:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <HAL_GPIO_Init+0x310>)
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <HAL_GPIO_Init+0x310>)
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <HAL_GPIO_Init+0x310>)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3301      	adds	r3, #1
 8000f00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	fa22 f303 	lsr.w	r3, r2, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f47f ae97 	bne.w	8000c40 <HAL_GPIO_Init+0x10>
  }
}
 8000f12:	bf00      	nop
 8000f14:	371c      	adds	r7, #28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010000 	.word	0x40010000
 8000f28:	48000400 	.word	0x48000400
 8000f2c:	48000800 	.word	0x48000800
 8000f30:	48000c00 	.word	0x48000c00
 8000f34:	48001000 	.word	0x48001000
 8000f38:	48001400 	.word	0x48001400
 8000f3c:	48001800 	.word	0x48001800
 8000f40:	40010400 	.word	0x40010400

08000f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
 8000f50:	4613      	mov	r3, r2
 8000f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f54:	787b      	ldrb	r3, [r7, #1]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f5a:	887a      	ldrh	r2, [r7, #2]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f60:	e002      	b.n	8000f68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f62:	887a      	ldrh	r2, [r7, #2]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f000 bf01 	b.w	8001d90 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 8160 	beq.w	800125e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f9e:	4bae      	ldr	r3, [pc, #696]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	d00c      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000faa:	4bab      	ldr	r3, [pc, #684]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 030c 	and.w	r3, r3, #12
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	d159      	bne.n	800106a <HAL_RCC_OscConfig+0xf6>
 8000fb6:	4ba8      	ldr	r3, [pc, #672]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc2:	d152      	bne.n	800106a <HAL_RCC_OscConfig+0xf6>
 8000fc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fcc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000fd0:	fa93 f3a3 	rbit	r3, r3
 8000fd4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fd8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fdc:	fab3 f383 	clz	r3, r3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d102      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x82>
 8000ff0:	4b99      	ldr	r3, [pc, #612]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	e015      	b.n	8001022 <HAL_RCC_OscConfig+0xae>
 8000ff6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ffa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001002:	fa93 f3a3 	rbit	r3, r3
 8001006:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800100a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001012:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001016:	fa93 f3a3 	rbit	r3, r3
 800101a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800101e:	4b8e      	ldr	r3, [pc, #568]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001026:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800102a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800102e:	fa92 f2a2 	rbit	r2, r2
 8001032:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001036:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800103a:	fab2 f282 	clz	r2, r2
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	f042 0220 	orr.w	r2, r2, #32
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	f002 021f 	and.w	r2, r2, #31
 800104a:	2101      	movs	r1, #1
 800104c:	fa01 f202 	lsl.w	r2, r1, r2
 8001050:	4013      	ands	r3, r2
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 8102 	beq.w	800125c <HAL_RCC_OscConfig+0x2e8>
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f040 80fc 	bne.w	800125c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	f000 be93 	b.w	8001d90 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001074:	d106      	bne.n	8001084 <HAL_RCC_OscConfig+0x110>
 8001076:	4b78      	ldr	r3, [pc, #480]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a77      	ldr	r2, [pc, #476]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 800107c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e030      	b.n	80010e6 <HAL_RCC_OscConfig+0x172>
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x134>
 800108e:	4b72      	ldr	r3, [pc, #456]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a71      	ldr	r2, [pc, #452]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 8001094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	4b6f      	ldr	r3, [pc, #444]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a6e      	ldr	r2, [pc, #440]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 80010a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e01e      	b.n	80010e6 <HAL_RCC_OscConfig+0x172>
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b2:	d10c      	bne.n	80010ce <HAL_RCC_OscConfig+0x15a>
 80010b4:	4b68      	ldr	r3, [pc, #416]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a67      	ldr	r2, [pc, #412]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 80010ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b65      	ldr	r3, [pc, #404]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a64      	ldr	r2, [pc, #400]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 80010c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e00b      	b.n	80010e6 <HAL_RCC_OscConfig+0x172>
 80010ce:	4b62      	ldr	r3, [pc, #392]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a61      	ldr	r2, [pc, #388]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 80010d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	4b5f      	ldr	r3, [pc, #380]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a5e      	ldr	r2, [pc, #376]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 80010e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d059      	beq.n	80011a4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fcac 	bl	8000a4c <HAL_GetTick>
 80010f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f8:	e00a      	b.n	8001110 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010fa:	f7ff fca7 	bl	8000a4c <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	; 0x64
 8001108:	d902      	bls.n	8001110 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	f000 be40 	b.w	8001d90 <HAL_RCC_OscConfig+0xe1c>
 8001110:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001114:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001118:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800111c:	fa93 f3a3 	rbit	r3, r3
 8001120:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001124:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001128:	fab3 f383 	clz	r3, r3
 800112c:	b2db      	uxtb	r3, r3
 800112e:	095b      	lsrs	r3, r3, #5
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b01      	cmp	r3, #1
 800113a:	d102      	bne.n	8001142 <HAL_RCC_OscConfig+0x1ce>
 800113c:	4b46      	ldr	r3, [pc, #280]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	e015      	b.n	800116e <HAL_RCC_OscConfig+0x1fa>
 8001142:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001146:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800114e:	fa93 f3a3 	rbit	r3, r3
 8001152:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001156:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800115a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800115e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001162:	fa93 f3a3 	rbit	r3, r3
 8001166:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800116a:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001172:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001176:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800117a:	fa92 f2a2 	rbit	r2, r2
 800117e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001182:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001186:	fab2 f282 	clz	r2, r2
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	f042 0220 	orr.w	r2, r2, #32
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	f002 021f 	and.w	r2, r2, #31
 8001196:	2101      	movs	r1, #1
 8001198:	fa01 f202 	lsl.w	r2, r1, r2
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0ab      	beq.n	80010fa <HAL_RCC_OscConfig+0x186>
 80011a2:	e05c      	b.n	800125e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fc52 	bl	8000a4c <HAL_GetTick>
 80011a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ac:	e00a      	b.n	80011c4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ae:	f7ff fc4d 	bl	8000a4c <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d902      	bls.n	80011c4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	f000 bde6 	b.w	8001d90 <HAL_RCC_OscConfig+0xe1c>
 80011c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80011d0:	fa93 f3a3 	rbit	r3, r3
 80011d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80011d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011dc:	fab3 f383 	clz	r3, r3
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d102      	bne.n	80011f6 <HAL_RCC_OscConfig+0x282>
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	e015      	b.n	8001222 <HAL_RCC_OscConfig+0x2ae>
 80011f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011fa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001202:	fa93 f3a3 	rbit	r3, r3
 8001206:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800120a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800120e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001212:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001216:	fa93 f3a3 	rbit	r3, r3
 800121a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_RCC_OscConfig+0x2e4>)
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001222:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001226:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800122a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800122e:	fa92 f2a2 	rbit	r2, r2
 8001232:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001236:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800123a:	fab2 f282 	clz	r2, r2
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	f042 0220 	orr.w	r2, r2, #32
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	f002 021f 	and.w	r2, r2, #31
 800124a:	2101      	movs	r1, #1
 800124c:	fa01 f202 	lsl.w	r2, r1, r2
 8001250:	4013      	ands	r3, r2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1ab      	bne.n	80011ae <HAL_RCC_OscConfig+0x23a>
 8001256:	e002      	b.n	800125e <HAL_RCC_OscConfig+0x2ea>
 8001258:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 8170 	beq.w	800154e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800126e:	4bd0      	ldr	r3, [pc, #832]	; (80015b0 <HAL_RCC_OscConfig+0x63c>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00c      	beq.n	8001294 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800127a:	4bcd      	ldr	r3, [pc, #820]	; (80015b0 <HAL_RCC_OscConfig+0x63c>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b08      	cmp	r3, #8
 8001284:	d16d      	bne.n	8001362 <HAL_RCC_OscConfig+0x3ee>
 8001286:	4bca      	ldr	r3, [pc, #808]	; (80015b0 <HAL_RCC_OscConfig+0x63c>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800128e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001292:	d166      	bne.n	8001362 <HAL_RCC_OscConfig+0x3ee>
 8001294:	2302      	movs	r3, #2
 8001296:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800129e:	fa93 f3a3 	rbit	r3, r3
 80012a2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80012a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012aa:	fab3 f383 	clz	r3, r3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	095b      	lsrs	r3, r3, #5
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d102      	bne.n	80012c4 <HAL_RCC_OscConfig+0x350>
 80012be:	4bbc      	ldr	r3, [pc, #752]	; (80015b0 <HAL_RCC_OscConfig+0x63c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	e013      	b.n	80012ec <HAL_RCC_OscConfig+0x378>
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80012ce:	fa93 f3a3 	rbit	r3, r3
 80012d2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80012d6:	2302      	movs	r3, #2
 80012d8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012dc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80012e8:	4bb1      	ldr	r3, [pc, #708]	; (80015b0 <HAL_RCC_OscConfig+0x63c>)
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	2202      	movs	r2, #2
 80012ee:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80012f2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80012f6:	fa92 f2a2 	rbit	r2, r2
 80012fa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80012fe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001302:	fab2 f282 	clz	r2, r2
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	f042 0220 	orr.w	r2, r2, #32
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	f002 021f 	and.w	r2, r2, #31
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d007      	beq.n	800132e <HAL_RCC_OscConfig+0x3ba>
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d002      	beq.n	800132e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	f000 bd31 	b.w	8001d90 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	4ba0      	ldr	r3, [pc, #640]	; (80015b0 <HAL_RCC_OscConfig+0x63c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	21f8      	movs	r1, #248	; 0xf8
 800133e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001346:	fa91 f1a1 	rbit	r1, r1
 800134a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800134e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001352:	fab1 f181 	clz	r1, r1
 8001356:	b2c9      	uxtb	r1, r1
 8001358:	408b      	lsls	r3, r1
 800135a:	4995      	ldr	r1, [pc, #596]	; (80015b0 <HAL_RCC_OscConfig+0x63c>)
 800135c:	4313      	orrs	r3, r2
 800135e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001360:	e0f5      	b.n	800154e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 8085 	beq.w	8001478 <HAL_RCC_OscConfig+0x504>
 800136e:	2301      	movs	r3, #1
 8001370:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001374:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001378:	fa93 f3a3 	rbit	r3, r3
 800137c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001380:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001384:	fab3 f383 	clz	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800138e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	461a      	mov	r2, r3
 8001396:	2301      	movs	r3, #1
 8001398:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139a:	f7ff fb57 	bl	8000a4c <HAL_GetTick>
 800139e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a2:	e00a      	b.n	80013ba <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a4:	f7ff fb52 	bl	8000a4c <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d902      	bls.n	80013ba <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	f000 bceb 	b.w	8001d90 <HAL_RCC_OscConfig+0xe1c>
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80013c4:	fa93 f3a3 	rbit	r3, r3
 80013c8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80013cc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	fab3 f383 	clz	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d102      	bne.n	80013ea <HAL_RCC_OscConfig+0x476>
 80013e4:	4b72      	ldr	r3, [pc, #456]	; (80015b0 <HAL_RCC_OscConfig+0x63c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	e013      	b.n	8001412 <HAL_RCC_OscConfig+0x49e>
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80013f4:	fa93 f3a3 	rbit	r3, r3
 80013f8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80013fc:	2302      	movs	r3, #2
 80013fe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001402:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001406:	fa93 f3a3 	rbit	r3, r3
 800140a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800140e:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <HAL_RCC_OscConfig+0x63c>)
 8001410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001412:	2202      	movs	r2, #2
 8001414:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001418:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800141c:	fa92 f2a2 	rbit	r2, r2
 8001420:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001424:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001428:	fab2 f282 	clz	r2, r2
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	f042 0220 	orr.w	r2, r2, #32
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	f002 021f 	and.w	r2, r2, #31
 8001438:	2101      	movs	r1, #1
 800143a:	fa01 f202 	lsl.w	r2, r1, r2
 800143e:	4013      	ands	r3, r2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0af      	beq.n	80013a4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	4b5a      	ldr	r3, [pc, #360]	; (80015b0 <HAL_RCC_OscConfig+0x63c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	21f8      	movs	r1, #248	; 0xf8
 8001454:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001458:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800145c:	fa91 f1a1 	rbit	r1, r1
 8001460:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001464:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001468:	fab1 f181 	clz	r1, r1
 800146c:	b2c9      	uxtb	r1, r1
 800146e:	408b      	lsls	r3, r1
 8001470:	494f      	ldr	r1, [pc, #316]	; (80015b0 <HAL_RCC_OscConfig+0x63c>)
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]
 8001476:	e06a      	b.n	800154e <HAL_RCC_OscConfig+0x5da>
 8001478:	2301      	movs	r3, #1
 800147a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001482:	fa93 f3a3 	rbit	r3, r3
 8001486:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800148a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148e:	fab3 f383 	clz	r3, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001498:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	461a      	mov	r2, r3
 80014a0:	2300      	movs	r3, #0
 80014a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fad2 	bl	8000a4c <HAL_GetTick>
 80014a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ac:	e00a      	b.n	80014c4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ae:	f7ff facd 	bl	8000a4c <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d902      	bls.n	80014c4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	f000 bc66 	b.w	8001d90 <HAL_RCC_OscConfig+0xe1c>
 80014c4:	2302      	movs	r3, #2
 80014c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80014ce:	fa93 f3a3 	rbit	r3, r3
 80014d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80014d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014da:	fab3 f383 	clz	r3, r3
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	095b      	lsrs	r3, r3, #5
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d102      	bne.n	80014f4 <HAL_RCC_OscConfig+0x580>
 80014ee:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <HAL_RCC_OscConfig+0x63c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	e013      	b.n	800151c <HAL_RCC_OscConfig+0x5a8>
 80014f4:	2302      	movs	r3, #2
 80014f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014fe:	fa93 f3a3 	rbit	r3, r3
 8001502:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001506:	2302      	movs	r3, #2
 8001508:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800150c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001510:	fa93 f3a3 	rbit	r3, r3
 8001514:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001518:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <HAL_RCC_OscConfig+0x63c>)
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	2202      	movs	r2, #2
 800151e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001522:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001526:	fa92 f2a2 	rbit	r2, r2
 800152a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800152e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001532:	fab2 f282 	clz	r2, r2
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	f042 0220 	orr.w	r2, r2, #32
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	f002 021f 	and.w	r2, r2, #31
 8001542:	2101      	movs	r1, #1
 8001544:	fa01 f202 	lsl.w	r2, r1, r2
 8001548:	4013      	ands	r3, r2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1af      	bne.n	80014ae <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80da 	beq.w	8001712 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d069      	beq.n	800163c <HAL_RCC_OscConfig+0x6c8>
 8001568:	2301      	movs	r3, #1
 800156a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001572:	fa93 f3a3 	rbit	r3, r3
 8001576:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800157a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157e:	fab3 f383 	clz	r3, r3
 8001582:	b2db      	uxtb	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_RCC_OscConfig+0x640>)
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	461a      	mov	r2, r3
 800158e:	2301      	movs	r3, #1
 8001590:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001592:	f7ff fa5b 	bl	8000a4c <HAL_GetTick>
 8001596:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	e00d      	b.n	80015b8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff fa56 	bl	8000a4c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d905      	bls.n	80015b8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e3ef      	b.n	8001d90 <HAL_RCC_OscConfig+0xe1c>
 80015b0:	40021000 	.word	0x40021000
 80015b4:	10908120 	.word	0x10908120
 80015b8:	2302      	movs	r3, #2
 80015ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015c2:	fa93 f2a3 	rbit	r2, r3
 80015c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80015d0:	2202      	movs	r2, #2
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	fa93 f2a3 	rbit	r2, r3
 80015de:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015e8:	2202      	movs	r2, #2
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	fa93 f2a3 	rbit	r2, r3
 80015f6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015fa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fc:	4ba4      	ldr	r3, [pc, #656]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 80015fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001600:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001604:	2102      	movs	r1, #2
 8001606:	6019      	str	r1, [r3, #0]
 8001608:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	fa93 f1a3 	rbit	r1, r3
 8001612:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001616:	6019      	str	r1, [r3, #0]
  return result;
 8001618:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	fab3 f383 	clz	r3, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f003 031f 	and.w	r3, r3, #31
 800162e:	2101      	movs	r1, #1
 8001630:	fa01 f303 	lsl.w	r3, r1, r3
 8001634:	4013      	ands	r3, r2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0b0      	beq.n	800159c <HAL_RCC_OscConfig+0x628>
 800163a:	e06a      	b.n	8001712 <HAL_RCC_OscConfig+0x79e>
 800163c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001640:	2201      	movs	r2, #1
 8001642:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001644:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	fa93 f2a3 	rbit	r2, r3
 800164e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001652:	601a      	str	r2, [r3, #0]
  return result;
 8001654:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001658:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165a:	fab3 f383 	clz	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	4b8c      	ldr	r3, [pc, #560]	; (8001894 <HAL_RCC_OscConfig+0x920>)
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	461a      	mov	r2, r3
 800166a:	2300      	movs	r3, #0
 800166c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166e:	f7ff f9ed 	bl	8000a4c <HAL_GetTick>
 8001672:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001676:	e009      	b.n	800168c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001678:	f7ff f9e8 	bl	8000a4c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e381      	b.n	8001d90 <HAL_RCC_OscConfig+0xe1c>
 800168c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001690:	2202      	movs	r2, #2
 8001692:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001694:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	fa93 f2a3 	rbit	r2, r3
 800169e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016a8:	2202      	movs	r2, #2
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	fa93 f2a3 	rbit	r2, r3
 80016b6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016c0:	2202      	movs	r2, #2
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	fa93 f2a3 	rbit	r2, r3
 80016ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d4:	4b6e      	ldr	r3, [pc, #440]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 80016d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016dc:	2102      	movs	r1, #2
 80016de:	6019      	str	r1, [r3, #0]
 80016e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	fa93 f1a3 	rbit	r1, r3
 80016ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016ee:	6019      	str	r1, [r3, #0]
  return result;
 80016f0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	fab3 f383 	clz	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001700:	b2db      	uxtb	r3, r3
 8001702:	f003 031f 	and.w	r3, r3, #31
 8001706:	2101      	movs	r1, #1
 8001708:	fa01 f303 	lsl.w	r3, r1, r3
 800170c:	4013      	ands	r3, r2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1b2      	bne.n	8001678 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8157 	beq.w	80019d0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001728:	4b59      	ldr	r3, [pc, #356]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d112      	bne.n	800175a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001734:	4b56      	ldr	r3, [pc, #344]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	4a55      	ldr	r2, [pc, #340]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 800173a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173e:	61d3      	str	r3, [r2, #28]
 8001740:	4b53      	ldr	r3, [pc, #332]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001754:	2301      	movs	r3, #1
 8001756:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175a:	4b4f      	ldr	r3, [pc, #316]	; (8001898 <HAL_RCC_OscConfig+0x924>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d11a      	bne.n	800179c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001766:	4b4c      	ldr	r3, [pc, #304]	; (8001898 <HAL_RCC_OscConfig+0x924>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a4b      	ldr	r2, [pc, #300]	; (8001898 <HAL_RCC_OscConfig+0x924>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001770:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001772:	f7ff f96b 	bl	8000a4c <HAL_GetTick>
 8001776:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177a:	e009      	b.n	8001790 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177c:	f7ff f966 	bl	8000a4c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b64      	cmp	r3, #100	; 0x64
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e2ff      	b.n	8001d90 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001790:	4b41      	ldr	r3, [pc, #260]	; (8001898 <HAL_RCC_OscConfig+0x924>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0ef      	beq.n	800177c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d106      	bne.n	80017b4 <HAL_RCC_OscConfig+0x840>
 80017a6:	4b3a      	ldr	r3, [pc, #232]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	4a39      	ldr	r2, [pc, #228]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6213      	str	r3, [r2, #32]
 80017b2:	e02f      	b.n	8001814 <HAL_RCC_OscConfig+0x8a0>
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x864>
 80017be:	4b34      	ldr	r3, [pc, #208]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4a33      	ldr	r2, [pc, #204]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	6213      	str	r3, [r2, #32]
 80017ca:	4b31      	ldr	r3, [pc, #196]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4a30      	ldr	r2, [pc, #192]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 80017d0:	f023 0304 	bic.w	r3, r3, #4
 80017d4:	6213      	str	r3, [r2, #32]
 80017d6:	e01d      	b.n	8001814 <HAL_RCC_OscConfig+0x8a0>
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b05      	cmp	r3, #5
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x888>
 80017e2:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	4a2a      	ldr	r2, [pc, #168]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6213      	str	r3, [r2, #32]
 80017ee:	4b28      	ldr	r3, [pc, #160]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	4a27      	ldr	r2, [pc, #156]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6213      	str	r3, [r2, #32]
 80017fa:	e00b      	b.n	8001814 <HAL_RCC_OscConfig+0x8a0>
 80017fc:	4b24      	ldr	r3, [pc, #144]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4a23      	ldr	r2, [pc, #140]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	6213      	str	r3, [r2, #32]
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4a20      	ldr	r2, [pc, #128]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 800180e:	f023 0304 	bic.w	r3, r3, #4
 8001812:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d06a      	beq.n	80018f4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181e:	f7ff f915 	bl	8000a4c <HAL_GetTick>
 8001822:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001826:	e00b      	b.n	8001840 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001828:	f7ff f910 	bl	8000a4c <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	; 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e2a7      	b.n	8001d90 <HAL_RCC_OscConfig+0xe1c>
 8001840:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001844:	2202      	movs	r2, #2
 8001846:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	fa93 f2a3 	rbit	r2, r3
 8001852:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800185c:	2202      	movs	r2, #2
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	fa93 f2a3 	rbit	r2, r3
 800186a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800186e:	601a      	str	r2, [r3, #0]
  return result;
 8001870:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001874:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001876:	fab3 f383 	clz	r3, r3
 800187a:	b2db      	uxtb	r3, r3
 800187c:	095b      	lsrs	r3, r3, #5
 800187e:	b2db      	uxtb	r3, r3
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d108      	bne.n	800189c <HAL_RCC_OscConfig+0x928>
 800188a:	4b01      	ldr	r3, [pc, #4]	; (8001890 <HAL_RCC_OscConfig+0x91c>)
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	e013      	b.n	80018b8 <HAL_RCC_OscConfig+0x944>
 8001890:	40021000 	.word	0x40021000
 8001894:	10908120 	.word	0x10908120
 8001898:	40007000 	.word	0x40007000
 800189c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80018a0:	2202      	movs	r2, #2
 80018a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	fa93 f2a3 	rbit	r2, r3
 80018ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	4bc0      	ldr	r3, [pc, #768]	; (8001bb8 <HAL_RCC_OscConfig+0xc44>)
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80018bc:	2102      	movs	r1, #2
 80018be:	6011      	str	r1, [r2, #0]
 80018c0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	fa92 f1a2 	rbit	r1, r2
 80018ca:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80018ce:	6011      	str	r1, [r2, #0]
  return result;
 80018d0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	fab2 f282 	clz	r2, r2
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	f002 021f 	and.w	r2, r2, #31
 80018e6:	2101      	movs	r1, #1
 80018e8:	fa01 f202 	lsl.w	r2, r1, r2
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d09a      	beq.n	8001828 <HAL_RCC_OscConfig+0x8b4>
 80018f2:	e063      	b.n	80019bc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f4:	f7ff f8aa 	bl	8000a4c <HAL_GetTick>
 80018f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fc:	e00b      	b.n	8001916 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fe:	f7ff f8a5 	bl	8000a4c <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e23c      	b.n	8001d90 <HAL_RCC_OscConfig+0xe1c>
 8001916:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800191a:	2202      	movs	r2, #2
 800191c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	fa93 f2a3 	rbit	r2, r3
 8001928:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001932:	2202      	movs	r2, #2
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fa93 f2a3 	rbit	r2, r3
 8001940:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001944:	601a      	str	r2, [r3, #0]
  return result;
 8001946:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800194a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f043 0302 	orr.w	r3, r3, #2
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d102      	bne.n	8001966 <HAL_RCC_OscConfig+0x9f2>
 8001960:	4b95      	ldr	r3, [pc, #596]	; (8001bb8 <HAL_RCC_OscConfig+0xc44>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	e00d      	b.n	8001982 <HAL_RCC_OscConfig+0xa0e>
 8001966:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800196a:	2202      	movs	r2, #2
 800196c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	fa93 f2a3 	rbit	r2, r3
 8001978:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	4b8e      	ldr	r3, [pc, #568]	; (8001bb8 <HAL_RCC_OscConfig+0xc44>)
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001986:	2102      	movs	r1, #2
 8001988:	6011      	str	r1, [r2, #0]
 800198a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	fa92 f1a2 	rbit	r1, r2
 8001994:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001998:	6011      	str	r1, [r2, #0]
  return result;
 800199a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	fab2 f282 	clz	r2, r2
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	f002 021f 	and.w	r2, r2, #31
 80019b0:	2101      	movs	r1, #1
 80019b2:	fa01 f202 	lsl.w	r2, r1, r2
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1a0      	bne.n	80018fe <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019bc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d105      	bne.n	80019d0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c4:	4b7c      	ldr	r3, [pc, #496]	; (8001bb8 <HAL_RCC_OscConfig+0xc44>)
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	4a7b      	ldr	r2, [pc, #492]	; (8001bb8 <HAL_RCC_OscConfig+0xc44>)
 80019ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 81d9 	beq.w	8001d8e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019dc:	4b76      	ldr	r3, [pc, #472]	; (8001bb8 <HAL_RCC_OscConfig+0xc44>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	f000 81a6 	beq.w	8001d36 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	f040 811e 	bne.w	8001c32 <HAL_RCC_OscConfig+0xcbe>
 80019f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	fa93 f2a3 	rbit	r2, r3
 8001a0a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a0e:	601a      	str	r2, [r3, #0]
  return result;
 8001a10:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a14:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	461a      	mov	r2, r3
 8001a28:	2300      	movs	r3, #0
 8001a2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff f80e 	bl	8000a4c <HAL_GetTick>
 8001a30:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a34:	e009      	b.n	8001a4a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff f809 	bl	8000a4c <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e1a2      	b.n	8001d90 <HAL_RCC_OscConfig+0xe1c>
 8001a4a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	fa93 f2a3 	rbit	r2, r3
 8001a5e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a62:	601a      	str	r2, [r3, #0]
  return result;
 8001a64:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6a:	fab3 f383 	clz	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	095b      	lsrs	r3, r3, #5
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d102      	bne.n	8001a84 <HAL_RCC_OscConfig+0xb10>
 8001a7e:	4b4e      	ldr	r3, [pc, #312]	; (8001bb8 <HAL_RCC_OscConfig+0xc44>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	e01b      	b.n	8001abc <HAL_RCC_OscConfig+0xb48>
 8001a84:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	fa93 f2a3 	rbit	r2, r3
 8001a98:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001aa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fa93 f2a3 	rbit	r2, r3
 8001ab2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	4b3f      	ldr	r3, [pc, #252]	; (8001bb8 <HAL_RCC_OscConfig+0xc44>)
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001ac0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ac4:	6011      	str	r1, [r2, #0]
 8001ac6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	fa92 f1a2 	rbit	r1, r2
 8001ad0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ad4:	6011      	str	r1, [r2, #0]
  return result;
 8001ad6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	fab2 f282 	clz	r2, r2
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	f042 0220 	orr.w	r2, r2, #32
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	f002 021f 	and.w	r2, r2, #31
 8001aec:	2101      	movs	r1, #1
 8001aee:	fa01 f202 	lsl.w	r2, r1, r2
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d19e      	bne.n	8001a36 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af8:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <HAL_RCC_OscConfig+0xc44>)
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	f023 020f 	bic.w	r2, r3, #15
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	492c      	ldr	r1, [pc, #176]	; (8001bb8 <HAL_RCC_OscConfig+0xc44>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001b0c:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <HAL_RCC_OscConfig+0xc44>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6a19      	ldr	r1, [r3, #32]
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	430b      	orrs	r3, r1
 8001b22:	4925      	ldr	r1, [pc, #148]	; (8001bb8 <HAL_RCC_OscConfig+0xc44>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
 8001b28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	fa93 f2a3 	rbit	r2, r3
 8001b3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b40:	601a      	str	r2, [r3, #0]
  return result;
 8001b42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b46:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7fe ff75 	bl	8000a4c <HAL_GetTick>
 8001b62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b66:	e009      	b.n	8001b7c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b68:	f7fe ff70 	bl	8000a4c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e109      	b.n	8001d90 <HAL_RCC_OscConfig+0xe1c>
 8001b7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	fa93 f2a3 	rbit	r2, r3
 8001b90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b94:	601a      	str	r2, [r3, #0]
  return result;
 8001b96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b9a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b9c:	fab3 f383 	clz	r3, r3
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	095b      	lsrs	r3, r3, #5
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d105      	bne.n	8001bbc <HAL_RCC_OscConfig+0xc48>
 8001bb0:	4b01      	ldr	r3, [pc, #4]	; (8001bb8 <HAL_RCC_OscConfig+0xc44>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	e01e      	b.n	8001bf4 <HAL_RCC_OscConfig+0xc80>
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	fa93 f2a3 	rbit	r2, r3
 8001bd0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	fa93 f2a3 	rbit	r2, r3
 8001bea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	4b6a      	ldr	r3, [pc, #424]	; (8001d9c <HAL_RCC_OscConfig+0xe28>)
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001bf8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bfc:	6011      	str	r1, [r2, #0]
 8001bfe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	fa92 f1a2 	rbit	r1, r2
 8001c08:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c0c:	6011      	str	r1, [r2, #0]
  return result;
 8001c0e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	fab2 f282 	clz	r2, r2
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	f042 0220 	orr.w	r2, r2, #32
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	f002 021f 	and.w	r2, r2, #31
 8001c24:	2101      	movs	r1, #1
 8001c26:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d09b      	beq.n	8001b68 <HAL_RCC_OscConfig+0xbf4>
 8001c30:	e0ad      	b.n	8001d8e <HAL_RCC_OscConfig+0xe1a>
 8001c32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	fa93 f2a3 	rbit	r2, r3
 8001c46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c4a:	601a      	str	r2, [r3, #0]
  return result;
 8001c4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c50:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	461a      	mov	r2, r3
 8001c64:	2300      	movs	r3, #0
 8001c66:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7fe fef0 	bl	8000a4c <HAL_GetTick>
 8001c6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c70:	e009      	b.n	8001c86 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c72:	f7fe feeb 	bl	8000a4c <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e084      	b.n	8001d90 <HAL_RCC_OscConfig+0xe1c>
 8001c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	fa93 f2a3 	rbit	r2, r3
 8001c9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c9e:	601a      	str	r2, [r3, #0]
  return result;
 8001ca0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ca4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	095b      	lsrs	r3, r3, #5
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d102      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xd4c>
 8001cba:	4b38      	ldr	r3, [pc, #224]	; (8001d9c <HAL_RCC_OscConfig+0xe28>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	e01b      	b.n	8001cf8 <HAL_RCC_OscConfig+0xd84>
 8001cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	fa93 f2a3 	rbit	r2, r3
 8001cd4:	f107 0320 	add.w	r3, r7, #32
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	fa93 f2a3 	rbit	r2, r3
 8001cee:	f107 0318 	add.w	r3, r7, #24
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <HAL_RCC_OscConfig+0xe28>)
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	f107 0214 	add.w	r2, r7, #20
 8001cfc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d00:	6011      	str	r1, [r2, #0]
 8001d02:	f107 0214 	add.w	r2, r7, #20
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	fa92 f1a2 	rbit	r1, r2
 8001d0c:	f107 0210 	add.w	r2, r7, #16
 8001d10:	6011      	str	r1, [r2, #0]
  return result;
 8001d12:	f107 0210 	add.w	r2, r7, #16
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	fab2 f282 	clz	r2, r2
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	f042 0220 	orr.w	r2, r2, #32
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	f002 021f 	and.w	r2, r2, #31
 8001d28:	2101      	movs	r1, #1
 8001d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d19e      	bne.n	8001c72 <HAL_RCC_OscConfig+0xcfe>
 8001d34:	e02b      	b.n	8001d8e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e025      	b.n	8001d90 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <HAL_RCC_OscConfig+0xe28>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <HAL_RCC_OscConfig+0xe28>)
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d58:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d111      	bne.n	8001d8a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d108      	bne.n	8001d8a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d7c:	f003 020f 	and.w	r2, r3, #15
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d001      	beq.n	8001d8e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000

08001da0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b09e      	sub	sp, #120	; 0x78
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e162      	b.n	800207e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db8:	4b90      	ldr	r3, [pc, #576]	; (8001ffc <HAL_RCC_ClockConfig+0x25c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d910      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc6:	4b8d      	ldr	r3, [pc, #564]	; (8001ffc <HAL_RCC_ClockConfig+0x25c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 0207 	bic.w	r2, r3, #7
 8001dce:	498b      	ldr	r1, [pc, #556]	; (8001ffc <HAL_RCC_ClockConfig+0x25c>)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd6:	4b89      	ldr	r3, [pc, #548]	; (8001ffc <HAL_RCC_ClockConfig+0x25c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e14a      	b.n	800207e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d008      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df4:	4b82      	ldr	r3, [pc, #520]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	497f      	ldr	r1, [pc, #508]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 80dc 	beq.w	8001fcc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d13c      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xf6>
 8001e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e20:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d102      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xa6>
 8001e40:	4b6f      	ldr	r3, [pc, #444]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	e00f      	b.n	8001e66 <HAL_RCC_ClockConfig+0xc6>
 8001e46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	667b      	str	r3, [r7, #100]	; 0x64
 8001e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e58:	663b      	str	r3, [r7, #96]	; 0x60
 8001e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e62:	4b67      	ldr	r3, [pc, #412]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e6a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e6e:	fa92 f2a2 	rbit	r2, r2
 8001e72:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e76:	fab2 f282 	clz	r2, r2
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	f042 0220 	orr.w	r2, r2, #32
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	f002 021f 	and.w	r2, r2, #31
 8001e86:	2101      	movs	r1, #1
 8001e88:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d17b      	bne.n	8001f8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e0f3      	b.n	800207e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d13c      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x178>
 8001e9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d102      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x128>
 8001ec2:	4b4f      	ldr	r3, [pc, #316]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	e00f      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x148>
 8001ec8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ecc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ed6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eda:	643b      	str	r3, [r7, #64]	; 0x40
 8001edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ee4:	4b46      	ldr	r3, [pc, #280]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eec:	63ba      	str	r2, [r7, #56]	; 0x38
 8001eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ef0:	fa92 f2a2 	rbit	r2, r2
 8001ef4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ef8:	fab2 f282 	clz	r2, r2
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	f042 0220 	orr.w	r2, r2, #32
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	f002 021f 	and.w	r2, r2, #31
 8001f08:	2101      	movs	r1, #1
 8001f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d13a      	bne.n	8001f8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0b2      	b.n	800207e <HAL_RCC_ClockConfig+0x2de>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d102      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x1a0>
 8001f3a:	4b31      	ldr	r3, [pc, #196]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	e00d      	b.n	8001f5c <HAL_RCC_ClockConfig+0x1bc>
 8001f40:	2302      	movs	r3, #2
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	623b      	str	r3, [r7, #32]
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	61fb      	str	r3, [r7, #28]
 8001f58:	4b29      	ldr	r3, [pc, #164]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	61ba      	str	r2, [r7, #24]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	fa92 f2a2 	rbit	r2, r2
 8001f66:	617a      	str	r2, [r7, #20]
  return result;
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	fab2 f282 	clz	r2, r2
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	f042 0220 	orr.w	r2, r2, #32
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	f002 021f 	and.w	r2, r2, #31
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e079      	b.n	800207e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f023 0203 	bic.w	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	491a      	ldr	r1, [pc, #104]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f9c:	f7fe fd56 	bl	8000a4c <HAL_GetTick>
 8001fa0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7fe fd52 	bl	8000a4c <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e061      	b.n	800207e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 020c 	and.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d1eb      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_RCC_ClockConfig+0x25c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d214      	bcs.n	8002004 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_RCC_ClockConfig+0x25c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 0207 	bic.w	r2, r3, #7
 8001fe2:	4906      	ldr	r1, [pc, #24]	; (8001ffc <HAL_RCC_ClockConfig+0x25c>)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <HAL_RCC_ClockConfig+0x25c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e040      	b.n	800207e <HAL_RCC_ClockConfig+0x2de>
 8001ffc:	40022000 	.word	0x40022000
 8002000:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <HAL_RCC_ClockConfig+0x2e8>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	491a      	ldr	r1, [pc, #104]	; (8002088 <HAL_RCC_ClockConfig+0x2e8>)
 800201e:	4313      	orrs	r3, r2
 8002020:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d009      	beq.n	8002042 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800202e:	4b16      	ldr	r3, [pc, #88]	; (8002088 <HAL_RCC_ClockConfig+0x2e8>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4912      	ldr	r1, [pc, #72]	; (8002088 <HAL_RCC_ClockConfig+0x2e8>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002042:	f000 f829 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8002046:	4601      	mov	r1, r0
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <HAL_RCC_ClockConfig+0x2e8>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002050:	22f0      	movs	r2, #240	; 0xf0
 8002052:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	fa92 f2a2 	rbit	r2, r2
 800205a:	60fa      	str	r2, [r7, #12]
  return result;
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	fab2 f282 	clz	r2, r2
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	40d3      	lsrs	r3, r2
 8002066:	4a09      	ldr	r2, [pc, #36]	; (800208c <HAL_RCC_ClockConfig+0x2ec>)
 8002068:	5cd3      	ldrb	r3, [r2, r3]
 800206a:	fa21 f303 	lsr.w	r3, r1, r3
 800206e:	4a08      	ldr	r2, [pc, #32]	; (8002090 <HAL_RCC_ClockConfig+0x2f0>)
 8002070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_RCC_ClockConfig+0x2f4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fca4 	bl	80009c4 <HAL_InitTick>
  
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3778      	adds	r7, #120	; 0x78
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	08003cc0 	.word	0x08003cc0
 8002090:	20000000 	.word	0x20000000
 8002094:	20000004 	.word	0x20000004

08002098 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002098:	b480      	push	{r7}
 800209a:	b08b      	sub	sp, #44	; 0x2c
 800209c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020b2:	4b2a      	ldr	r3, [pc, #168]	; (800215c <HAL_RCC_GetSysClockFreq+0xc4>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d002      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0x30>
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d003      	beq.n	80020ce <HAL_RCC_GetSysClockFreq+0x36>
 80020c6:	e03f      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020c8:	4b25      	ldr	r3, [pc, #148]	; (8002160 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020ca:	623b      	str	r3, [r7, #32]
      break;
 80020cc:	e03f      	b.n	800214e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020d4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020d8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	fa92 f2a2 	rbit	r2, r2
 80020e0:	607a      	str	r2, [r7, #4]
  return result;
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	fab2 f282 	clz	r2, r2
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	40d3      	lsrs	r3, r2
 80020ec:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020ee:	5cd3      	ldrb	r3, [r2, r3]
 80020f0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020f2:	4b1a      	ldr	r3, [pc, #104]	; (800215c <HAL_RCC_GetSysClockFreq+0xc4>)
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	220f      	movs	r2, #15
 80020fc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	fa92 f2a2 	rbit	r2, r2
 8002104:	60fa      	str	r2, [r7, #12]
  return result;
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	fab2 f282 	clz	r2, r2
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	40d3      	lsrs	r3, r2
 8002110:	4a15      	ldr	r2, [pc, #84]	; (8002168 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002120:	4a0f      	ldr	r2, [pc, #60]	; (8002160 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	fbb2 f2f3 	udiv	r2, r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
 8002130:	e007      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002132:	4a0b      	ldr	r2, [pc, #44]	; (8002160 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fbb2 f2f3 	udiv	r2, r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	fb02 f303 	mul.w	r3, r2, r3
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	623b      	str	r3, [r7, #32]
      break;
 8002146:	e002      	b.n	800214e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_RCC_GetSysClockFreq+0xc8>)
 800214a:	623b      	str	r3, [r7, #32]
      break;
 800214c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214e:	6a3b      	ldr	r3, [r7, #32]
}
 8002150:	4618      	mov	r0, r3
 8002152:	372c      	adds	r7, #44	; 0x2c
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	40021000 	.word	0x40021000
 8002160:	007a1200 	.word	0x007a1200
 8002164:	08003cd8 	.word	0x08003cd8
 8002168:	08003ce8 	.word	0x08003ce8

0800216c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <HAL_RCC_GetHCLKFreq+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000000 	.word	0x20000000

08002184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800218a:	f7ff ffef 	bl	800216c <HAL_RCC_GetHCLKFreq>
 800218e:	4601      	mov	r1, r0
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002198:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800219c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	fa92 f2a2 	rbit	r2, r2
 80021a4:	603a      	str	r2, [r7, #0]
  return result;
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	fab2 f282 	clz	r2, r2
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	40d3      	lsrs	r3, r2
 80021b0:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000
 80021c4:	08003cd0 	.word	0x08003cd0

080021c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021ce:	f7ff ffcd 	bl	800216c <HAL_RCC_GetHCLKFreq>
 80021d2:	4601      	mov	r1, r0
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	fa92 f2a2 	rbit	r2, r2
 80021e8:	603a      	str	r2, [r7, #0]
  return result;
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	fab2 f282 	clz	r2, r2
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	40d3      	lsrs	r3, r2
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021f6:	5cd3      	ldrb	r3, [r2, r3]
 80021f8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	08003cd0 	.word	0x08003cd0

0800220c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b092      	sub	sp, #72	; 0x48
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80d7 	beq.w	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002230:	4b4e      	ldr	r3, [pc, #312]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10e      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223c:	4b4b      	ldr	r3, [pc, #300]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	4a4a      	ldr	r2, [pc, #296]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002246:	61d3      	str	r3, [r2, #28]
 8002248:	4b48      	ldr	r3, [pc, #288]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002254:	2301      	movs	r3, #1
 8002256:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225a:	4b45      	ldr	r3, [pc, #276]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002262:	2b00      	cmp	r3, #0
 8002264:	d118      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002266:	4b42      	ldr	r3, [pc, #264]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a41      	ldr	r2, [pc, #260]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800226c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002270:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002272:	f7fe fbeb 	bl	8000a4c <HAL_GetTick>
 8002276:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	e008      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227a:	f7fe fbe7 	bl	8000a4c <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b64      	cmp	r3, #100	; 0x64
 8002286:	d901      	bls.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e1d6      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228c:	4b38      	ldr	r3, [pc, #224]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002298:	4b34      	ldr	r3, [pc, #208]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 8084 	beq.w	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d07c      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022b8:	4b2c      	ldr	r3, [pc, #176]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	461a      	mov	r2, r3
 80022e2:	2301      	movs	r3, #1
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	461a      	mov	r2, r3
 8002306:	2300      	movs	r3, #0
 8002308:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800230a:	4a18      	ldr	r2, [pc, #96]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800230e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d04b      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7fe fb97 	bl	8000a4c <HAL_GetTick>
 800231e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7fe fb93 	bl	8000a4c <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e180      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002338:	2302      	movs	r3, #2
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
 8002344:	2302      	movs	r3, #2
 8002346:	623b      	str	r3, [r7, #32]
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	61fb      	str	r3, [r7, #28]
  return result;
 8002350:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	095b      	lsrs	r3, r3, #5
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f043 0302 	orr.w	r3, r3, #2
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d108      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002366:	4b01      	ldr	r3, [pc, #4]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	e00d      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800236c:	40021000 	.word	0x40021000
 8002370:	40007000 	.word	0x40007000
 8002374:	10908100 	.word	0x10908100
 8002378:	2302      	movs	r3, #2
 800237a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	4ba0      	ldr	r3, [pc, #640]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	2202      	movs	r2, #2
 800238a:	613a      	str	r2, [r7, #16]
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	fa92 f2a2 	rbit	r2, r2
 8002392:	60fa      	str	r2, [r7, #12]
  return result;
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	fab2 f282 	clz	r2, r2
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	f002 021f 	and.w	r2, r2, #31
 80023a6:	2101      	movs	r1, #1
 80023a8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0b7      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023b2:	4b95      	ldr	r3, [pc, #596]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4992      	ldr	r1, [pc, #584]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d105      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023cc:	4b8e      	ldr	r3, [pc, #568]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	4a8d      	ldr	r2, [pc, #564]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023e4:	4b88      	ldr	r3, [pc, #544]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	f023 0203 	bic.w	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4985      	ldr	r1, [pc, #532]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d008      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002402:	4b81      	ldr	r3, [pc, #516]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	497e      	ldr	r1, [pc, #504]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002410:	4313      	orrs	r3, r2
 8002412:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002420:	4b79      	ldr	r3, [pc, #484]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	4976      	ldr	r1, [pc, #472]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800243e:	4b72      	ldr	r3, [pc, #456]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f023 0210 	bic.w	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	496f      	ldr	r1, [pc, #444]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800244c:	4313      	orrs	r3, r2
 800244e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800245c:	4b6a      	ldr	r3, [pc, #424]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002468:	4967      	ldr	r1, [pc, #412]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800247a:	4b63      	ldr	r3, [pc, #396]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f023 0220 	bic.w	r2, r3, #32
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4960      	ldr	r1, [pc, #384]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002488:	4313      	orrs	r3, r2
 800248a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002498:	4b5b      	ldr	r3, [pc, #364]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	4958      	ldr	r1, [pc, #352]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024b6:	4b54      	ldr	r3, [pc, #336]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	4951      	ldr	r1, [pc, #324]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024d4:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	4949      	ldr	r1, [pc, #292]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024f2:	4b45      	ldr	r3, [pc, #276]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4942      	ldr	r1, [pc, #264]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002510:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	493a      	ldr	r1, [pc, #232]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800251e:	4313      	orrs	r3, r2
 8002520:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d008      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800252e:	4b36      	ldr	r3, [pc, #216]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	4933      	ldr	r1, [pc, #204]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800253c:	4313      	orrs	r3, r2
 800253e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800254c:	4b2e      	ldr	r3, [pc, #184]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002558:	492b      	ldr	r1, [pc, #172]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800255a:	4313      	orrs	r3, r2
 800255c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800256a:	4b27      	ldr	r3, [pc, #156]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4924      	ldr	r1, [pc, #144]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002578:	4313      	orrs	r3, r2
 800257a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002588:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	491c      	ldr	r1, [pc, #112]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002596:	4313      	orrs	r3, r2
 8002598:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	4915      	ldr	r1, [pc, #84]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80025c4:	4b10      	ldr	r3, [pc, #64]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	490d      	ldr	r1, [pc, #52]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ee:	4906      	ldr	r1, [pc, #24]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00c      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002600:	4b01      	ldr	r3, [pc, #4]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	e002      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
 800260c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002614:	490b      	ldr	r1, [pc, #44]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002616:	4313      	orrs	r3, r2
 8002618:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d008      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002626:	4b07      	ldr	r3, [pc, #28]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002632:	4904      	ldr	r1, [pc, #16]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002634:	4313      	orrs	r3, r2
 8002636:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3748      	adds	r7, #72	; 0x48
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000

08002648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e01d      	b.n	8002696 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fe f88a 	bl	8000788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3304      	adds	r3, #4
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f000 fac2 	bl	8002c10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <HAL_TIM_Base_Start_IT+0x50>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b06      	cmp	r3, #6
 80026c8:	d00b      	beq.n	80026e2 <HAL_TIM_Base_Start_IT+0x42>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d0:	d007      	beq.n	80026e2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0201 	orr.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	00010007 	.word	0x00010007

080026f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e01d      	b.n	8002742 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7fe f814 	bl	8000748 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3304      	adds	r3, #4
 8002730:	4619      	mov	r1, r3
 8002732:	4610      	mov	r0, r2
 8002734:	f000 fa6c 	bl	8002c10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2201      	movs	r2, #1
 800275c:	6839      	ldr	r1, [r7, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fdfa 	bl	8003358 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a21      	ldr	r2, [pc, #132]	; (80027f0 <HAL_TIM_PWM_Start+0xa4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d018      	beq.n	80027a0 <HAL_TIM_PWM_Start+0x54>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a20      	ldr	r2, [pc, #128]	; (80027f4 <HAL_TIM_PWM_Start+0xa8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d013      	beq.n	80027a0 <HAL_TIM_PWM_Start+0x54>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1e      	ldr	r2, [pc, #120]	; (80027f8 <HAL_TIM_PWM_Start+0xac>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00e      	beq.n	80027a0 <HAL_TIM_PWM_Start+0x54>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1d      	ldr	r2, [pc, #116]	; (80027fc <HAL_TIM_PWM_Start+0xb0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d009      	beq.n	80027a0 <HAL_TIM_PWM_Start+0x54>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <HAL_TIM_PWM_Start+0xb4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d004      	beq.n	80027a0 <HAL_TIM_PWM_Start+0x54>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a1a      	ldr	r2, [pc, #104]	; (8002804 <HAL_TIM_PWM_Start+0xb8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d101      	bne.n	80027a4 <HAL_TIM_PWM_Start+0x58>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_TIM_PWM_Start+0x5a>
 80027a4:	2300      	movs	r3, #0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d007      	beq.n	80027ba <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <HAL_TIM_PWM_Start+0xbc>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b06      	cmp	r3, #6
 80027ca:	d00b      	beq.n	80027e4 <HAL_TIM_PWM_Start+0x98>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d2:	d007      	beq.n	80027e4 <HAL_TIM_PWM_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40012c00 	.word	0x40012c00
 80027f4:	40013400 	.word	0x40013400
 80027f8:	40014000 	.word	0x40014000
 80027fc:	40014400 	.word	0x40014400
 8002800:	40014800 	.word	0x40014800
 8002804:	40015000 	.word	0x40015000
 8002808:	00010007 	.word	0x00010007

0800280c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e083      	b.n	8002928 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d106      	bne.n	800283a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7fd ff47 	bl	80006c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2202      	movs	r2, #2
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002850:	f023 0307 	bic.w	r3, r3, #7
 8002854:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3304      	adds	r3, #4
 800285e:	4619      	mov	r1, r3
 8002860:	4610      	mov	r0, r2
 8002862:	f000 f9d5 	bl	8002c10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4313      	orrs	r3, r2
 8002886:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800288e:	f023 0303 	bic.w	r3, r3, #3
 8002892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	4313      	orrs	r3, r2
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80028ac:	f023 030c 	bic.w	r3, r3, #12
 80028b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	021b      	lsls	r3, r3, #8
 80028c8:	4313      	orrs	r3, r2
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	011a      	lsls	r2, r3, #4
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	031b      	lsls	r3, r3, #12
 80028dc:	4313      	orrs	r3, r2
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80028ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80028f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	4313      	orrs	r3, r2
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_TIM_Encoder_Start_IT+0x16>
 8002940:	2b04      	cmp	r3, #4
 8002942:	d010      	beq.n	8002966 <HAL_TIM_Encoder_Start_IT+0x36>
 8002944:	e01f      	b.n	8002986 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2201      	movs	r2, #1
 800294c:	2100      	movs	r1, #0
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fd02 	bl	8003358 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0202 	orr.w	r2, r2, #2
 8002962:	60da      	str	r2, [r3, #12]
      break;
 8002964:	e02e      	b.n	80029c4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2201      	movs	r2, #1
 800296c:	2104      	movs	r1, #4
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fcf2 	bl	8003358 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0204 	orr.w	r2, r2, #4
 8002982:	60da      	str	r2, [r3, #12]
      break;
 8002984:	e01e      	b.n	80029c4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2201      	movs	r2, #1
 800298c:	2100      	movs	r1, #0
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fce2 	bl	8003358 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2201      	movs	r2, #1
 800299a:	2104      	movs	r1, #4
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fcdb 	bl	8003358 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0202 	orr.w	r2, r2, #2
 80029b0:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0204 	orr.w	r2, r2, #4
 80029c0:	60da      	str	r2, [r3, #12]
      break;
 80029c2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e105      	b.n	8002c06 <HAL_TIM_PWM_ConfigChannel+0x226>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2202      	movs	r2, #2
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b14      	cmp	r3, #20
 8002a0e:	f200 80f0 	bhi.w	8002bf2 <HAL_TIM_PWM_ConfigChannel+0x212>
 8002a12:	a201      	add	r2, pc, #4	; (adr r2, 8002a18 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a18:	08002a6d 	.word	0x08002a6d
 8002a1c:	08002bf3 	.word	0x08002bf3
 8002a20:	08002bf3 	.word	0x08002bf3
 8002a24:	08002bf3 	.word	0x08002bf3
 8002a28:	08002aad 	.word	0x08002aad
 8002a2c:	08002bf3 	.word	0x08002bf3
 8002a30:	08002bf3 	.word	0x08002bf3
 8002a34:	08002bf3 	.word	0x08002bf3
 8002a38:	08002aef 	.word	0x08002aef
 8002a3c:	08002bf3 	.word	0x08002bf3
 8002a40:	08002bf3 	.word	0x08002bf3
 8002a44:	08002bf3 	.word	0x08002bf3
 8002a48:	08002b2f 	.word	0x08002b2f
 8002a4c:	08002bf3 	.word	0x08002bf3
 8002a50:	08002bf3 	.word	0x08002bf3
 8002a54:	08002bf3 	.word	0x08002bf3
 8002a58:	08002b71 	.word	0x08002b71
 8002a5c:	08002bf3 	.word	0x08002bf3
 8002a60:	08002bf3 	.word	0x08002bf3
 8002a64:	08002bf3 	.word	0x08002bf3
 8002a68:	08002bb1 	.word	0x08002bb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f96a 	bl	8002d4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699a      	ldr	r2, [r3, #24]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0208 	orr.w	r2, r2, #8
 8002a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0204 	bic.w	r2, r2, #4
 8002a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6999      	ldr	r1, [r3, #24]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	619a      	str	r2, [r3, #24]
      break;
 8002aaa:	e0a3      	b.n	8002bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f9e4 	bl	8002e80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6999      	ldr	r1, [r3, #24]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	021a      	lsls	r2, r3, #8
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	619a      	str	r2, [r3, #24]
      break;
 8002aec:	e082      	b.n	8002bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fa57 	bl	8002fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0208 	orr.w	r2, r2, #8
 8002b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0204 	bic.w	r2, r2, #4
 8002b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69d9      	ldr	r1, [r3, #28]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	61da      	str	r2, [r3, #28]
      break;
 8002b2c:	e062      	b.n	8002bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fac9 	bl	80030cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69da      	ldr	r2, [r3, #28]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69d9      	ldr	r1, [r3, #28]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	021a      	lsls	r2, r3, #8
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	61da      	str	r2, [r3, #28]
      break;
 8002b6e:	e041      	b.n	8002bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fb18 	bl	80031ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0208 	orr.w	r2, r2, #8
 8002b8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0204 	bic.w	r2, r2, #4
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002bae:	e021      	b.n	8002bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fb62 	bl	8003280 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	021a      	lsls	r2, r3, #8
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002bf0:	e000      	b.n	8002bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002bf2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop

08002c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a42      	ldr	r2, [pc, #264]	; (8002d2c <TIM_Base_SetConfig+0x11c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d013      	beq.n	8002c50 <TIM_Base_SetConfig+0x40>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2e:	d00f      	beq.n	8002c50 <TIM_Base_SetConfig+0x40>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a3f      	ldr	r2, [pc, #252]	; (8002d30 <TIM_Base_SetConfig+0x120>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d00b      	beq.n	8002c50 <TIM_Base_SetConfig+0x40>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a3e      	ldr	r2, [pc, #248]	; (8002d34 <TIM_Base_SetConfig+0x124>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d007      	beq.n	8002c50 <TIM_Base_SetConfig+0x40>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a3d      	ldr	r2, [pc, #244]	; (8002d38 <TIM_Base_SetConfig+0x128>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d003      	beq.n	8002c50 <TIM_Base_SetConfig+0x40>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a3c      	ldr	r2, [pc, #240]	; (8002d3c <TIM_Base_SetConfig+0x12c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d108      	bne.n	8002c62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a31      	ldr	r2, [pc, #196]	; (8002d2c <TIM_Base_SetConfig+0x11c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d01f      	beq.n	8002caa <TIM_Base_SetConfig+0x9a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c70:	d01b      	beq.n	8002caa <TIM_Base_SetConfig+0x9a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a2e      	ldr	r2, [pc, #184]	; (8002d30 <TIM_Base_SetConfig+0x120>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d017      	beq.n	8002caa <TIM_Base_SetConfig+0x9a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a2d      	ldr	r2, [pc, #180]	; (8002d34 <TIM_Base_SetConfig+0x124>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d013      	beq.n	8002caa <TIM_Base_SetConfig+0x9a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a2c      	ldr	r2, [pc, #176]	; (8002d38 <TIM_Base_SetConfig+0x128>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00f      	beq.n	8002caa <TIM_Base_SetConfig+0x9a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a2c      	ldr	r2, [pc, #176]	; (8002d40 <TIM_Base_SetConfig+0x130>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00b      	beq.n	8002caa <TIM_Base_SetConfig+0x9a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a2b      	ldr	r2, [pc, #172]	; (8002d44 <TIM_Base_SetConfig+0x134>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d007      	beq.n	8002caa <TIM_Base_SetConfig+0x9a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a2a      	ldr	r2, [pc, #168]	; (8002d48 <TIM_Base_SetConfig+0x138>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d003      	beq.n	8002caa <TIM_Base_SetConfig+0x9a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <TIM_Base_SetConfig+0x12c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d108      	bne.n	8002cbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a12      	ldr	r2, [pc, #72]	; (8002d2c <TIM_Base_SetConfig+0x11c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d013      	beq.n	8002d10 <TIM_Base_SetConfig+0x100>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a13      	ldr	r2, [pc, #76]	; (8002d38 <TIM_Base_SetConfig+0x128>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00f      	beq.n	8002d10 <TIM_Base_SetConfig+0x100>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a13      	ldr	r2, [pc, #76]	; (8002d40 <TIM_Base_SetConfig+0x130>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00b      	beq.n	8002d10 <TIM_Base_SetConfig+0x100>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <TIM_Base_SetConfig+0x134>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d007      	beq.n	8002d10 <TIM_Base_SetConfig+0x100>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a11      	ldr	r2, [pc, #68]	; (8002d48 <TIM_Base_SetConfig+0x138>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d003      	beq.n	8002d10 <TIM_Base_SetConfig+0x100>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a0c      	ldr	r2, [pc, #48]	; (8002d3c <TIM_Base_SetConfig+0x12c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d103      	bne.n	8002d18 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	615a      	str	r2, [r3, #20]
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40012c00 	.word	0x40012c00
 8002d30:	40000400 	.word	0x40000400
 8002d34:	40000800 	.word	0x40000800
 8002d38:	40013400 	.word	0x40013400
 8002d3c:	40015000 	.word	0x40015000
 8002d40:	40014000 	.word	0x40014000
 8002d44:	40014400 	.word	0x40014400
 8002d48:	40014800 	.word	0x40014800

08002d4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f023 0201 	bic.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0303 	bic.w	r3, r3, #3
 8002d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f023 0302 	bic.w	r3, r3, #2
 8002d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a30      	ldr	r2, [pc, #192]	; (8002e68 <TIM_OC1_SetConfig+0x11c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d013      	beq.n	8002dd4 <TIM_OC1_SetConfig+0x88>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a2f      	ldr	r2, [pc, #188]	; (8002e6c <TIM_OC1_SetConfig+0x120>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00f      	beq.n	8002dd4 <TIM_OC1_SetConfig+0x88>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a2e      	ldr	r2, [pc, #184]	; (8002e70 <TIM_OC1_SetConfig+0x124>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00b      	beq.n	8002dd4 <TIM_OC1_SetConfig+0x88>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a2d      	ldr	r2, [pc, #180]	; (8002e74 <TIM_OC1_SetConfig+0x128>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d007      	beq.n	8002dd4 <TIM_OC1_SetConfig+0x88>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a2c      	ldr	r2, [pc, #176]	; (8002e78 <TIM_OC1_SetConfig+0x12c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d003      	beq.n	8002dd4 <TIM_OC1_SetConfig+0x88>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a2b      	ldr	r2, [pc, #172]	; (8002e7c <TIM_OC1_SetConfig+0x130>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d10c      	bne.n	8002dee <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f023 0308 	bic.w	r3, r3, #8
 8002dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f023 0304 	bic.w	r3, r3, #4
 8002dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <TIM_OC1_SetConfig+0x11c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d013      	beq.n	8002e1e <TIM_OC1_SetConfig+0xd2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <TIM_OC1_SetConfig+0x120>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00f      	beq.n	8002e1e <TIM_OC1_SetConfig+0xd2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a1b      	ldr	r2, [pc, #108]	; (8002e70 <TIM_OC1_SetConfig+0x124>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00b      	beq.n	8002e1e <TIM_OC1_SetConfig+0xd2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a1a      	ldr	r2, [pc, #104]	; (8002e74 <TIM_OC1_SetConfig+0x128>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d007      	beq.n	8002e1e <TIM_OC1_SetConfig+0xd2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a19      	ldr	r2, [pc, #100]	; (8002e78 <TIM_OC1_SetConfig+0x12c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d003      	beq.n	8002e1e <TIM_OC1_SetConfig+0xd2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a18      	ldr	r2, [pc, #96]	; (8002e7c <TIM_OC1_SetConfig+0x130>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d111      	bne.n	8002e42 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	621a      	str	r2, [r3, #32]
}
 8002e5c:	bf00      	nop
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	40012c00 	.word	0x40012c00
 8002e6c:	40013400 	.word	0x40013400
 8002e70:	40014000 	.word	0x40014000
 8002e74:	40014400 	.word	0x40014400
 8002e78:	40014800 	.word	0x40014800
 8002e7c:	40015000 	.word	0x40015000

08002e80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f023 0210 	bic.w	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f023 0320 	bic.w	r3, r3, #32
 8002ece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a2c      	ldr	r2, [pc, #176]	; (8002f90 <TIM_OC2_SetConfig+0x110>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d007      	beq.n	8002ef4 <TIM_OC2_SetConfig+0x74>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a2b      	ldr	r2, [pc, #172]	; (8002f94 <TIM_OC2_SetConfig+0x114>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d003      	beq.n	8002ef4 <TIM_OC2_SetConfig+0x74>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a2a      	ldr	r2, [pc, #168]	; (8002f98 <TIM_OC2_SetConfig+0x118>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d10d      	bne.n	8002f10 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <TIM_OC2_SetConfig+0x110>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d013      	beq.n	8002f40 <TIM_OC2_SetConfig+0xc0>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a1e      	ldr	r2, [pc, #120]	; (8002f94 <TIM_OC2_SetConfig+0x114>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00f      	beq.n	8002f40 <TIM_OC2_SetConfig+0xc0>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a1e      	ldr	r2, [pc, #120]	; (8002f9c <TIM_OC2_SetConfig+0x11c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00b      	beq.n	8002f40 <TIM_OC2_SetConfig+0xc0>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a1d      	ldr	r2, [pc, #116]	; (8002fa0 <TIM_OC2_SetConfig+0x120>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d007      	beq.n	8002f40 <TIM_OC2_SetConfig+0xc0>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a1c      	ldr	r2, [pc, #112]	; (8002fa4 <TIM_OC2_SetConfig+0x124>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d003      	beq.n	8002f40 <TIM_OC2_SetConfig+0xc0>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a17      	ldr	r2, [pc, #92]	; (8002f98 <TIM_OC2_SetConfig+0x118>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d113      	bne.n	8002f68 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f46:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f4e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	621a      	str	r2, [r3, #32]
}
 8002f82:	bf00      	nop
 8002f84:	371c      	adds	r7, #28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40013400 	.word	0x40013400
 8002f98:	40015000 	.word	0x40015000
 8002f9c:	40014000 	.word	0x40014000
 8002fa0:	40014400 	.word	0x40014400
 8002fa4:	40014800 	.word	0x40014800

08002fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0303 	bic.w	r3, r3, #3
 8002fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a2b      	ldr	r2, [pc, #172]	; (80030b4 <TIM_OC3_SetConfig+0x10c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d007      	beq.n	800301a <TIM_OC3_SetConfig+0x72>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a2a      	ldr	r2, [pc, #168]	; (80030b8 <TIM_OC3_SetConfig+0x110>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d003      	beq.n	800301a <TIM_OC3_SetConfig+0x72>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a29      	ldr	r2, [pc, #164]	; (80030bc <TIM_OC3_SetConfig+0x114>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d10d      	bne.n	8003036 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003034:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <TIM_OC3_SetConfig+0x10c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d013      	beq.n	8003066 <TIM_OC3_SetConfig+0xbe>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <TIM_OC3_SetConfig+0x110>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00f      	beq.n	8003066 <TIM_OC3_SetConfig+0xbe>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a1d      	ldr	r2, [pc, #116]	; (80030c0 <TIM_OC3_SetConfig+0x118>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00b      	beq.n	8003066 <TIM_OC3_SetConfig+0xbe>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a1c      	ldr	r2, [pc, #112]	; (80030c4 <TIM_OC3_SetConfig+0x11c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d007      	beq.n	8003066 <TIM_OC3_SetConfig+0xbe>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <TIM_OC3_SetConfig+0x120>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d003      	beq.n	8003066 <TIM_OC3_SetConfig+0xbe>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a16      	ldr	r2, [pc, #88]	; (80030bc <TIM_OC3_SetConfig+0x114>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d113      	bne.n	800308e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800306c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	621a      	str	r2, [r3, #32]
}
 80030a8:	bf00      	nop
 80030aa:	371c      	adds	r7, #28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	40012c00 	.word	0x40012c00
 80030b8:	40013400 	.word	0x40013400
 80030bc:	40015000 	.word	0x40015000
 80030c0:	40014000 	.word	0x40014000
 80030c4:	40014400 	.word	0x40014400
 80030c8:	40014800 	.word	0x40014800

080030cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800311a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	031b      	lsls	r3, r3, #12
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a1a      	ldr	r2, [pc, #104]	; (8003194 <TIM_OC4_SetConfig+0xc8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d013      	beq.n	8003158 <TIM_OC4_SetConfig+0x8c>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a19      	ldr	r2, [pc, #100]	; (8003198 <TIM_OC4_SetConfig+0xcc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00f      	beq.n	8003158 <TIM_OC4_SetConfig+0x8c>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a18      	ldr	r2, [pc, #96]	; (800319c <TIM_OC4_SetConfig+0xd0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00b      	beq.n	8003158 <TIM_OC4_SetConfig+0x8c>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <TIM_OC4_SetConfig+0xd4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d007      	beq.n	8003158 <TIM_OC4_SetConfig+0x8c>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a16      	ldr	r2, [pc, #88]	; (80031a4 <TIM_OC4_SetConfig+0xd8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d003      	beq.n	8003158 <TIM_OC4_SetConfig+0x8c>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a15      	ldr	r2, [pc, #84]	; (80031a8 <TIM_OC4_SetConfig+0xdc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d109      	bne.n	800316c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800315e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	019b      	lsls	r3, r3, #6
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	621a      	str	r2, [r3, #32]
}
 8003186:	bf00      	nop
 8003188:	371c      	adds	r7, #28
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40012c00 	.word	0x40012c00
 8003198:	40013400 	.word	0x40013400
 800319c:	40014000 	.word	0x40014000
 80031a0:	40014400 	.word	0x40014400
 80031a4:	40014800 	.word	0x40014800
 80031a8:	40015000 	.word	0x40015000

080031ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80031f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	041b      	lsls	r3, r3, #16
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a19      	ldr	r2, [pc, #100]	; (8003268 <TIM_OC5_SetConfig+0xbc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <TIM_OC5_SetConfig+0x82>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a18      	ldr	r2, [pc, #96]	; (800326c <TIM_OC5_SetConfig+0xc0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00f      	beq.n	800322e <TIM_OC5_SetConfig+0x82>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a17      	ldr	r2, [pc, #92]	; (8003270 <TIM_OC5_SetConfig+0xc4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00b      	beq.n	800322e <TIM_OC5_SetConfig+0x82>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a16      	ldr	r2, [pc, #88]	; (8003274 <TIM_OC5_SetConfig+0xc8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <TIM_OC5_SetConfig+0x82>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a15      	ldr	r2, [pc, #84]	; (8003278 <TIM_OC5_SetConfig+0xcc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <TIM_OC5_SetConfig+0x82>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a14      	ldr	r2, [pc, #80]	; (800327c <TIM_OC5_SetConfig+0xd0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d109      	bne.n	8003242 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003234:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	621a      	str	r2, [r3, #32]
}
 800325c:	bf00      	nop
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40012c00 	.word	0x40012c00
 800326c:	40013400 	.word	0x40013400
 8003270:	40014000 	.word	0x40014000
 8003274:	40014400 	.word	0x40014400
 8003278:	40014800 	.word	0x40014800
 800327c:	40015000 	.word	0x40015000

08003280 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	051b      	lsls	r3, r3, #20
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a1a      	ldr	r2, [pc, #104]	; (8003340 <TIM_OC6_SetConfig+0xc0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d013      	beq.n	8003304 <TIM_OC6_SetConfig+0x84>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a19      	ldr	r2, [pc, #100]	; (8003344 <TIM_OC6_SetConfig+0xc4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00f      	beq.n	8003304 <TIM_OC6_SetConfig+0x84>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a18      	ldr	r2, [pc, #96]	; (8003348 <TIM_OC6_SetConfig+0xc8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00b      	beq.n	8003304 <TIM_OC6_SetConfig+0x84>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a17      	ldr	r2, [pc, #92]	; (800334c <TIM_OC6_SetConfig+0xcc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d007      	beq.n	8003304 <TIM_OC6_SetConfig+0x84>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a16      	ldr	r2, [pc, #88]	; (8003350 <TIM_OC6_SetConfig+0xd0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d003      	beq.n	8003304 <TIM_OC6_SetConfig+0x84>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a15      	ldr	r2, [pc, #84]	; (8003354 <TIM_OC6_SetConfig+0xd4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d109      	bne.n	8003318 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	029b      	lsls	r3, r3, #10
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	621a      	str	r2, [r3, #32]
}
 8003332:	bf00      	nop
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40012c00 	.word	0x40012c00
 8003344:	40013400 	.word	0x40013400
 8003348:	40014000 	.word	0x40014000
 800334c:	40014400 	.word	0x40014400
 8003350:	40014800 	.word	0x40014800
 8003354:	40015000 	.word	0x40015000

08003358 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	2201      	movs	r2, #1
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a1a      	ldr	r2, [r3, #32]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	43db      	mvns	r3, r3
 800337a:	401a      	ands	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a1a      	ldr	r2, [r3, #32]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	fa01 f303 	lsl.w	r3, r1, r3
 8003390:	431a      	orrs	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	621a      	str	r2, [r3, #32]
}
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e06d      	b.n	8003498 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a30      	ldr	r2, [pc, #192]	; (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d009      	beq.n	80033fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2f      	ldr	r2, [pc, #188]	; (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d004      	beq.n	80033fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a2d      	ldr	r2, [pc, #180]	; (80034ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d108      	bne.n	800340c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003400:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1e      	ldr	r2, [pc, #120]	; (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d01d      	beq.n	800346c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003438:	d018      	beq.n	800346c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1c      	ldr	r2, [pc, #112]	; (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d013      	beq.n	800346c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1a      	ldr	r2, [pc, #104]	; (80034b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00e      	beq.n	800346c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d009      	beq.n	800346c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a16      	ldr	r2, [pc, #88]	; (80034b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d004      	beq.n	800346c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a11      	ldr	r2, [pc, #68]	; (80034ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d10c      	bne.n	8003486 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003472:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	4313      	orrs	r3, r2
 800347c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40013400 	.word	0x40013400
 80034ac:	40015000 	.word	0x40015000
 80034b0:	40000400 	.word	0x40000400
 80034b4:	40000800 	.word	0x40000800
 80034b8:	40014000 	.word	0x40014000

080034bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e040      	b.n	8003550 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fd f9ee 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2224      	movs	r2, #36	; 0x24
 80034e8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0201 	bic.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f82c 	bl	8003558 <UART_SetConfig>
 8003500:	4603      	mov	r3, r0
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e022      	b.n	8003550 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa3a 	bl	800398c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003526:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003536:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fac1 	bl	8003ad0 <UART_CheckIdleState>
 800354e:	4603      	mov	r3, r0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003560:	2300      	movs	r3, #0
 8003562:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	4bac      	ldr	r3, [pc, #688]	; (8003838 <UART_SetConfig+0x2e0>)
 8003588:	4013      	ands	r3, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	6939      	ldr	r1, [r7, #16]
 8003590:	430b      	orrs	r3, r1
 8003592:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a9a      	ldr	r2, [pc, #616]	; (800383c <UART_SetConfig+0x2e4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d121      	bne.n	800361c <UART_SetConfig+0xc4>
 80035d8:	4b99      	ldr	r3, [pc, #612]	; (8003840 <UART_SetConfig+0x2e8>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d817      	bhi.n	8003614 <UART_SetConfig+0xbc>
 80035e4:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <UART_SetConfig+0x94>)
 80035e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ea:	bf00      	nop
 80035ec:	080035fd 	.word	0x080035fd
 80035f0:	08003609 	.word	0x08003609
 80035f4:	0800360f 	.word	0x0800360f
 80035f8:	08003603 	.word	0x08003603
 80035fc:	2301      	movs	r3, #1
 80035fe:	77fb      	strb	r3, [r7, #31]
 8003600:	e0b2      	b.n	8003768 <UART_SetConfig+0x210>
 8003602:	2302      	movs	r3, #2
 8003604:	77fb      	strb	r3, [r7, #31]
 8003606:	e0af      	b.n	8003768 <UART_SetConfig+0x210>
 8003608:	2304      	movs	r3, #4
 800360a:	77fb      	strb	r3, [r7, #31]
 800360c:	e0ac      	b.n	8003768 <UART_SetConfig+0x210>
 800360e:	2308      	movs	r3, #8
 8003610:	77fb      	strb	r3, [r7, #31]
 8003612:	e0a9      	b.n	8003768 <UART_SetConfig+0x210>
 8003614:	2310      	movs	r3, #16
 8003616:	77fb      	strb	r3, [r7, #31]
 8003618:	bf00      	nop
 800361a:	e0a5      	b.n	8003768 <UART_SetConfig+0x210>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a88      	ldr	r2, [pc, #544]	; (8003844 <UART_SetConfig+0x2ec>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d123      	bne.n	800366e <UART_SetConfig+0x116>
 8003626:	4b86      	ldr	r3, [pc, #536]	; (8003840 <UART_SetConfig+0x2e8>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800362e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003632:	d012      	beq.n	800365a <UART_SetConfig+0x102>
 8003634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003638:	d802      	bhi.n	8003640 <UART_SetConfig+0xe8>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d007      	beq.n	800364e <UART_SetConfig+0xf6>
 800363e:	e012      	b.n	8003666 <UART_SetConfig+0x10e>
 8003640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003644:	d00c      	beq.n	8003660 <UART_SetConfig+0x108>
 8003646:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800364a:	d003      	beq.n	8003654 <UART_SetConfig+0xfc>
 800364c:	e00b      	b.n	8003666 <UART_SetConfig+0x10e>
 800364e:	2300      	movs	r3, #0
 8003650:	77fb      	strb	r3, [r7, #31]
 8003652:	e089      	b.n	8003768 <UART_SetConfig+0x210>
 8003654:	2302      	movs	r3, #2
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	e086      	b.n	8003768 <UART_SetConfig+0x210>
 800365a:	2304      	movs	r3, #4
 800365c:	77fb      	strb	r3, [r7, #31]
 800365e:	e083      	b.n	8003768 <UART_SetConfig+0x210>
 8003660:	2308      	movs	r3, #8
 8003662:	77fb      	strb	r3, [r7, #31]
 8003664:	e080      	b.n	8003768 <UART_SetConfig+0x210>
 8003666:	2310      	movs	r3, #16
 8003668:	77fb      	strb	r3, [r7, #31]
 800366a:	bf00      	nop
 800366c:	e07c      	b.n	8003768 <UART_SetConfig+0x210>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a75      	ldr	r2, [pc, #468]	; (8003848 <UART_SetConfig+0x2f0>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d123      	bne.n	80036c0 <UART_SetConfig+0x168>
 8003678:	4b71      	ldr	r3, [pc, #452]	; (8003840 <UART_SetConfig+0x2e8>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003680:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003684:	d012      	beq.n	80036ac <UART_SetConfig+0x154>
 8003686:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800368a:	d802      	bhi.n	8003692 <UART_SetConfig+0x13a>
 800368c:	2b00      	cmp	r3, #0
 800368e:	d007      	beq.n	80036a0 <UART_SetConfig+0x148>
 8003690:	e012      	b.n	80036b8 <UART_SetConfig+0x160>
 8003692:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003696:	d00c      	beq.n	80036b2 <UART_SetConfig+0x15a>
 8003698:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800369c:	d003      	beq.n	80036a6 <UART_SetConfig+0x14e>
 800369e:	e00b      	b.n	80036b8 <UART_SetConfig+0x160>
 80036a0:	2300      	movs	r3, #0
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e060      	b.n	8003768 <UART_SetConfig+0x210>
 80036a6:	2302      	movs	r3, #2
 80036a8:	77fb      	strb	r3, [r7, #31]
 80036aa:	e05d      	b.n	8003768 <UART_SetConfig+0x210>
 80036ac:	2304      	movs	r3, #4
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e05a      	b.n	8003768 <UART_SetConfig+0x210>
 80036b2:	2308      	movs	r3, #8
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e057      	b.n	8003768 <UART_SetConfig+0x210>
 80036b8:	2310      	movs	r3, #16
 80036ba:	77fb      	strb	r3, [r7, #31]
 80036bc:	bf00      	nop
 80036be:	e053      	b.n	8003768 <UART_SetConfig+0x210>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a61      	ldr	r2, [pc, #388]	; (800384c <UART_SetConfig+0x2f4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d123      	bne.n	8003712 <UART_SetConfig+0x1ba>
 80036ca:	4b5d      	ldr	r3, [pc, #372]	; (8003840 <UART_SetConfig+0x2e8>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80036d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036d6:	d012      	beq.n	80036fe <UART_SetConfig+0x1a6>
 80036d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036dc:	d802      	bhi.n	80036e4 <UART_SetConfig+0x18c>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <UART_SetConfig+0x19a>
 80036e2:	e012      	b.n	800370a <UART_SetConfig+0x1b2>
 80036e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036e8:	d00c      	beq.n	8003704 <UART_SetConfig+0x1ac>
 80036ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036ee:	d003      	beq.n	80036f8 <UART_SetConfig+0x1a0>
 80036f0:	e00b      	b.n	800370a <UART_SetConfig+0x1b2>
 80036f2:	2300      	movs	r3, #0
 80036f4:	77fb      	strb	r3, [r7, #31]
 80036f6:	e037      	b.n	8003768 <UART_SetConfig+0x210>
 80036f8:	2302      	movs	r3, #2
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e034      	b.n	8003768 <UART_SetConfig+0x210>
 80036fe:	2304      	movs	r3, #4
 8003700:	77fb      	strb	r3, [r7, #31]
 8003702:	e031      	b.n	8003768 <UART_SetConfig+0x210>
 8003704:	2308      	movs	r3, #8
 8003706:	77fb      	strb	r3, [r7, #31]
 8003708:	e02e      	b.n	8003768 <UART_SetConfig+0x210>
 800370a:	2310      	movs	r3, #16
 800370c:	77fb      	strb	r3, [r7, #31]
 800370e:	bf00      	nop
 8003710:	e02a      	b.n	8003768 <UART_SetConfig+0x210>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a4e      	ldr	r2, [pc, #312]	; (8003850 <UART_SetConfig+0x2f8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d123      	bne.n	8003764 <UART_SetConfig+0x20c>
 800371c:	4b48      	ldr	r3, [pc, #288]	; (8003840 <UART_SetConfig+0x2e8>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003724:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003728:	d012      	beq.n	8003750 <UART_SetConfig+0x1f8>
 800372a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800372e:	d802      	bhi.n	8003736 <UART_SetConfig+0x1de>
 8003730:	2b00      	cmp	r3, #0
 8003732:	d007      	beq.n	8003744 <UART_SetConfig+0x1ec>
 8003734:	e012      	b.n	800375c <UART_SetConfig+0x204>
 8003736:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800373a:	d00c      	beq.n	8003756 <UART_SetConfig+0x1fe>
 800373c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003740:	d003      	beq.n	800374a <UART_SetConfig+0x1f2>
 8003742:	e00b      	b.n	800375c <UART_SetConfig+0x204>
 8003744:	2300      	movs	r3, #0
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	e00e      	b.n	8003768 <UART_SetConfig+0x210>
 800374a:	2302      	movs	r3, #2
 800374c:	77fb      	strb	r3, [r7, #31]
 800374e:	e00b      	b.n	8003768 <UART_SetConfig+0x210>
 8003750:	2304      	movs	r3, #4
 8003752:	77fb      	strb	r3, [r7, #31]
 8003754:	e008      	b.n	8003768 <UART_SetConfig+0x210>
 8003756:	2308      	movs	r3, #8
 8003758:	77fb      	strb	r3, [r7, #31]
 800375a:	e005      	b.n	8003768 <UART_SetConfig+0x210>
 800375c:	2310      	movs	r3, #16
 800375e:	77fb      	strb	r3, [r7, #31]
 8003760:	bf00      	nop
 8003762:	e001      	b.n	8003768 <UART_SetConfig+0x210>
 8003764:	2310      	movs	r3, #16
 8003766:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003770:	f040 8090 	bne.w	8003894 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003774:	7ffb      	ldrb	r3, [r7, #31]
 8003776:	2b08      	cmp	r3, #8
 8003778:	d86c      	bhi.n	8003854 <UART_SetConfig+0x2fc>
 800377a:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <UART_SetConfig+0x228>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	080037a5 	.word	0x080037a5
 8003784:	080037c5 	.word	0x080037c5
 8003788:	080037e5 	.word	0x080037e5
 800378c:	08003855 	.word	0x08003855
 8003790:	08003801 	.word	0x08003801
 8003794:	08003855 	.word	0x08003855
 8003798:	08003855 	.word	0x08003855
 800379c:	08003855 	.word	0x08003855
 80037a0:	08003821 	.word	0x08003821
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a4:	f7fe fcee 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 80037a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	005a      	lsls	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	441a      	add	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80037be:	b29b      	uxth	r3, r3
 80037c0:	61bb      	str	r3, [r7, #24]
        break;
 80037c2:	e04a      	b.n	800385a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037c4:	f7fe fd00 	bl	80021c8 <HAL_RCC_GetPCLK2Freq>
 80037c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	005a      	lsls	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	085b      	lsrs	r3, r3, #1
 80037d4:	441a      	add	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	fbb2 f3f3 	udiv	r3, r2, r3
 80037de:	b29b      	uxth	r3, r3
 80037e0:	61bb      	str	r3, [r7, #24]
        break;
 80037e2:	e03a      	b.n	800385a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80037ee:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6852      	ldr	r2, [r2, #4]
 80037f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	61bb      	str	r3, [r7, #24]
        break;
 80037fe:	e02c      	b.n	800385a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003800:	f7fe fc4a 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8003804:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	005a      	lsls	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	085b      	lsrs	r3, r3, #1
 8003810:	441a      	add	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	fbb2 f3f3 	udiv	r3, r2, r3
 800381a:	b29b      	uxth	r3, r3
 800381c:	61bb      	str	r3, [r7, #24]
        break;
 800381e:	e01c      	b.n	800385a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	085b      	lsrs	r3, r3, #1
 8003826:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003832:	b29b      	uxth	r3, r3
 8003834:	61bb      	str	r3, [r7, #24]
        break;
 8003836:	e010      	b.n	800385a <UART_SetConfig+0x302>
 8003838:	efff69f3 	.word	0xefff69f3
 800383c:	40013800 	.word	0x40013800
 8003840:	40021000 	.word	0x40021000
 8003844:	40004400 	.word	0x40004400
 8003848:	40004800 	.word	0x40004800
 800384c:	40004c00 	.word	0x40004c00
 8003850:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	75fb      	strb	r3, [r7, #23]
        break;
 8003858:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b0f      	cmp	r3, #15
 800385e:	d916      	bls.n	800388e <UART_SetConfig+0x336>
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003866:	d212      	bcs.n	800388e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	b29b      	uxth	r3, r3
 800386c:	f023 030f 	bic.w	r3, r3, #15
 8003870:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	085b      	lsrs	r3, r3, #1
 8003876:	b29b      	uxth	r3, r3
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	b29a      	uxth	r2, r3
 800387e:	897b      	ldrh	r3, [r7, #10]
 8003880:	4313      	orrs	r3, r2
 8003882:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	897a      	ldrh	r2, [r7, #10]
 800388a:	60da      	str	r2, [r3, #12]
 800388c:	e072      	b.n	8003974 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	75fb      	strb	r3, [r7, #23]
 8003892:	e06f      	b.n	8003974 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8003894:	7ffb      	ldrb	r3, [r7, #31]
 8003896:	2b08      	cmp	r3, #8
 8003898:	d85b      	bhi.n	8003952 <UART_SetConfig+0x3fa>
 800389a:	a201      	add	r2, pc, #4	; (adr r2, 80038a0 <UART_SetConfig+0x348>)
 800389c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a0:	080038c5 	.word	0x080038c5
 80038a4:	080038e3 	.word	0x080038e3
 80038a8:	08003901 	.word	0x08003901
 80038ac:	08003953 	.word	0x08003953
 80038b0:	0800391d 	.word	0x0800391d
 80038b4:	08003953 	.word	0x08003953
 80038b8:	08003953 	.word	0x08003953
 80038bc:	08003953 	.word	0x08003953
 80038c0:	0800393b 	.word	0x0800393b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038c4:	f7fe fc5e 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 80038c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	085a      	lsrs	r2, r3, #1
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	441a      	add	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038dc:	b29b      	uxth	r3, r3
 80038de:	61bb      	str	r3, [r7, #24]
        break;
 80038e0:	e03a      	b.n	8003958 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038e2:	f7fe fc71 	bl	80021c8 <HAL_RCC_GetPCLK2Freq>
 80038e6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	085a      	lsrs	r2, r3, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	441a      	add	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	61bb      	str	r3, [r7, #24]
        break;
 80038fe:	e02b      	b.n	8003958 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800390a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6852      	ldr	r2, [r2, #4]
 8003912:	fbb3 f3f2 	udiv	r3, r3, r2
 8003916:	b29b      	uxth	r3, r3
 8003918:	61bb      	str	r3, [r7, #24]
        break;
 800391a:	e01d      	b.n	8003958 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800391c:	f7fe fbbc 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8003920:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	085a      	lsrs	r2, r3, #1
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	441a      	add	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	fbb2 f3f3 	udiv	r3, r2, r3
 8003934:	b29b      	uxth	r3, r3
 8003936:	61bb      	str	r3, [r7, #24]
        break;
 8003938:	e00e      	b.n	8003958 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	085b      	lsrs	r3, r3, #1
 8003940:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	fbb2 f3f3 	udiv	r3, r2, r3
 800394c:	b29b      	uxth	r3, r3
 800394e:	61bb      	str	r3, [r7, #24]
        break;
 8003950:	e002      	b.n	8003958 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	75fb      	strb	r3, [r7, #23]
        break;
 8003956:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	2b0f      	cmp	r3, #15
 800395c:	d908      	bls.n	8003970 <UART_SetConfig+0x418>
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003964:	d204      	bcs.n	8003970 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	60da      	str	r2, [r3, #12]
 800396e:	e001      	b.n	8003974 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003980:	7dfb      	ldrb	r3, [r7, #23]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop

0800398c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d01a      	beq.n	8003aa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a8a:	d10a      	bne.n	8003aa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003ade:	f7fc ffb5 	bl	8000a4c <HAL_GetTick>
 8003ae2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d10e      	bne.n	8003b10 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003af2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f82a 	bl	8003b5a <UART_WaitOnFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e020      	b.n	8003b52 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d10e      	bne.n	8003b3c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f814 	bl	8003b5a <UART_WaitOnFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e00a      	b.n	8003b52 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	603b      	str	r3, [r7, #0]
 8003b66:	4613      	mov	r3, r2
 8003b68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b6a:	e05d      	b.n	8003c28 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b72:	d059      	beq.n	8003c28 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b74:	f7fc ff6a 	bl	8000a4c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d302      	bcc.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d11b      	bne.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0201 	bic.w	r2, r2, #1
 8003ba8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e042      	b.n	8003c48 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d02b      	beq.n	8003c28 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bde:	d123      	bne.n	8003c28 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003be8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bf8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0201 	bic.w	r2, r2, #1
 8003c08:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e00f      	b.n	8003c48 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	69da      	ldr	r2, [r3, #28]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4013      	ands	r3, r2
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d092      	beq.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <__libc_init_array>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	4e0d      	ldr	r6, [pc, #52]	; (8003c88 <__libc_init_array+0x38>)
 8003c54:	4c0d      	ldr	r4, [pc, #52]	; (8003c8c <__libc_init_array+0x3c>)
 8003c56:	1ba4      	subs	r4, r4, r6
 8003c58:	10a4      	asrs	r4, r4, #2
 8003c5a:	2500      	movs	r5, #0
 8003c5c:	42a5      	cmp	r5, r4
 8003c5e:	d109      	bne.n	8003c74 <__libc_init_array+0x24>
 8003c60:	4e0b      	ldr	r6, [pc, #44]	; (8003c90 <__libc_init_array+0x40>)
 8003c62:	4c0c      	ldr	r4, [pc, #48]	; (8003c94 <__libc_init_array+0x44>)
 8003c64:	f000 f820 	bl	8003ca8 <_init>
 8003c68:	1ba4      	subs	r4, r4, r6
 8003c6a:	10a4      	asrs	r4, r4, #2
 8003c6c:	2500      	movs	r5, #0
 8003c6e:	42a5      	cmp	r5, r4
 8003c70:	d105      	bne.n	8003c7e <__libc_init_array+0x2e>
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c78:	4798      	blx	r3
 8003c7a:	3501      	adds	r5, #1
 8003c7c:	e7ee      	b.n	8003c5c <__libc_init_array+0xc>
 8003c7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c82:	4798      	blx	r3
 8003c84:	3501      	adds	r5, #1
 8003c86:	e7f2      	b.n	8003c6e <__libc_init_array+0x1e>
 8003c88:	08003cf8 	.word	0x08003cf8
 8003c8c:	08003cf8 	.word	0x08003cf8
 8003c90:	08003cf8 	.word	0x08003cf8
 8003c94:	08003cfc 	.word	0x08003cfc

08003c98 <memset>:
 8003c98:	4402      	add	r2, r0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d100      	bne.n	8003ca2 <memset+0xa>
 8003ca0:	4770      	bx	lr
 8003ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ca6:	e7f9      	b.n	8003c9c <memset+0x4>

08003ca8 <_init>:
 8003ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003caa:	bf00      	nop
 8003cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cae:	bc08      	pop	{r3}
 8003cb0:	469e      	mov	lr, r3
 8003cb2:	4770      	bx	lr

08003cb4 <_fini>:
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb6:	bf00      	nop
 8003cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cba:	bc08      	pop	{r3}
 8003cbc:	469e      	mov	lr, r3
 8003cbe:	4770      	bx	lr
